SP_LIST

S3G_OR_INS_APPAPPRV
LA_GET_SJV_DTL
LA_JV_REVK
LA_JV_AC_ACTV
LA_INS_AC_CREAT_AP
LA_TL_JV
S3G_LAD_TRAN_COMMON_INS_APPR
LA_JV_MJV
S3G_APPROVAL_GRID
S3G_ORG_APP_CHK_VER
S3G_OR_INS_APPDET_VER
S3G_OR_INS_APPDET
S3G_OR_GET_APPAST




create or replace
PROCEDURE "S3G_OR_INS_APPAPPRV" 
(
    P_APPLICATION_PROCESS_ID IN NUMBER  
  , P_APPLICATION_APPROVAL_ID IN NUMBER := Null 
  , P_APPROVAL_SERIAL_NUMBER IN NUMBER  
  , P_ACTION_ID IN NUMBER  
  , P_REMARKS IN VARCHAR2 := Null 
  , P_PASSWORD IN VARCHAR2  
  , P_CREATED_BY IN NUMBER  
  , P_COMPANY_ID IN NUMBER  
  , P_TOTAL_APPROVAL in number 
  , P_ERRORCODE OUT NUMBER
  , P_ACCOUNT_NO OUT VARCHAR2
  , P_AUTH_RULE_CARD_ID NUMBER := NULL
   ,P_APPROVAL_DATE VARCHAR2
   ,P_IS_FORCED_APPROVAL NUMBER
   ,P_Upload_Path VARCHAR2
   

) 
AS
   
    d_Document_Type_Code VARCHAR2(20);         
    d_LOB_ID NUMBER;          
    d_Location_Code VARCHAR2(30); 
    d_Product_ID NUMBER;          
    d_Constitution_ID NUMBER;          
    d_Customer_ID NUMBER;          
    d_Amount NUMBER(10,0); 
    D_MLA_APPLICABLE NUMBER;
    d_Program_ID NUMBER := 37; 
    d_Entity_Type_ID INT; 
    d_Max_Approval_Seq INT;
    d_Order_by INT;  
    d_Approved_Count INT;  
    d_Approver_Count INT;
    d_Total_Approval NUMBER;          
    d_Status_ID NUMBER;  
    d_Status VARCHAR2(15);    
    d_Status_local VARCHAR2(15);          
    d_ApplicationApproval_ID NUMBER;     
    d_MLA_NUMBER VARCHAR2(100);   
    d_Approval_No NUMBER;   
    d_CreateAccount Number;
    d_Location_ID Number;
    d_IsMLASLA_Applicable Number;
    d_EnquiryResponse_ID Number;   
    
    d_Customer Number;  
    d_CreidtType Number;  
    d_Facility_Amount Number(15,4);   
    d_Utilized_Amount Number(15,4);   
    d_Released_Amount Number(15,4);  
    d_Current_Amount  Number(15,4);   
    
    d_AUTH_ID number;  
    d_Password VARCHAR2(200);
    d_Tot_Appr_Exists Number;
    d_TotApprovals Number;
    d_RecCount Number;
    d_LEVEL_3OR5_APPROVAL Number;        
    d_LEVEL4_APPROVAL Number;          
    d_CURRENT_USERLEVEL Number;           
    d_COUNT_USERLEVEL Number;
    d_Approval_Serial_Number Number;
    d_cust_Id Number;    
    d_Prgrm_Id Number;       
    d_Cmpny_Id Number; 
		d_Pricing_ID Number;
    d_Count Number;
    d_Count1 Number;
    D_Count2 Number;
    
    D_Application_Number Varchar2(50);
    D_Sysdate TIMESTAMP;
    D_Xml Varchar2(1000);
    D_Varasr Varchar(8000);
    d_Final_Sanctioned_Limit Number(15,4);
    
    
    P_APPROVALSTATUS  NUMBER ;
   
    d_MAX_LEND_AMOUNT number;
    D_LOB_CODE varchar(50);
    d_FAC_LIMIT number;
    D_FACT_LIMIT_EXP_DATE date;
    d_MAX_LEND_LIMIT_EXP date;
    
BEGIN
/*------------------------------------------------------------------------------
--Created By  : Sathish R
--Created Date: 28-Sep-2018
--Description : To Insert Application Approval details

------------------------------------------------------------------------------*/


  D_APPROVAL_SERIAL_NUMBER:=P_APPROVAL_SERIAL_NUMBER;
  D_TOTAL_APPROVAL:=P_TOTAL_APPROVAL;
  --D_Approval_No:=P_Approval_No;

     D_Approval_Serial_Number := P_APPROVAL_SERIAL_NUMBER;
     
     d_Program_ID := 37;     
     d_Document_Type_Code :='MLA';         
     P_APPROVALSTATUS := 0;     
     
--     SELECT COUNT(Password) into d_Password From S3G_SYSAD_UserMaster where User_ID=P_Created_By 
--     and USER_LEVEL_ID in(3,4,5);
--       --d('hiiiiiii');
--     If(d_Password <= 0)then
--        BEGIN          
--          P_ErrorCode :=5;          
--          RETURN;          
--        END;    
--     END IF;
     
    Select Count(Approval_Serial_Number) + 1  into D_Approval_Serial_Number
    From S3G_ORG_AppApproval App     
    Where App.Application_Process_ID = P_Application_Process_ID;  

    --begin transaction
    d_RecCount:= 0;
    
    SELECT COUNT(1) INTO d_RecCount 
    FROM S3G_ORG_AppProc
    WHERE Application_Process_ID=P_Application_Process_ID;    
  
    if(D_RECCOUNT > 0)then
      BEGIN
        SELECT LOB_ID,LOCATION_CODE,PRODUCT_ID,CONSTITUTION_ID,CUSTOMER_ID,FINANCE_AMOUNT,MLA_APPLICABLE,APPLICATION_NUMBER,Location_ID
        INTO d_LOB_ID,d_Location_Code,d_Product_ID,d_Constitution_ID,d_Customer_ID,d_Amount,d_MLA_Applicable,D_Application_Number,D_Location_ID
        FROM S3G_ORG_AppProc
        where APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
       end; 
    END IF;
      select LOB_CODE   into D_LOB_CODE  from  s3g_sysad_lobmaster where LOB_ID=d_LOB_ID;
    
    --DP_AUTO_TRAN('Line-S3G_OR_INS_APPAPPRV-Check-1-');
    --Dp_Auto_Tran('Line-S3G_OR_INS_APPAPPRV-P_Action_ID==>--'||P_Action_ID);
       
      begin 
    
          SELECT Value,
          UPPER(NAME)
          INTO  D_STATUS_ID,
          D_STATUS 
          FROM S3G_ORG_LOOKUP WHERE TYPE = 'ORG_APPLICATION_PROCESS_ACTION'
          and value = P_ACTION_ID;
        
      END;
       
       
       if(P_APPLICATION_APPROVAL_ID > 0)then --13 ---IF GETTING HOLD IT'S GOING TO BE UPDATE  
       begin--PICK APPROVAL SERIAL NO START
          D_APPLICATIONAPPROVAL_ID := P_APPLICATION_APPROVAL_ID;
            --Dp_Auto_Tran('Line-S3G_OR_INS_APPAPPRV-P_Application_Approval_ID>0==>--'||P_Application_Approval_ID);
          SELECT Approval_Serial_Number into d_Approval_Serial_Number
          FROM S3G_ORG_AppApproval     
          where APPLICATION_APPROVAL_ID = D_APPLICATIONAPPROVAL_ID;    
        end;--PICK APPROVAL SERIAL NO END
       
        begin---UPDATE
          UPDATE S3G_ORG_AppApproval 
          SET Action_ID = P_Action_ID,    
          Remarks = P_Remarks,
          Modified_By = P_Created_By,
          Modified_On = sysdate     
          where APPLICATION_APPROVAL_ID = D_APPLICATIONAPPROVAL_ID; 
        end;  
          
       ELSE -- 13
            --Dp_Auto_Tran('Line-S3G_OR_INS_APPAPPRV-INSERT S3g_Org_Appapproval==>--'||P_Application_Approval_ID);
          begin--S3g_Org_Appapproval Start
          Insert Into S3g_Org_Appapproval(Application_Approval_Id,
          Lob_Id,Location_Code,Product_Id,    
          CONSTITUTION_ID,APPLICATION_PROCESS_ID,APPROVAL_SERIAL_NUMBER,ACTION_ID,    
          Approver_Id,Approval_Date,Remarks,Company_Id,Created_By,Created_On,LOCATION_ID,IS_FORCED_APPROVAL,UPLOAD_PATH)         
          
          Values(Seq_Org_Appproc.Nextval,D_Lob_Id,D_Location_Code,
           d_Product_ID,d_Constitution_ID,    
           P_APPLICATION_PROCESS_ID,D_APPROVAL_SERIAL_NUMBER,P_ACTION_ID,    
           P_CREATED_BY,Fn_Todate(P_Approval_Date),P_REMARKS,P_COMPANY_ID,P_CREATED_BY,sysdate,D_Location_ID,P_IS_FORCED_APPROVAL,P_Upload_Path);
           end;
       END IF; --S3g_Org_Appapproval end
    
    
    
       
      if(D_APPROVAL_SERIAL_NUMBER = 1)then
          begin--update S3G_ORG_AppProc status start
            --Dp_Auto_Tran('Line-S3G_OR_INS_APPAPPRV-D_APPROVAL_SERIAL_NUMBER-1-UPDATE Auth_ID IN S3G_ORG_AppProc==>--'||D_APPROVAL_SERIAL_NUMBER);
            UPDATE S3G_ORG_AppProc     
            SET Auth_ID = P_Auth_Rule_Card_Id     
            where APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID; 
            end;--update S3G_ORG_AppProc status end
      END IF;
    
        S3G_OR_Upd_SetCustStatus(d_Customer_ID,d_Program_ID,P_Company_ID);    
    
    --Get max of approval no  
        begin--max approval Update Start
            SELECT MAX(Approval_Serial_Number) into d_Approval_No
            FROM S3G_ORG_AppApproval    
            where APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID;  
        end;--max approval Update end
    --Update status in Application Process table 'COMPLETE APPROVED' APPROVED PROCESS 
    
    --SET DEFAULT VALUE BEGIN    
    P_APPROVALSTATUS := 0;  
      
      --DP_AUTO_TRAN('D_TOTAL_APPROVAL==>'||D_TOTAL_APPROVAL);
      --DP_AUTO_TRAN('D_APPROVAL_NO==>'||D_APPROVAL_NO);
      --DP_AUTO_TRAN('Line-S3G_OR_INS_APPAPPRV-d_Total_Approval = d_Approval_NO');
      
    if(D_TOTAL_APPROVAL = D_APPROVAL_NO)then
    begin
       --Dp_Auto_Tran('d_Status==>'||d_Status);
         IF (UPPER(d_Status) = 'APPROVED') THEN   
              P_ApprovalStatus := 1;  -- FINAL APPROVAL    
         ELSIF(UPPER(d_Status) = 'REJECTED')THEN    
              P_ApprovalStatus := 2; -- REJECTED    
         ELSIF(UPPER(d_Status) = 'HOLD')THEN    
              P_ApprovalStatus := 3;   --- HOLD    
         ELSIF(UPPER(d_Status) = 'CANCELLED')THEN   
             P_ApprovalStatus := 4;   --- CANCELLED    
         end if;
       end;
     END IF;
     
     IF (UPPER(D_STATUS) = 'APPROVED') THEN--15
    -- Dp_Auto_Tran('Line-S3G_OR_INS_APPAPPRV-D_STATUS-APPROVED-');
    
    
      IF(P_IS_FORCED_APPROVAL = 1)THEN
        BEGIN
        
            UPDATE S3G_ORG_APPPROC SET STATUS_ID = P_action_id              
            where APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID;
            
            
              BEGIN--Check Credit Limit Start
                
                 SELECT  NVL(SUM(PASA.FINANCE_AMOUNT),0) into d_Released_Amount     
                FROM S3G_LAD_AccCreation ACC    
                INNER JOIN S3G_LAD_AccPASADet PASA    
                ON PASA.ACCOUNT_CREATION_ID = ACC.ACCOUNT_CREATION_ID AND PASA.Company_ID = ACC.Company_ID    
                And Acc.Customer_Id = d_Customer_ID    
                AND PASA.SA_Status_Code  IN (3) 
                AND ACC.LOB_ID = d_LOB_ID; 
                
                
                IF(D_LOB_CODE IN('FT'))THEN
                  BEGIN
                   
                   
                   
                   
                    SELECT FAC_LIMIT,FACT_LIMIT_EXP_DATE
                    INTO d_FAC_LIMIT,d_FACT_LIMIT_EXP_DATE
                    FROM s3g_org_custmaster
                    WHERE customer_id              =d_Customer_ID;
                    
                        if(trunc(sysdate)>trunc(D_FACT_LIMIT_EXP_DATE))then
                        P_ERRORCODE                 :=126;
                          RETURN;
                        end if;
                    
                    
                        IF((d_Released_Amount+d_Amount)>d_FAC_LIMIT)THEN
                          P_ERRORCODE                 :=124;
                          RETURN;
                        end if;
                  END;
              
                ELSE
                  BEGIN
                    SELECT MAX_LEND_AMOUNT,MAX_LEND_LIMIT_EXP
                    INTO d_MAX_LEND_AMOUNT,d_MAX_LEND_LIMIT_EXP
                    FROM s3g_org_custmaster
                    WHERE customer_id              =d_Customer_ID;
                    
                    
                    if(trunc(sysdate)>trunc(d_MAX_LEND_LIMIT_EXP))then
                        P_ERRORCODE                 :=127;
                          RETURN;
                        end if;
                    
                    
                    IF((d_Released_Amount+d_Amount)>d_MAX_LEND_AMOUNT)THEN
                      P_ERRORCODE                 :=125;
                      RETURN;
                     END IF;
                  END;
                  END if;
                  
                  
               
                  
               
                  
                  
                END;--Check Credit Limit End
                
                
                
                
            
                la_ins_ac_creat_ap(p_company_id,p_application_process_id,p_errorcode,P_ACCOUNT_NO);
                IF(P_ERRORCODE<>0)THEN
                      return ;
                END IF;
            
        
        END;
        ELSE
        begin
    
        IF (d_Total_Approval = d_Approval_No)THEN --16   
        
          D_sysdate := SYSTIMESTAMP;
          D_varASR := 'Application ' || D_Application_Number || ' Approved. ' || NVL(P_Remarks, ' ');
          S3g_Common_Createfollowupent(TO_CHAR(D_Sysdate,'MM/DD/YYYY HH12:MI:SS AM'),D_Customer_Id,TO_CHAR(D_Sysdate,'MM/DD/YYYY HH12:MI:SS AM'),
                    P_Created_By,TO_CHAR(D_Sysdate,'MM/DD/YYYY HH12:MI:SS AM'),D_Xml,Null, Null,
                    'APP',P_Created_By,P_Company_ID,d_Application_Number,d_varASR);
          D_Count :=0 ;   
          select COUNT('x') into D_COUNT from S3G_ORG_APPAPPROVAL     
          where Application_Process_ID = P_Application_Process_ID and Action_ID in(3,4);--Hold,--Rejected
          
          if(D_COUNT > 0)then
          begin
            UPDATE S3G_ORG_AppProc 
            SET ApplicationApproval_Status = NULL     
            where APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID;  
            end;
          END IF;
          
          d_count1 :=0 ;
          SELECT COUNT('x') INTO D_COUNT1  FROM S3G_ORG_APPAPPROVAL     
          WHERE APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID AND ACTION_ID IN(3,4);--Hold,Rejected
          
          if(D_COUNT1 <= 0)then -- 20
          begin
            --DP_AUTO_TRAN('Line-S3G_OR_INS_APPAPPRV==>LA_INS_AC_CREAT_AP-Check-2-'||P_APPLICATION_PROCESS_ID);
            
            BEGIN--ACCOUNT CREATION START
            
            
            
                SELECT COUNT(1) INTO D_COUNT FROM S3G_ORG_APP_VERIFY_TRAN WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
                IF(D_COUNT=0)THEN
                P_ERRORCODE:=122;
                return;
                end if;
                
                
                SELECT COUNT(1) INTO D_COUNT FROM S3G_ORG_APP_VERIFY_TRAN WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID AND (IS_VARIFIED=0 OR IS_VARIFIED IS NULL) ;
                IF(D_COUNT>0)THEN
                P_ERRORCODE:=122;
                RETURN;
                end if;
                
                
                
                BEGIN--Check Credit Limit Start
                
                 SELECT  NVL(SUM(PASA.FINANCE_AMOUNT),0) into d_Released_Amount     
                FROM S3G_LAD_AccCreation ACC    
                INNER JOIN S3G_LAD_AccPASADet PASA    
                ON PASA.ACCOUNT_CREATION_ID = ACC.ACCOUNT_CREATION_ID AND PASA.Company_ID = ACC.Company_ID    
                And Acc.Customer_Id = d_Customer_ID    
                AND PASA.SA_Status_Code  IN (3) 
                AND ACC.LOB_ID = d_LOB_ID; 
                
                
                IF(D_LOB_CODE IN('FT'))THEN
                  BEGIN
                   
                   
                   
                   
                    SELECT FAC_LIMIT,FACT_LIMIT_EXP_DATE
                    INTO d_FAC_LIMIT,d_FACT_LIMIT_EXP_DATE
                    FROM s3g_org_custmaster
                    WHERE customer_id              =d_Customer_ID;
                    
                        if(trunc(sysdate)>trunc(D_FACT_LIMIT_EXP_DATE))then
                        P_ERRORCODE                 :=126;
                          RETURN;
                        end if;
                    
                    
                        IF((d_Released_Amount+d_Amount)>d_FAC_LIMIT)THEN
                          P_ERRORCODE                 :=124;
                          RETURN;
                        end if;
                  END;
              
                ELSE
                  BEGIN
                    SELECT MAX_LEND_AMOUNT,MAX_LEND_LIMIT_EXP
                    INTO d_MAX_LEND_AMOUNT,d_MAX_LEND_LIMIT_EXP
                    FROM s3g_org_custmaster
                    WHERE customer_id              =d_Customer_ID;
                    
                    
                    if(trunc(sysdate)>trunc(d_MAX_LEND_LIMIT_EXP))then
                        P_ERRORCODE                 :=127;
                          RETURN;
                        end if;
                    
                    
                    IF((d_Released_Amount+d_Amount)>d_MAX_LEND_AMOUNT)THEN
                      P_ERRORCODE                 :=125;
                      RETURN;
                     END IF;
                  END;
                  END if;
                  
                  
               
                  
               
                  
                  
                END;--Check Credit Limit End
                
                
                
                
            
                la_ins_ac_creat_ap(p_company_id,p_application_process_id,p_errorcode,P_ACCOUNT_NO);
                IF(P_ERRORCODE<>0)THEN
                      return ;
                END IF;
            END;--ACCOUNT CREATION END
             update S3G_ORG_APPPROC 
             SET STATUS_ID= 2  --,Approved--MLA_Number    
             Where Application_Process_Id = P_Application_Process_Id; 
              S3G_SYSAD_TRANS_HISTORY(38,P_Application_Process_Id,D_Application_Number,TO_CHAR(SYSTIMESTAMP,'MM/DD/YYYY'),P_CREATED_BY,5);--Approved
           end;  
          END IF;--20
        
        
          
       ELSIF(D_TOTAL_APPROVAL< D_APPROVAL_NO)then -- 16
       begin
          P_ErrorCode := 3;    
          return; 
        end;  
       END IF;--16
       
      END;
    end if;

     ----------------------Update status in Application Process Table 'REJECTED' APPROVED PROCESS   
     ELSIF(UPPER(d_Status) = 'REJECTED')THEN --15
          
          UPDATE S3G_ORG_AppProc
          SET STATUS_ID = d_Status_ID     
          WHERE Application_Process_ID = P_Application_Process_ID; 
          
          if (D_TOTAL_APPROVAL = D_APPROVAL_NO)then--33
            begin  
             D_Sysdate := SYSTIMESTAMP;
              
             D_Varasr := 'Application ' || D_Application_Number || ' Rejeced. ' || Nvl(P_Remarks, ' ');
             
             S3g_Common_Createfollowupent(TO_CHAR(D_Sysdate,'MM/DD/YYYY HH12:MI:SS AM'),D_Customer_Id,TO_CHAR(D_Sysdate,'MM/DD/YYYY HH12:MI:SS AM'),
             P_Created_By,TO_CHAR(D_Sysdate,'MM/DD/YYYY HH12:MI:SS AM'),D_Xml,Null, Null,
             'APP',P_Created_By,P_Company_Id,D_Application_Number,D_Varasr);
              
             UPDATE S3G_ORG_APPPROC 
             SET ApplicationApproval_Status = NULL            
             where APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID;  
            end; 
             
          else --33
          begin
                UPDATE S3G_ORG_AppProc 
                SET ApplicationApproval_Status = 1    
                where APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID;  
           end;     
          END IF;--33
          
       
      ELSIF(UPPER(D_STATUS) = 'CANCELLED')then --15
       begin   
          UPDATE S3G_ORG_AppProc
          SET STATUS_ID = d_Status_ID     
          WHERE Application_Process_ID = P_Application_Process_ID; 
          
             D_Sysdate := SYSTIMESTAMP;
             D_Varasr := 'Application ' || D_Application_Number || ' Rejeced. ' || Nvl(P_Remarks, ' ');
             S3g_Common_Createfollowupent(TO_CHAR(D_Sysdate,'MM/DD/YYYY HH12:MI:SS AM'),D_Customer_Id,TO_CHAR(D_Sysdate,'MM/DD/YYYY HH12:MI:SS AM'),
             P_Created_By,TO_CHAR(D_Sysdate,'MM/DD/YYYY HH12:MI:SS AM'),D_Xml,Null, Null,
             'APP',P_Created_By,P_Company_Id,D_Application_Number,D_Varasr);
          S3G_SYSAD_TRANS_HISTORY(38,P_Application_Process_Id,D_Application_Number,TO_CHAR(SYSTIMESTAMP,'MM/DD/YYYY'),P_CREATED_BY,4);--Approved
      end;     
          
     END IF;--15
     
     
     
     
     
    S3G_SYSAD_TRANS_HISTORY(37,P_Application_Process_ID,D_Application_Number,TO_CHAR(SYSTIMESTAMP,'MM/DD/YYYY'),P_CREATED_BY,2);
    P_ErrorCode := 0; 

END S3G_OR_INS_APPAPPRV;

/

create or replace
PROCEDURE "LA_GET_SJV_DTL" 
(
 P_Company_ID INT                                                                
 ,P_User_ID INT                                                                
 ,P_SJV_No INT  
 ,P_outtbl out sys_refcursor
 ,P_outtbl1 out sys_refcursor
                                                                 
 )                                                                
As                                                                
-- =============================================                                                                                                                        
-- Author        :  Senthilkumar P
-- Create Date   :  02-02-2012                                                                                                                        
-- Description   :  To Get SJV Details                                                                
-- Modified BY   :  Shibu
-- Modified Date :  17-Oct-2013
--[S3G_LoanAd_GetSJVDetails] 1,3,94                              
-- =============================================                                                                 
Begin                                                                

    open P_outtbl for                                                               
      SELECT SJV.LOB_ID, SJV.Location_Code, FN_Get_LocationID(SJV.Location_Code) AS Location_ID,    
       trunc(JV_Date) AS SJVDate,                                                              
      SJV.Account_Link_Key, DOCUMENT_NO as SJVNo,    --DOCUMENT_NO -Sathish R-13-Jan-2019                          
       SJV.Narration,
            LOB.LOB_Code || ' - ' || LOB.LOB_Name LOB,  
           CAT.LocationCat_Description Location 
       From S3G_JV_Hdr  SJV
        LEFT JOIN S3G_SYSAD_LOBMaster LOB  
          ON LOB.LOB_ID = SJV.LOB_ID  
        LEFT JOIN S3G_SYSAD_LocationMaster LM  
          ON LM.Location_Code = SJV.Location_Code  
        LEFT JOIN S3G_SYSAD_LocationCategory CAT  
          ON CAT.Location_Category_ID = LM.Location_Category_ID     
       WHERE Account_Link_Key=nvl(P_SJV_No,Account_Link_Key)                                                         
       AND SJV.Company_ID=P_Company_ID ;                            
       
    OPEN P_outtbl1 FOR                                                               
                                                                      
      Select --DISTINCT                              
       CM.Customer_Name as CustomerName,                    
       Reference_Number as Reference_Number,                              
       (Case When Sub_Reference_Number=Reference_Number || 'Dummy'              
       THEN NULL ELSE Sub_Reference_Number End)as Sub_Reference_Number,                              
       GetUserDateFormat(Value_Date,P_Company_ID) as ValueDate,                    
       S3G_FN_GetGPSDecimalFormat((ABS(Txn_Amount)),P_Company_ID) AS TxnAmount,              
       (Case When Txn_Amount < 0 THEN 'Dr' Else 'Cr' End) TxnType,                              
      -- GL_Account_Number || '-' || ACD.Account_Code_Desc as GLAcc,
      FN_GET_GLSLDESCRIPTION(P_Company_ID,1,GL_Account_Number,null) as GLAcc,
       --Sub_GL_Account_Number as SLAcc,
      -- Sub_GL_Account_Number || '-' || ACD.ACCOUNT_CODE_DESC AS SLAcc,
      FN_GET_GLSLDESCRIPTION(P_Company_ID,2,null,Sub_GL_Account_Number) as SLAcc,
       Occurrence_No as Occurance,                              
       Global_Dimension2_Number as Dim2                                                  
       FROM S3G_JV_Hdr SJV                               
       INNER JOIN S3G_JV_Det SJVDet 
                ON SJV.Account_Link_Key = SJVDet.Account_Link_Key
       LEFT JOIN S3G_LAD_AccCreation AC
                ON AC.PANum = SJVDet.Reference_Number
       LEFT JOIN S3G_ORG_CustMaster CM
                ON AC.Customer_ID = CM.Customer_ID
--       INNER JOIN s3g_sysad_accountsetupmaster ASM
--                ON ASM.GL_CODE = SJVDet.GL_ACCOUNT_NUMBER AND ASM.SL_CODE IS NULL
--       INNER JOIN s3g_sysad_accountcodedesc ACD
--                ON ACD.ACCOUNT_CODE_DESC_ID = ASM.ACCOUNT_CODE_DESC_ID
--       LEFT JOIN s3g_sysad_accountsetupmaster SL
--                ON SL.GL_CODE = SJVDet.GL_ACCOUNT_NUMBER AND SL.SL_CODE  = SJVDet.SUB_GL_ACCOUNT_NUMBER
--       LEFT JOIN s3g_sysad_accountcodedesc SD 
--                ON SD.ACCOUNT_CODE_DESC_ID = SL.ACCOUNT_CODE_DESC_ID
--       LEFT JOIN S3G_SYSAD_AccountSetupMaster                              
--       ON (GL_Code=GL_Account_Number                                   
--       AND  nvl(SL_Code,' ')=nvl(Sub_GL_Account_Number,' '))
                  
--       LEFT JOIN S3G_SYSAD_AccountCodeDesc                                                                             
       
       --INNER JOIN S3G_SYSAD_AccountCodeDesc
       --ON SJVDet.ACCOUNTING_FLAG = S3G_SYSAD_AccountCodeDesc.ACCOUNT_FLAG
                 
       Where                                   
       SJVDet.Account_Link_Key=P_SJV_No AND SJV.Company_ID=nvl(P_Company_ID,SJV.Company_ID)                                    
       --AND S3G_SYSAD_AccountSetupMaster.Is_Active=1                      
       Order by Occurrence_No;                      
                                                               
                                                                 
End LA_Get_SJV_Dtl;

/

create or replace
PROCEDURE "LA_JV_REVK" 
(
  p_Company_ID NUMBER
, p_Account_Link_Key NUMBER
, p_User_ID NUMBER DEFAULT NULL
)AS 

  D_TMP_Account_Link_Key NUMBER;
  D_ACCOUNT_LNK NUMBER;
  P_ERRORCODE Number;
  P_ERRORMSG varchar2(500);
  D_DOC_NO varchar2(100);
  d_Value_Date          TIMESTAMP; 
  
BEGIN


/* _____________________________________________________________________________

    Created By    : Thangam M
    Created On    : 07/Dec/2011
    Purpose       : To revoke System JV      
    SQL SP        : S3G_LoanAd_Journal_CFM_Revoke
    Modified By   :
    Modified On   :
   _____________________________________________________________________________*/
    
    D_ACCOUNT_LNK := 0;
   
    select SEQ_JOURNAL_Header.nextval into  D_ACCOUNT_LNK from dual;
    
     Update S3G_JV_HDR              
     Set JV_Status_Code=2,Update_Status='D'  Where Account_Link_Key=p_Account_Link_Key;
   
   
    INSERT INTO S3G_JV_HDR 
    (COMPANY_ID, LOB_ID, LOCATION_CODE, ACCOUNT_LINK_KEY , JV_SEQUENCE_TYPE, JV_CHAR_SET, 
      JV_SEQUENCE_NUMBER, JV_DATE, NARRATION, TXN_CURRENCY_CODE, TXN_EXCHANGE_RATE ,
      COMPANY_CURRENCY_CODE, GLOBAL_DIMENSION1_TYPE, GLOBAL_DIMENSION1_CODE, GLOBAL_DIMENSION1_NUMBER,
      JV_STATUSTYPE_CODE, JV_STATUS_CODE, AX_JOURNAL_NUMBER, UPDATE_STATUS, UPDATE_DATE, CREATED_BY, 
      CREATED_ON, TXN_ID,DOCUMENT_NO,LOCATION_ID)
    sELECT
      COMPANY_ID, LOB_ID, LOCATION_CODE, D_ACCOUNT_LNK,JV_SEQUENCE_TYPE || '_REV', 'REV_',
       P_Account_Link_Key, JV_DATE, NARRATION || ' - Cancelled', TXN_CURRENCY_CODE, TXN_EXCHANGE_RATE ,
      COMPANY_CURRENCY_CODE, GLOBAL_DIMENSION1_TYPE, GLOBAL_DIMENSION1_CODE, GLOBAL_DIMENSION1_NUMBER,
      JV_STATUSTYPE_CODE, 1, AX_JOURNAL_NUMBER, 'D', sysdate, CREATED_BY, 
      SYSDATE, TXN_ID,'REV_'||DOCUMENT_NO,LOCATION_ID
      FROM S3G_JV_HDR
      WHERE 
     Account_Link_Key = P_Account_Link_Key;
               
 -- Commented in R. Manikandan, instead used D_ACCOUNT_LNK where the conversion bug was fixed (25 - May - 2015)
 --SELECT SEQ_S3G_LAD_JV_RVK.NEXTVAL INTO D_TMP_Account_Link_Key FROM DUAL; 
 
 insert into S3G_JV_DET
      (S3G_JV_DET_ID,COMPANY_ID, ACCOUNT_LINK_KEY, REFERENCE_TYPE, REFERENCE_NUMBER, SUB_REFERENCE_NUMBER, VALUE_DATE, OCCURRENCE_NO,
       TXN_AMOUNT, GL_ACCOUNT_NUMBER, SUB_GL_ACCOUNT_NUMBER, ACCOUNTING_FLAG, GLOBAL_DIMENSION2_TYPE, GLOBAL_DIMENSION2_CODE,
       GLOBAL_DIMENSION2_NUMBER,CREATED_ON)
   select
       SEQ_S3G_JV_Det.nextval,COMPANY_ID, D_ACCOUNT_LNK, REFERENCE_TYPE, REFERENCE_NUMBER, SUB_REFERENCE_NUMBER, VALUE_DATE, OCCURRENCE_NO,
       (-1) * TXN_AMOUNT, GL_ACCOUNT_NUMBER, SUB_GL_ACCOUNT_NUMBER, ACCOUNTING_FLAG, GLOBAL_DIMENSION2_TYPE, 
       GLOBAL_DIMENSION2_CODE, GLOBAL_DIMENSION2_NUMBER,sysdate
   FROM S3G_JV_Det
   WHERE 
     Account_Link_Key = P_Account_Link_Key;
   
   UPDATE S3G_JV_Hdr          
   SET 
     JV_Status_Code = 1, Update_Status = 'D'  
   WHERE 
     Account_Link_Key = p_Account_Link_Key;
     
     
     
    d(D_TMP_Account_Link_Key);
    
    
    select DOCUMENT_NO,jv_date into 
    D_DOC_NO,D_VALUE_DATE
    from s3g_jv_hdr where ACCOUNT_LINK_KEY=D_ACCOUNT_LNK;
    D('DOC_NO');
    D(D_DOC_NO);
    
    begin
    P_ERRORCODE:=0;
    P_ERRORMSG:=' ';
     S3G_JV_CHKGLSL_SUM(D_DOC_NO,P_Company_ID,to_char(trunc(D_VALUE_DATE),'MM/DD/YYYY')||' 12:00:00 AM',1,'A',P_ERRORCODE,P_ERRORMSG);
    end;
    
    
    
   --Added on 29-Sep-2012 As per Mr.Sudarsan Sir Advice. 
 /*  UPDATE S3G_JV_Det
   SET txn_amount=0 where ACCOUNT_LINK_KEY=p_Account_Link_Key;
   --Code end   */ 
-- ROLLBACK;
END LA_JV_REVK;

/

create or replace
PROCEDURE "LA_JV_AC_ACTV" 
(
  p_PA_SA_REF_ID IN NUMBER                                                  
 ,P_User_ID IN NUMBER                                                                                                 
 ,P_JV_STATUS_CODE IN NUMBER                                                          
 ,P_UPDATE_STATUS IN NUMBER 
 , P_ERRORCODE OUT number
 , P_Errormsg Out Varchar2
 -- ,P_OUTTBL out sys_refcursor
) AS 
/* _____________________________________________________________________________

    Created By    : Thangam M
    Created On    : 09/Dec/2011
    Purpose       : To Insert SYS Journal Entry for  Account Activation      
    SQL SP        : S3G_LOANAD_Journal_CFM_AccountActivation
    Modified By   :
    Modified On   :
   _____________________________________________________________________________*/
   
      D_Customer_ID         NUMBER;
      D_COMPANY_ID          NUMBER;
      D_LOB_ID              NUMBER;  
      D_LOCATION_CODE       VARCHAR2(30);
      d_Location_ID         NUMBER;  
      
      D_LOB_CODE            VARCHAR2(2); 
      D_ACCOUNT_LINK_KEY    NUMBER; -- Page generated document number control  
      D_DOC_NO              VARCHAR2(50); 
      D_TASK_ID             NUMBER;
      
      D_JV_SEQUENCE_TYPE    VARCHAR2(8); 
      D_JV_CHAR_SET         VARCHAR2(5);  
      D_JV_SEQUENCE_NO      NUMERIC(12,0);      
      D_JV_DATE             date;     -- Posting Date      
      D_VALUE_DATE          date; 
      d_Cashflow_Value_Date TIMESTAMP; 
      D_NARRATION           VARCHAR2(100);  
      D_NARRATION_VALUE     VARCHAR2(30); 
      
      D_COMPANY_CURRENCY_ID NUMBER;
      D_TXN_CURRENCY_ID     NUMBER; -- Get If there is any txn currency.
      D_TXN_EXCHANGE_RATE   DECIMAL(12,4);    
      
      D_GLOBAL_DIM1_CODE    NUMBER;   -- Lookup Type Value ( Vendor or Dealer or Customer.. )   
      D_GLOBAL_DIM1_ID      NUMBER;     -- Lookup Code Value ( Vendor or Dealer or Customer.. )     
      
      D_UPDATE_DATE         TIMESTAMP;    
      D_UPDATE_STATUS_VALUE VARCHAR2(1); 
        
/*________________________ Header Parameters End ________________________*/
                                                                            
/*________________________ Details Parameters Start_______________________*/                                                                            
                                                                            
      D_REFERENCE_TYPE      VARCHAR2(15);                                                                                                                  
      D_REFERENCE_NO        VARCHAR2(50);   -- MLA Number or PANum                                                                                                
      D_Sub_Reference_No    VARCHAR2(30);                                                                                    
                                                                              
      D_TXN_AMOUNT          Decimal(18,4);                                                                                                    
      D_Txn_Type            VARCHAR2(1);
                                                        
      D_GL_ACCOUNT_NO       VARCHAR2(15);                                                                                  
      D_Sub_GL_Account_No   VARCHAR2(200);                                                                                             
                                                                            
      D_ACC_FLAG            VARCHAR2(10);                                                                                        
      D_ACC_TYPE            NUMBER;
      D_Global_Dim2_No      VARCHAR2(50);                                                                              
                                                                            
      D_DETAILS_MASTER_COUNT NUMBER;
      D_Details_Record_Count NUMBER;
                                  
      D_CFM_MASTER_COUNT    NUMBER;             
      D_CFM_RECORD_COUNT    NUMBER;                                                                            
      D_ENTITY_ID           NUMBER;                                                           
      D_PASARef_ID          NUMBER;
          
/*__________________________ Details Parameters End _________________________*/                                    
                                                                            
/*__________________________ Page Parameters Start __________________________*/ 

      D_FIN_AMOUNT          DECIMAL(18,4);                                                                                             
      d_Margin_Amount       Decimal(18,4);                                                      
      d_Tenure              Decimal(18,4);                                                                            
      d_Tenure_Code         Decimal(18,4);                                                                                                                     
      d_Rate_of_Interest    Decimal(18,4);                                               
      d_Interest_Amount     Decimal(18,4);                                                     
      d_Cash_Flow_ID        NUMBER;                                                                          
      d_CFM_Task_ID         NUMBER;                                                                                                             
                                                                                
      d_Outflow_Details_Master_Count NUMBER;                                      
      d_Outflow_Details_Record_Count NUMBER;                                                                                                                                    
                                                                                                      
      d_Outflow_CFM_Master_Count    NUMBER;                                                                                                    
      d_Outflow_CFM_Record_Count NUMBER;                                                                                                                                       
                                                     
      d_CasFlow_Type        NUMBER;                                                                             
      d_Entity_Type         NUMBER;                                                                        
      d_Entity_Code         NUMBER;                                                                                                           
      d_CasFlow_Code        NUMBER;                                                                                   
                                                                                    
      d_AccountActivation_Date           TIMESTAMP;                                                                                    
      d_AccountCreation_Date             TIMESTAMP;  
      d_Billing_Value_Date               TIMESTAMP;
      d_LastBilling_Date                 TIMESTAMP;                                                                                    
      d_Billing_Details_Master_Count     NUMBER;                                                                                   
      d_Billing_CFM_Master_Count         NUMBER;                                                                     
      d_Billing_CFM_Record_Count         NUMBER;                                                                                   
      d_Billing_Details_Record_Count     NUMBER;                                                                                    
      D_BILLING_AMOUNT                   DECIMAL(18,4);                                                                                    
      D_BILLING_ENTRY                    VARCHAR2(1); 
      D_XML_Journal                      CLOB;
      D_CASHFLOW_FLAG_ID                 NUMBER;                                                    
      d_IS_RRB                           VARCHAR2(1);
      D_CASHFLOW_FLAG_CODE               NUMBER; 
      d_Inst_No                          INT; 
      d_CF_Flag_MasterCount              INT; 
      d_CF_Flag_RecordCount              INT; 
                                          
      d_Due_Flag                         NUMBER; 
      
      d_Frequency_Code                   NUMBER;  
      d_Inc_Master_Count                 NUMBER;
      d_Inc_Rec_Count                    NUMBER;
      d_Cutoff_End_Date                  TIMESTAMP;
      d_Cutoff_Start_Date                TIMESTAMP;
      d_Income_Post                      VARCHAR2(1);
      d_ErrorCode                        NUMBER;
      d_ErrorMsg                         VARCHAR2(200);    
       
      d_EXISTS                           NUMBER;
      d_TmpActID                         NUMBER; 
      d_Rownumber                        NUMBER; 
      d_RESULTSET                        SYS_REFCURSOR;
      d_RCashFlow_Flag_ID                 NUMBER; 
      d_RPer_Instalment_Amount            NUMBER; 
      
      D_XML_JournalGL     CLOB;  
      D_tempJv_Date Date; 
      P_OUTTABLE  SYS_REFCURSOR;
      P_OUTTABLE1  SYS_REFCURSOR; 
      --7466
       D_TTXN_AMOUNT        NUMBER;
       D_Count Number;
       D_Tcashflow_Id Number;
       D_TCASHFLOW_ID_FLAG_ID NUMBER;
       --7466
      
/*_____________________________ Page Parameters End ___________________________*/                                           
                                                        
/*____________________________ Details Parameters End __________________________*/  

BEGIN
  
    D_IS_RRB := 0;  
    D_Task_Id := 38;
    P_Errorcode:=0;
    p_ErrorMsg:=' ';
    DELETE FROM TMP_LA_JV_DTL;
    DELETE FROM TMP_LA_JV_TMPCFMDTL;
    DELETE FROM TMP_LA_JV_CASHFLWDTL;
    DELETE FROM TMP_LA_JV_CFMBILLDTL;   
    DELETE FROM TMP_LA_JV_CFMDET;
    delete from tmp_la_jv_dettbl;

    IF (D_TASK_ID=38) THEN
    
      --DP_AUTO_TRAN('Line-LA_JV_AC_ACTV==>-P_PA_SA_REF_ID==>'||P_PA_SA_REF_ID);
      --DP_AUTO_TRAN('Line-LA_JV_AC_ACTV==>-P_User_ID==>'||P_User_ID);
       SELECT  
           S3G_LAD_ACCPASADET.COMPANY_ID                                      
          ,AC.LOB_ID                                                                               
          ,AC.LOCATION_CODE                  
          ,S3G_SYSAD_LOBMASTER.LOB_CODE                                                                                                                                                                                        
          ,APPLICATION_NUMBER , S3G_LAD_ACCPASADET.CREATION_DATE
          ,s3g_lad_accpasadet.creation_date                                                                                                                                         
          ,1 ,AC.CUSTOMER_ID, AC.LOCATION_ID ,ac.panum                                                                                                                        
       INTO                                                
           D_COMPANY_ID, D_LOB_ID, D_LOCATION_CODE, D_LOB_CODE,
           d_narration_value, d_jv_date, d_value_date, d_global_dim1_code,
           D_GLOBAL_DIM1_ID,D_LOCATION_ID,d_reference_no
       FROM 
           S3G_LAD_ACCPASADET                                                                                                                                          
           INNER JOIN S3G_LAD_AccCreation AC                                                          
           ON S3G_LAD_AccPASADet.ACCOUNT_CREATION_ID = AC.ACCOUNT_CREATION_ID                                                
           INNER JOIN S3G_SYSAD_LOBMASTER                                                                                                   
           ON S3G_SYSAD_LOBMASTER.LOB_ID = AC.LOB_ID                                                                                                                                         
           INNER JOIN S3G_ORG_APPPROC                                                                                       
           ON AC.APPLICATION_PROCESS_ID = S3G_ORG_AppProc.APPLICATION_PROCESS_ID                                                                                                                    
           INNER JOIN S3G_ORG_ROI_RULES                                                                   
           ON S3G_ORG_ROI_RULES.ROI_RULES_ID = S3G_LAD_AccPASADet.ROI_RULE_ID                                                                                                                    
       WHERE 
            PA_SA_REF_ID = P_PA_SA_REF_ID ;
    end if;         -- Activation End
 --DP_AUTO_TRAN('Line-LA_JV_AC_ACTV==>-D_JV_DATE==>'||D_JV_DATE);
    SELECT LOCATION_ID                   
    INTO D_LOCATION_ID
    FROM S3G_SYSAD_LOCATIONMASTER                   
    WHERE LOCATION_CODE = D_LOCATION_CODE 
    and company_id = d_company_id;
    
  
   
    SELECT ACCOUNT_ACTIVATION_NUMBER, ACCOUNT_ACTIVATION_ID
    INTO d_Doc_No, d_TmpActID
    FROM (
      SELECT DISTINCT AA.ACCOUNT_ACTIVATION_NUMBER , AA.ACCOUNT_ACTIVATION_ID
      From 
         S3G_LAD_AccActvn AA                      
         INNER JOIN S3G_LAD_ACCPASADET PASA                                                
         ON (AA.PA_SA_REF_ID = PASA.PA_SA_REF_ID --AND AA.SANUM = PASA.SANUM
         )                      
      WHERE 
         PASA.PA_SA_REF_ID = p_PA_SA_REF_ID
      ORDER BY AA.ACCOUNT_ACTIVATION_ID DESC) TMP
    where rownum < 2;
    
      
    
    SELECT   
       tJV_Sequence_Type ,tNarration ,TREFERENCE_TYPE
    INTO 
       d_JV_SEQUENCE_TYPE, d_Narration, d_REFERENCE_TYPE
    FROM 
       TABLE(FN_JV_GET_NARR(D_COMPANY_ID,D_TASK_ID));

--      d_JV_SEQUENCE_TYPE := 'ACAC';
--      d_Narration := 'ACCOUNT ACTIVATION FOR APPLICATION';
--      d_REFERENCE_TYPE := 'ACCOUNT';
       
/*____________________________ DataSet Revoke Start ____________________________*/
  
   
    IF(P_JV_STATUS_CODE = 2) THEN
     
       LA_INS_DS(D_COMPANY_ID, D_LOB_ID ,D_LOCATION_ID ,D_JV_SEQUENCE_TYPE                                                                              
                ,d_Doc_No ,d_JV_Date ,NULL ,p_User_ID ,d_XML_JOURNAL ,p_JV_Status_Code);

       SELECT PANUM, SANUM    
       INTO d_REFERENCE_NO, d_SUB_REFERENCE_NO
       FROM S3G_LAD_AccPASADet    
       WHERE PA_SA_REF_ID = p_PA_SA_REF_ID;
       
       UPDATE S3G_LAD_AccRepayStruct                                                                                  
       SET BILLSTATUS = NULL                                                  
       WHERE PA_SA_REF_ID = p_PA_SA_REF_ID --AND SANUM = D_SUB_REFERENCE_NO
       ;
    
       UPDATE S3G_LAD_AccAmortStruct  
       SET BILLSTATUS = NULL                                                  
       WHERE PA_SA_REF_ID = p_PA_SA_REF_ID --AND SANUM = D_SUB_REFERENCE_NO
       ; 
   
       DELETE FROM S3G_LAD_IncomeRecogDet  --PSAS REF ID NOT AVAILABLE                                                                                                      
       WHERE INCOME_RECOGNITION_NO = '0'                               
       AND PANUM = D_REFERENCE_NO --AND SANUM = D_SUB_REFERENCE_NO
       ; 

       RETURN;

    END IF;
    
/*____________________________ DataSet Revoke End ______________________________*/

    D_UPDATE_STATUS_VALUE := FN_GET_JV_UPD_STS(P_UPDATE_STATUS);
    d_Company_Currency_ID := FN_Get_JV_Curr_Id(d_Company_ID);                        
    d_Txn_Currency_ID := d_Company_Currency_ID;
    d_Txn_Exchange_Rate := FN_Get_JV_Exchg_Rate
                        (d_Company_ID, d_Company_Currency_ID, d_Txn_Currency_ID);

    d_Narration := d_Narration || '  ' ||  NVL(d_Narration_Value,' ');
    
      --DP_AUTO_TRAN('Line-LA_JV_AC_ACTV==>D_DOC_NO-Check'||D_DOC_NO);
    
    
--    SELECT TJV_CHAR_SET ,TJV_SEQUENCE_NO
--    INTO d_JV_Char_Set, d_JV_Sequence_No 
--    FROM TABLE(FN_TBL_GET_SPLIT_DOC_NO(D_DOC_NO));  
    
    d_Entity_ID := d_Global_Dim1_ID; 
--    
--    SELECT CUSTOMER_ID 
--    INTO d_Global_Dim1_ID
--    FROM S3G_LAD_AccCreation                                                                                      
--    WHERE 
--      PANUM = D_REFERENCE_NO                                                                                     
--      AND COMPANY_ID = D_COMPANY_ID                                                                                                                   
--      AND LOB_ID = D_LOB_ID                                  
--      AND Location_Code = d_Location_Code; 
  
  
  --DP_AUTO_TRAN('Line-LA_JV_AC_ACTV==>D_DOC_NO-Check'||d_reference_no);
  
  select   substr(d_reference_no,1,3),substr(d_reference_no,4,9) 
  into d_JV_Char_Set,d_JV_Sequence_No from dual;

  
  
    IF (p_Update_Status = 1) THEN                   
          
      LA_JV_Ins_Hdr(d_Company_ID ,d_LOB_ID ,d_Location_ID                                                 
          ,d_account_link_key ,d_jv_sequence_type ,d_jv_char_set                                                                               
          ,to_char(D_JV_SEQUENCE_NO) ,D_NARRATION ,D_VALUE_DATE ,D_TXN_CURRENCY_ID                                                                              
          ,d_txn_exchange_rate , d_company_currency_id ,d_global_dim1_code
          ,d_Global_Dim1_ID ,p_JV_Status_Code ,p_Update_Status ,p_User_ID, d_JV_Date,d_reference_no);                                                                               
                                                                                      
    END IF;    
    
/*__________________________ Header Insertion End _____________________________*/

/*__________________________ Details Insertion Start __________________________*/

/*__________________________ Account Activation Start _________________________*/ 

    IF(D_TASK_ID != 73) THEN              -- Loop 1 start
   
        IF(d_Task_ID = 38) THEN
           INSERT INTO TMP_LA_JV_DTL(ID,TREFERENCE_NO,TSUBREFERENCE_NO)
           SELECT ROWNUM,PANum,SANum                                                                                                          
           FROM S3G_LAD_AccPASADet                                                                                        
           WHERE PA_SA_REF_ID = P_PA_SA_REF_ID                                                                                                      
            AND COMPANY_ID = D_COMPANY_ID  
           Order by PA_SA_REF_ID;
           
        END IF;
        
        d_CFM_TASK_ID := 38;
    
    --Open P_Outtbl For Select * From TMP_LA_JV_DTL;Return;
/*______________________Account Activation NDE Block Star______________________*/ 

      

        Insert Into Tmp_La_Jv_Tmpcfmdtl
        (  
             Tgl_Code,Tsl_Code,Ttxn_Amount,Tacc_Flag,Tacc_Type,TTXN_TYPE,
             Tacc_Identifier,Tcashflow_Type,Tcashflow_Id,Tcashflow_Flag_Id
        )
        Select 
        Tgl_Code , Tsl_Code , Ttxn_Amount , tAcc_Flag ,Tacc_Type , Ttxn_Type , 
        Tacc_Identifier,Tcashflow_Type,Tcashflow_Id,TCASHFLOW_FLAG_CODE 
        FROM TABLE(FN_Journal_GetCFMDetails(d_CFM_Task_ID,d_LOB_ID)); 
       
       Select Count(1) Into D_Count From Tmp_La_Jv_Tmpcfmdtl;
       --Open P_Outtbl For Select * From Tmp_La_Jv_Tmpcfmdtl;Return;
       
       IF(D_COUNT=0)THEN
        --DP_AUTO_TRAN('LA_JV_AC_ACTV-150');
        P_ERRORCODE:=150;
       end if;
     
   
        
          -- Added By R. MAnikandan to fix duplication entry for Margin Money
--          -- Added on 18 - Jun - 2015
          delete from TMP_LA_JV_TMPCFMDTL 
           where TCASHFLOW_FLAG_ID = 43
           and upper(TCASHFLOW_TYPE) = 'OUTFLOW';
--           
--          -- Added By R. Manikandan
       
     --Open P_Outtbl For Select * From TMP_LA_JV_CFMBILLDTL;Return;  
    
        INSERT INTO TMP_LA_JV_CFMBILLDTL                                                                  
          (Id ,Tgl_Code ,Tsl_Code ,Ttxn_Amount ,Tacc_Flag                                                                                                                       
          ,TACC_TYPE ,TTXN_TYPE ,TACC_IDENTIFIER,TDUE_FLAG,TCASHFLOW_ID)                                                                                                                                                            
        SELECT 
          Rownum , Tgl_Code , Tsl_Code ,Ttxn_Amount , Tacc_Flag ,                                                                   
          TACC_TYPE , TTXN_TYPE , TACC_IDENTIFIER,TCASHFLOW_FLAG_CODE ,Tcashflow_Id                                      
        FROM  
          TABLE(FN_JOURNAL_GETCFMDETAILS(95,D_LOB_ID))                
        --WHERE 
          --- TCASHFLOW_FLAG_CODE IN (23,25,46,44)  
        ORDER BY TCASHFLOW_ID;
        
        
        
       --Open P_Outtbl For Select * From TMP_LA_JV_CFMBILLDTL;Return;  
        
        DELETE FROM TMP_LA_JV_TMPCFMDTL;
        
        SELECT COUNT(1) INTO D_BILLING_CFM_MASTER_COUNT FROM TMP_LA_JV_BILLDTL;
        SELECT COUNT(1) INTO d_DETAILS_MASTER_COUNT FROM TMP_LA_JV_DTL;
        
        D_DETAILS_RECORD_COUNT := 1; 
        D_Cfm_Record_Count := 1;
         --Open P_Outtbl For Select * From TMP_LA_JV_DTL;Return;
         --Open P_Outtbl For Select * From TMP_LA_JV_BILLDTL;Return;
        
        D('D_DETAILS_RECORD_COUNT==>'||D_DETAILS_RECORD_COUNT);
        D('d_CFM_RECORD_COUNT==>'||d_CFM_RECORD_COUNT);
        
        WHILE(D_DETAILS_MASTER_COUNT >= D_DETAILS_RECORD_COUNT ) LOOP  -- Loop 2 Start 
        D('MASTER LOOP ACCOUNT START');
      
           DELETE FROM TMP_LA_JV_CFMDET;
          
           INSERT INTO TMP_LA_JV_CFMDET                                                                        
               (Row_Id ,Tgl_Code ,Tsl_Code ,Ttxn_Amount ,Tacc_Flag                                                                                                                       
                ,TACC_TYPE ,TTXN_TYPE ,TACC_IDENTIFIER,TCASHFLOW_ID_FLAG_ID,TCASHFLOW_ID)                                                                                                                                             
           SELECT 
                Rownum,Tgl_Code ,Tsl_Code ,Ttxn_Amount ,Tacc_Flag ,                                                                                      
                TACC_TYPE , TTXN_TYPE , TACC_IDENTIFIER  ,TCASHFLOW_FLAG_CODE,Tcashflow_Id                                                                                 
           FROM TABLE(FN_JOURNAL_GETCFMDETAILS(D_CFM_TASK_ID,D_LOB_ID))     
                 WHERE TCASHFLOW_TYPE = 'NDE'
           order by TCASHFLOW_ID;
        
     
        --Open P_Outtbl For Select * From TMP_LA_JV_CFMDET;Return;
         -- Added By R. MAnikandan to fix duplication entry for Margin Money
          -- Added on 18 - Jun - 2015
          delete from TMP_LA_JV_CFMDET 
           where TCASHFLOW_FLAG_CODE = 43
           and upper(TACC_IDENTIFIER) = 'OUTFLOW';
--           
          -- Added By R. Manikandan
        
      
           select COUNT(1) into D_CFM_MASTER_COUNT from TMP_LA_JV_CFMDET;
           D('D_CFM_MASTER_COUNT==>'||D_CFM_MASTER_COUNT);
           
           
           D_CFM_RECORD_COUNT := 1;
           D('d_CFM_Record_Count==>'||d_CFM_Record_Count);
           
           SELECT ID INTO d_EXISTS FROM TMP_LA_JV_DTL WHERE ROWNUM < 2;
           
           SELECT TREFERENCE_NO , TSUBREFERENCE_NO                                                                                                
           INTO D_REFERENCE_NO, d_SUB_REFERENCE_NO
           FROM TMP_LA_JV_DTL 
           WHERE ID = d_Details_Record_Count;
           
           SELECT 
               S3G_LAD_AccPASADet.FINANCE_AMOUNT                                                         
              ,S3G_LAD_AccCreation.OFFER_MARGIN_AMOUNT                                                                                                                            
              ,S3G_LAD_AccPASADet.TENURE                                  
              ,S3G_LAD_AccPASADet.TENURE_CODE                                                                                                                   
              ,AOROID.RATE                                                                                                                            
           INTO d_FIN_AMOUNT, d_MARGIN_AMOUNT, d_TENURE, d_TENURE_CODE, d_RATE_OF_INTEREST
           FROM 
              S3G_LAD_AccPASADet                                                                                                                 
              INNER JOIN S3G_LAD_AccCreation                                                                                                          
              ON S3G_LAD_AccPASADet.ACCOUNT_CREATION_ID = S3G_LAD_AccCreation.ACCOUNT_CREATION_ID                                                                                                                   
              INNER JOIN S3G_SYSAD_LOBMASTER                                                                                                                         
              ON S3G_SYSAD_LOBMASTER.LOB_ID = S3G_LAD_AccCreation.LOB_ID                                                             
              INNER JOIN S3G_ORG_AppProc                                                                                             
              ON S3G_LAD_AccCreation.Application_Process_ID = S3G_ORG_AppProc.Application_Process_ID                                                                       
              INNER JOIN S3G_LAD_AccOfferROIDet AOROID                                                                      
              ON (S3G_LAD_ACCPASADET.PA_SA_REF_ID =AOROID.PA_SA_REF_ID                                                                       
                  --AND S3G_LAD_ACCPASADET.SANUM =AOROID.SANUM 
                  )                                                                      
           WHERE S3G_LAD_ACCPASADET.PA_SA_REF_ID = P_PA_SA_REF_ID                                           
              --AND S3G_LAD_AccPASADet.SANUm = NVL(d_Sub_Reference_No, S3G_LAD_AccPASADet.SANUm)                                                                                                
              AND S3G_LAD_AccCreation.COMPANY_ID = S3G_LAD_AccPASADet.COMPANY_ID                                                                
              AND S3G_LAD_AccCreation.Company_ID = D_Company_ID; 
           
           UPDATE TMP_LA_JV_DTL 
           SET TMARGIN_AMOUNT = D_MARGIN_AMOUNT                                                               
           WHERE Id = d_Details_Record_Count;
           
           
           UPDATE TMP_LA_JV_CFMDET 
           SET TTXN_AMOUNT = (SELECT NVL(TMARGIN_AMOUNT,0) 
                       FROM TMP_LA_JV_DTL 
                       WHERE ID = D_DETAILS_RECORD_COUNT
                         AND ROWNUM < 2)                                                                                                              
           WHERE TACC_IDENTIFIER = 'Margin_Amount';
          
     
         
     D('D_CFM_MASTER_COUNT=>'||D_CFM_MASTER_COUNT);
     D('D_CFM_RECORD_COUNT=>'||D_CFM_RECORD_COUNT);
     
    -- Open P_Outtbl For Select * From TMP_LA_JV_CFMDET;Return;
     
           WHILE( D_CFM_MASTER_COUNT >= D_CFM_RECORD_COUNT ) LOOP     -- Loop 3 Start
             D('D_CFM_MASTER_COUNT-loopSTART');
              
               SELECT 
                   Tgl_Code , Tsl_Code , Ttxn_Amount
                  ,tAcc_Flag , tTxn_Type ,TACC_TYPE,TCASHFLOW_ID,TCASHFLOW_ID_FLAG_ID
               INTO
                  D_Gl_Account_No, D_Sub_Gl_Account_No, D_Txn_Amount ,
                  d_ACC_FLAG, d_TXN_TYPE, d_ACC_TYPE,D_TCASHFLOW_ID,D_TCASHFLOW_ID_FLAG_ID
               FROM TMP_LA_JV_CFMDET 
               WHERE Row_Id = d_CFM_Record_Count;
               
            d('D_CFM_MASTER_COUNT-loopSTART-CHECK2');
           
               IF(D_ACC_TYPE != 1 AND D_ACC_TYPE != 5 AND D_ACC_TYPE!=3) THEN
                   
                   SELECT COUNT('X') INTO d_EXISTS
                   FROM TABLE(FN_TBL_GET_ENTY_DTL(d_Acc_Type, d_Entity_ID));
                   
                   IF(d_EXISTS > 0) THEN
                     SELECT  
                        GL_Code , SL_Code ,ACC_FLAG                                                        
                     INTO  
                        d_GL_ACCOUNT_NO , d_SUB_GL_ACCOUNT_NO, d_ACC_FLAG
                     FROM TABLE(FN_TBL_GET_ENTY_DTL(d_Acc_Type, d_Entity_ID));
                   END IF;
               
               end if;
             d('TMP_LA_JV_DETTBL Insert-Check-1');
               INSERT INTO TMP_LA_JV_DETTBL                                                                                                                                       
                  (Treference_Type ,Treference_No ,Tsub_Reference_No ,Tvalue_Date                                                                     
                  ,tGL_Code ,tSL_Code ,tTxn_Amount ,tTxn_Type ,tAcc_Flag ,tDim2_No,ACC_TYPE,TCASHFLOW_FLAG_ID,TCASHFLOW_ID)                                                                                        
               VALUES                                                                                                                      
                  (d_Reference_Type ,d_Reference_No ,d_Sub_Reference_No ,d_Value_Date                                                                  
                  ,d_GL_Account_No , d_Sub_GL_Account_No                                                                                                 
                  ,(CASE WHEN d_Txn_Type=0                                                                                                       
                         THEN -1 * (d_Txn_Amount) 
                         Else D_Txn_Amount 
                    END) ,d_Txn_Type ,d_Acc_Flag ,d_Global_Dim2_No,D_ACC_TYPE,D_TCASHFLOW_ID_FLAG_ID,D_TCASHFLOW_ID);      
                    
               d_CFM_Record_Count := d_CFM_Record_Count + 1;
           
           END LOOP;  -- CFM While Loop End  for Specific Account   -- Loop 3 End
 
 /*_______________________________ Billing Logic Start _________________________*/
 
           d_Billing_CFM_Record_Count := 1;       
           d_Billing_Details_Record_Count := 1;   
           d_Billing_Amount := 0;                 
           d_Billing_Entry := 0;   
           
           DELETE FROM TMP_LA_BillingDetails;                                                                                            

           SELECT Account_Activated_Date ,Creation_Date                                                                   
           INTO d_AccountActivation_Date, d_AccountCreation_Date
           FROM S3G_LAD_AccPASADet                                                                                            
           WHERE PA_SA_REF_ID = P_PA_SA_REF_ID                                                                                            
             --AND SANum = d_Sub_Reference_No                                                                      
             AND Company_ID = d_Company_ID;
             
           SELECT MAX(EndDate) INTO d_LastBilling_Date                                           
           FROM S3G_LAD_BillHdr BH                                            
           INNER JOIN S3G_LAD_BillDet BD                                            
           ON BH.Billing_ID=BD.Billing_ID                                                                                                 
           WHERE BD.LOB_ID = d_LOB_ID                                                           
             AND BD.BILLING_LOCATION_ID = D_LOCATION_ID;  
            
           --RAISE_APPLICATION_ERROR(-20001,'d_LastBilling_Date ' || d_LastBilling_Date);
          
          
           d_LastBilling_Date := NVL(d_LastBilling_Date, to_timestamp('01/01/1900', 'MM/DD/YYYY'));  

           IF(d_LastBilling_Date >= d_AccountActivation_Date) THEN                                                         
             d_Billing_Entry := 1;                                             
           END IF; 
           
           INSERT INTO TMP_LA_BillingDetails(ID,InstNo, tValue_Date)                        
           SELECT ROWNUM, Installment_No, InstallmentDate                                                                                             
           FROM S3G_LAD_ACCREPAYSTRUCT                                                                                             
           WHERE P_PA_SA_REF_ID = PA_SA_REF_ID --AND SANUM = D_SUB_REFERENCE_NO                                                                                             
             AND d_LastBilling_Date >= InstallmentDate --AND BillStatus IS NULL
           ORDER BY d_Reference_No;
           
           SELECT Count(1) INTO d_Billing_Details_Master_Count                                                                                             
           FROM TMP_LA_BillingDetails;
           -- Manupulating Billing Details Table End 
           
           IF(d_Billing_Entry = 1) THEN
           
              UPDATE S3G_LAD_AccRepayStruct                                                                                             
              SET BILLSTATUS = 1                                            
              WHERE PA_SA_REF_ID = P_PA_SA_REF_ID --AND SANum = d_Sub_Reference_No                                                                                
              AND d_LastBilling_Date >= InstallmentDate ;
              
              UPDATE S3G_LAD_AccAmortStruct  
              SET BILLSTATUS = 1                                                  
              WHERE PA_SA_REF_ID = P_PA_SA_REF_ID --AND SANum = d_Sub_Reference_No
               AND d_LastBilling_Date >= InstallmentDate ; 
              
--              SELECT COUNT(Lease_Asset_No) INTO d_Global_Dim2_No 
--              FROM S3G_LAD_LEASEASTDET            
--              WHERE PA_SA_REF_ID = P_PA_SA_REF_ID --AND SANUM = D_SUB_REFERENCE_NO
--              AND ROWNUM < 2;
--              
--              IF(d_Global_Dim2_No>0) THEN
--              
--                             SELECT Lease_Asset_No INTO d_Global_Dim2_No 
--              FROM S3G_LAD_LEASEASTDET            
--              WHERE PA_SA_REF_ID = P_PA_SA_REF_ID --AND SANUM = D_SUB_REFERENCE_NO
--              AND ROWNUM < 2;
              
              
--              ELSE
--              
--              d_Global_Dim2_No:=null;
--              
--              END IF;
       
              
--              IF(d_Global_Dim2_No>0) THEN
--              
--                 SELECT Lease_Asset_No INTO d_Global_Dim2_No 
--              FROM S3G_LAD_LEASEASTDET            
--              WHERE PANUM = D_REFERENCE_NO --AND SANUM = D_SUB_REFERENCE_NO
--              AND ROWNUM < 2;
--              
--             ELSE
--             
--             d_Global_Dim2_No:=null;
--              
--              END IF;
              
--              SELECT Lease_Asset_No INTO d_Global_Dim2_No 
--              FROM S3G_LAD_LeaseAstDet            
--              WHERE PANum = d_Reference_No AND SANum = d_Sub_Reference_No
--              AND ROWNUM < 2;
             
              SELECT Count(1) INTO d_Billing_Details_Master_Count                                                                  
              From TMP_LA_BillingDetails;
              
              WHILE(d_Billing_Details_Master_Count >= d_Billing_Details_Record_Count) LOOP
               
                  SELECT tValue_Date, InstNo 
                  INTO d_Billing_Value_Date ,d_Inst_No
                  FROM TMP_LA_BillingDetails                                                                          
                  Where Id = d_Billing_Details_Record_Count AND ROWNUM < 2;
                  
--                  INSERT INTO TMP_LA_CashFlow_New(ROW_ID,CashFlow_Flag_ID,Per_Instalment_Amount)    
--                  SELECT ROWNUM ,CashFlow_Flag_ID, Per_Instalment_Amount     
--                  FROM (SELECT DISTINCT CFM.CashFlow_Flag_ID,Per_Instalment_Amount           
--                        FROM S3G_LAD_AccRepaymntDet ARD          
--                        INNER JOIN S3G_ORG_CashFlowMaster CFM          
--                        ON CFM.CashFlow_ID = ARD.Repayment_CashFlow          
--                        WHERE ARD.PANUM = d_Reference_No AND ARD.SANUM = d_Sub_Reference_No          
--                        AND d_Inst_No BETWEEN ARD.From_Instalment AND ARD.To_Instalment)tbl       
--                  ORDER BY d_Reference_No;
 
                  LA_GET_ACT_BILL(P_PA_SA_REF_ID,d_Reference_No, d_Sub_Reference_No, D_COMPANY_ID, d_Inst_No, d_RESULTSET);
                  
                  LOOP
                    
                    SELECT COUNT('X') INTO d_EXISTS FROM TMP_LA_CashFlow_New;
                    
                    FETCH D_RESULTSET INTO d_RCashFlow_Flag_ID, d_RPer_Instalment_Amount;
                    
                    EXIT WHEN d_RESULTSET%NOTFOUND;
                    
                    INSERT INTO TMP_LA_CashFlow_New(ROW_ID,CashFlow_Flag_ID,Per_Instalment_Amount)
                    VALUES(d_EXISTS + 1,d_RCashFlow_Flag_ID, d_RPer_Instalment_Amount);
                    
                  END LOOP;  
                  
                  SELECT Count(1) INTO d_CF_Flag_MasterCount FROM TMP_LA_CashFlow_New;
             
                  d_CF_Flag_RecordCount := 1; 
                  
                  WHILE(d_CF_Flag_MasterCount >= d_CF_Flag_RecordCount) LOOP
                  
                      SELECT CashFlow_Flag_ID, Per_Instalment_Amount
                      INTO d_Due_Flag, d_Txn_Amount
                      FROM TMP_LA_CashFlow_New
                      Where Row_ID = d_CF_Flag_RecordCount AND ROWNUM < 2;
                      
                      d_Billing_CFM_Master_Count := 2; 
                      d_Billing_CFM_Record_Count := 1; 

                      WHILE(d_Billing_CFM_Master_Count >= d_Billing_CFM_Record_Count) LOOP  -- Loop 3 Start
                      
                         IF(d_Billing_CFM_Record_Count = 1) THEN
                            d_Txn_Type := 0;   
                         ELSE
                            d_Txn_Type := 1;
                         END IF;
                         
                      --   d('TMP_LA_JV_CFMBILLDTL || ' || d_Due_Flag);
                         
                         SELECT COUNT('X') INTO d_Exists
                         FROM TMP_LA_JV_CFMBILLDTL       
                         WHERE tDue_Flag = d_Due_Flag          
                            AND tTxn_Type = d_Txn_Type;
                         
                         If(D_Exists > 0) Then
                           Select  Tgl_Code ,Tsl_Code ,Tacc_Flag ,Tacc_Type  ,Tcashflow_Id    
                           INTO d_GL_Account_No, d_Sub_GL_Account_No , d_Acc_Flag, d_Acc_Type,D_TCASHFLOW_ID
                           FROM TMP_LA_JV_CFMBILLDTL       
                           WHERE tDue_Flag = d_Due_Flag          
                              AND tTxn_Type = d_Txn_Type;
                         END IF;
                      
                         IF(d_Txn_Amount > 0) THEN
                         
                            IF(d_Acc_Type != 1 AND d_Acc_Type != 5) THEN
                                Select FN_Get_Jv_SL_Code(d_Acc_Type,d_Entity_ID) INTO d_Sub_GL_Account_No FROM DUAL;
                            END IF;
                            
                             Select Count('X') Into D_Exists From Tmp_La_Jv_Dettbl;
                              --d('TMP_LA_JV_DETTBL-Check-2');
                             INSERT INTO TMP_LA_JV_DETTBL                                          
                                (ID, tReference_Type ,tReference_No ,tSub_Reference_No                                                             
                                 ,Tvalue_Date ,Tgl_Code ,Tsl_Code ,Ttxn_Amount ,Ttxn_Type                                                                                                                                            
                                 ,Tacc_Flag ,Tdim2_No ,Tdue_Flag,Tentity_Type,Cashflow_Type,Acc_Type,Tcashflow_Flag_Id,TCASHFLOW_ID)                                                                                                         
                             VALUES                                                                                 
                                (d_EXISTS + 1, d_Reference_Type ,d_Reference_No ,d_Sub_Reference_No                                                                                                                                    
                                 ,d_Billing_Value_Date ,d_GL_Account_No ,d_Sub_GL_Account_No                               
                                 ,(CASE WHEN d_Txn_Type = 0                                                                                                       
                                     THEN -1 * (d_Txn_Amount) 
                                     ELSE d_Txn_Amount 
                                  End) ,D_Txn_Type ,D_Acc_Flag ,D_Global_Dim2_No
                                 ,d_Due_Flag,200,200,D_ACC_TYPE,d_Acc_Flag,D_TCASHFLOW_ID);    
                         
                         END IF;
                      
                         d_Billing_CFM_Record_Count := d_Billing_CFM_Record_Count + 1;
                      
                      END LOOP;  -- Biling CFM While Loop End  for Specific Account   -- Loop 3 End
                  
                      d_CF_Flag_RecordCount := d_CF_Flag_RecordCount + 1;
                  
                  END LOOP;
                  
                  DELETE FROM TMP_LA_CashFlow_New;
                  
                  d_Billing_Details_Record_Count := d_Billing_Details_Record_Count + 1;
               
              END LOOP; -- Details While Loop End
            
           END IF;  -- If Billing Entry 1 Then   
 
/*_________________________________ Billing Logic End __________________________*/

/*_________________________ Account Activation NDE Block End ___________________*/


/*_____________________ Account Activation Cash Flow Entry Start________________*/ 
 
          d('TMP_LA_JV_DETTBL-Check-3-DELETE');
             DELETE FROM TMP_LA_JV_DETTBL                                                                                               
             WHERE tTxn_Amount = 0 OR tTxn_Amount IS NULL;
                                                                                                
             DELETE FROM TMP_LA_JV_TMPCFMDTL;  
   
           Insert Into Tmp_La_Jv_Tmpcfmdtl
            (  
                 Tgl_Code,Tsl_Code,Ttxn_Amount,Tacc_Flag,Tacc_Type,TTXN_TYPE,
                 Tacc_Identifier,Tcashflow_Type,Tcashflow_Id,Tcashflow_Flag_Id
            )
            Select 
            Tgl_Code , Tsl_Code , Ttxn_Amount , tAcc_Flag ,Tacc_Type , Ttxn_Type , 
            Tacc_Identifier,Tcashflow_Type,Tcashflow_Id,Tcashflow_Flag_Code 
            FROM TABLE(FN_Journal_GetCFMDetails(d_CFM_Task_ID,d_LOB_ID)); 
             
             
          --open P_OUTTBL for   select * from TMP_LA_JV_TMPCFMDTL;return; 
             
          -- Added By R. MAnikandan to fix duplication entry for Margin Money
          -- Added on 18 - Jun - 2015
          delete from TMP_LA_JV_TMPCFMDTL 
           where TCASHFLOW_FLAG_ID = 43
           and upper(TCASHFLOW_TYPE) = 'OUTFLOW';
--           
             DELETE FROM TMP_LA_JV_CASHFLWDTL; 
   
             INSERT INTO TMP_LA_JV_CASHFLWDTL            
               (ID,tReference_No  , tSubReference_No,                                                                               
                tCashFlow_Component , tTxn_Amount,tCasFlow_Type,tEntity_Type,                                                                                                            
                tEntity_Code,tValue_Date)  
             SELECT  
                ROWNUM, d_Reference_No, d_Sub_Reference_No,COMPONENT_CODE,CASHFLOW_AMOUNT,
                CASHFLOW_TYPE ,CASHFLOW_ENTITY_TYPE,CASHFLOW_ENTITY_CODE,
                S3G_LAD_AccCashFlowDet.CASHFLOW_DATE                                                                                       
             FROM 
                S3G_LAD_AccCashFlowDet                
                INNER JOIN S3G_LAD_AccPASADet PASA              
                ON PASA.PA_SA_REF_ID = S3G_LAD_ACCCASHFLOWDET.PA_SA_REF_ID              
                --AND PASA.SANum  = S3G_LAD_AccCashFlowDet.SANum                                                                                                                      
            WHERE 
                S3G_LAD_ACCCASHFLOWDET.PA_SA_REF_ID = P_PA_SA_REF_ID                                                                  
                --AND S3G_LAD_AccCashFlowDet.SANum = NVL(d_Sub_Reference_No,S3G_LAD_AccCashFlowDet.SANum)                                                                                                                  
                AND S3G_LAD_AccCashFlowDet.Company_ID=d_Company_ID    
                -- Commented By R. MAnikandan Issue in Defered Payment 
--                AND (TO_CHAR(PASA.Account_activated_date, 'MM') = TO_CHAR(S3G_LAD_AccCashFlowDet.CASHFLOW_DATE, 'MM')                    
--                AND TO_CHAR(PASA.Account_activated_date, 'YYYY') = TO_CHAR(S3G_LAD_AccCashFlowDet.CASHFLOW_DATE, 'YYYY'))\
--              Added By R. Manikandan, For Margin Amount (outflow JV should not allowed)
--              ON 19 - Jun - 2015 
--                 AND COMPONENT_CODE NOT IN 
--                (SELECT CASHFLOW_ID FROM s3g_org_cashflowmaster
--                  where CASHFLOW_FLAG_ID = 43 and upper(Flow_type) = 'OUTFLOW' and IS_ACTIVE = 1)
                -- Added by R. Manikandan End 19 - Jun - 2015


           ORDER BY 
                AccountCashFlow_Details_ID ;
             
           d_Outflow_Details_Record_Count := 1; 
           d_Outflow_CFM_Record_Count := 1; 
   
           SELECT COUNT(1) INTO d_Outflow_Details_Master_Count FROM TMP_LA_JV_CASHFLWDTL;
           
        --Open P_Outtbl For Select * From TMP_LA_JV_CASHFLWDTL;Return;    
           --d('d_Outflow_Details_Master_Count==>'||d_Outflow_Details_Master_Count);
           
           While( D_Outflow_Details_Master_Count >= D_Outflow_Details_Record_Count ) Loop    -- Loop 4 Start 
           d('Line-Master');
           
               D_OUTFLOW_CFM_RECORD_COUNT := 1;
               
               SELECT  
                  TREFERENCE_NO, TSUBREFERENCE_NO , TDIM2_NO ,TCASHFLOW_COMPONENT                                                                                       
                  ,tCasFlow_Type , tEntity_Type , tEntity_Code , TVALUE_DATE            
               INTO
                  d_REFERENCE_NO, d_SUB_REFERENCE_NO, d_GLOBAL_DIM2_NO , d_CASH_FLOW_ID, 
                  d_CASFLOW_TYPE , d_ENTITY_TYPE , d_ENTITY_CODE, d_CASHFLOW_VALUE_DATE
               FROM TMP_LA_JV_CASHFLWDTL                                                                                                                                          
               WHERE 
                  Id = d_Outflow_Details_Record_Count;  
           
               SELECT CASHFLOW_FLAG_ID INTO d_CASHFLOW_FLAG_CODE 
               FROM S3G_ORG_CASHFLOWMASTER          
               Where Cashflow_Id = D_Cash_Flow_Id; 
              d('D_CASHFLOW_FLAG_CODE==>'||D_CASHFLOW_FLAG_CODE);
               DELETE FROM TMP_LA_JV_CFMDET;
               
               INSERT INTO TMP_LA_JV_CFMDET
                  (Row_Id ,Tgl_Code ,Tsl_Code ,Ttxn_Amount,Tacc_Flag                                                                                                                                           
                  ,TACC_TYPE ,TTXN_TYPE ,TACC_IDENTIFIER ,TCASHFLOW_ID_FLAG_ID,TCASHFLOW_ID)
               SELECT ROWNUM ,                                                                                                                      
                   Tgl_Code , Tsl_Code , Ttxn_Amount , Tacc_Flag ,                                           
                   TACC_TYPE , TTXN_TYPE , TACC_IDENTIFIER,TCASHFLOW_FLAG_ID,TCASHFLOW_ID                                                                        
               FROM TMP_LA_JV_TMPCFMDTL                                                                                                                                                              
               WHERE TCASHFLOW_FLAG_ID = D_CASHFLOW_FLAG_CODE 
               ORDER BY d_Cash_Flow_ID;
               
               UPDATE TMP_LA_JV_CFMDET 
               SET tTxn_Amount=       
                   (SELECT tTxn_Amount 
                    FROM TMP_LA_JV_CASHFLWDTL 
                    Where Id = d_Outflow_Details_Record_Count);  
                      
             SELECT COUNT(1) INTO d_Outflow_CFM_Master_Count FROM TMP_LA_JV_CFMDET; 
             
             --Open P_Outtbl For Select * From TMP_LA_JV_CFMDET;Return;    
             --Open P_Outtbl For Select * From TMP_LA_JV_CFMDET;Return;    
             D('D_Outflow_Cfm_Master_Count==>'||D_Outflow_Cfm_Master_Count);
             d('D_Outflow_Cfm_Record_Count==>'||D_Outflow_Cfm_Record_Count);
             
               While( D_Outflow_Cfm_Master_Count >= D_Outflow_Cfm_Record_Count ) Loop  -- Loop 5 start
                d('Line-Master-Child');
               
                  SELECT 
                     Tgl_Code ,Tsl_Code , Ttxn_Amount , Tacc_Flag ,Ttxn_Type                                                                                                                                          
                    ,tAcc_Type ,TCASHFLOW_ID_FLAG_ID ,TCASHFLOW_ID
                  INTO
                     D_Gl_Account_No, D_Sub_Gl_Account_No, D_Txn_Amount, D_Acc_Flag, D_Txn_Type, 
                     d_Acc_Type, d_CashFlow_Flag_ID,d_TCASHFLOW_ID
                  FROM TMP_LA_JV_CFMDET 
                  Where Row_Id = d_Outflow_CFM_Record_Count ;
                  
                  IF(d_Acc_Type != 1 AND d_Acc_Type != 5) THEN
                  
                      IF(d_Entity_Type = 144) THEN--If Customer then                                                                
                        D_ACC_TYPE := 3;  
                        
                      BEGIN--PATCH BY SATHISH R MFC CUSTOMIZATION
                      
                      
                       SELECT 
                       COUNT(1) INTO D_COUNT
                        FROM S3g_Sysad_GPSCust_Range gps
                        INNER JOIN S3G_SYSAD_GlobalParameterSetup GS
                        ON gps.Gps_id=GS.Global_Parameters_ID
                        LEFT JOIN S3G_SYSAD_AccountSetupMaster asm
                        ON asm.gl_code=gps.gl_code
                        LEFT JOIN S3G_SYSAD_AccountCodeDesc desc1
                        ON desc1.Account_Code_Desc_ID=asm.Account_Code_Desc_ID
                        AND asm.Is_Active            =1
                        AND asm.Company_ID           =D_COMPANY_ID
                        WHERE CASHFLOW_FLAG_ID       =d_CashFlow_Flag_ID
                        AND GPS.LOB_ID               =D_LOB_ID
                        AND GS.COMPANY_ID            =D_COMPANY_ID;
                      
                      IF(D_COUNT>0)THEN
                      
                      
                              SELECT 
                               GPS.GL_CODE,
                               GPS.SL_CODE,
                               desc1.ACCOUNT_FLAG
                               INTO 
                               D_GL_ACCOUNT_NO,
                               D_SUB_GL_ACCOUNT_NO,
                               D_ACC_FLAG
                              FROM S3g_Sysad_GPSCust_Range gps
                              INNER JOIN S3G_SYSAD_GlobalParameterSetup GS
                              ON gps.Gps_id=GS.Global_Parameters_ID
                              LEFT JOIN S3G_SYSAD_AccountSetupMaster asm
                              ON asm.gl_code=gps.gl_code
                              LEFT JOIN S3G_SYSAD_AccountCodeDesc desc1
                              ON desc1.Account_Code_Desc_ID=asm.Account_Code_Desc_ID
                              AND asm.Is_Active            =1
                              AND asm.Company_ID           =D_COMPANY_ID
                              WHERE CASHFLOW_FLAG_ID       =d_CashFlow_Flag_ID
                              AND GPS.LOB_ID               =D_LOB_ID
                              and GS.COMPANY_ID            =D_COMPANY_ID
                              and rownum<2
                              ;
                            END IF;
                      END;
                  
                        
                        
                        
                        d('D_ENTITY_IDD_ENTITY_IDD_ENTITY_IDD_ENTITY_ID=>'||D_ENTITY_ID);
                      
                      ELSE
                      
                      
                        BEGIN--ENTITY TYPE
                        
                      
                        
                        
                        
                        d_Acc_Type := 4;        
                        d_Entity_ID := d_Entity_Code;
                        
                        select  
                        count(1) into d_count
                        FROM TABLE(FN_TBL_GET_ENTY_DTL(D_ACC_TYPE,D_ENTITY_ID));
                        
                        if(d_count=0)then
                        p_errorcode:=121;
                        return;
                        end if;
                        
                        
                        SELECT  
                           GL_Code ,SL_Code ,Acc_Flag 
                        INTO
                           D_GL_ACCOUNT_NO, D_SUB_GL_ACCOUNT_NO , D_ACC_FLAG
                        FROM TABLE(FN_TBL_GET_ENTY_DTL(D_ACC_TYPE,D_ENTITY_ID));
                        END;
                        
                      END IF;    
                   
     
                    END IF;
                  
                  Select Count('X') into d_rownumber from TMP_LA_JV_DETTBL;
                  d_rownumber := d_rownumber + 1; -- s3g to sfl - kuppu - June 21 - add in insert block line no - 536
                  
                  d('TMP_LA_JV_DETTBL-Check-4');
                  INSERT INTO TMP_LA_JV_DETTBL                                          
                     (ID, tReference_Type ,tReference_No ,tSub_Reference_No                                                             
                     ,Tvalue_Date ,Tgl_Code ,Tsl_Code ,Ttxn_Amount ,Ttxn_Type                                                                                                                                            
                     ,Tacc_Flag ,Tdim2_No ,Tentity_Type ,Tdue_Flag,Cashflow_Type,Acc_Type,Tcashflow_Flag_Id,TCASHFLOW_ID)                                                                                                         
                  VALUES                                                                                 
                     (d_rownumber, d_Reference_Type ,d_Reference_No ,d_Sub_Reference_No                                                                                                                                    
                     ,d_Value_Date ,d_GL_Account_No ,d_Sub_GL_Account_No                               
                     ,(CASE WHEN d_Txn_Type = 0 THEN -(d_Txn_Amount) ELSE d_Txn_Amount END) 
                     ,d_Txn_Type ,d_Acc_Flag ,d_Global_Dim2_No
                     ,(Case D_Casflow_Type When 53 Then D_Entity_Type Else D_Entity_Type End)
                     ,d_CashFlow_Flag_ID,d_CasFlow_Type,D_ACC_TYPE,d_CashFlow_Flag_ID,d_TCASHFLOW_ID);    
                     
                  d_Outflow_CFM_Record_Count := d_Outflow_CFM_Record_Count + 1;
               
               END LOOP;          -- CFM While Loop End  -- -- Loop 5 End  
               
               d_Outflow_Details_Record_Count := d_Outflow_Details_Record_Count + 1;
               
           END LOOP;             -- Details While Loop End   Loop 4 End
           -- Cash Flow Master Other Receivable End
           
/*________________ Account Activation Cash Flow Entry End _____________________*/ 

           d_Details_Record_Count := d_Details_Record_Count + 1; 
         
        END LOOP;     -- Details While Loop End  Loop 2 End
    
    END IF;           -- Loop 1 End 

/*_________________________ Account Activation End ____________________________*/ 

-- Here If Ref Type is Asset then Update Ref and Sub Ref No as NULL

--Open P_Outtbl For Select * From TMP_LA_JV_DETTBL;Return;    

    IF(d_LOB_Code = 'TL' OR d_LOB_Code = 'TE') THEN
    
       SELECT COUNT('X') INTO d_EXISTS
       FROM S3G_LAD_AccOfferROIDet                             
       WHERE 
          PA_SA_REF_ID = P_PA_SA_REF_ID 
          --AND SANum = d_Sub_Reference_No                            
          AND Company_ID = d_Company_ID AND Repayment_Mode_Code IN(4,5);
          
       IF(d_EXISTS > 0) THEN
         d_IS_RRB := 1;
       END IF;   
    END IF;

   IF(d_LOB_Code = 'WC' OR d_LOB_Code = 'FT' OR d_LOB_Code = 'OL' OR d_IS_RRB = 1) THEN                         
      DELETE FROM TMP_LA_JV_DETTBL                                   
      WHERE tDue_Flag IN(41,34,91);                            
   End IF; 

   UPDATE TMP_LA_JV_DETTBL                                                                                                                      
   SET tReference_No = NULL ,tSub_Reference_No = NULL                                                                                                                      
   WHERE tReference_Type = 'ASSET';
   
   UPDATE TMP_LA_JV_DETTBL 
   SET tDim2_Type = 23,tDim2_Code=1                                                                                                                      
   WHERE tDim2_No IS NOT NULL; 
--7466 Start

--Open P_Outtbl For Select * From TMP_LA_JV_DETTBL;Return;    

select COUNT(1) into D_COUNT from TMP_LA_JV_DETTBL;
IF(D_COUNT = 0) THEN           
begin  

   P_ERRORCODE := 120;                         
   P_ERRORMSG := 'Journal not tallied.';                           
        
  RETURN;   
end; 
END IF;


SELECT SUM(TTXN_AMOUNT) into D_TTXN_AMOUNT FROM TMP_LA_JV_DETTBL;
IF(D_TTXN_AMOUNT <> 0) THEN           
BEGIN        
   P_ERRORCODE := 120;                         
   P_ERRORMSG := 'Journal not tallied.';                           
        
  RETURN;   
END; 
END IF;
--7466 End
---------------------------------FA-S3G Integration part validation start---------------------------  
SELECT COUNT('X') INTO D_EXISTS FROM S3G_SYSAD_GlobalParameterSetup WHERE Company_ID=D_COMPANY_ID  and Integrated_System =1;

IF(D_EXISTS > 0) THEN
          SELECT to_clob(REPLACE(REPLACE( XMLELEMENT("Root",
       xmlagg(XMLELEMENT(" ",  
              XMLAGG(XMLELEMENT("Details", 
                     XMLATTRIBUTES(ID "ID" ,TREFERENCE_TYPE "TREFERENCE_TYPE",
                     TREFERENCE_NO "TREFERENCE_NO", TSUB_REFERENCE_NO "TSUB_REFERENCE_NO",
                     --TO_CHAR(TVALUE_DATE, 'MM/DD/YYYY HH12:MI:SS AM') "TVALUE_DATE", 
                     TGL_CODE "TGL_CODE", TSL_CODE "TSL_CODE", 
                     TTXN_AMOUNT "TTXN_AMOUNT", 
                     
--                     (Case When CASHFLOW_TYPE='53' then '0' 
--                     When CASHFLOW_TYPE='55' then '1'
--                     else TTXN_TYPE End) 
                     TTXN_TYPE "TTXN_TYPE", 
                     
                     TACC_FLAG "TACC_FLAG", 
                     TDIM2_TYPE "TDIM2_TYPE", TDIM2_CODE "TDIM2_CODE", TDIM2_NO "TDIM2_NO" 
                   )))) 
            )).GETCLOBVAL() , '< >', ''), '</ >', '')) INTO d_XML_JournalGL 
            FROM TMP_LA_JV_DETTBL
               GROUP BY 
            ID ,TREFERENCE_TYPE, TREFERENCE_NO, TSUB_REFERENCE_NO, TGL_CODE,
            TSL_CODE, TTXN_AMOUNT, TTXN_TYPE,TACC_FLAG, TDIM2_TYPE, TDIM2_CODE,
            Tdim2_No;

   SELECT JV_Date  INTO D_tempJv_Date FROM S3G_JV_Hdr WHERE  Account_Link_Key = D_Account_Link_Key;              
  
--  FAS3G_CHK_VALID (D_COMPANY_ID,D_Location_Code, D_tempJv_Date, D_XML_JournalGL,P_ERRORCODE,P_ERRORMSG,P_OUTTABLE,P_OUTTABLE1);
--            
--                  
--
--   IF( P_ErrorCode > 0 )  THEN                 
--    BEGIN                               
--     RETURN;               
--    END;                             
--   END IF;                  
     
END IF;

---------------------------------FA-S3G Integration part validation end---------------------------    




-----------------------------------FA-S3G Integration part validation start---------------------------
--if exists(select 'x'FROM S3G_SYSAD_GlobalParameterSetup WHERE Company_ID=@Company_ID  and Integrated_System =1)
--begin --FAS3g_Integration
--
--		
--	Declare @XML_JournalGL varchar(max)
--	Set @XML_JournalGL=                                                                                                                                                                
--	(select * from @tblTempJournalDetails For XML Auto)                                                                                    
--	Set @XML_JournalGL=Replace(@XML_JournalGL,'@tblTempJournalDetails','_x0040_tblTempJournalDetails')      
--	
--		print '@XML_JournalGL - '+@XML_JournalGL
--	declare @tempJv_Date datetime
--	select @tempJv_Date=JV_Date from S3G_JOURNAL_Header where Account_Link_Key= @Account_Link_Key
--
--	FAS3G_Chk_Validation @Company_ID,@Location_Code,@tempJv_Date,@XML_JournalGL,@ErrorCode Output                                                                                       
--	,@ErrorMsg Output 
--
--	if(@ErrorCode > 0)
--		begin
--			return;
--		end
--
--
--end --FAS3g_Integration
--		--select ' after @tblTempJournalDetails' as '@tblTempJournalDetails',* from @tblTempJournalDetails
-----------------------------------FA-S3G Integration part validation end---------------------------	


--insert into TMP_LA_JV_DETTBL_DEBUG
--select * from TMP_LA_JV_DETTBL;


   IF(p_Update_Status = 1) THEN            -- Loop 6 Start 
      INSERT INTO S3G_JV_DET                                 
         (S3G_JV_DET_ID,Company_ID ,Account_Link_Key ,Reference_Type                                                                          
          ,Reference_Number ,Sub_Reference_Number ,Value_Date        
          ,Occurrence_No ,Txn_Amount ,GL_Account_Number                                                                          
          ,Sub_Gl_Account_Number ,Accounting_Flag ,Global_Dimension2_Type                                                                          
          ,GLOBAL_DIMENSION2_CODE ,GLOBAL_DIMENSION2_NUMBER,DUE_FLAG,PA_SA_REF_ID,CASHFLOW_ID,CREATED_ON)                                                                          
      SELECT  
           SEQ_S3G_JV_Det.nextval, d_Company_ID ,d_Account_Link_Key ,tReference_Type                                                                            
          , tReference_No ,tSub_Reference_No ,tValue_Date                              
          , Rownum , Ttxn_Amount ,Tgl_Code ,Tsl_Code                                                                             
          , tAcc_Flag ,tDim2_Type ,tDim2_Code ,tDim2_No ,TCASHFLOW_FLAG_ID,P_PA_SA_REF_ID,TCASHFLOW_ID,sysdate                                                                        
      FROM TMP_LA_JV_DETTBL
      --ORDER BY D_ACCOUNT_LINK_KEY
      ;
      
      IF(d_Task_ID = 38)THEN
         
         dbms_output.put_line('reached here');
         
         UPDATE S3G_LAD_AccPASADet                                                                                                                                                    
         SET Account_Link_Key = d_Account_Link_key                                                                                         
         WHERE PA_SA_REF_ID = p_PA_SA_REF_ID                                                                                                                                                
         AND Company_ID = d_Company_ID ;
      END IF;
      
   END IF;      -- Loop 6 End Update Status End 

/*_________________________ DataSet Insertion Start __________________________ */

-- open p_outtbl for           
--select * from TMP_LA_JV_DETTBL;

DELETE FROM TMP_LA_JV_DETTBL                                   
      WHERE tDue_Flag IN(34);
      
    SELECT to_clob(REPLACE(REPLACE( XMLELEMENT("Root",
       xmlagg(XMLELEMENT(" ",  
              XMLAGG(XMLELEMENT("Details", 
                     XMLATTRIBUTES(ID "ID" ,TREFERENCE_TYPE "TREFERENCE_TYPE",
                     TREFERENCE_NO "TREFERENCE_NO", TSUB_REFERENCE_NO "TSUB_REFERENCE_NO",
                     TO_CHAR(TVALUE_DATE, 'MM/DD/YYYY HH12:MI:SS AM') "TVALUE_DATE", 
                     TGL_CODE "TGL_CODE", TSL_CODE "TSL_CODE", 
                     TTXN_AMOUNT "TTXN_AMOUNT", 
                     
                     (Case When CASHFLOW_TYPE='53' then '0' 
                     When CASHFLOW_TYPE='55' then '1'
                     else TTXN_TYPE End) 
                     "TTXN_TYPE", 
                     
                     TACC_FLAG "TACC_FLAG", 
                     TDIM2_TYPE "TDIM2_TYPE", TDIM2_CODE "TDIM2_CODE", TDIM2_NO "TDIM2_NO", 
                     TENTITY_TYPE "TENTITY_TYPE"  , TDUE_FLAG "TDUE_FLAG"
                     )))) 
            )).GETCLOBVAL() , '< >', ''), '</ >', '')) INTO d_XML_Journal
            
--                FROM TMP_LA_JV_DETTBL
--    WHERE (tTxn_Type = 0 AND NVL(tEntity_Type,0) = 144)  
--       OR (tTxn_Type=0 AND NVL(tEntity_Type, 0)=200 )
       -- 200 To Identify Billing Entry
            from( 
        SELECT *  FROM TMP_LA_JV_DETTBL
        where (
        --(TACC_FLAG ='CCA')  
        (ACC_TYPE=3)
        OR (
        NVL(TENTITY_TYPE,0) = 144 
        AND NVL(TDUE_FLAG, 0) IN (102,41) 
        AND TTXN_TYPE=1
        )
        OR (NVL(TENTITY_TYPE,0) = 144 AND NVL(TDUE_FLAG, 0) = 43 AND TTXN_TYPE = 0
        )
        OR (TTXN_TYPE=0 AND NVL(TENTITY_TYPE, 0)=200 )
        )
        and TDUE_FLAG not in(104,29)--subsidy
        union  
        Select *  From TMP_LA_JV_DETTBL                                                                                                                 
        WHERE ((TTXN_TYPE = 1 AND NVL(TENTITY_TYPE,0) = 144)  
        OR (TTXN_TYPE=1 AND NVL(TENTITY_TYPE, 0)=200 )
        )
        -- 200 To Identify Billing Entry
        and TDUE_FLAG IN (104)--subsidy  
       )tbl 
           --Added by saran on 7-Jul-2014 fo
   
    GROUP BY 
          ID ,TREFERENCE_TYPE, TREFERENCE_NO, TSUB_REFERENCE_NO, TVALUE_DATE, TGL_CODE,
          TSL_CODE, TTXN_AMOUNT, TTXN_TYPE,TACC_FLAG, TDIM2_TYPE, TDIM2_CODE,
          TDIM2_NO, TENTITY_TYPE,CASHFLOW_TYPE;
        
        --open p_outtble for select d_XML_Journal from dual;   
    
    IF(d_XML_Journal IS NOT NULL) THEN 
--       dbms_output.put_line('d_XML_Journal : ' || d_XML_Journal);
--       dbms_output.put_line('D_JV_SEQUENCE_TYPE : ' || D_JV_SEQUENCE_TYPE);
--       dbms_output.put_line('d_Doc_No : ' || d_Doc_No);
--       dbms_output.put_line('d_JV_Date : ' || d_JV_Date);
--       dbms_output.put_line('p_JV_Status_Code : ' || p_JV_Status_Code);
       
       LA_INS_DS(D_COMPANY_ID,D_LOB_ID ,D_LOCATION_ID ,D_JV_SEQUENCE_TYPE                                                                              
                ,d_Doc_No ,d_JV_Date ,NULL ,p_User_ID ,d_XML_JOURNAL ,p_JV_Status_Code);
    END IF;
    
/*_________________________ DataSet Insertion End _____________________________*/


/*__________________________ Details Insertion End _____________________________*/


/*_____________ Income Calculation Arrears Installment Start ___________________*/

    IF((d_LOB_Code != 'WC' AND d_LOB_Code != 'FT' AND d_IS_RRB = 0)) THEN  ---Income LOB Code Start
    
       d_Income_Post := 0;
       
       SELECT Frequency INTO d_Frequency_Code
       FROM S3G_LAD_ACCOFFERROIDET    
       Where PA_SA_REF_ID = P_PA_SA_REF_ID --AND SANum = d_Sub_Reference_No
       ;
       
       d_Inc_Rec_Count := 1;
       
       SELECT     
          NVL(MIN(CutOff_Date),FN_TODATE('01/01/1901 12:00:00 AM')),    
          NVL(MAX(CutOff_Date),FN_TODATE('01/01/1901 12:00:00 AM'))    
       INTO
          d_Cutoff_Start_Date, d_Cutoff_End_Date
       FROM S3G_LAD_IncomeRecog    
       WHERE 
           Revoke_Status IS NULL    
           AND Company_ID = d_Company_ID    
           AND LOB_ID = D_LOB_ID    
           AND Location_Code = d_Location_Code    
           AND Frequency_Type = d_Frequency_Code;
    
      SELECT FN_GET_FIRST_DAYOF_MTH(TO_CHAR(D_CUTOFF_START_DATE, 'MM/DD/YYYY HH12:MI:SS AM')) 
      INTO d_Cutoff_Start_Date FROM DUAL;
      
      SELECT COUNT(1) INTO d_EXISTS 
      FROM S3G_LAD_AccAmortStruct AAS    
      WHERE ((FromDate BETWEEN d_Cutoff_Start_Date AND d_Cutoff_End_Date)                                                                                          
            OR(ToDate BETWEEN d_Cutoff_Start_Date AND d_Cutoff_End_Date)                                                                                     
            OR(d_Cutoff_Start_Date BETWEEN FromDate AND ToDate)                                                  
            OR(D_CUTOFF_END_DATE BETWEEN FROMDATE AND TODATE))    
            AND AAS.PA_SA_REF_ID = P_PA_SA_REF_ID 
            --AND AAS.SANUM = D_SUB_REFERENCE_NO
            ;
    
      IF(d_EXISTS > 0) THEN
        d_Income_Post := 1; 
      END IF;
      
      SELECT MIN(FromDate) 
      INTO d_Cutoff_Start_Date
      FROM S3G_LAD_ACCAMORTSTRUCT AAS    
      WHERE AAS.PA_SA_REF_ID = P_PA_SA_REF_ID 
      --AND AAS.SANUM = D_SUB_REFERENCE_NO 
      ; 
    
      select months_between(d_cutoff_start_date,d_cutoff_end_date) + 1 into d_inc_master_count from dual;
      
      
      if(d_income_post = 1) then
        While(D_Inc_Master_Count >= D_Inc_Rec_Count)  
         
         loop
                    
            la_ins_inc_reg (d_company_id, d_lob_id, d_location_id, d_frequency_code,
--                            to_char(d_cutoff_start_date)
                            To_Char(To_timestamp(d_Cutoff_Start_Date),'MM/DD/YYYY'),--Added for date format issue 31-Mar-2015
                            P_User_Id , 2, 0, D_Reference_No,
                            d_Sub_Reference_No,P_PA_SA_REF_ID, d_ErrorCode, d_ErrorMsg);

             d_Cutoff_Start_Date := ADD_MONTHS(d_Cutoff_Start_Date, 1);    
             d_inc_rec_count := d_inc_rec_count + 1; 
                     
         END LOOP;   
      
      END IF;       --Income Valid End
    
    end if;         --Income LOB Code End
    --d('LA_JV_AC_ACTV-FINAL ');
    BEGIN-------Check GL Sum Validation Start
    P_ERRORMSG:=' ';
    S3G_JV_CHKGLSL_SUM(D_DOC_NO,D_COMPANY_ID,to_char(trunc(D_JV_DATE),'MM/DD/YYYY'),P_JV_STATUS_CODE,'A',P_ERRORCODE,P_ERRORMSG);
    END;------
    
    --P_ErrorCode:=8;
  -- DP_AUTO_TRAN('LA_JV_AC_ACTV--LINE END***********');       
    DELETE FROM TMP_LA_JV_DTL;   
--rollback;
    
END LA_JV_AC_ACTV;

/

create or replace
PROCEDURE "LA_INS_AC_CREAT_AP" (
    P_COMPANY_ID             IN NUMBER,
    P_APPLICATION_PROCESS_ID IN NUMBER,
    P_ERRORCODE OUT NUMBER 
    , P_ACCOUNT_NO OUT varchar
    )
AS
  p_hdoc sys.xmltype;
  P_Xmldocid                   NUMBER;
  P_Sanumber                   VARCHAR2(50);
  P_Sa_Status_Code             NUMBER;
  P_Isbasemla                  NUMBER;
  P_Progarm_Id                 NUMBER;
  P_Program_Pk_Id              NUMBER;
  P_Frequency                  NUMBER;
  P_Flag                       NUMBER;
  P_Location_Code              VARCHAR2(30);
  P_Issla_Applicable           NUMBER;
  P_Remainingapplicationamount NUMBER;
  P_Isbasemlaapplicable        NUMBER;
  P_Existingapplicationamount  NUMBER;
  P_Followup_Id                NUMBER;
  P_Followupheaderid           NUMBER;
  P_Recrdcount                 NUMBER;
  P_Pa_Sa_Ref_Id               NUMBER;
  P_Lobname                    VARCHAR2(100);
  P_Varcustomercreditcount     NUMBER;
  P_Varutilizedamount          NUMBER;
  D_Panum                      VARCHAR2(50);
  D_Pa_Status_Code             NUMBER;
  P_Recdcount                  NUMBER;
  D_finyear                    VARCHAR (50);
  P_ACTIVATION_DATE            VARCHAR (50);
  P_ACCOUNTING_DATE            VARCHAR (50);
  P_MLASTATUS                  NUMBER;
  P_IS_MODIFY                  NUMBER;
  --------Base Parameters Start
  p_LOB_ID                      NUMBER;
  P_LOCATION_ID                 NUMBER;
  p_PANum                       VARCHAR(50);
  p_Product_ID                  NUMBER;
  p_Creation_Date               VARCHAR(50);
  p_Customer_ID                 NUMBER;
  p_Sales_Person_ID             NUMBER;
  p_Finance_Amount              NUMBER;
  p_Refinance_Contract          NUMBER;
  p_Constitution_ID             NUMBER;
  p_Lease_Type                  NUMBER ;
  p_PA_Statustype_Code          NUMBER;
  p_PA_Status_Code              NUMBER;
  p_Txn_id                      NUMBER;
  p_Created_By                  NUMBER;
  p_Modified_By                 NUMBER;
  p_Offer_Residual_Value        NUMBER;
  p_Offer_Residual_Value_Amount NUMBER;
  p_Offer_Margin                NUMBER;
  p_Offer_Margin_Amount         NUMBER;
  p_ROIRuleId                   NUMBER ;
  p_PaymentRuleCardId           NUMBER ;
  p_LoanAmount                  NUMBER;
  p_TenureTypeCode              NUMBER ;
  p_TenureCode                  NUMBER ;
  p_Tenure                      NUMBER ;
  p_RepaymentTypecode           NUMBER ;
  p_Repaymentcode               NUMBER ;
  p_RepaymentTimeTypeCode       NUMBER ;
  p_RepaymentTimeCode           NUMBER ;
  p_FBDate                      NUMBER ;
  p_AdvanceInstallments         NUMBER ;
  p_IsDORequired                NUMBER ;
  p_LastODICalcDate             VARCHAR(50) ;
  p_BusinessIRR                 NUMBER;
  p_CompanyIRR                  NUMBER;
  P_ACCOUNTINGIRR               NUMBER;
  P_Xmlalertdetails             VARCHAR(50) ;
  p_XmlGuarantorDetails         VARCHAR(50) ;
  P_Xmlmoratoriumdetails        VARCHAR(50) ;
  P_Xmlfollowupdetail           VARCHAR(50) ;
  P_Xmlrepaymentdetails         VARCHAR(50) ;
  P_Xmlinflowdetails            VARCHAR(50) ;
  P_Xmloutflowdetails           VARCHAR(50) ;
  P_Xmlassetdetails             VARCHAR(50) ;
  P_Xmlroidetails               VARCHAR(50) ;
  P_Xmlconstitutiondocdetails   VARCHAR(50) ;
  p_XmlInvoiceDetails           VARCHAR(50) ;
  P_XML_REPAYMENTSTRUCTURE      VARCHAR(50) ;
  p_SA_Internal_code_Ref        VARCHAR(50) ;
  p_SA_User_Name                VARCHAR(50) ;
  p_SA_User_Address1            VARCHAR(50) ;
  p_SA_User_Address2            VARCHAR(50) ;
  p_SA_User_City                VARCHAR(50) ;
  p_SA_User_State               VARCHAR(50) ;
  p_SA_User_Country             VARCHAR(50) ;
  p_SA_User_Pincode             VARCHAR(50) ;
  p_SA_User_Phone               VARCHAR(50) ;
  p_SA_User_Mobile              VARCHAR(50) ;
  p_Sa_User_Email               VARCHAR(50) ;
  P_Sa_User_Website             VARCHAR(50) ;
  p_DocumentNo                  VARCHAR(50) ;
  P_SPLIT_REFNO                 VARCHAR(50) ;
  P_XMLREPAYDETAILSOTHERS CLOB ;
  --------Base Parameters End
  p_AccountNumber      VARCHAR(50);
  P_ERROR_MESSEGE      VARCHAR(50);
  P_APPLICATION_NUMBER VARCHAR(50) ;
  d_LOB_CODE           VARCHAR(20) ;
  --MFC CUST
  P_FIRST_INSTALMENT_DATE DATE ;
  P_INCOME_BOOKING_START_DATE DATE ;
  P_DELAY_CHARGES_APPLI     NUMBER;
  P_CHARGEABLE_DELAY_DAYS   NUMBER;
  P_DELAY_CHARGE_GRACE_DAYS NUMBER;
  P_DELAY_CHARGE_RATE       NUMBER;
  P_DELAY_CHARGE_AMOUNT     NUMBER;
  P_OVERDUE_CHARGES         NUMBER;
  P_EX_FIRST_CHARGES        NUMBER;
  P_EX_SECOND_CHARGES       NUMBER;
  P_PAYMENT_DUE_DATE DATE ;
  P_DEALER_CREDIT_PERIOD     NUMBER;
  P_COVENANTS                NUMBER;
  P_COVENANTS_CONDI          NUMBER;
  P_EMPLOYER_BANK_NAME       NUMBER;
  P_INSURANCE_AMOUNT         NUMBER;
  P_LIFE_INSURANCE_APPLI     NUMBER;
  P_LIFE_INSURANCE_ENTITY    NUMBER;
  P_INSURANCE_COVERAGE_DAY   NUMBER;
  P_INSURANCE_CUST_RATE      NUMBER;
  P_INSURANCE_COMPANY_RATE   NUMBER;
  P_INSURANCE_PREM_AMOUNT    NUMBER;
  P_INSURANCE_PAYABLE_AMOUNT NUMBER;
  P_DEALER_COMM_APPLI        NUMBER;
  P_RISK_RATING              NUMBER;
  P_RISK_REMARKS             VARCHAR(200) ;
  P_RISK_SCORE               NUMBER;
  P_RISK_DOC_NO              VARCHAR(200) ;
  P_RISK_QUALITY_VALUE       NUMBER;
  P_RISK_AML_CLASS           VARCHAR(200) ;
  P_DEBT_PURCHASE_LIMIT      NUMBER;
  P_EVALUATOR                VARCHAR(200) ;
  P_AUDITOR                  VARCHAR(200) ;
  P_INVOICE_CAP_VALUE        NUMBER;
  P_DISCOUNT_RATE_LOC        NUMBER;
  P_PENAL_RATE               NUMBER;
  P_CREDIT_PERIOD_DAYS       NUMBER;
  P_GRACE_PERIOD_DAYS        NUMBER;
  P_DISP_PERIOD_DAYS         NUMBER;
  P_RESUL_PERIOD_DAYS        NUMBER;
  p_factoring_remarks        varchar(200) ;
  d_documentation_type varchar(10);
  
BEGIN
  -- *********************************************
  -- Author        : Sathish R
  -- Create Date   : 24-Aug-2018
  -- Description   : Insert Account Creation Details for MFC Customization
  -- *********************************************
  EXECUTE Immediate ('Alter session set NLS_COMP = LINGUISTIC');
  EXECUTE Immediate ('Alter session set NLS_SORT = BINARY_CI');
  D_Pa_Status_Code := P_Pa_Status_Code;
  P_Errorcode      := 0;
  p_flag           := 0;
  p_location_Code  := FN_Get_LocationCode(p_location_id);
  BEGIN--Fetch Application Start
    SELECT LOB_ID,
      LOCATION_CODE,
      PRODUCT_ID,
      CONSTITUTION_ID,
      CUSTOMER_ID,
      FINANCE_AMOUNT,
      APPLICATION_NUMBER,
      LOCATION_ID,
      SALES_PERSON_ID,
      FINANCE_AMOUNT,
      REFINANCE_CONTRACT,
      LEASE_TYPE,
      OFFER_RESIDUAL_VALUE,
      OFFER_RESIDUAL_VALUE_AMOUNT,
      OFFER_MARGIN,
      OFFER_MARGIN_AMOUNT,
      PAYMENT_RULE_CARD_ID,
      TENURE_TYPE,
      TENURE,
      RECEIPT_TYPE,--Repayment Mode
      FBDATE,
      ACCOUNTING_IRR,
      BUSINESS_IRR,
      COMPANY_IRR,
      TO_CHAR(APPLICAION_PROCESS_DATE,'MM/DD/YYYY')
      ||' 12:00:00 AM',
      CREATED_BY,
      --MFC
      FIRST_INSTALMENT_DATE ,
      INCOME_BOOKING_START_DATE ,
      DELAY_CHARGES_APPLI ,
      CHARGEABLE_DELAY_DAYS ,
      DELAY_CHARGE_GRACE_DAYS ,
      DELAY_CHARGE_RATE ,
      DELAY_CHARGE_AMOUNT ,
      OVERDUE_CHARGES ,
      EX_FIRST_CHARGES ,
      EX_SECOND_CHARGES ,
      PAYMENT_DUE_DATE ,
      DEALER_CREDIT_PERIOD ,
      COVENANTS ,
      --COVENANTS_CONDI ,
      EMPLOYER_BANK_NAME ,
      INSURANCE_AMOUNT ,
      LIFE_INSURANCE_APPLI ,
      LIFE_INSURANCE_ENTITY ,
      INSURANCE_COVERAGE_DAY ,
      INSURANCE_CUST_RATE ,
      INSURANCE_COMPANY_RATE ,
      INSURANCE_PREM_AMOUNT ,
      INSURANCE_PAYABLE_AMOUNT ,
      DEALER_COMM_APPLI ,
      RISK_RATING ,
      RISK_REMARKS ,
      RISK_SCORE,
      RISK_DOC_NO ,
      RISK_QUALITY_VALUE ,
      RISK_AML_CLASS ,
      DEBT_PURCHASE_LIMIT ,
      EVALUATOR ,
      AUDITOR ,
      INVOICE_CAP_VALUE ,
      DISCOUNT_RATE_LOC ,
      PENAL_RATE ,
      CREDIT_PERIOD_DAYS ,
      GRACE_PERIOD_DAYS ,
      DISP_PERIOD_DAYS ,
      RESUL_PERIOD_DAYS ,
      FACTORING_REMARKS
    INTO P_LOB_ID,
      P_LOCATION_CODE,
      P_PRODUCT_ID,
      P_CONSTITUTION_ID,
      P_CUSTOMER_ID,
      p_Finance_Amount,
      P_APPLICATION_NUMBER,
      P_LOCATION_ID,
      P_SALES_PERSON_ID,
      P_FINANCE_AMOUNT,
      P_REFINANCE_CONTRACT,
      P_LEASE_TYPE,
      P_OFFER_RESIDUAL_VALUE,
      P_OFFER_RESIDUAL_VALUE_AMOUNT,
      P_OFFER_MARGIN,
      P_OFFER_MARGIN_AMOUNT,
      p_PaymentRuleCardId,
      p_TenureCode,
      P_TENURE,
      P_Repaymentcode,
      P_FBDATE,
      P_ACCOUNTINGIRR,
      P_BUSINESSIRR,
      P_COMPANYIRR,
      P_CREATION_DATE,
      P_CREATED_BY,
      --MFC
      P_FIRST_INSTALMENT_DATE ,
      P_INCOME_BOOKING_START_DATE,
      P_DELAY_CHARGES_APPLI ,
      P_CHARGEABLE_DELAY_DAYS ,
      P_DELAY_CHARGE_GRACE_DAYS ,
      P_DELAY_CHARGE_RATE ,
      P_DELAY_CHARGE_AMOUNT ,
      P_OVERDUE_CHARGES ,
      P_EX_FIRST_CHARGES ,
      P_EX_SECOND_CHARGES ,
      P_PAYMENT_DUE_DATE,
      P_DEALER_CREDIT_PERIOD ,
      P_COVENANTS ,
      --P_COVENANTS_CONDI ,
      P_EMPLOYER_BANK_NAME ,
      P_INSURANCE_AMOUNT ,
      P_LIFE_INSURANCE_APPLI ,
      P_LIFE_INSURANCE_ENTITY ,
      P_INSURANCE_COVERAGE_DAY ,
      P_INSURANCE_CUST_RATE ,
      P_INSURANCE_COMPANY_RATE ,
      P_INSURANCE_PREM_AMOUNT ,
      P_INSURANCE_PAYABLE_AMOUNT ,
      P_DEALER_COMM_APPLI,
      P_RISK_RATING ,
      P_RISK_REMARKS ,
      P_RISK_SCORE ,
      P_RISK_DOC_NO ,
      P_RISK_QUALITY_VALUE ,
      P_RISK_AML_CLASS ,
      P_DEBT_PURCHASE_LIMIT ,
      P_EVALUATOR ,
      P_AUDITOR ,
      P_INVOICE_CAP_VALUE ,
      P_DISCOUNT_RATE_LOC ,
      P_PENAL_RATE ,
      P_CREDIT_PERIOD_DAYS ,
      P_GRACE_PERIOD_DAYS ,
      P_DISP_PERIOD_DAYS ,
      P_RESUL_PERIOD_DAYS ,
      P_FACTORING_REMARKS
    FROM S3G_ORG_AppProc
    WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
    P_PA_STATUSTYPE_CODE       :=25;
    P_SA_STATUS_CODE           :=2;
  END;--Fetch Application End
  --DP_AUTO_TRAN('Line-LA_INS_AC_CREAT_AP-Check-1-'||p_Creation_Date);
  BEGIN--Check Fin Year Start
    d_finyear     := S3G_GetFinyear(p_Creation_Date);
    IF(d_finyear   ='0') THEN
      P_Errorcode :=8;
      RETURN;
    END IF;
  END;--Check Fin Year end
  -- DP_AUTO_TRAN('Line-LA_INS_AC_CREAT_AP-Check-2-');
   --DP_AUTO_TRAN('Line-D_PANum==>'||D_PANum||'d_finyear=>'||d_finyear||'P_LOB_ID==>'||P_LOB_ID);
  BEGIN--Document Number Validation Start
  
  
  select LOB_CODE   into D_LOB_CODE  from  s3g_sysad_lobmaster where LOB_ID=P_LOB_ID;
  
    if(D_LOB_CODE='HP') then
      BEGIN
      d_documentation_type:='MLA';
      END;
    else
      begin
      D_DOCUMENTATION_TYPE:='FACT';
      P_Repaymentcode:=null;
      END;
    END IF;
  
  
    IF(D_PANum IS NULL OR NVL(D_PANum,' ') = ' ' OR D_PANum = '0') THEN
      BEGIN
        S3g_Or_Get_Docctrlno(P_Company_Id ,d_documentation_type,1,P_Lob_Id,P_Location_Id ,D_PANum,d_finyear);
        IF (D_PANum = '-1') THEN
          BEGIN
            P_Errorcode := -1;
            RETURN;
          END;
        END IF;
        IF (D_PANum = '-2') THEN
          BEGIN
            P_Errorcode := -2;
            RETURN;
          END;
        END IF;
        p_flag     := 1;
      
       d_panum:=substr(fn_get_locationcode_CAT(p_location_id),4,5)||d_panum;
      -- DP_AUTO_TRAN('Line-LA_INS_AC_CREAT_AP-Check-4-'||d_panum);
        P_Sanumber := D_PANum || 'DUMMY';
        --P_Sa_Status_Code := D_Pa_Status_Code;
        P_ACCOUNTNUMBER := D_PANUM;
        P_ACCOUNT_NO:=D_PANUM;
      END;
    END IF;
  END; --Document Number Validation Start
  --DP_AUTO_TRAN('Line-LA_INS_AC_CREAT_AP-Check-4-');
  BEGIN --Insert Account Creation Header Table Start
    SELECT Seq_Lad_Acccreation.Nextval INTO p_Program_PK_ID FROM dual;
    INSERT
    INTO S3G_LAD_ACCCREATION
      (
        ACCOUNT_CREATION_ID,
        COMPANY_ID,
        LOB_ID,
        LOCATION_CODE,
        LOCATION_ID,
        Panum,
        Product_Id,
        Application_Process_Id,
        Creation_Date,
        Customer_Id,
        Sales_Person_Id,
        Finance_Amount,
        Refinance_Contract,
        Constitution_Id,
        Lease_Type,
        Pa_Statustype_Code,
        Pa_Status_Code,
        Txn_Id,
        Offer_Residual_Value,
        Offer_Residual_Value_Amount,
        Offer_Margin,
        Offer_Margin_Amount,
        Created_By,
        Created_On,
        Modified_By,
        Modified_On,
        Remainin_Application_Amount
      )
      VALUES
      (
        p_Program_PK_ID,
        P_Company_Id,
        P_Lob_Id,
        P_LOCATION_CODE,
        P_LOCATION_ID,
        D_PANum,
        P_Product_Id,
        P_Application_Process_Id,
        fn_todate(P_Creation_Date),
        P_Customer_Id,
        P_Sales_Person_Id,
        P_Finance_Amount,
        P_REFINANCE_CONTRACT,
        P_Constitution_Id,
        P_LEASE_TYPE,
        25,--P_PA_STATUSTYPE_CODE,
        3, --D_PA_Status_Code,
        1, --P_Txn_Id,
        P_Offer_Residual_Value,
        P_Offer_Residual_Value_Amount,
        P_Offer_Margin,
        P_Offer_Margin_Amount,
        P_Created_By,
        Sysdate,
        P_MODIFIED_BY,
        sysdate,
        P_REMAININGAPPLICATIONAMOUNT
      );
    S3G_SYSAD_TRANS_HISTORY(80,p_Program_PK_ID,D_PANum,TO_CHAR(SYSTIMESTAMP,'MM/DD/YYYY'),P_CREATED_BY,1);
    --DP_AUTO_TRAN('Line-LA_INS_AC_CREAT_AP-Check-5-');
  END;--Insert Account Creation Header Table End
  BEGIN
    SELECT ROI.Roi_Rules_Id
    INTO P_Roiruleid
    FROM S3G_ORG_APPPROCOFFERROIDET ROI
    WHERE APPLICATION_PROCESS_ID=p_Application_Process_ID;
  END;
  BEGIN--P_Followup_Id START
    SELECT MAX(Followup_Id) INTO P_Followup_Id FROM S3G_LAD_ACCPASADET;
    IF (P_Followup_Id IS NULL) THEN
      BEGIN
        P_Followup_Id := 1;
      END;
    ELSE
      BEGIN
        P_Followup_Id := P_Followup_Id + 1;
      END;
    END IF;
    SELECT Program_id
    INTO p_Progarm_id
    FROM S3g_Sysad_Programmaster
    WHERE PROGRAM_Code='ACR';
    SELECT Seq_ORG_FollowUp.Nextval INTO P_Followupheaderid FROM dual;
    INSERT
    INTO S3g_Org_Followup
      (
        FOLLOW_UP_ID,
        Program_Id,
        Program_Pk_Id,
        Lob_Id,
        Location_Code,
        Company_Id,
        Panum,
        Sanum,
        Followup_Date,
        Created_By,
        Created_On,
        Modified_By,
        Modofied_On
      )
      VALUES
      (
        P_Followupheaderid,
        P_Progarm_Id,
        P_Program_Pk_Id,
        P_Lob_Id,
        P_LOCATION_CODE,
        P_COMPANY_ID,
        D_PANUM,
        P_SANUMBER,
        sysdate,
        P_Created_By,
        Sysdate,
        p_Created_By,
        Sysdate
      );
    ----------------Clarification Temp Commented
    --            INSERT
    --            INTO S3g_Org_Followupdetail
    --              (
    --                FOLLOW_UP_DETAIL_ID,
    --                follow_up_id,
    --                from_userid,
    --                to_userid,
    --                action,
    --                Followup_Date,
    --                Action_Date,
    --                Customer_Response,
    --                Remarks,
    --                Created_By,
    --                Created_On,
    --                Modified_By,
    --                Modified_On
    --              )
    --            SELECT seq_org_followupdetail.nextval,
    --              P_Followupheaderid,
    --              doc.fromuserid,
    --              doc.touserid,
    --              doc.action,
    --              fn_todate(doc.dates),
    --              FN_TODATE(DOC.ACTIONDATE),
    --              DOC.CUSTOMERRESPONSE,
    --              Doc.Remarks,
    --              P_Created_By,
    --              Sysdate,
    --              P_Created_By,
    --              sysdate
    --              FROM s3g_org_followupdetail WHERE
    --              ;
  END; --P_Followup_Id END
  BEGIN--INSERT S3g_Lad_Accpasadet START
    --  Select Max(Pa_Sa_Ref_Id) Into P_Pa_Sa_Ref_Id
    --    From S3g_Lad_Accpasadet;
    --
    --  if (p_PA_SA_REF_ID is null) Then
    --    Begin
    --      P_Pa_Sa_Ref_Id := 1;
    --    end;
    --  else
    --    Begin
    --      P_Pa_Sa_Ref_Id := P_Pa_Sa_Ref_Id + 1;
    --    End;
    --  End IF;
    SELECT SEQ_S3g_Lad_Accpasadet.NEXTVAL
    INTO P_Pa_Sa_Ref_Id
    FROM dual;
    INSERT
    INTO S3g_Lad_Accpasadet
      (
        ACCOUNT_PA_SA_DETAILS_ID,
        Panum,
        Sanum,
        Company_Id,
        Pa_Sa_Ref_Id,
        Loan_Amount,
        Tenure_Type_Code,
        Tenure_Code,
        Tenure,
        Roi_Rule_Type,
        Roi_Rule_Id,
        Payment_Rule_Card_Id,
        Followup_Id,
        Repayment_Type_Code,
        Repayment_Code,
        Repayment_Time_Type_Code,
        Repayment_Time_Code,
        Fb_Date,
        Advance_Installments,
        Is_Delivery_Order_Require,
        Last_Odi_Date,
        Sa_Internal_Code_Ref,
        Created_Date,
        Created_By,
        Modified_Date,
        Modified_By,
        Sa_Statustype_Code,
        SA_STATUS_CODE,
        BUSINESS_IRR,
        COMPANY_IRR,
        ACCOUNTING_IRR,
        CREATION_DATE,
        FINANCE_AMOUNT,
        ACCOUNT_CREATION_ID,
        First_Instalment_Date,
        INCOME_BOOKING_START_DATE,
        delay_charges_appli,
        CHARGEABLE_DELAY_DAYS,
        delay_charge_Grace_Days,
        DELAY_CHARGE_RATE,
        delay_charge_Amount,
        OVERDUE_CHARGES,
        EX_FIRST_CHARGES,
        Ex_Second_charges,
        PAYMENT_DUE_DATE,
        Dealer_Credit_Period,
        COVENANTS,
        COVENANTS_CONDI,
        Employer_Bank_Name,
        INSURANCE_AMOUNT,
        LIFE_INSURANCE_APPLI,
        LIFE_Insurance_Entity,
        INSURANCE_COVERAGE_DAY,
        INSURANCE_CUST_RATE,
        Insurance_Company_Rate,
        INSURANCE_PREM_AMOUNT,
        INSURANCE_PAYABLE_AMOUNT,
        DEALER_COMM_APPLI,
        Risk_Rating,
        RISK_REMARKS,
        Risk_Score,
        RISK_DOC_NO,
        Risk_Quality_Value,
        RISK_AML_CLASS,
        DEBT_PURCHASE_LIMIT,
        Evaluator,
        AUDITOR,
        INVOICE_CAP_VALUE,
        DISCOUNT_RATE_LOC,
        Penal_rate,
        CREDIT_PERIOD_DAYS,
        GRACE_PERIOD_DAYS,
        DISP_PERIOD_DAYS,
        Resul_Period_Days,
        FACTORING_REMARKS
      )
      VALUES
      (
        Seq_Lad_Accpasadet.Nextval,
        D_PANum,
        P_Sanumber,
        P_Company_Id,
        P_Pa_Sa_Ref_Id,
        P_Loanamount,
        P_Tenuretypecode,
        P_Tenurecode,
        P_Tenure,
        50,
        P_Roiruleid,
        P_Paymentrulecardid,
        P_Followup_Id,
        63,
        P_Repaymentcode,
        P_Repaymenttimetypecode,
        P_REPAYMENTTIMECODE,
        P_FBDATE,
        P_ADVANCEINSTALLMENTS,
        P_ISDOREQUIRED,
        fn_todate(P_Lastodicalcdate),
        P_Sa_Internal_Code_Ref,
        Sysdate,
        P_Created_By,
        SYSDATE,
        P_MODIFIED_BY,
        P_PA_STATUSTYPE_CODE ,
        P_SA_STATUS_CODE,
        P_BUSINESSIRR,
        P_COMPANYIRR,
        P_ACCOUNTINGIRR,
        FN_TODATE(P_CREATION_DATE),
        P_FINANCE_AMOUNT,
        P_PROGRAM_PK_ID,
        P_FIRST_INSTALMENT_DATE,
        P_INCOME_BOOKING_START_DATE,
        P_delay_charges_appli,
        P_CHARGEABLE_DELAY_DAYS,
        P_DELAY_CHARGE_GRACE_DAYS,
        P_DELAY_CHARGE_RATE,
        P_DELAY_CHARGE_AMOUNT,
        P_OVERDUE_CHARGES,
        P_EX_FIRST_CHARGES,
        P_EX_SECOND_CHARGES,
        P_PAYMENT_DUE_DATE,
        P_Dealer_Credit_Period,
        P_COVENANTS,
        P_COVENANTS_CONDI,
        P_EMPLOYER_BANK_NAME,
        P_INSURANCE_AMOUNT,
        P_LIFE_INSURANCE_APPLI,
        P_LIFE_INSURANCE_ENTITY,
        P_INSURANCE_COVERAGE_DAY,
        P_INSURANCE_CUST_RATE,
        P_INSURANCE_COMPANY_RATE,
        P_INSURANCE_PREM_AMOUNT,
        P_INSURANCE_PAYABLE_AMOUNT,
        P_DEALER_COMM_APPLI,
        P_RISK_RATING,
        P_RISK_REMARKS,
        P_RISK_SCORE,
        P_RISK_DOC_NO,
        P_RISK_QUALITY_VALUE,
        P_RISK_AML_CLASS,
        P_DEBT_PURCHASE_LIMIT,
        P_Evaluator,
        P_AUDITOR,
        P_INVOICE_CAP_VALUE,
        P_DISCOUNT_RATE_LOC,
        P_Penal_rate,
        P_CREDIT_PERIOD_DAYS,
        P_GRACE_PERIOD_DAYS,
        P_DISP_PERIOD_DAYS,
        P_RESUL_PERIOD_DAYS,
        P_FACTORING_REMARKS
      );
      
--      IF(D_LOB_CODE='FT')THEN
--      
--      UPDATE S3G_LAD_ACCPASADET SET DEBT_PURCHASE_LIMIT=(NVL(DEBT_PURCHASE_LIMIT,0)+P_DEBT_PURCHASE_LIMIT),  
--      AVAILABLE_FUNDS=nvl(AVAILABLE_FUNDS,0)+P_FINANCE_AMOUNT
--      WHERE PA_SA_REF_ID=P_PA_SA_REF_ID;
--      end if;
      
      
  END; --INSERT S3g_Lad_Accpasadet END
  BEGIN--INSERT S3g_Lad_Accofferroidet START--ROI
    INSERT
    INTO S3g_Lad_Accofferroidet
      (
        Account_Offer_Roi_Details_Id,
        Panum,
        Sanum,
        Company_Id,
        Rate_Type_Code,
        Repayment_Modetype_Code,
        Roi_Rules_Id,
        Model_Description,
        Roi_Rule_Number,
        Return_Pattern,
        Time_Value,
        Frequency,
        Rate,
        Irr_Rest,
        Interest_Calculation,
        Interest_Levy,
        Recovery_Pattern_Year1,
        Recovery_Pattern_Year2,
        Recovery_Pattern_Year3,
        Recovery_Pattern_Rest,
        Insurance,
        Residual_Value,
        Margin,
        Margin_Percentage,
        Rate_Type,
        Repayment_Mode_Code,
        IRR_RATE,
        PA_SA_REF_ID
      )
    SELECT SEQ_LAD_ACCOFFERROIDET.NEXTVAL,
      D_PANUM,
      P_Sanumber,
      P_COMPANY_ID,
      50,
      51,
      Roi.Roi_Rules_Id,
      ROI.MODEL_DESCRIPTION,
      ROI.ROI_RULE_NUMBER,
      Roi.Return_Pattern,
      ROI.TIME_VALUE,
      ROI.FREQUENCY,
      ROI.RATE,
      Roi.Irr_Rest,
      ROI.INTEREST_CALCULATION,
      Roi.Interest_Levy,
      ROI.RECOVERY_PATTERN_YEAR1,
      Roi.Recovery_Pattern_Year2,
      ROI.RECOVERY_PATTERN_YEAR3,
      ROI.RECOVERY_PATTERN_REST,
      Roi.Insurance,
      ROI.RESIDUAL_VALUE,
      ROI.MARGIN,
      ROI.MARGIN_PERCENTAGE,
      ROI.RATE_TYPE,
      ROI.REPAYMENT_MODE,
      ROI.IRR_RATE,
      P_Pa_Sa_Ref_Id
    FROM S3G_ORG_APPPROCOFFERROIDET ROI
    WHERE APPLICATION_PROCESS_ID=p_Application_Process_ID;
  END; --INSERT S3g_Lad_Accofferroidet END--ROI
  BEGIN--INSERT S3g_Lad_Accalertdet START
    INSERT
    INTO S3g_Lad_Accalertdet
      (
        Account_Alert_Details_Id,
        Company_Id,
        Panum,
        Sanum,
        Alerts_Type,
        User_Id,
        Alerts_Sms,
        Alerts_Email,
        PA_SA_REF_ID
      )
    SELECT SEQ_LAD_ACCALERTDET.NEXTVAL,
      P_COMPANY_ID ,
      D_PANUM,
      P_SANUMBER,
      ALERTS_TYPE,
      ALERTS_USERCONTACT,
      CASE
        WHEN UPPER(ALERTS_SMS) = 'TRUE'
        THEN 1
        ELSE 0
      END,
      CASE
        WHEN UPPER(ALERTS_EMAIL) = 'TRUE'
        THEN 1
        ELSE 0
      End,
      P_PA_SA_REF_ID
    FROM S3G_ORG_APPPROCALERTDET
    WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
  END; --INSERT S3g_Lad_Accalertdet END
  BEGIN--INSERT S3g_Lad_Acccashflowdet INFLOW START
    INSERT
    INTO S3g_Lad_Acccashflowdet
      (
        ACCOUNTCASHFLOW_DETAILS_ID,
        COMPANY_ID,
        PANUM,
        SANUM,
        COMPONENT_CODE,
        CASHFLOW_DATE,
        Cashflow_Type,
        CASHFLOW_AMOUNT,
        Cashflow_Entity_Type,
        Cashflow_Entity_Code,
        PA_SA_REF_ID
      )
    SELECT Seq_Lad_Acccashflowdet.NEXTVAL,
      P_COMPANY_ID,
      D_PANUM,
      P_SANUMBER,
      Offer.Cashflow_Id,
      OFFER.APPDATE,
      53,
      OFFER.AMOUNT,
      OFFER.INFLOW_PAYTO,
      Offer.Entity,
      P_PA_SA_REF_ID
    FROM S3g_Org_Appprocofferdet Offer
    INNER JOIN S3g_Org_Cashflowmaster Cashflow
    ON Cashflow.Cashflow_Id = Offer.Cashflow_Id
    LEFT JOIN S3g_Org_Entitymaster Entity
    ON Entity.Entity_Id = Offer.Entity
    LEFT JOIN S3g_Org_Custmaster Customer
    ON Customer.Customer_Id = Offer.Entity
    INNER JOIN S3g_Status_Lookup Status
    ON Status.Id               = Offer.Inflow_Payto
    WHERE Cashflow.Flow_Type  IN ('Inflow','Both')
    AND Status.Type            ='CASH_FLOW_FROM'
    AND APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID
    and Offer.CASHFLOW_TYPE=53
      --ORDER BY OFFER.APPDATE
      ;
  END; --INSERT S3g_Lad_Acccashflowdet INFLOW END
  BEGIN--INSERT S3g_Lad_Acccashflowdet OUTFLOW START
    INSERT
    INTO S3g_Lad_Acccashflowdet
      (
        ACCOUNTCASHFLOW_DETAILS_ID,
        Company_Id,
        Panum,
        Sanum,
        Component_Code,
        Cashflow_Date,
        Cashflow_Type,
        Cashflow_Amount,
        Cashflow_Entity_Type,
        Cashflow_Entity_Code,
        PA_SA_REF_ID
      )
    SELECT SEQ_LAD_ACCCASHFLOWDET.NEXTVAL,
      P_COMPANY_ID,
      D_PANUM,
      P_SANUMBER,
      Offer.Cashflow_Id,
      OFFER.APPDATE,
      55,
      OFFER.AMOUNT,
      OFFER.INFLOW_PAYTO,
      Offer.Entity,
      P_PA_SA_REF_ID
    FROM S3g_Org_Appprocofferdet Offer
    INNER JOIN S3g_Org_Cashflowmaster Cashflow
    ON Cashflow.Cashflow_Id = Offer.Cashflow_Id
    LEFT JOIN S3g_Org_Entitymaster Entity
    ON Entity.Entity_Id = Offer.Entity
    LEFT JOIN S3g_Org_Custmaster Customer
    ON Customer.Customer_Id = Offer.Entity
    INNER JOIN S3g_Status_Lookup Status
    ON Status.Id               = Offer.Inflow_Payto
    WHERE Cashflow.Flow_Type  IN ('Outflow','Both')
    AND Status.Type            ='CASH_FLOW_FROM'
    AND APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID
     and Offer.CASHFLOW_TYPE=55
      --ORDER BY OFFER.APPDATE
      ;
  END;  --INSERT S3g_Lad_Acccashflowdet OUTFLOW END
  BEGIN---INSERT S3G_LAD_ACCGUARANTRDET START
    INSERT
    INTO S3G_LAD_ACCGUARANTRDET
      (
        ACCOUNT_GUARANTOR_DETAILS_ID,
        COMPANY_ID,
        PANUM,
        GUARANTEE_TYPE_CODE,
        GUARANTEE_TYPE,
        GUARANTEE_AMOUNT,
        CHARGE_SEQUENCE,
        Guarantee_Id,
        PA_SA_REF_ID
      )
    SELECT SEQ_LAD_ACCGUARANTRDET.NEXTVAL,
      P_COMPANY_ID,
      D_PANUM,
      62,
      GUARANTEE_TYPE_ID,
      GUARANTEE_AMOUNT,
      CHARGE_SEQUENCE,
      Cum.Customer_Id,
      P_PA_SA_REF_ID
    FROM S3g_Org_Appprocguarantordet Apgd
    INNER JOIN S3g_Org_Custmaster CUM
    ON CUM.Customer_Id = APGD.Guarantee_Id
    INNER JOIN S3g_Status_Lookup Status
    ON Status.Id = Apgd.Guarantee_Type_Id
    INNER JOIN S3g_Status_Lookup Slup
    ON Slup.Id                   = Apgd.Charge_Sequence
    WHERE APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID;
  END;---INSERT S3G_LAD_ACCGUARANTRDET END
  BEGIN--INSERT S3g_Lad_Accrepaymntdet START
    INSERT
    INTO S3g_Lad_Accrepaymntdet
      (
        Account_Repay_Id,
        Panum,
        Sanum,
        Repayment_Cashflow,
        Amount,
        Per_Instalment_Amount,
        Breakup_Percentage,
        From_Instalment,
        To_Instalment,
        From_Date,
        To_Date,
        PA_SA_REF_ID
      )
    SELECT SEQ_LAD_ACCREPAYMNTDET.NEXTVAL,
      T.*
    FROM
      (SELECT D_PANUM,
        P_SANUMBER,
        Repayment_Cashflow,
        AMOUNT,
        PER_INSTALMENT_AMOUNT,
        NVL(Breakup_Percentage,0),
        From_Instalment,
        To_Instalment,
        TO_TIMESTAMP(REPAY.FROM_DATE,'MM-DD-RRRR HH12:MI:SS AM'),
        To_Timestamp(Repay.To_Date,'MM-DD-RRRR HH12:MI:SS AM'),
        P_PA_SA_REF_ID
      FROM S3G_ORG_APPPROCREPAYDET REPAY
      INNER JOIN S3G_ORG_CASHFLOWMASTER CASHFLOW
      ON REPAY.REPAYMENT_CASHFLOW = CASHFLOW.CASHFLOW_ID
      INNER JOIN S3G_ORG_CASHFLOWMASTERPGMMAP CPM
      ON CASHFLOW.CASHFLOW_ID=CPM.CASHFLOW_ID
      AND CPM.PROGRAM_ID     =75--Account Activation
      INNER JOIN S3G_ORG_CASHFLOWMASTERCREDIT CFC
      ON CASHFLOW.CASHFLOW_ID=CFC.CASHFLOW_ID
      INNER JOIN S3G_ORG_CashFlowMasterDebit CFD
      ON Cashflow.Cashflow_Id      =CFD.CashFlow_ID
      WHERE APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID
      ORDER BY APPLICATION_PROCESS_REPAY_ID
      )T ;
  END; --INSERT S3g_Lad_Accrepaymntdet END
  BEGIN--INSERT  S3g_Lad_AccrepaymntdetAmort START
    INSERT
    INTO S3g_Lad_AccrepaymntdetAmort
      (
        ACCOUNT_REPAY_ID,
        PANUM,
        SANUM,
        REPAYMENT_CASHFLOW,
        AMOUNT,
        Per_Instalment_Amount,
        BREAKUP_PERCENTAGE,
        FROM_INSTALMENT,
        TO_INSTALMENT,
        FROM_DATE,
        To_Date,
        PA_SA_REF_ID
      )
    SELECT SEQ_LAD_ACCREPAYMNTDETAMORT.NEXTVAL,
      T.*
    FROM
      (SELECT D_PANUM,
        P_Sanumber,
        Repay.REPAYMENT_CASHFLOW,
        Repay.Amount,
        Repay.PER_INSTALMENT_AMOUNT,
        Repay.BREAKUP_PERCENTAGE,
        Repay.FROM_INSTALMENT,
        Repay.TO_INSTALMENT,
        TO_TIMESTAMP(Repay.FROM_DATE,'MM-DD-RRRR HH12:MI:SS AM'),
        To_Timestamp(Repay.To_Date,'MM-DD-RRRR HH12:MI:SS AM'),
        P_PA_SA_REF_ID
      FROM S3g_Org_AppprocrepaydetAmort Repay
      INNER JOIN S3g_Org_Cashflowmaster Cashflow
      ON Repay.Repayment_Cashflow = Cashflow.Cashflow_Id
      INNER JOIN S3G_ORG_CASHFLOWMASTERPGMMAP CPM
      ON CASHFLOW.CASHFLOW_ID=CPM.CASHFLOW_ID
      AND CPM.PROGRAM_ID     =75--Account Activation
      INNER JOIN S3G_ORG_CASHFLOWMASTERCREDIT CFC
      ON CASHFLOW.CASHFLOW_ID=CFC.CASHFLOW_ID
      INNER JOIN S3G_ORG_CASHFLOWMASTERDEBIT CFD
      ON CASHFLOW.CASHFLOW_ID      =CFD.CASHFLOW_ID
      WHERE APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID
      ORDER BY APPLICATION_PROCESS_REPAY_ID
      )T;
  END; --INSERT  S3g_Lad_AccrepaymntdetAmort END
  BEGIN--INSERT S3g_Lad_Accastdet START
    INSERT
    INTO S3g_Lad_Accastdet
      (
        ASSET_NUMBER,
        Company_Id,
        Pa_Sa_Ref_Id,
        Ref_Slno,
        Asset_Id,
        Asset_Code,
        Asset_Cost,
        Amount_Financed,
        Down_Payment,
        Amount_Paid,
        Block_Depreciation_Percentage,
        Book_Depreciation_Percentage,
        Txn_Id,
        Lob_Id,
        Location_Code,
        Pay_To_Entity_Type,
        Pay_To_Entity_Id,
        Payment_Percentage,
        MARGIN_PERCENTAGE,
        MARGIN_AMOUNT,
        ASSET_DISCOUNT,
        UNIT_COUNT,
        CHASIS_NUMBER,
        ENGINE_NUMBER,
        REGN_NUMBER,
        REGN_NUMBER1,
        REGN_NUMBER2,
        ASSET_STATUS_CODE,
        ASSET_STATUSTYPE_CODE,
        regn_date,
        IS_NEW
      )
    SELECT SEQ_LAD_ACCASTDET.NEXTVAL,
      T.*
    FROM
      (SELECT p_Company_Id,
        P_PA_SA_REF_ID,
        --NVL(APD.SERIAL_NUMBER,1),
       ROW_NUMBER() over(order by APPLICATION_PROCESS_ASSET_ID ),
        Am.ASSET_ID,
        APD.ASSET_CODE,
        APD.NO_OF_UNITS * APD.UNIT_VALUE,
        APD.FINANCE_AMOUNT,
        Apd.MARGIN_AMOUNT AS Down_Payment,-- Down_Payment,
        FINANCE_AMOUNT              AS Amount_Paid,
        Apd.BLOCK_DEPRECIATION_PERCENTAGE,
        APD.BOOK_DEPRECIATION_PERCENTAGE,
        1 AS Txn_Id,
        p_LOB_ID,
        p_location_Code,
        Apd.PAY_TO,
        Apd.ENTITY_ID,
        Apd.PAYMENT_PERCENTAGE,
        Apd.MARGIN_PERCENTAGE,
        Apd.MARGIN_AMOUNT,
        Apd.DISCOUNT_AMOUNT,
        APD.NO_OF_UNITS,
        APD.CHASIS_NUMBER,
        APD.ENGINE_NUMBER,
        Apd.REGN_NUMBER,
        APD.REGN_NUMBER1,
        APD.REGN_NUMBER2,
        1 AS ASSET_STATUS_CODE,--Performing Well
        1,
        regn_date,
        IS_NEW
      FROM S3g_Org_Appprocassetdet Apd
      LEFT JOIN S3g_Org_Assetmaster Am
      ON Am.ASSET_ID = Apd.ASSET_ID
      LEFT JOIN S3g_Org_Proforma Pro
      ON Pro.Ref_Doc_No    = Apd.Application_Process_Id
      AND Pro.Ref_Doc_Type = 3
      LEFT JOIN S3g_Lad_Leaseastreg Lar
      ON Lar.Lease_Asset_No = Apd.Lease_Asset_No
      LEFT OUTER JOIN S3g_Org_Entitymaster Em
      ON Apd.Entity_Id = Em.Entity_Id
      LEFT OUTER JOIN S3G_ORG_CUSTMASTER CUM
      ON APD.ENTITY_ID=CUM.CUSTOMER_ID
      LEFT JOIN S3G_STATUS_LOOKUP SLUP
      ON SLUP.ID                       = APD.PAY_TO
      AND SLUP.TYPE                    ='PAY_TO'
      WHERE Apd.APPLICATION_PROCESS_ID = P_APPLICATION_PROCESS_ID
      ORDER BY Apd.Application_Process_Asset_ID ASC
      )T;
  END;--INSERT S3g_Lad_Accastdet END
  -- d('P_SANumber=>'||P_SANumber);
  BEGIN--INSERT  S3G_LAD_ACCREPAYSTRUCT START
    INSERT
    INTO S3G_LAD_ACCREPAYSTRUCT
      (
        PANUM,
        SANUM,
        NOOFDAYS,
        INSTALLMENT_NO,
        FROMDATE,
        TODATE,
        INSTALLMENTDATE,
        INSTALLMENTAMOUNT,
        INTEREST,
        INSURANCEAMOUNT,
        OTHERS,
        FINANCECHARGES,
        TAX,
        TAXSETOFF,
        BILLSTATUS,
        PRINCIPALAMOUNT,
        ACCOUNT_REPAYSTRUCTURE_ID,
        PA_SA_REF_ID
      )
    SELECT D_PANUM,
      P_SANumber,
      NOOFDAYS,
      INSTALLMENT_NO,
      FROMDATE,
      TODATE,
      INSTALLMENTDATE,
      INSTALLMENTAMOUNT,
      INTEREST,
      INSURANCEAMOUNT,
      OTHERS,
      FINANCECHARGES,
      TAX,
      TAXSETOFF,
      BILLSTATUS,
      PRINCIPALAMOUNT,
      SEQ_LAD_ACCREPAYSTRUCT.NEXTVAL,
      P_PA_SA_REF_ID
    FROM S3G_ORG_APPREPAYSTRUCT
    WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
  END;----INSERT  S3G_LAD_ACCREPAYSTRUCT  END
  BEGIN --S3G_LAD_ACCREPAYSTRUCT_EXTN INSERT START
    INSERT
    INTO S3G_LAD_ACCREPAYSTRUCT_EXTN
      (
        ACCREPAYSTRUCT_EXTN_ID,
        APPLICATION_PROCESS_ID,
        CASHFLOW_FLAG_ID,
        INSTALMENT_AMOUNT,
        INSTALMENT_DATE,
        INSTALMENT_NO,
        PA_SA_REF_ID
      )
    SELECT SQ_S3G_LAD_ACCREPAYSTRUCT_EXN.NEXTVAL,
      APPLICATION_PROCESS_ID,
      CASHFLOW_FLAG_ID,
      INSTALMENT_AMOUNT,
      INSTALMENT_DATE,
      INSTALMENT_NO,
      P_Pa_Sa_Ref_Id
    FROM S3G_ORG_APPREPAYSTRUCT_EXTN
    WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
  END; --S3G_LAD_ACCREPAYSTRUCT_EXTN INSERT END
  BEGIN--S3G_LAD_ACC_DEAL_TRAN INSERT START
    INSERT
    INTO S3G_LAD_ACC_DEAL_TRAN
      (
        ACC_DEAL_TRAN_ID,
        FINANCE_AMOUNT,
        OLD_PA_SA_REF_ID,
        PA_SA_REF_ID
      )
    SELECT SQ_S3G_ORG_APP_DEAL_TRAN.NEXTVAL,
      FINANCE_AMOUNT,
      PA_SA_REF_ID,
      P_Pa_Sa_Ref_Id
    FROM S3G_ORG_APP_DEAL_TRAN
    WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
  END; --S3G_LAD_ACC_DEAL_TRAN INSERT END
  BEGIN--S3G_LAD_ACC_DIS_UTIL INSERT START
    INSERT
    INTO S3G_LAD_ACC_DIS_UTIL
      (
        ACC_DIS_UTIL_ID,
        DISC_RATE,
        END_SLAB,
        PA_SA_REF_ID,
        START_SLAB
      )
    SELECT SQ_ACC_DIS_UTIL_ID.NEXTVAL,
      DISC_RATE,
      END_SLAB,
      P_Pa_Sa_Ref_Id,
      START_SLAB
    FROM S3G_ORG_APP_DIS_UTIL
    WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
  END; --S3G_LAD_ACC_DIS_UTIL INSERT END
  BEGIN--INSERT S3G_ORG_APP_FACT_CHARGE START
    INSERT
    INTO S3G_LAD_ACC_FACT_CHARGE
      (
        ACC_FACT_CHARGE_ID,
        CASHFLOW_FLAG_ID,
        CHARGE_AMOUNT,
        CHARGE_FREQUENCY,
        CHARGE_TYPE,
        IS_ACTIVE,
        PA_SA_REF_ID,
        CASHFLOW_ID
      )
    SELECT SQ_ACC_FACT_CHARGE_ID.NEXTVAL,
      CASHFLOW_FLAG_ID,
      CHARGE_AMOUNT,
      CHARGE_FREQUENCY,
      CHARGE_TYPE,
      IS_ACTIVE,
      P_PA_SA_REF_ID,
      CASHFLOW_ID
    FROM S3G_ORG_APP_FACT_CHARGE
    WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
  END; --INSERT S3G_ORG_APP_FACT_CHARGE START
  BEGIN--S3G_LAD_ACC_Sublimit INSERT START
    INSERT
    INTO S3G_LAD_ACC_SUBLIMIT
      (
        ACC_FACT_SUBLIMIT_ID,
        CUTOFF_DATE,
        ENTITY_ID,
        LIMIT_VAL,
        PA_SA_REF_ID
      )
    SELECT SEQ_S3G_ORG_APP_SUBLIMIT.nextval,
      CUTOFF_DATE,
      ENTITY_ID,
      LIMIT_VAL,
      P_Pa_Sa_Ref_Id
    FROM S3G_ORG_APP_SUBLIMIT
    WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
  END;--S3G_LAD_ACC_Sublimit INSERT END
  -- Asset Details Begin --
  IF (p_DocumentNo IS NOT NULL) THEN
    BEGIN
      IF (p_Split_RefNo IS NULL) THEN
        BEGIN
          La_Upd_Ac_Sts_Split_Conso(P_Documentno,p_AccountNumber,P_Company_Id,'1');
        END;
      ELSE
        BEGIN
          La_Upd_Ac_Sts_Split_Conso(P_Documentno,p_AccountNumber,P_Company_Id,'5',P_Split_Refno);
        END;
      END IF;
    END;
  END IF;
  IF (p_SANumber = D_PANum || 'DUMMY') THEN
    BEGIN
      p_AccountNumber := D_PANum;
    END;
  ELSE
    BEGIN
      p_AccountNumber := P_Sanumber;
    END;
  END IF;
  IF (p_IsBaseMLA = 0) THEN
    BEGIN
      SELECT COUNT(customer_id)
      INTO p_varCustomerCreditCount
      FROM S3g_Org_Custcrdtdet
      WHERE Lob_Id                 = P_Lob_Id
      AND product_id               = p_Product_Id
      AND Customer_Id              = p_Customer_ID;
      IF (p_varCustomerCreditCount = 0) THEN
        BEGIN
          INSERT
          INTO S3g_Org_Custcrdtdet
            (
              CUSTOMER_CREDIT_DETAIL_ID,
              Customer_Id,
              Lob_Id,
              Product_Id,
              Utilized_Amount,
              Sanctioned_Amount,
              Valid_Upto,
              Facitlity_Type
            )
            VALUES
            (
              Seq_Org_Custcrdtdet.Nextval,
              P_Customer_Id,
              P_Lob_Id,
              P_Product_Id,
              P_Finance_Amount,
              --Modified By Ganapathy
              Fn_S3g_Get_Sanctionedamt(P_Lob_Id,P_Product_Id,P_Customer_Id)
              --END
              ,
              NULL,
              1
            );
        END;
      ELSE
        BEGIN
          SELECT SUM(Utilized_Amount)
          INTO p_varUtilizedAmount
          FROM S3g_Org_Custcrdtdet
          WHERE Lob_Id    = P_Lob_Id
          AND Product_Id  = P_Product_Id
          AND Customer_Id = P_Customer_Id
          GROUP BY Customer_Id,
            Lob_Id,
            Product_Id;
          P_Varutilizedamount := P_Varutilizedamount + P_Finance_Amount;
          UPDATE S3g_Org_Custcrdtdet
          SET Utilized_Amount = P_Varutilizedamount,
            --Modified By Ganapathy Begin
            Sanctioned_Amount=Fn_S3g_Get_Sanctionedamt(P_Lob_Id,P_Product_Id,P_Customer_Id)
            -- END
          WHERE Lob_Id    = P_Lob_Id
          AND Product_Id  = P_Product_Id
          AND Customer_Id = P_Customer_Id;
        END;
      END IF;
    END;
  END IF;
  /*P_Xml := Null;
  Select Count(1) into P_Recdcount
  From S3g_Xml_Repos Where Sess_Id = P_Sess_Id
  And upper(Xml_Name) ='XMLINVOICEDETAILS';
  IF ( P_Recdcount > 0 ) Then
  Begin
  Select Xml_Data Into P_Xml
  From S3g_Xml_Repos Where Sess_Id = P_Sess_Id
  And Upper(Xml_Name) ='XMLINVOICEDETAILS';
  p_hdoc := sys.xmltype.createxml(P_Xml);*/
  IF ( p_XmlInvoiceDetails IS NOT NULL ) THEN
    BEGIN
      p_hdoc  := SYS.XMLTYPE.createXML(p_XmlInvoiceDetails);
      FOR Inv IN
      (SELECT Extractvalue(Value(X),'/Details/@INVOICETRANSACTIONREFERENCE') Invoicetransactionreference
      FROM TABLE (Xmlsequence (P_Hdoc.Extract ('//Root/Details'))) X
      )
      LOOP
        INSERT
        INTO S3g_Lad_Accinvdet
          (
            ACCOUNT_INVOICE_DETAILS_ID,
            Company_Id,
            Panum,
            Sanum,
            INVOICE_REFERENCE_ID,
            PA_SA_DETAILS_ID
          )
          VALUES
          (
            SEQ_LAD_ACCINVDET.NEXTVAL,
            P_Company_Id,
            D_PANum,
            P_Sanumber,
            Inv.INVOICETRANSACTIONREFERENCE,
            p_PA_SA_REF_ID
          );
      END LOOP;
    END;
  END IF;
  SELECT LOB_CODE
  INTO d_LOB_CODE
  FROM S3G_SYSAD_LOBMASTER
  where LOB_ID        =P_LOB_ID;
  --IF(upper(d_LOB_CODE)='HP' or upper(d_LOB_CODE)='TL')THEN--LOB CODE HP START
    BEGIN                       --INSERT ACCOUNT ACTIVATION START
      IF(P_ERRORCODE=0)THEN
        BEGIN
          P_ACTIVATION_DATE :=P_CREATION_DATE;
          P_ACCOUNTING_DATE :=P_CREATION_DATE;
          P_MLASTATUS       :=0;
          P_IS_MODIFY       :=0;
          --DP_AUTO_TRAN('Line-LA_INS_AC_CREAT_AP==>LA_INS_AC_ACTV_AP-Check-6-');
          LA_INS_AC_ACTV_AP( P_COMPANY_ID, P_LOB_ID, P_LOCATION_ID, D_PANum, P_PANUM||'DUMMY', P_SANUMBER, P_CREATED_BY,p_PA_SA_REF_ID, P_ACTIVATION_DATE, P_ACCOUNTING_DATE, P_MLASTATUS, P_IS_MODIFY, 0,--IS REVOKE
          P_XML_REPAYMENTSTRUCTURE, P_XMLREPAYMENTDETAILS, P_XMLOUTFLOWDETAILS, P_XMLINFLOWDETAILS, P_ACCOUNTINGIRR, P_BUSINESSIRR, P_COMPANYIRR, P_XMLREPAYDETAILSOTHERS, P_ACCOUNTNUMBER, P_ERRORCODE, P_ERROR_MESSEGE );
        END;
      END IF;
    END; --INSERT ACCOUNT ACTIVATION END
  --end if;--LOB CODE HP END
END LA_INS_AC_CREAT_AP;


/

create or replace
PROCEDURE "LA_TL_JV" 
(                                        
         P_LOB_ID int := null                                         
       , P_BRANCH int := null                                        
       , P_ACTIVERECORDS int := null                                        
       , P_STARTDATE varchar2 := null                                        
       , P_ENDDATE varchar2 := null                                                                    
       , P_MJV_ID int:=null                                        
       , P_COMPANY_ID int:=0                                                   
       , P_User_ID Int:=0                                                                  
       , P_CurrentPage Int                                                                    
       , P_PAGESIZE int                      
       , P_SEARCHVALUE varchar2
       , P_ORDERBY varchar2
       , P_TOTALRECORDS OUT int
       , P_OUTTBL OUT SYS_REFCURSOR
 )                                                                        
As                     
-- =============================================                                                                          
-- Author        :  SENTHILKUMAR P                                                                  
-- Create Date   :  01/DEC/2011
-- Description   :  To Get MJV No List                    
-- Modified BY   :  Shibu                                                                   
-- Modified Date :  21-Oct-2013                                                                       
-- =============================================                     
                                                
      D_TBLVALUE  varchar2(7800);                                                                  
      D_CONDITION varchar2(700);
      D_LOCATION_CODE varchar2(30);
      D_OrderBy varchar2(300);
       
-- S3G_ORG_FieldInformationReport                                                                
-- Create temp table structure of select query                                                                
                                                        
BEGIN                    


      D_Location_Code:=FN_Get_LocationCode(P_Branch);
          
       /*   SELECT Account_Link_Key     
           , SYS.Created_By                                            
           , USER_LEVEL_ID                                       
           , SYS.JV_Char_Set ||'/'|| SYS.JV_Sequence_Number As JournalNumber    
           , SYS.JV_Date                  
           , LOB.LOB_Code || ' - ' || LOB.LOB_Name    as LOB_Code                                        
           , LM.Location_code || ' - ' || LocationCat_Description  as Location_code                                         
           , 0 AS RowNumber                                                                  
--          Into #tempInvoice                                                                  
          FROM S3G_JV_Hdr SYS                                            
          inner join S3G_SYSAD_LocationMaster LM on LM.Location_Code = SYS.Location_Code    
          inner join dbo.S3G_SYSAD_LOBMaster LOB on LOB.LOB_ID = SYS.LOB_ID     
          INNER JOIN S3G_SYSAD_LocationCategory LC ON LC.Location_Code = LM.Location_Code    
          Inner JOIN S3G_Sysad_UserMaster                                             
          on S3G_Sysad_UserMaster.User_ID=SYS.Created_By                                     
          --Code End                                          
            where 0=1; */
                                       
     
--     TMP_TBL_LA_TL_MJVDTL 

delete from TMP_TBL_LA_TL_MJVDTL;
     
                                                                
      if (D_ORDERBY ='' or D_ORDERBY is null) then                                 
        D_ORDERBY:=' Account_Link_Key Desc ';
      end if;  
                                                                
-- Set where condition                             
                                                                
    D_CONDITION :=' Where ( SYS.Company_ID=' || P_COMPANY_ID ||' OR '|| P_COMPANY_ID || '=0) ';                                        
    d_Condition:=d_Condition ||' AND SYS.JV_Status_Code=1';
  
                                       
    if (( P_MJV_ID is not null) or (P_MJV_ID > 0)) THEN                                                                
         begin                                        
            D_Condition :=  D_Condition || ' and SYS.Account_Link_Key = ' || P_MJV_ID  || ' ';
         end;
    END IF;     
                                        
                    
    if ((( P_STARTDATE is not null) or (P_STARTDATE > 0))                                         
                and (( P_EndDate is not null) or (P_EndDate > 0))) THEN                                                                
     begin                                        
            D_CONDITION :=  D_CONDITION || ' and  SYS.JV_Date
              between ' || '''' || fn_todate(P_StartDate) || '''' || ' and ' || '''' || fn_todate(P_EndDate) || '''';                    
    end;
    END IF;
                    
                
      if ( P_StartDate is null) and (P_EndDate is not null) THEN                   
        begin                                  
           D_CONDITION :=  D_CONDITION || ' and SYS.JV_Date <= ' || '''' || FN_TODATE(P_ENDDATE)|| '''' || ' ';
        end;                           
      END IF;
      
      if (P_EndDate is null) and (P_StartDate is not null) THEN                   
        begin                                  
              D_CONDITION :=  D_CONDITION || ' and SYS.JV_Date >= ' || '''' || FN_TODATE(P_STARTDATE) || '''' || ' ';
        end;                                        
       end if; 
                                        
      if (( P_Branch is not null) or (P_Branch > 0)) THEN                                                                
           begin                                       
            D_CONDITION :=  D_CONDITION || ' and SYS.Location_Code = ''' || D_LOCATION_CODE || ''' ';
          end;                                                      
       END IF;  
                                        
      if ((P_LOB_ID is not null) or (P_LOB_ID > 0)) THEN
           begin                                        
                D_Condition :=  D_Condition || ' and SYS.LOB_ID = ' || P_LOB_ID ||  ' ';                                         
           end;
      END IF;                                            
                                                                
-- Concatinate condtions with select query and insert the records into temp table to                                
-- get records based on current page and page size            
--User Authorization Inner join Inside string query S3G_Sysad_UserMaster                               
                                          
--User Authorization                                  
                              
--print @condition                                                              
                            
          D_tblValue :=                                                                        
          '                                                                  
          Insert Into TMP_TBL_LA_TL_MJVDTL                                                                  
          
          SELECT TBL.*, ROWNUM FROM (                             
          SELECT SYS.Account_Link_Key as  Account_Link_Key                                        
           , SYS.Created_By                                            
           , User_Level_ID                         
           , DOCUMENT_NO As JournalNumber                                        
           , SYS.JV_Date 
           , Lookup_Description
           , LOB.LOB_Code || '' - '' || LOB.LOB_Name                                        
           , UserLocM.Location_code || '' - '' || UserLocM.LocationCat_Description                                          
          FROM S3G_JV_Hdr  SYS           
          INNER JOIN S3G_LAD_LookupTypeDet LKP                        
          ON (SYS.JV_Statustype_Code=LKP.LookupType_Code                        
          AND SYS.JV_Status_Code = LKP.Lookup_Code) 
          Left join S3G_SYSAD_LocationMaster LM
          on LM.Location_Code = SYS.Location_Code
          Left join S3G_SYSAD_LOBMaster LOB
          on LOB.LOB_ID = SYS.LOB_ID
          Inner JOIN S3G_Sysad_UserMaster
          on  S3G_Sysad_UserMaster.User_ID=SYS.Created_By
          
          left JOIN S3G_VW_UserLOBLocMap UserLocM
          ON (UserLocM.User_ID='|| P_User_ID ||'  
          AND SYS.LOB_ID=UserLocM.LOB_ID AND SYS.Location_Code=UserLocM.Location_Code
           AND UserLocM.Program_ID =77 )
                         
          left JOIN S3G_SysAd_LOBMaster                  
          ON (S3G_SysAd_LOBMaster.LOB_ID=SYS.LOB_ID)                  
                            
          left JOIN S3G_SysAd_LocationMaster                  
          ON (S3G_SysAd_LocationMaster.Location_Code=SYS.Location_Code)               
            
                                                           
          '||  D_Condition ||  ') TBL  ORDER BY '|| D_ORDERBY;                                                                      
                                          
--User Authorization code end                                          
--print @tblValue                                                          
     
--Print @tblValue                  
    d(D_tblValue);
    EXECUTE IMMEDIATE (D_tblValue);

    OPEN P_OUTTBL FOR 
      SELECT                                          
         MJV_ID as ID                              
       , Created_By                                       
       , USER_LEVEL_ID                                         
       , LOB_CODE as "Line of Business"                                        
       , LOCATION_CODE as "Location"                                
       , GETUSERDATEFORMAT(MANUAL_JV_DATE,P_COMPANY_ID) as "Sys JV Date"                                    
       , MANUAL_JV_NO  AS  "Sys JV Number"     
       , APPROVALSTATUS AS "Status"
       from TMP_TBL_LA_TL_MJVDTL Invoice                                        
       WHERE ROWNUMBER BETWEEN                                                                         
        (P_CURRENTPAGE-1)* P_PAGESIZE + 1  AND (P_CURRENTPAGE)*P_PAGESIZE;
       -- order by MANUAL_JV_NO desc;
                                      
      SELECT Count(1) INTO P_TotalRecords FROM TMP_TBL_LA_TL_MJVDTL;
      
      delete from TMP_TBL_LA_TL_MJVDTL;
                        
End LA_TL_JV;

/

create or replace
PROCEDURE "S3G_LAD_TRAN_COMMON_INS_APPR" 
(
         P_LOB_ID IN NUMBER := nULL
        ,P_Location_ID IN NUMBER:=nULL
        ,P_Approval_ID IN NUMBER :=NULL         
        ,P_Task_Number IN VARCHAR2:=NULL 
        ,P_Task_Type IN VARCHAR2  :=NULL        
        ,P_Task_Status_Type_Code IN NUMBER :=NULL         
        ,P_Task_Status_Code  IN VARCHAR2 :=NULL
        ,P_APPROVAL_SERIAL_NUMBER in varchar2:=NULL
        ,P_TASK_STATUSDATE  IN VARCHAR2 :=NULL
        ,P_Remarks IN VARCHAR2 :=NULL
        ,P_Password IN VARCHAR2  :=NULL      
        ,P_CREATED_BY IN NUMBER :=NULL
        ,P_COMPANY_ID IN NUMBER:=NULL
        ,P_CUSTOMERID IN NUMBER:=0
        ,P_IMAGE_PATH VARCHAR2:=NULL                            
        ,P_IS_mobile int :=null
        ,P_ACTION_ID NUMBER:=NULL  
        ,P_ENTITY_TYPE NUMBER:=NULL
        ,P_XML_APPROVALDETAILS clob:= null
        ,P_TASK_APPROVAL_NO OUT varchar2
        ,P_ERRORCODE OUT NUMBER 
        ,p_Is_ForceApproval Number      --Added on 06-Dec-2018
--        ,P_ERRORMSG OUT VARCHAR2
--       ,P_OUTTBL OUT SYS_REFCURSOR
)
AS 
  D_HDR_ID NUMBER;
  D_Constdoc_Xml Sys.Xmltype;
  D_LOCATION_ID NUMBER;
  D_TASK_APPROVAL_NO NUMBER;
  D_Document_Type_Code Varchar2(15);
   d_RESULTSET SYS_REFCURSOR;
  D_APPROVAL_SERIAL_NUMBER NUMBER;
  D_APPROVAL_ID NUMBER;
  D_DOCUMENT_ID NUMBER;
  D_ERROR_CODE NUMBER;
  D_COUNT int;
  D_COL13_VARCHAR_MESSEGE VARCHAR(2000);
  D_APPLICATION_NUMBER VARCHAR(500);
  D_PANUM VARCHAR(500);
  D_INVOICE_AMOUNT  NUMBER;
  D_MARGIN_PERCENTAGE number(25,4);
  P_ERRORMSG VARCHAR(100);
  D_ACCOUNT_NO VARCHAR(100);
Begin
  delete from TMP_TBL_LAD_COMMON;
  EXECUTE IMMEDIATE ('Alter session set NLS_COMP = LINGUISTIC');
  EXECUTE IMMEDIATE ('Alter session set NLS_SORT = BINARY_CI');

  D_Document_Type_Code:='CAPR';
--P_ErrorCode:=0;
IF(P_Location_ID IS NOT NULL AND P_Location_ID>0)THEN
  BEGIN
      D_LOCATION_ID := P_Location_ID;
  END;
ELSE
  BEGIN
      D_LOCATION_ID := NULL;
  END;
end if;

if(P_TASK_TYPE='PRAP')then
  Begin
    -- To Validate Approval Details for Pricing
    S3G_LAD_GET_PRICAPPR_VALIDATE(P_TASK_NUMBER,P_APPROVAL_ID,P_APPROVAL_SERIAL_NUMBER,P_TASK_TYPE,P_ACTION_ID,P_COMPANY_ID
    ,P_XML_APPROVALDETAILS,P_CREATED_BY,P_TASK_STATUS_CODE
    ,p_Is_ForceApproval
    );--, d_RESULTSET
  END;
elsIF(P_TASK_TYPE='APAP')THEN
  begin
    -- To Validate Approval Details With All Approval Screens.
    S3G_LAD_GET_APPR_VALIDATE(P_TASK_NUMBER,P_APPROVAL_ID,P_APPROVAL_SERIAL_NUMBER,P_TASK_TYPE,P_ACTION_ID,P_COMPANY_ID
    ,P_XML_APPROVALDETAILS,P_CREATED_BY,P_TASK_STATUS_CODE,p_Is_ForceApproval);--, d_RESULTSET
  end;
elsIF(P_TASK_TYPE='FINAPPR')THEN
  begin
    -- To Validate Approval Details With All Approval Screens.
    S3G_LAD_GET_FINV_VALIDATE(P_TASK_NUMBER,P_APPROVAL_ID,P_APPROVAL_SERIAL_NUMBER,P_TASK_TYPE,P_ACTION_ID,P_COMPANY_ID
    ,P_XML_APPROVALDETAILS,P_CREATED_BY,P_TASK_STATUS_CODE);--, d_RESULTSET
  end;
elsIF(P_TASK_TYPE='PAAP')THEN--Payment Approval
  begin
    S3G_LAD_GET_PYMTAPPR_VALIDATE(P_TASK_NUMBER,P_APPROVAL_ID,P_APPROVAL_SERIAL_NUMBER,P_TASK_TYPE,P_ACTION_ID,P_COMPANY_ID,
    P_ENTITY_TYPE,P_XML_APPROVALDETAILS,P_CREATED_BY,P_TASK_STATUS_CODE);
  END;
elsIF(P_TASK_TYPE='ROPCCN')THEN-- ROP CASE CANCELLATION APPROVAL
  begin 
    S3G_LAD_GET_ROP_APPR_VALIDATE(P_TASK_NUMBER,P_APPROVAL_ID,P_APPROVAL_SERIAL_NUMBER,P_TASK_TYPE,P_ACTION_ID,P_COMPANY_ID,
    P_ENTITY_TYPE,P_XML_APPROVALDETAILS,P_CREATED_BY,P_TASK_STATUS_CODE);
    
  END;
elsIF(P_TASK_TYPE='NOCT')THEN-- NOC APPROVAL
  BEGIN
  S3G_LAD_GET_NOCT_APPR_VALIDATE(P_TASK_NUMBER,P_APPROVAL_ID,P_APPROVAL_SERIAL_NUMBER,P_TASK_TYPE,P_ACTION_ID,P_COMPANY_ID,
  P_ENTITY_TYPE,P_XML_APPROVALDETAILS,P_CREATED_BY,P_TASK_STATUS_CODE);
  END;
--Added for MJV Approval = > Code Starts
elsIF(P_TASK_TYPE='MJA')THEN-- MJV APPROVAL
  BEGIN
  --d('sahere');  
  S3G_LAD_GET_MJV_VALIDATE(P_TASK_NUMBER,P_APPROVAL_ID,P_APPROVAL_SERIAL_NUMBER,P_TASK_TYPE,P_ACTION_ID,P_COMPANY_ID,
  P_ENTITY_TYPE,P_XML_APPROVALDETAILS,P_CREATED_BY,P_TASK_STATUS_CODE);
  END;
--Added for MJV Approval = > Code Ends
END IF;

--OPEN P_OUTTBL FOR
--SELECT * FROM TMP_TBL_LAD_COMMON;

SELECT COUNT(1) INTO D_COUNT FROM TMP_TBL_LAD_COMMON WHERE COL8_NUM > 0;


  

if(D_COUNT>0) then
BEGIN-----------Validation Part
    
    IF(P_Task_Type='PRAP')THEN-- Pricing Approval
    BEGIN
        
        merge into TMP_TBL_LAD_COMMON DEST using
        (   
            select
            PRC.BUSINESS_OFFER_NUMBER
            , PRC.Pricing_ID
            from TMP_TBL_LAD_COMMON TMP
            inner join S3G_ORG_PRICING PRC
            On PRC.Pricing_ID = TMP.COL3_NUM
        )
        src on (dest.COL3_NUM = src.Pricing_ID)
        when matched then
        update set DEST.COL21_VARCHAR = SRC.BUSINESS_OFFER_NUMBER;
        
        --Added on 06-Dec-2018 Starts here
        --No Need to check Authorization Sequence
        IF(P_IS_FORCEAPPROVAL = 1) THEN
        Begin        
            Update TMP_TBL_LAD_COMMON Set COL8_NUM = 0 Where COL8_NUM = 3;        
        END;
        End IF;
        
        --Added on 06-Dec-2018 Ends here
    
        update TMP_TBL_LAD_COMMON
          set COL13_VARCHAR = case when COL8_NUM = 1 then 'Invalid Password.'
              when COL8_NUM = 2 then 'Authorization Rule Card not defined for this combination.'
              when COL8_NUM = 3 then 'Approval should be in sequence as defined in Rule Card'
              when COL8_NUM = 4 then 'Approval Already done for this business offer number'
              when COL8_NUM = 5 then 'Approver not having access to approve the Check List.'
              when COL8_NUM = 15 then 'Action allowed for Level 4 and above user only.'
              when COL8_NUM = 16 then '3 and 5 level users can only approve.'
              when COL8_NUM = 20 then 'Checklist Approval Details Approved Failed.'
              when COL8_NUM = 30 then 'Pre Disbursement Documents yet to collect.'      --Added on 08-Oct-2018 
              end;
      
         
          SELECT COUNT('X') INTO P_ErrorCode FROM TMP_TBL_LAD_COMMON
          Where COL8_NUM > 0;
         
       
          
          IF(P_ErrorCode > 0) Then
          Begin
          
              SELECT 
--              replace(WM_CONCAT(COL21_VARCHAR || ' - ' || COL13_VARCHAR) ,',' , '\n') 
              LISTAGG(COL21_VARCHAR || ' - ' || COL13_VARCHAR || '\n') Within Group(Order by COL21_VARCHAR)
              into P_TASK_APPROVAL_NO 
              FROM TMP_TBL_LAD_COMMON
              WHERE COL8_NUM > 0
              AND ROWNUM < 11;
              
              P_ErrorCode := 1;
              
              Return;
          
          end;
          End IF;
    
    END;
    END IF;

    IF(P_Task_Type='APAP')THEN-- Application Approval
      BEGIN
        
        merge into TMP_TBL_LAD_COMMON DEST using
        (   
            select
            PRC.APPLICATION_NUMBER
            , PRC.APPLICATION_PROCESS_ID
            from TMP_TBL_LAD_COMMON TMP
            inner join S3G_ORG_AppProc PRC
            On PRC.APPLICATION_PROCESS_ID = TMP.COL3_NUM
        )
        src on (dest.COL3_NUM = src.APPLICATION_PROCESS_ID)
        when matched then
        update set DEST.COL21_VARCHAR = SRC.APPLICATION_NUMBER;
      
       BEGIN
          IF(P_IS_FORCEAPPROVAL = 1) THEN
            BEGIN
              UPDATE TMP_TBL_LAD_COMMON SET COL8_NUM = 0 WHERE COL8_NUM = 3;
            END;
          END IF;
        END;
        
       UPDATE TMP_TBL_LAD_COMMON
        SET COL13_VARCHAR =
          CASE
            WHEN COL8_NUM = 1
            THEN 'Invalid Password.'
            WHEN COL8_NUM = 2
            THEN 'Authorization Rule Card not defined for this combination.'
            WHEN COL8_NUM = 3
            THEN 'Approval should be in sequence as defined in Rule Card'
            WHEN COL8_NUM = 4
            THEN 'Approval Already done for this Proposal No'
            WHEN COL8_NUM = 5
            THEN 'Approver not having access to approve the Proposal No.'
            WHEN COL8_NUM = 15
            THEN 'Action allowed for Level 4 and above user only.'
            WHEN COL8_NUM = 16
            THEN '3 and 5 level users can only approve.'
            WHEN COL8_NUM = 20
            THEN 'Proposal Approval Details Approved Failed.'
          
          END;
      
          SELECT COUNT('X') INTO P_ErrorCode FROM TMP_TBL_LAD_COMMON
          Where COL8_NUM > 0;
          
          IF(P_ErrorCode > 0) Then
          Begin
              SELECT 
--              nvl(replace(WM_CONCAT(COL21_VARCHAR || ' - ' || COL13_VARCHAR) ,',' , '\n'),' ') 
              LISTAGG(COL21_VARCHAR || ' - ' || COL13_VARCHAR || '\n') Within Group(Order by COL21_VARCHAR)
              into P_TASK_APPROVAL_NO 
              FROM TMP_TBL_LAD_COMMON
              WHERE NVL(COL8_NUM,0) > 0 
              AND ROWNUM < 5;
              
              P_ERRORCODE := 1;
              
              Return;
          end;
          End IF;
    
    END;    
   end if;
      
     IF(P_Task_Type='FINAPPR')THEN-- FACTORING INVOICE APPROVAL ERROR MESSEGE RETURN PART
     BEGIN
        
        merge into TMP_TBL_LAD_COMMON DEST using
        (   
            select
            PRC.INVOICE_NO
            , PRC.FACTORING_INV_LOAD_DETAILS_ID
            from TMP_TBL_LAD_COMMON TMP
            inner join S3G_LAD_FACTRNGINVLOADINGDET PRC
            On PRC.FACTORING_INV_LOAD_DETAILS_ID = TMP.COL3_NUM
        )
        src on (dest.COL3_NUM = src.FACTORING_INV_LOAD_DETAILS_ID)
        when matched then
        update set DEST.COL21_VARCHAR = SRC.INVOICE_NO;
    
        update TMP_TBL_LAD_COMMON
          set COL13_VARCHAR = case when COL8_NUM = 1 then 'Invalid Password.'
              when COL8_NUM = 2 then 'Authorization Rule Card not defined for this combination.'
              when COL8_NUM = 3 then 'Approval should be in sequence as defined in Rule Card'
              when COL8_NUM = 4 then 'Approval Already done for this business offer number'
              when COL8_NUM = 5 then 'Approver not having access to approve the Check List.'
              when COL8_NUM = 15 then 'Action allowed for Level 4 and above user only.'
              when COL8_NUM = 16 then '3 and 5 level users can only approve.'
              when COL8_NUM = 20 then 'Checklist Approval Details Approved Failed.'
           
              end;
      
         
          SELECT COUNT('X') INTO P_ErrorCode FROM TMP_TBL_LAD_COMMON
          Where COL8_NUM > 0;
          
          IF(P_ErrorCode > 0) Then
          Begin
          
              SELECT 
--              replace(WM_CONCAT(COL21_VARCHAR || ' - ' || COL13_VARCHAR) ,',' , '\n') 
              LISTAGG(COL21_VARCHAR || ' - ' || COL13_VARCHAR || '\n') Within Group(Order by COL21_VARCHAR)
              into P_TASK_APPROVAL_NO 
              FROM TMP_TBL_LAD_COMMON
              WHERE COL8_NUM >0 and rownum<5;
              
              P_ErrorCode := 1;
              
              Return;
          
          end;
          End IF;
    
    end;
    END IF;  
     
     IF(P_Task_Type='PAAP')THEN-- Payment Approval
      BEGIN
        merge into TMP_TBL_LAD_COMMON DEST using
        (   
            select
            PRC.PAYMENT_REQUEST_NO
            , PRC.REQUEST_NO
            from TMP_TBL_LAD_COMMON TMP
            inner join S3G_LAD_PYMNTREQST PRC
            On PRC.REQUEST_NO = TMP.COL3_NUM
        )
        src on (dest.COL3_NUM = src.REQUEST_NO)
        when matched then
        update set DEST.COL21_VARCHAR = SRC.PAYMENT_REQUEST_NO;
    
        update TMP_TBL_LAD_COMMON
        set COL13_VARCHAR = case when COL8_NUM = 1 then 'Invalid Password.'
              when COL8_NUM = 2 then 'Authorization Rule Card not defined for this combination.'
              when COL8_NUM = 3 then 'Approval should be in sequence as defined in Rule Card'
              when COL8_NUM = 4 then 'Approval Already done for this Payment Request number'
              when COL8_NUM = 5 then 'Approver not having access to approve the Payment.'
              when COL8_NUM = 6 then 'Payment Cheque has been Hold.'
              when COL8_NUM = 15 then 'Action allowed for Level 4 and above user only.'
              when COL8_NUM = 16 then '3 and 5 level users can only approve.'
              when COL8_NUM = 20 then 'Payment Approval Details Approved Failed.'
        end;
      
        SELECT COUNT('X') INTO P_ErrorCode 
        FROM TMP_TBL_LAD_COMMON
        Where COL8_NUM > 0;
        IF(P_ErrorCode > 0) Then
          Begin
            SELECT 
--            REPLACE(WM_CONCAT(COL21_VARCHAR || ' - ' || COL13_VARCHAR) ,',' , '\n') 
            LISTAGG(COL21_VARCHAR || ' - ' || COL13_VARCHAR || '\n') Within Group(Order by COL21_VARCHAR)
            into P_TASK_APPROVAL_NO 
            FROM TMP_TBL_LAD_COMMON
            WHERE COL8_NUM > 0
            AND ROWNUM < 6;
            P_ErrorCode := 1;
            Return;
          end;
        End IF;
     end;
    END IF;
    
      IF(P_Task_Type='ROPCCN')THEN-- ROP CANCELLATION APPROVAL
      BEGIN
        merge into TMP_TBL_LAD_COMMON DEST using
        (   
            select
            CMC.CASE_CANCEL_NUMBER
            ,CMC.CASE_CANCEL_ID
            from TMP_TBL_LAD_COMMON TMP
            inner join S3G_LR_CASEMASTER_CANCEL CMC
            On CMC.CASE_CANCEL_ID = TMP.COL3_NUM
        )
        src on (dest.COL3_NUM = src.CASE_CANCEL_ID)
        when matched then
        update set DEST.COL21_VARCHAR = SRC.CASE_CANCEL_NUMBER;
    
        update TMP_TBL_LAD_COMMON
        set COL13_VARCHAR = case when COL8_NUM = 1 then 'Invalid Password.'
              when COL8_NUM = 2 then 'Authorization Rule Card not defined for this combination.'
              WHEN COL8_NUM = 3 THEN 'Approval should be in sequence as defined in Rule Card'
              WHEN COL8_NUM = 4 THEN 'Approval Already done for this ROP Cancellation Request'
              when COL8_NUM = 5 then 'Approver not having access to approve the ROP Cancellation.'
              when COL8_NUM = 15 then 'Action allowed for Level 4 and above user only.'
              WHEN COL8_NUM = 16 THEN '3 and 5 level users can only approve.'
              when COL8_NUM = 20 then 'ROP Cancellation Approval Details Approved Failed.'
        end;
      
        SELECT COUNT('X') INTO P_ErrorCode 
        FROM TMP_TBL_LAD_COMMON
        Where COL8_NUM > 0;
        IF(P_ErrorCode > 0) Then
          Begin
            SELECT 
--            replace(WM_CONCAT(COL21_VARCHAR || ' - ' || COL13_VARCHAR) ,',' , '\n') 
            LISTAGG(COL21_VARCHAR || ' - ' || COL13_VARCHAR || '\n') Within Group(Order by COL21_VARCHAR)
            into P_TASK_APPROVAL_NO 
            FROM TMP_TBL_LAD_COMMON
            WHERE COL8_NUM > 0
            AND ROWNUM < 6;
            P_ErrorCode := 1;
            Return;
          end;
        End IF;
     end;
    END IF; 
 
       IF(P_Task_Type='NOCT')THEN-- NOC APPROVAL
      BEGIN
        merge into TMP_TBL_LAD_COMMON DEST using
        (   
            select
            NOC.NOC_NUMBER
            ,NOC.NOCTERMINATN_ID
            from TMP_TBL_LAD_COMMON TMP
            inner join S3G_LAD_NOCTerminatn NOC
            On NOC.NOCTERMINATN_ID = TMP.COL3_NUM
        )
        src on (dest.COL3_NUM = src.NOCTERMINATN_ID)
        when matched then
        update set DEST.COL21_VARCHAR = SRC.NOC_NUMBER;
    
  
    
        update TMP_TBL_LAD_COMMON
        set COL13_VARCHAR = case when COL8_NUM = 1 then 'Invalid Password.'
              when COL8_NUM = 2 then 'Authorization Rule Card not defined for this combination.'
              WHEN COL8_NUM = 3 THEN 'Approval should be in sequence as defined in Rule Card'
              WHEN COL8_NUM = 4 THEN 'Approval Already done for this NOC Request'
              when COL8_NUM = 5 then 'Approver not having access to approve the NOC.'
              when COL8_NUM = 15 then 'Action allowed for Level 4 and above user only.'
              WHEN COL8_NUM = 16 THEN '3 and 5 level users can only approve.'
              when COL8_NUM = 20 then 'NOC Approval Details Approved Failed.'
        end;
      
        
      
        SELECT COUNT('X') INTO P_ErrorCode 
        FROM TMP_TBL_LAD_COMMON
        Where COL8_NUM > 0;
        
        
        
        IF(P_ErrorCode > 0) Then
          Begin
            SELECT 
--            replace(WM_CONCAT(COL21_VARCHAR || ' - ' || COL13_VARCHAR) ,',' , '\n') 
            LISTAGG(COL21_VARCHAR || ' - ' || COL13_VARCHAR || '\n') Within Group(Order by COL21_VARCHAR)
            into P_TASK_APPROVAL_NO 
            FROM TMP_TBL_LAD_COMMON
            WHERE COL8_NUM > 0
            AND ROWNUM < 6;
            P_ErrorCode := 1;
            Return;
          end;
        End IF;
     end;
    END IF; 
    
      
 
  
--Added for MJV Approval = > Code Starts
      IF(P_Task_Type='MJA')THEN-- MJV APPROVAL
      BEGIN
    
        merge into TMP_TBL_LAD_COMMON DEST using
        (   
            select
            MJV.MANUAL_JV_NO
            ,MJV.MANUAL_JV_ID
            from TMP_TBL_LAD_COMMON TMP
            inner join S3G_LAD_MANUALJN MJV
            On MJV.MANUAL_JV_ID = TMP.COL3_NUM
        )
        src on (dest.COL3_NUM = src.MANUAL_JV_ID)
        when matched then
        update set DEST.COL21_VARCHAR = SRC.MANUAL_JV_NO;
    
    
        update TMP_TBL_LAD_COMMON
        set COL13_VARCHAR = case when COL8_NUM = 1 then 'Invalid Password.'
              when COL8_NUM = 2 then 'Authorization Rule Card not defined for this combination.'
              WHEN COL8_NUM = 3 THEN 'Approval should be in sequence as defined in Rule Card'
              WHEN COL8_NUM = 4 THEN 'Approval Already done for this NOC Request'
              when COL8_NUM = 5 then 'Approver not having access to approve the NOC.'
              when COL8_NUM = 15 then 'Action allowed for Level 4 and above user only.'
              WHEN COL8_NUM = 16 THEN '3 and 5 level users can only approve.'
              when COL8_NUM = 20 then 'NOC Approval Details Approved Failed.'
        end;
      
      
        SELECT COUNT('X') INTO P_ErrorCode 
        FROM TMP_TBL_LAD_COMMON
        Where COL8_NUM > 0;
        

        
        IF(P_ErrorCode > 0) Then
          Begin
            SELECT 
--            replace(WM_CONCAT(COL21_VARCHAR || ' - ' || COL13_VARCHAR) ,',' , '\n') 
            LISTAGG(COL21_VARCHAR || ' - ' || COL13_VARCHAR || '\n') Within Group(Order by COL21_VARCHAR)
            into P_TASK_APPROVAL_NO 
            FROM TMP_TBL_LAD_COMMON
            WHERE COL8_NUM > 0
            AND ROWNUM < 6;
            P_ErrorCode := 1;
            Return;
          end;
        End IF;
     end;
    END IF; 
    --Added for MJV Approval = > Code Ends
    
    
end;
END IF;


  BEGIN
  
    IF(P_Task_Type='PRAP')THEN-- Pricing Approval
      BEGIN
        FOR Track IN 
        ( SELECT 
        COL1_NUM as APPROVAL_SERIAL_NUMBER,
        COL2_NUM as APPROVAL_ID,
        COL3_NUM as DOCUMENT_ID,
        COL7_NUM AS TOTAL_APPROVAL
        ,COL11_VARCHAR
        ,COL12_VARCHAR
        , COL19_NUM
        FROM TMP_TBL_LAD_COMMON
        )
        LOOP
        begin
        
          S3G_OR_INS_PRICGAPPR(TRACK.DOCUMENT_ID,TRACK.APPROVAL_ID,TRACK.APPROVAL_SERIAL_NUMBER,P_ACTION_ID
              ,Track.COL12_VARCHAR
              ,P_PASSWORD
              ,P_CREATED_BY,P_COMPANY_ID,TRACK.TOTAL_APPROVAL
              ,TRACK.COL11_VARCHAR
              ,Track.Col19_Num
              ,P_TASK_STATUSDATE
              ,p_Is_ForceApproval     --Added on 06-Dec-2018
              );
              
          P_ERRORCODE:=0;
          
          P_TASK_APPROVAL_NO:='Approval Done Successfully.';
        
        END;
        
        END LOOP;  
        
    END;
    END IF;



--Pricing (Checklist) Approval Ends here


      IF(P_Task_Type='APAP')THEN-- Application Approval
          BEGIN
          FOR Track IN 
          ( SELECT 
          COL1_NUM as APPROVAL_SERIAL_NUMBER,
          COL2_NUM as APPROVAL_ID,
          COL3_NUM AS DOCUMENT_ID,
          COL7_NUM AS TOTAL_APPROVAL,
          COL12_VARCHAR,Col19_Num,COL11_VARCHAR
          from TMP_TBL_LAD_COMMON)
            LOOP
            
            BEGIN
            
            --Dp_Auto_Tran('Line199-COMMON_INS_APP--S3G_OR_INS_APPAPPRV START');
                S3G_OR_INS_APPAPPRV
                (
                 TRACK.DOCUMENT_ID,
                 TRACK.APPROVAL_ID,
                 TRACK.APPROVAL_SERIAL_NUMBER,
                 P_ACTION_ID,
                 TRACK.COL12_VARCHAR,
                 P_PASSWORD,
                 P_CREATED_BY,
                 P_COMPANY_ID,
                 TRACK.TOTAL_APPROVAL,
                 P_ERRORCODE
                 ,D_ACCOUNT_NO
                 ,TRACK.COL19_NUM
                 ,P_TASK_STATUSDATE
                 ,P_IS_FORCEAPPROVAL     --Added on 06-Dec-2018
                 ,TRACK.COL11_VARCHAR
                );
            
                IF(P_ERRORCODE<>0)THEN
               -- Dp_Auto_Tran('Line199-COMMON_INS_APP-Creation -Activation_JVError-');
                   select APPLICATION_NUMBER into P_TASK_APPROVAL_NO 
                   from S3G_ORG_APPPROC where APPLICATION_PROCESS_ID=TRACK.DOCUMENT_ID;
                   return;
                END IF;
            
            
                begin
                  IF(P_ERRORCODE=0)THEN
                       
                      
                        SELECT APPLICATION_NUMBER INTO D_APPLICATION_NUMBER 
                        from S3G_ORG_APPPROC where APPLICATION_PROCESS_ID=TRACK.DOCUMENT_ID
                       
                        ;
                      
                       
                       
                       IF(D_ACCOUNT_NO IS  NULL)THEN
                        UPDATE   TMP_TBL_LAD_COMMON SET COL22_VARCHAR='Application Approved Successfully \n'||'Application No( '||D_APPLICATION_NUMBER||') '
                        WHERE COL3_NUM=TRACK.DOCUMENT_ID;
                        
                       ELSE
                        UPDATE   TMP_TBL_LAD_COMMON SET COL22_VARCHAR='Application Approved ,Account Created & Activated  Successfully. \n  Application No( '||D_APPLICATION_NUMBER||')<==>' ||'Account No( '||D_ACCOUNT_NO||')' 
                        WHERE COL3_NUM=TRACK.DOCUMENT_ID;
                       
                       
                       end if;
                       
                      
                        
                     
                      
                        
                      
                  end if;
                end;
            
            
                  
                  
                  
            END;
            
            END LOOP;  
            
              P_ErrorCode:=0;
              SELECT 
--              REPLACE(WM_CONCAT(COL22_VARCHAR) ,',' , '\n') 
              LISTAGG(COL22_VARCHAR || '\n') Within Group(Order by COL21_VARCHAR)
              INTO P_TASK_APPROVAL_NO 
              FROM TMP_TBL_LAD_COMMON
              Where RowNum < 11;
            
          end;
      END IF;
      
       IF(P_Task_Type='FINAPPR')THEN-- FACTORING INVOICE APPROVAL
          begin
          --Dp_Auto_Tran('FINAPPR-START');
           
          FOR Track IN 
          ( SELECT 
          COL1_NUM as APPROVAL_SERIAL_NUMBER,
          COL2_NUM as APPROVAL_ID,
          COL3_NUM AS DOCUMENT_ID,
          COL7_NUM AS TOTAL_APPROVAL,
          COL12_VARCHAR
          from TMP_TBL_LAD_COMMON)
            LOOP
            
            BEGIN
            
            --Dp_Auto_Tran('Line199-COMMON_INS_APP--S3G_OR_INS_APPAPPRV START');
              --DP_AUTO_TRAN('FINAPPR-LOOP START');
              --Dp_Auto_Tran('TRACK.DOCUMENT_ID==>'||TRACK.DOCUMENT_ID);
                S3G_OR_INS_FINVAPPR
                (
                 TRACK.DOCUMENT_ID,
                 TRACK.APPROVAL_ID,
                 TRACK.APPROVAL_SERIAL_NUMBER,
                 P_ACTION_ID,
                 TRACK.COL12_VARCHAR,
                 P_PASSWORD,
                 P_CREATED_BY,
                 P_COMPANY_ID,
                 TRACK.TOTAL_APPROVAL,
                 P_ERRORCODE,
                 p_Is_ForceApproval
                );
               -- Dp_Auto_Tran('FINAPPR-P_ERRORCODE=0');
                IF(P_ERRORCODE>0)THEN
               -- Dp_Auto_Tran('Line199-COMMON_INS_APP-Creation -Activation_JVError-');
                 --Dp_Auto_Tran('FINAPPR-P_ERRORCODE>0==>'||P_ERRORCODE);
                   select INVOICE_NO into P_TASK_APPROVAL_NO 
                   from S3G_LAD_FACTRNGINVLOADINGDET where FACTORING_INV_LOAD_DETAILS_ID=TRACK.DOCUMENT_ID;
                   return;
                END IF;
            
               IF(P_ERRORCODE=0)THEN
                 BEGIN--POST SERVICE CHARGE
                 
                 
                 
                 
                     SELECT COUNT(1) INTO D_COUNT FROM S3G_LAD_FACTRNGINVLOADINGDET LOADDET
                     INNER JOIN TMP_TBL_LAD_COMMON TRANTEMP
                     ON TRANTEMP.COL3_NUM=LOADDET.FACTORING_INV_LOAD_DETAILS_ID
                     WHERE FACTORING_INV_LOAD_DETAILS_ID=TRACK.DOCUMENT_ID
                     AND LOADDET.STATUS_ID=2--APPROVED
                     ;
                     
                     IF(D_COUNT>0)THEN
                        BEGIN
                          LA_JV_FAC_INV_CHARGE(P_TASK_NUMBER,P_CREATED_BY,1,1,P_ERRORCODE,P_ERRORMSG);
                          if(P_ERRORCODE>0)then
                            begin
                              P_ERRORCODE:=P_ERRORCODE;
                              P_TASK_APPROVAL_NO:=P_ERRORMSG;
                              return;
                            end;
                          end if;
                        END;
                     END IF;
                      
                  
                 END;
               END IF;
            
                  P_ErrorCode:=0;
                  P_TASK_APPROVAL_NO:='Approval Done Successfully.';
                  
            END;
            
            END LOOP; 
            
            begin--Un Approved Invoices to be Cancelled 
            update S3G_LAD_FACTRNGINVLOADINGDET set STATUS_ID=5     
            where   FACTORING_INV_LOAD_ID=P_TASK_NUMBER and STATUS_ID<>2 ;     
            end;
            
          END;
      END IF;
      
      IF(P_Task_Type='PAAP')THEN-- Payment Approval
        BEGIN
          FOR Track IN 
          ( 
            SELECT 
            COL1_NUM as APPROVAL_SERIAL_NUMBER,
            COL2_NUM as APPROVAL_ID,
            COL3_NUM as DOCUMENT_ID,
            COL7_NUM AS TOTAL_APPROVAL
            ,COL11_VARCHAR
            ,COL12_VARCHAR
            ,COL19_NUM
--            COL1_NUM as APPROVAL_SERIAL_NUMBER,
--            COL2_NUM as APPROVAL_ID,
--            COL3_NUM AS DOCUMENT_ID,
--            COL7_NUM AS TOTAL_APPROVAL,
--            COL12_VARCHAR
            from TMP_TBL_LAD_COMMON
          )
          LOOP
            begin
--              D('TRACK.DOCUMENT_ID-' || TRACK.DOCUMENT_ID || 'TRACK.APPROVAL_ID-' || TRACK.APPROVAL_ID || 'TRACK.APPROVAL_SERIAL_NUMBER-' 
--              || TRACK.APPROVAL_SERIAL_NUMBER || '-P_ACTION_ID-' 
--              || P_ACTION_ID 
--              || 'TRACK.COL12_VARCHAR-' 
--              || TRACK.COL12_VARCHAR || 
--              '-P_PASSWORD-' 
--              || P_PASSWORD
--              || 
--              '-P_CREATED_BY-' 
--              || P_CREATED_BY || 'TRACK.TOTAL_APPROVAL-' || TRACK.TOTAL_APPROVAL);
              
              S3G_LAD_INS_PYMTAPPRV
                (
                 TRACK.DOCUMENT_ID,
                 TRACK.APPROVAL_ID,
                 TRACK.APPROVAL_SERIAL_NUMBER,
                 P_ACTION_ID,
                 TRACK.COL12_VARCHAR,
                 P_PASSWORD,
                 P_CREATED_BY,
                 P_COMPANY_ID,
                 TRACK.TOTAL_APPROVAL,
                 TRACK.COL11_VARCHAR,
                 Track.Col19_Num,
                 P_TASK_STATUSDATE,
                 P_ERRORCODE
                );
              IF(P_ERRORCODE>0)THEN
               BEGIN
                   SELECT PAYMENT_REQUEST_NO INTO P_TASK_APPROVAL_NO 
                   from S3G_LAD_PYMNTREQST where REQUEST_NO=TRACK.DOCUMENT_ID;
                   return;
               END;
              END IF;
               IF(P_ERRORCODE=0)THEN
                BEGIN
                  P_ERRORCODE:=0;          
                  P_TASK_APPROVAL_NO:='Approval Done Successfully.';
                END;
              END IF;
            END;        
          END LOOP;  
          
        END;
      END IF;
      
      IF(P_Task_Type='ROPCCN')THEN-- ROP CASE CANCELLATION APPROVAL
        BEGIN

          FOR Track IN 
          ( 
            SELECT 
            COL1_NUM as APPROVAL_SERIAL_NUMBER,
            COL2_NUM as APPROVAL_ID,
            COL3_NUM AS DOCUMENT_ID,
            COL7_NUM AS TOTAL_APPROVAL,
            COL12_VARCHAR,
            COL19_NUM
            from TMP_TBL_LAD_COMMON
          )
          LOOP
            BEGIN
              S3G_LAD_INS_ROPCANCEL_APPROVAL
              (
                 P_COMPANY_ID,
                 TRACK.DOCUMENT_ID,
                 TRACK.APPROVAL_ID,
                 TRACK.APPROVAL_SERIAL_NUMBER,
                 TRACK.COL12_VARCHAR,
                 P_ACTION_ID,
--                 P_PASSWORD,
                 P_CREATED_BY,
                 TRACK.TOTAL_APPROVAL,
                 TRACK.COL19_NUM,
                 P_ERRORCODE
                );
              IF(P_ERRORCODE>0)THEN
               BEGIN
                   SELECT CASE_CANCEL_NUMBER INTO P_TASK_APPROVAL_NO 
                   from S3G_LR_CASEMASTER_CANCEL where CASE_CANCEL_ID=TRACK.DOCUMENT_ID;
                   return;
               END;
              END IF;
               IF(P_ERRORCODE=0)THEN
                BEGIN
                  P_ERRORCODE:=0;          
                  P_TASK_APPROVAL_NO:='Approval Done Successfully.';
                END;
              END IF;
            END;        
          END LOOP;  
          
        END;
      END IF;
      
      IF(P_Task_Type='NOCT')THEN-- NOC APPROVAL
        BEGIN
          D(P_ACTION_ID || 'NOCT');
          FOR Track IN 
          ( 
            SELECT 
            COL1_NUM as APPROVAL_SERIAL_NUMBER,
            COL2_NUM as APPROVAL_ID,
            COL3_NUM AS DOCUMENT_ID,
            COL7_NUM AS TOTAL_APPROVAL,
            COL12_VARCHAR,
            COL19_NUM
            from TMP_TBL_LAD_COMMON
          )
          LOOP
            BEGIN
              S3G_LAD_INS_NOC_APPROVAL
              (
                 P_COMPANY_ID,
                 TRACK.DOCUMENT_ID,
                 TRACK.APPROVAL_ID,
                 TRACK.APPROVAL_SERIAL_NUMBER,
                 TRACK.COL12_VARCHAR,
                 P_ACTION_ID,
--                 P_PASSWORD,
                 P_CREATED_BY,
                 TRACK.TOTAL_APPROVAL,
                 TRACK.COL19_NUM,
                 P_ERRORCODE
                );
              IF(P_ERRORCODE>0)THEN
               BEGIN
                   SELECT NOC_NUMBER INTO P_TASK_APPROVAL_NO 
                   from S3G_LAD_NOCTerminatn where NOCTERMINATN_ID=TRACK.DOCUMENT_ID;
                   return;
               END;
              END IF;
               IF(P_ERRORCODE=0)THEN
                BEGIN
                  P_ERRORCODE:=0;          
                  P_TASK_APPROVAL_NO:='Approval Done Successfully.';
                END;
              END IF;
            END;        
          END LOOP;  
          
        END;
      END IF;
      
       --Added on 15-Nov-2018 Starts here
      
      If(P_Task_Type = 'CHA')Then-- CHEQUE RETURN APPROVAL
      BEGIN
      
          S3g_Cln_Ins_Chqrtnapvl(P_LOB_ID
          ,P_Location_ID
          ,P_TASK_STATUSDATE
          --,P_Approval_ID
          ,P_CREATED_BY
          ,P_CREATED_BY
          ,P_COMPANY_ID
          ,P_IS_mobile
          ,P_ACTION_ID
          ,P_XML_APPROVALDETAILS
          ,P_Task_Approval_No
          ,P_ErrorCode);
      
      
      End;
      END IF;
      
      --Added on 08-DEC-2018 Ends Here
      If(P_Task_Type = 'CHL')Then-- Challan Authorization
        BEGIN      
          S3G_CLN_INS_CHALLANAPRVL(P_LOB_ID
          ,P_Location_ID
          ,P_Task_Statusdate
          ,P_Approval_ID
          ,P_CREATED_BY
          ,P_COMPANY_ID
          ,P_IS_mobile
          ,P_ACTION_ID
          ,P_XML_APPROVALDETAILS
          ,P_Task_Approval_No
          ,P_ErrorCode);    
        End;
      END IF;
      
       IF(P_Task_Type='MJA')THEN-- Payment Approval
        BEGIN
          
          FOR Track IN 
          ( 
            SELECT 
            COL1_NUM as APPROVAL_SERIAL_NUMBER,
            COL2_NUM as APPROVAL_ID,
            COL3_NUM as DOCUMENT_ID,
            COL7_NUM AS TOTAL_APPROVAL
            ,COL11_VARCHAR
            ,COL12_VARCHAR
            ,COL19_NUM
--            COL1_NUM as APPROVAL_SERIAL_NUMBER,
--            COL2_NUM as APPROVAL_ID,
--            COL3_NUM AS DOCUMENT_ID,
--            COL7_NUM AS TOTAL_APPROVAL,
--            COL12_VARCHAR
            from TMP_TBL_LAD_COMMON
          )
          LOOP
            begin
              --D('TRACK.DOCUMENT_ID-' || TRACK.DOCUMENT_ID || 'TRACK.APPROVAL_ID-' || TRACK.APPROVAL_ID || 'TRACK.APPROVAL_SERIAL_NUMBER-' 
              --|| TRACK.APPROVAL_SERIAL_NUMBER || '-P_ACTION_ID-' 
              --|| P_ACTION_ID 
              --|| 'TRACK.COL12_VARCHAR-' 
              --|| TRACK.COL12_VARCHAR || 
              --'-P_PASSWORD-' 
              --|| P_PASSWORD
              --|| 
              --'-P_CREATED_BY-' 
              --|| P_CREATED_BY || 'TRACK.TOTAL_APPROVAL-' || TRACK.TOTAL_APPROVAL);
            
            --RETURN;  
              
              S3G_LAD_INS_MJVAPPR
                (
                 TRACK.DOCUMENT_ID,
                 TRACK.APPROVAL_ID,
                 TRACK.APPROVAL_SERIAL_NUMBER,
                 P_ACTION_ID,
                 TRACK.COL12_VARCHAR,
                 P_PASSWORD,
                 P_CREATED_BY,
                 P_COMPANY_ID,
                 TRACK.TOTAL_APPROVAL,
                 TRACK.COL11_VARCHAR,
                 Track.Col19_Num,
                 P_TASK_STATUSDATE,
                 P_ERRORCODE
                );
              IF(P_ERRORCODE>0)THEN
               BEGIN
                   SELECT MANUAL_JV_NO INTO P_TASK_APPROVAL_NO 
                   from S3G_LAD_MANUALJN where MANUAL_JV_NO=TRACK.DOCUMENT_ID;
                   return;
               END;
              END IF;
               IF(P_ERRORCODE=0)THEN
                BEGIN
                  P_ERRORCODE:=0;          
                  P_TASK_APPROVAL_NO:='Approval Done Successfully.';
                END;
              END IF;
            END;        
          END LOOP;  
          
        END;
      END IF;
      
      
      
  end;
END S3G_LAD_TRAN_COMMON_INS_APPR;

/

create or replace
PROCEDURE "LA_JV_MJV" 
(                                                                                                 
      P_MJV_ID         INT                                                                                                       
     ,P_User_ID        INT                                                                                                    
     ,P_JV_Status_Code INT   --1'Active',2'Cancel'                                                                             
     ,P_UPDATE_STATUS  int  --1'I',2'U',3'E'
--     ,p_outtbl1 OUT SYS_REFCURSOR
    , P_ERRORCODE OUT NUMBER
    , p_ErrorMsg OUT VARCHAR2
    --,P_OUTTBL OUT SYS_REFCURSOR
)                                                                                                        
AS                                                                                                        
                                                                            
--SET NOCOUNT ON                                                                                                     
/*  =============================================                                                                              
 Author        : Senthil Kumar P                                                                                                    
 Create Date   : 29/Nov/2011
 Description   : To Insert SYS Journal Entry for MJV                                                                             
 Modified BY   :                                                                              
 Modified Date :                                                                              
 S3G_LAD_ManualJN                                      
begin tran                  
exec  S3G_LOANAD_Journal_CFM_MJV  9,2,1,1                                                                                
rollback tran                                          
                                          
 ===============================================                                                                             
Pre Requisite                                                                                                
1.Update mode can be done only in Open month                                                                             
*/                                                                            
                                                                            
/************************* Header Parameters Start ************************/                                                                            
                                                
D_COMPANY_ID          int;                                                                             
D_LOB_ID              int;                                                                                                        
D_Location_ID         INT ;           
D_LOCATION_CODE       varchar2(30);
D_Customer_ID         INT;
                                                                            
D_LOB_CODE            varchar2(2);                                                                                      
D_ACCOUNT_LINK_KEY    int;  -- Page generated document number control                                                                             
D_DOC_NO              varchar2(50);       
            
D_JV_SEQUENCE_TYPE    varchar2(8);
D_JV_CHAR_SET         varchar2(5);                       
D_JV_SEQUENCE_NO      NUMBER(12,0);                
D_JV_DATE             varchar2(30);     -- Posting Date                             
D_Value_Date          VARCHAR2(30);                          
                                                             
D_NARRATION           varchar2(100);                                                                            
D_NARRATION_VALUE     varchar2(30);                                                                               
                                              
D_COMPANY_CURRENCY_ID int;
D_TXN_CURRENCY_ID     int; -- Get If there is any txn currency.                                                                    
D_Txn_Exchange_Rate   NUMBER(12,4);
                                                                            
D_GLOBAL_DIM1_CODE    int;   -- Lookup Type Value ( Vendor or Dealer or Customer.. )                                         
D_GLOBAL_DIM1_ID      int;     -- Lookup Code Value ( Vendor or Dealer or Customer.. )                                                                       
                                                                            
D_Update_Date         VARCHAR2(30);
D_UPDATE_STATUS_VALUE char(1);
D_Task_ID             INT;                                                           
                                                                            
/************************* Header Parameters End ************************/                                                         
                                                                            
/************************* Details Parameters Start ************************/                                                                            
                                                                            
D_REFERENCE_TYPE      varchar2(15);
D_REFERENCE_NO        varchar2(50);   -- MLA Number or PANum                                                                                                
D_SUB_REFERENCE_NO   varchar2(30);
                                                                              
D_TXN_AMOUNT          number(18,4);
D_Txn_Type            NUMBER;
                                                                            
D_GL_ACCOUNT_NO       varchar2(6);
D_SUB_GL_ACCOUNT_NO   varchar2(12);
                                                                            
D_ACC_FLAG            varchar2(10);
D_ACC_TYPE            int;
D_GLOBAL_DIM2_NO      varchar2(50);                                                                           
                                                                            
D_DETAILS_MASTER_COUNT int;
D_Details_Record_Count INT;
                                                            
D_CFM_MASTER_COUNT    int;
D_CFM_RECORD_COUNT    int;
D_Entity_ID           INT;

D_RECEIPT_NO varchar(50);
D_RECEIPT_DATE DATE;
D_ERRORCODE int;
D_INTCOUNT int;
 E_Lob_Id              Int;
  E_Lob_Code       VARCHAR2(15); 
  E_LOCATION_ID NUMBER;
  E_ACCOUNT_LINK_KEY    int;
  E_LOCATION_CODE VARCHAR2(30); 
E_D_DOC_NO VARCHAR2(35);

intCount int;
                                                                            
/************************* Details Parameters End ************************/                                                                            
                                 
/************************* Page Parameters Start ************************/                                
D_XML_Journal VARCHAR2(7500);   
 D_EXISTS            NUMBER;
      D_TEMPJV_DATE       DATE; 
      D_XML_JOURNALGL     CLOB;
      P_OUTTABLE          SYS_REFCURSOR;
      P_OUTTABLE1         SYS_REFCURSOR; 
      D_TTXN_AMOUNT NUMBER;
/************************* Page Parameters End ************************/                                                                            
                                          

Begin                                              
  DELETE FROM TMP_LAD_INTER_LOB_PAYMENT;
/************************* Header Insertion Start ************************/                                                                            
    p_ErrorMsg:=' ';                                                                        
    D_TASK_ID := 77;
    
    DELETE FROM TMP_TBL_LA_JOURNALDETAILS;

--    open p_outtbl for                                             
--    SELECT                                             
--          COMPANY_ID, LOB_ID , LOCATION_CODE, LOB_Code    
--          MANUAL_JV_DATE, VALUE_DATE, 
--          MANUAL_JV_NO, VALUE_DATE
--     
--    FROM 
     select  S3G_LAD_MANUALJN.COMPANY_ID, S3G_LAD_MANUALJN.LOB_ID , S3G_LAD_MANUALJN.LOCATION_CODE, 
              S3G_SYSAD_LOBMASTER.LOB_CODE,    
          to_char(CAST(S3G_LAD_MANUALJN.MANUAL_JV_DATE AS DATE),'MM/DD/YYYY'), 
          to_char(cast(S3G_LAD_MANUALJN.VALUE_DATE as date),'MM/DD/YYYY'), 
          S3G_LAD_MANUALJN.MANUAL_JV_NO, 
          to_char(cast(S3G_LAD_MANUALJN.VALUE_DATE as date),'MM/DD/YYYY')
          INTO 
          D_COMPANY_ID,D_LOB_ID,D_LOCATION_CODE,D_LOB_CODE,
          D_JV_DATE,D_NARRATION_VALUE,
          D_Doc_No, D_VALUE_DATE
          from  
          S3G_LAD_MANUALJN, S3G_SYSAD_LOBMASTER                                                                              
          where S3G_LAD_MANUALJN.MANUAL_JV_ID = P_MJV_ID
          and S3G_SYSAD_LOBMASTER.LOB_ID = S3G_LAD_MANUALJN.LOB_ID 
          and rownum < 2;                                                
                                            
--     open p_outtbl1 for                                                                        
        SELECT
                TJV_SEQUENCE_TYPE,
                TNARRATION,
                TREFERENCE_TYPE
        INTO         
              D_JV_SEQUENCE_TYPE 
              ,D_NARRATION
              ,D_REFERENCE_TYPE
        from 
            table(FN_JV_GET_NARR(D_COMPANY_ID,D_TASK_ID))
          where rownum < 2  ;
                   
      SELECT LOCATION_ID into D_LOCATION_ID from S3G_SYSAD_LOCATIONMASTER 
            WHERE Location_Code = D_Location_Code;
     
--For Inter LOB = > Code Starts
 Select Count(distinct LOB_ID) into D_INTCOUNT 
 From S3G_LAD_MANUALJNDET where MANUAL_JOURNAL_VOUCHER_ID = P_MJV_ID
 and (Lob_Id != D_Lob_Id OR LOCATION_ID!=D_LOCATION_ID) ;
 
 If (D_INTCOUNT > 0 ) Then
  Begin
   Insert Into Tmp_Lad_Inter_Lob_Payment (Lob_Id,Lob_Code,LOCATION_ID,Row_Id)
   Select Tbl.Lob_Id,Tbl.Lob_Code,Tbl.LOCATION_ID,Rownum 
   from (Select distinct MJ.Lob_Id,Lm.Lob_Code,MJ.LOCATION_ID
     From S3G_LAD_MANUALJNDET MJ
     --INNER JOIN S3G_LAD_ACCPASADET PASA ON PASA.PA_SA_REF_ID=PRD.PA_SA_REF_ID
     --Inner Join S3g_Lad_Acccreation Ac On Ac.ACCOUNT_CREATION_ID = PASA.ACCOUNT_CREATION_ID 
     Inner Join S3g_Sysad_Lobmaster Lm On Lm.Lob_Id = MJ.Lob_Id
     WHERE MJ.MANUAL_JOURNAL_VOUCHER_ID = P_MJV_ID
     and (MJ.Lob_Id != D_Lob_Id OR MJ.LOCATION_ID!=D_LOCATION_ID)
     ) Tbl;
   End;
 End IF;  
 --for inter lob = > Code Ends
  
  --open P_OUTTBL for
  --select * from Tmp_Lad_Inter_Lob_Payment;
     

        
    IF(P_JV_Status_Code=2) THEN       
          BEGIN        
            dbms_output.put_line('JV Status 2 .. Calling Dataset');
               LA_INS_DS(d_Company_ID                                               
                 ,d_LOB_ID                                                 
                 ,d_Location_ID                                                 
                 ,d_JV_Sequence_Type                                                
                 ,d_Doc_No                                       
                 , fn_todate(d_JV_Date)                                           
                 ,d_Value_Date                                                
                 ,P_User_ID                                                
                 ,d_XML_Journal          
                 ,P_JV_Status_Code);
          
      --for inter lob = > Code Starts           
        Select Count(1) into d_Details_Master_Count 
        From Tmp_Lad_Inter_Lob_Payment;
      D_Details_Record_Count := 1;
      While(D_Details_Master_Count >= D_Details_Record_Count) 
      Loop
        Begin
          Select Lob_Code,Lob_Id,LOCATION_ID into E_Lob_code,E_Lob_Id,E_LOCATION_ID  
            from Tmp_Lad_Inter_Lob_Payment 
            where Row_Id = D_Details_Record_Count;

          La_Ins_Ds(D_Company_Id,E_Lob_Id,E_LOCATION_ID,D_JV_SEQUENCE_TYPE,
            D_Doc_No,D_JV_DATE,null,p_User_ID,D_XML_JOURNAL,p_JV_Status_Code);

          D_Details_Record_Count := D_Details_Record_Count + 1;
        End;
      End Loop;
      /* Inter LOB reversal not handled properly handled
        By Thalai on 26th Jun 2014 - End*/      
      La_Ins_Ds(D_Company_Id,D_Lob_Id,D_Location_Id,D_JV_SEQUENCE_TYPE,
        D_Doc_No,D_JV_DATE,null,p_User_ID,D_XML_JOURNAL,p_JV_Status_Code);   
      --for inter lob = > Code Ends           
                 
           RETURN;
           dbms_output.put_line('Dataset return ');
          end;                              
    END IF;
    
    
    
      D_UPDATE_STATUS_VALUE := FN_GET_JV_UPD_STS(P_UPDATE_STATUS);
                                                          
      D_Company_Currency_ID := FN_Get_Jv_Curr_ID(D_Company_ID);                                                                            
                                       
      D_Txn_Currency_ID := D_Company_Currency_ID;
                                                                     
      D_Txn_Exchange_Rate := FN_Get_Jv_Exchg_Rate(D_Company_ID,D_Company_Currency_ID,D_Txn_Currency_ID);                                                                            
                                                                            
    D_Narration := D_Narration || '  ' ||  D_Narration_Value;
                          
      select  
              TJV_CHAR_SET,
              TJV_SEQUENCE_NO
       into
              D_JV_CHAR_SET
             ,D_JV_SEQUENCE_NO
        From table(FN_Tbl_Get_Split_Doc_No(D_Doc_No));
                                                                          
        D_Entity_ID:=D_Global_Dim1_ID;
                                                                            
IF(P_Update_Status=1) THEN                                                                   

          Begin                                                                                                
            
            
                  DBMS_OUTPUT.PUT_LINE('TEST MAIL');
      
      --for inter lob = > Code Starts   
          Select Count(1) into d_Details_Master_Count 
        From Tmp_Lad_Inter_Lob_Payment;
        D_Details_Record_Count := 1;
        
          --D(d_Details_Master_Count);
          --RETURN;
        
        While(D_Details_Master_Count >= D_Details_Record_Count) 
        Loop
          Begin
            Select Lob_Code,Lob_Id,LOCATION_ID
            into E_Lob_code,E_Lob_Id,E_LOCATION_ID 
            from Tmp_Lad_Inter_Lob_Payment 
            where Row_Id = D_Details_Record_Count;
            
            E_LOCATION_CODE:=FN_GET_LOCATIONCODE(E_LOCATION_ID);
            E_D_DOC_NO := D_Jv_Char_Set || '/' || TO_CHAR(D_Jv_Sequence_No) || E_Lob_code || E_LOCATION_CODE;
             
             La_Jv_Ins_Hdr(D_Company_Id,E_Lob_Id,E_LOCATION_ID,
              E_Account_Link_Key,D_Jv_Sequence_Type,D_Jv_Char_Set,
              TO_CHAR(D_Jv_Sequence_No) || E_Lob_code || E_LOCATION_CODE,D_Narration,fn_todate(D_Value_Date),D_Txn_Currency_Id,
              D_Txn_Exchange_Rate,D_Company_Currency_Id,D_Global_Dim1_Code,
              D_Global_Dim1_Id,P_Jv_Status_Code,P_Update_Status,P_User_Id,fn_todate(D_JV_DATE),E_D_DOC_NO);   
              
            Update Tmp_Lad_Inter_Lob_Payment 
              set Account_Link = E_Account_Link_Key
              where Row_Id = D_Details_Record_Count;
            D_Details_Record_Count := D_Details_Record_Count + 1;
          End;
        End Loop;  
    --for inter lob = > Code Ends

   


           LA_JV_Ins_Hdr( 
             D_Company_ID                                                                                
            ,D_LOB_ID                                                                           
            ,D_Location_ID                                                                                
            ,D_Account_Link_key                                                                              
            ,D_JV_Sequence_Type                                                                    
            ,D_JV_Char_Set                                                                               
            ,D_JV_Sequence_No                                                                 
            ,D_Narration                                                                                
            ,fn_todate(D_Value_Date)                                           
            ,D_Txn_Currency_ID                                                                              
            ,D_Txn_Exchange_Rate                                                                              
            ,D_Company_Currency_ID                                                                             
            ,D_Global_Dim1_Code                                          
            ,D_GLOBAL_DIM1_ID                                                                               
            ,P_JV_STATUS_CODE                                                                               
            ,P_Update_Status                                                                             
            ,P_User_ID                   
            ,fn_todate(D_JV_Date));
               dbms_output.put_line('Called JV Header Details.....'); 
               
    Select Count(1) Into D_Details_Master_Count 
        From Tmp_Lad_Inter_Lob_Payment;        
      If (D_Details_Master_Count > 0) Then
        Begin
          Update S3g_Jv_Hdr Set Cross_Doc_Number = D_Account_Link_Key 
            Where Account_Link_Key In 
            (Select Account_Link from Tmp_Lad_Inter_Lob_Payment);
        End;
      End if;
               
          end;
END IF; 
                                                                               
/************************* Header Insertion End ********************************/                                                       
                                        
                                                                            
/************************* Details Insertion Start ********************************/                                                                            
                                                                            
     
--     TMP_TBL_LA_DETAILS
     
--   TMP_LA_TBLCFMDETAILS
             
-- TMP_LA_TBLCFMDETAILS table columns   Id,TGL_CODE,tSL_Code,TTXN_AMOUNT,tAcc_Flag,tAcc_Type,tTxn_Type,tAcc_Identifier

 
                                                                            
                         
Insert InTo TMP_TBL_LA_JOURNALDETAILS
  (
              ID
           , tReference_Type
           ,tReference_No
           ,tSub_Reference_No
           ,tGL_Code
           ,tSL_Code
           ,tTxn_Amount
           ,tTxn_Type
           ,tAcc_Flag
           ,tDim2_No
           ,tDue_Flag
           ,tDim1_Code
           ,OCCURANCE_NO
           ,LOB_ID
           ,LOCATION_ID
  )                                                                
  SELECT        
            ROWNUM AS ID,
            D_Reference_Type                                                        
             ,PANum                                                        
             ,SANum                                                            
             ,GL_Account_No                                                        
             ,SL_Account_No                                                            
             ,(Case When Accounting_Flag=0 --Here Accounting_Flag is taken as txn_type                         
                THEN -(Txn_Amount) ELSE Txn_Amount END)                                              
             ,Accounting_Flag  --Here Accounting_Flag is taken as txn_type              
             ,Account_Code                                                        
             ,GLOBAL_DIMENSION2_NUMBER                                  
             ,POSTING_FLAG                                  
             ,GLOBAL_DIMNENSION1_CODE 
             ,OCCURRENCE_NO
             ,LOB_ID
             ,LOCATION_ID
  FROM    
          S3G_LAD_MANUALJNDET
  WHERE MANUAL_JOURNAL_VOUCHER_ID=P_MJV_ID                                                             
        AND Company_ID=D_Company_ID;
                                                    
update TMP_TBL_LA_JOURNALDETAILS set TDIM2_TYPE=23,TDIM2_CODE=1 Where tDim2_No IS NOT NULL;                                                                  
 ---------------------------------FA-S3G Integration part validation start---------------------------  
SELECT COUNT('X') INTO D_EXISTS FROM S3G_SYSAD_GlobalParameterSetup WHERE Company_ID=D_COMPANY_ID  and Integrated_System =1;

IF(D_EXISTS > 0) THEN
          SELECT to_clob(REPLACE(REPLACE( XMLELEMENT("Root",
       xmlagg(XMLELEMENT(" ",  
              XMLAGG(XMLELEMENT("Details", 
                     XMLATTRIBUTES(ID "ID" ,TREFERENCE_TYPE "TREFERENCE_TYPE",
                     TREFERENCE_NO "TREFERENCE_NO", TSUB_REFERENCE_NO "TSUB_REFERENCE_NO",
                     --TO_CHAR(TVALUE_DATE, 'MM/DD/YYYY HH12:MI:SS AM') "TVALUE_DATE", 
                     TGL_CODE "TGL_CODE", TSL_CODE "TSL_CODE", 
                     TTXN_AMOUNT "TTXN_AMOUNT", 
                     
--                     (Case When CASHFLOW_TYPE='53' then '0' 
--                     When CASHFLOW_TYPE='55' then '1'
--                     else TTXN_TYPE End) 
                     TTXN_TYPE "TTXN_TYPE", 
                     
                     TACC_FLAG "TACC_FLAG", 
                     TDIM2_TYPE "TDIM2_TYPE", TDIM2_CODE "TDIM2_CODE", TDIM2_NO "TDIM2_NO" 
                   )))) 
            )).GETCLOBVAL() , '< >', ''), '</ >', '')) INTO d_XML_JournalGL 
            FROM TMP_TBL_LA_JOURNALDETAILS
               GROUP BY 
            ID ,TREFERENCE_TYPE, TREFERENCE_NO, TSUB_REFERENCE_NO, TGL_CODE,
            TSL_CODE, TTXN_AMOUNT, TTXN_TYPE,TACC_FLAG, TDIM2_TYPE, TDIM2_CODE,
            Tdim2_No;

   SELECT JV_DATE  INTO D_TEMPJV_DATE FROM S3G_JV_HDR WHERE  ACCOUNT_LINK_KEY = D_ACCOUNT_LINK_KEY;              
   --FAS3G_CHK_VALID (D_COMPANY_ID,D_LOCATION_CODE, D_tempJv_Date, D_XML_JournalGL,P_ERRORCODE,P_ERRORMSG,P_OUTTABLE,P_OUTTABLE1);
            
               

   IF( P_ErrorCode > 0 )  THEN                 
    BEGIN                               
     RETURN;               
    END;                             
   END IF;                  
     
END IF;
 
---------------------------------FA-S3G Integration part validation end--------------------------- 

-------------------journal validation start---------------------            
SELECT SUM(TTXN_AMOUNT) into D_TTXN_AMOUNT FROM TMP_TBL_LA_JOURNALDETAILS;
IF(D_TTXN_AMOUNT <> 0) THEN           
BEGIN        
   P_ERRORCODE := 120;                         
   P_ERRORMSG := 'Journal not tallied.';                           
        
  RETURN;   
END; 
END IF;
------------------journal validation end-----------------------                                              


-- OPEN P_OUTTBL FOR
--SELECT * FROM TMP_TBL_LA_JOURNALDETAILS;
--RETURN;
                    
IF(P_Update_Status=1)  then                             
    BEGIN              
      dbms_output.put_line('Calling Insert JV Details .... ');  
      
          INSERT INTO S3G_Jv_Det
                     ( Company_ID                                                                                               
                     , Account_Link_Key                                                                                       
                     , Reference_Type                                                                                               
                     , Reference_Number                                                                       
                     , SUB_REFERENCE_NUMBER                      
                     , Value_Date                                                   
                     , Txn_Amount                                                                                               
                     , GL_Account_Number                                     
                     , Sub_GL_Account_Number                                                               
                     , Accounting_Flag  --Here Accounting_Flag is taken as txn_type                                                                                             
                     , Global_Dimension2_Type                                                                                               
                     , Global_Dimension2_Code                                                                                          
                     , GLOBAL_DIMENSION2_NUMBER
                     , Occurrence_No 
                     , S3G_JV_DET_ID
                     )             
                                                                       
            --SELECT TBL.*,ROWNUM FROM (
            select  D_COMPANY_ID                                                                          
                    ,D_Account_Link_Key                                                                          
                    ,tReference_Type                                                                            
                    ,tReference_No                                                                             
                    ,tSub_Reference_No                        
                    ,fn_todate(D_Value_Date)                                                                            
                    ,tTxn_Amount                                                                            
                    ,tGL_Code                                                                 
                    ,tSL_Code                                                                             
                    ,tAcc_Flag                                                        
                    ,tDim2_Type                                                                          
                    ,tDim2_Code                                                                            
                    ,TDIM2_NO
                    ,OCCURANCE_NO
                    ,SEQ_S3G_JV_Det.NEXTVAL
            From TMP_TBL_LA_JOURNALDETAILS; 
            --ORDER BY D_Account_Link_Key) TBL; 
             
             
    --for inter lob = > Code Starts 
       If (D_Details_Master_Count > 0 ) Then
      Begin
        D_Details_Record_Count := 1;
        While(D_Details_Master_Count >= D_Details_Record_Count) 
        Loop
          Begin
            Select Lob_Id,LOCATION_ID,Account_Link Into E_Lob_Id,E_LOCATION_ID,E_Account_Link_Key 
              From Tmp_Lad_Inter_Lob_Payment where Row_Id = D_Details_Record_Count;
              
              INSERT INTO S3G_Jv_Det
                     ( Company_ID                                                                                               
                     , Account_Link_Key                                                                                       
                     , Reference_Type                                                                                               
                     , Reference_Number                                                                       
                     , SUB_REFERENCE_NUMBER                      
                     , Value_Date                                                   
                     , Txn_Amount                                                                                               
                     , GL_Account_Number                                     
                     , Sub_GL_Account_Number                                                               
                     , Accounting_Flag  --Here Accounting_Flag is taken as txn_type                                                                                             
                     , Global_Dimension2_Type                                                                                               
                     , Global_Dimension2_Code                                                                                          
                     , GLOBAL_DIMENSION2_NUMBER
                     , Occurrence_No 
                     , S3G_JV_DET_ID
                     )             
                                                                       
            --SELECT TBL.*,ROWNUM FROM (
            select  D_COMPANY_ID                                                                          
                    ,E_Account_Link_Key                                                                          
                    ,tReference_Type                                                                            
                    ,tReference_No                                                                             
                    ,tSub_Reference_No                        
                    ,fn_todate(D_Value_Date)                                                                            
                    ,tTxn_Amount                                                                            
                    ,tGL_Code                                                                 
                    ,tSL_Code                                                                             
                    ,tAcc_Flag                                                        
                    ,tDim2_Type                                                                          
                    ,tDim2_Code                                                                            
                    ,TDIM2_NO
                    ,OCCURANCE_NO
                    ,SEQ_S3G_JV_Det.NEXTVAL
            From TMP_TBL_LA_JOURNALDETAILS
              Where Lob_Id = E_Lob_Id 
              AND LOCATION_ID=E_LOCATION_ID;
              --Order By E_Account_Link_Key) Tbl;      
              D_Details_Record_Count := D_Details_Record_Count + 1;
          End;
        End Loop;        
      End;
    End IF;    
       --for inter lob = > Code Ends      
             
                        
    end;
end if;
 
--OPEN P_OUTTBL FOR
--SELECT * FROM S3G_Jv_Det ORDER BY ACCOUNT_LINK_KEY DESC;
--RETURN;

              
update S3G_LAD_MANUALJN set ACCOUNT_LINK_KEY=D_ACCOUNT_LINK_KEY 
        Where MANUAL_JV_ID=P_MJV_ID;                                                                              
                      
    
select MANUAL_JV_NO,sysdate into d_RECEIPT_NO,d_RECEIPT_DATE 
      from  S3G_LAD_MANUALJN 
      WHERE MANUAL_JV_ID=P_MJV_ID;
    
--  S3G_CLN_UpdateRepayReceipt_REVREC_CHQRTN (@Company_ID=@Company_ID,@Receipt_No=@Receipt_No,@PageID=77)                                       
      CN_Upd_RepyRcpt_RecRec_ChqRtn(d_Company_ID,d_Receipt_No,77);
    
             
-- Move Records which are having value 1 in Dim1                                  
          
          Select count(1) into intCount from TMP_TBL_LA_JOURNALDETAILS Where tDim1_Code=1;
                                  
If (intCount > 0) then                                 
                                  
Begin -- DataSet Start                             
                              
                        
              
    IF(p_JV_Status_Code=1)  then                           
     Begin   
            SELECT REPLACE(REPLACE( XMLELEMENT("Root",
      XMLAGG(xmlelement(" ", 
              xmlagg(XMLELEMENT("Details", XMLATTRIBUTES(
                    id "ID"
                  ,tReference_Type "TREFERENCE_TYPE"
                  ,tReference_No "TREFERENCE_NO"
                  ,tSub_Reference_No "TSUB_REFERENCE_NO"
                  ,tGL_Code "TGL_CODE"
                  ,tSL_Code "TSL_CODE"
                  ,tTxn_Amount "TTXN_AMOUNT"
                  ,TTXN_TYPE "TTXN_TYPE"
                  ,trim(tAcc_Flag) "TACC_FLAG"
                  ,tDim2_Type "TDIM2_TYPE"
                  ,tDim2_Code "TDIM2_CODE"
                  ,tDim2_No "TDIM2_NO"
                  ,tDue_Flag "TDUE_FLAG"
                  ,tDebtCollector_Code "TDEBTCOLLECTOR_CODE"
                  ,tDue_Serial_No "TDUE_SERIAL_NO"
                  ,TCATEGORY_TYPE "TCATEGORY_TYPE"
                  ,TDIM1_CODE "TDIM1_CODE"
              ))))
            ))  , '< >', ''), '</ >', '') INTO D_XML_JOURNAL
  from TMP_TBL_LA_JOURNALDETAILS Where TDIM1_CODE=1
  GROUP BY    Id,tReference_Type,tReference_No,tSub_Reference_No
                ,tGL_Code,tSL_Code,tTxn_Amount,tTxn_Type
                ,tAcc_Flag,tDim2_Type,tDim2_Code,tDim2_No
                ,TDUE_FLAG,TDEBTCOLLECTOR_CODE
                ,tDue_Serial_No,TCATEGORY_TYPE,TDIM1_CODE;
     END;             
   END IF;                                    

      dbms_output.put_line(D_XML_Journal);
      
--      RAISE_APPLICATION_ERROR(-20001,D_COMPANY_ID|| ' , ' ||D_LOB_ID|| ' , ' ||D_LOCATION_ID|| ' , ' ||D_JV_SEQUENCE_TYPE|| ' , ' 
--              ||D_DOC_NO|| ' , ' ||(D_JV_DATE)|| ' , ' ||
--              D_VALUE_DATE|| ' , ' ||P_USER_ID|| ' , ' ||P_JV_STATUS_CODE);
              
        
        
        LA_INS_DS(D_COMPANY_ID,D_LOB_ID,D_LOCATION_ID,D_JV_SEQUENCE_TYPE,D_DOC_NO,
        --(D_JV_DATE),
        TO_CHAR(FN_TODATE(D_JV_DATE),'DD/MON/YYYY HH12:MI:SS AM'),
              --(D_VALUE_DATE),
        TO_CHAR(FN_TODATE(D_VALUE_DATE),'DD/MON/YYYY HH12:MI:SS AM'),
              P_User_ID,REPLACE(D_XML_Journal,'</ >',' '),P_JV_Status_Code);
                                           
end; -- DataSet End    
END IF;
--d('hiiiiiiiiiiiiiii');
p_ErrorMsg:=' ';
-------Check GL Sum Validation Start
S3G_JV_CHKGLSL_SUM(D_DOC_NO,D_COMPANY_ID,D_JV_DATE,P_JV_STATUS_CODE,'A',P_ERRORCODE,P_ERRORMSG);
--d(P_ERRORCODE||'JV_MJV'||P_ERRORCODE);
-------Check GL Sum Validation end

/************************* Details Insertion End ********************************/                                                                             
                                                                                   
End LA_JV_MJV;

/

create or replace
PROCEDURE "S3G_APPROVAL_GRID"
(                               
 P_Company_ID int,                                    
 P_User_ID INT:=NULL,     
 P_Tran_Type VARCHAR2:= NULL,                                   
 P_Entity_Type_code INT:=NULL,    
 P_ENTITY_ID INT:=NULL,             
 P_lob_id INT:=NULL,                                    
 P_LOCATION_ID INT:=NULL,                                    
 P_DOCUMENT_NO VARCHAR2:= NULL,    
 P_DOCUMENT_ID INT:= NULL,   
 P_STATUS INT:=NULL,
 P_From_Date Varchar2:= Null,
 P_To_Date Varchar2:= Null,
 P_Approval_Date Varchar2:= Null
,P_OUTTBL OUT SYS_REFCURSOR
,P_OUTTBL1 OUT SYS_REFCURSOR
)                                    
AS                                    
  P_ERRORCODE INT;       
  P_USER_NAME VARCHAR(50);    
  P_LOCATION_CODE VARCHAR(50);        
  D_LOCATION_ID NUMBER;
  D_LOB_ID NUMBER;
  D_DOCUMENT_ID NUMBER;
  D_CONDITION VARCHAR(2000);
  D_TBLVALUE  VARCHAR2(9000); 
   D_Location_Cursor Sys_Refcursor;
   D_NO_OF_RDS NUMBER:=0;
  
Begin 

D_CONDITION := ' ';

  EXECUTE IMMEDIATE ('Alter session set NLS_COMP = LINGUISTIC');
  EXECUTE IMMEDIATE ('Alter session set NLS_SORT = BINARY_CI');

  EXECUTE IMMEDIATE('TRUNCATE TABLE TMP_TBL_LAD_COMMON');
  execute immediate 'TRUNCATE TABLE TMP_GETCAMP_LOCATION';
  execute immediate 'TRUNCATE TABLE TMP_S3G_GEN_USERLOBLOCMAP';
  -- Created By : Anbuvel.T, Date : 23-MAY-2018, Description: Transaction Approval Screen Document number Load
 IF(P_lob_id IS NOT NULL AND P_lob_id>0)THEN
  BEGIN 
    D_LOB_ID:=P_lob_id;
  END;
 ELSE
  BEGIN
    D_LOB_ID:=NULL;
  END;
 END IF;
 IF(P_LOCATION_ID IS NOT NULL AND P_LOCATION_ID>0)THEN
  BEGIN 
    D_LOCATION_ID:=P_LOCATION_ID;
  END;
 ELSE
  BEGIN
    D_LOCATION_ID:=NULL;
  END;
 END IF;
 
 IF(P_DOCUMENT_ID IS NOT NULL AND P_DOCUMENT_ID>0)THEN
  BEGIN 
    D_DOCUMENT_ID := P_DOCUMENT_ID;
  END;
 ELSE
  BEGIN
    D_DOCUMENT_ID:=NULL;
  END;
 END IF;
 D_NO_OF_RDS:=S3G_FN_GETNOOFRECORDS();
 SELECT USER_NAME INTO P_USER_NAME FROM S3G_SYSAD_USERMASTER 
 WHERE USER_ID=P_USER_ID AND COMPANY_ID=P_COMPANY_ID;    
 P_location_code:=FN_Get_LocationCode(P_location_id);
      
                            
--  D(P_location_code);
-----table[2]---------------    
/*
 OPEN P_OUTTBL FOR
--  SELECT 
--    VALUE as LOOKUP_CODE,NAME as Lookup_Description
--  FROM S3G_ORG_LOOKUP 
--  WHERE TYPE='ORG_APPLICATION_PROCESS_ACTION' AND VALUE IN (2,4)
--  ORDER BY VALUE;
  SELECT                                             
    LOOKUP_CODE,                                            
    Lookup_Description 
  from S3G_LAD_LOOKUPTYPEDET
  where LookupType_Code=9 and lookup_code in (3,4)
  ; 
  
  */
                                  
------table[3]----------------- 

IF(P_Tran_Type='PRAP')THEN   --Check List Approval(Pricing Approval)
BEGIN

--    D('Pricing');
    
    OPEN P_OUTTBL FOR
    SELECT VALUE AS Lookup_Code , NAME as Lookup_Description
    FROM S3G_ORG_LOOKUP 
    WHERE TYPE = 'ORG_APPLICATION_PROCESS_ACTION'
    And Value In (2 , 4);

    D_Condition := ' Where (PRI.COMPANY_ID = ' || Cast(P_Company_Id As Varchar) || ' and PRI.STATUS_ID in (1,6)) 
    And PRI.CREATED_BY != ' || CAST(P_User_Id AS VARCHAR) 
    || ' AND TO_DATE(To_CHAR(PRI.OFFER_DATE , ''DD/Mon/YYYY'')) <= ''' || TO_DATE(To_CHAR(FN_TODATE(P_Approval_Date),'DD/Mon/YYYY')) || '''';    
   
    --LOB
    if(NVL(P_lob_id , 0) != 0) then
      BEGIN    
        D_CONDITION := D_CONDITION || ' AND PRI.LOB_ID = ' ||  cast(P_lob_id as varchar);
      END;
    END if;    
    
    --Location
    if(NVL(P_LOCATION_ID , 0) != 0) then
      BEGIN    
        D_CONDITION := D_CONDITION || ' AND PRI.LOCATION_ID = ' ||  cast(P_LOCATION_ID as varchar);
      END;
    END if;
    
    --Customer
    if(NVL(P_ENTITY_ID , 0) != 0) then
      BEGIN    
        D_CONDITION := D_CONDITION || ' AND PRI.CUSTOMER_ID = ' ||  cast(P_ENTITY_ID as varchar);
      END;
    END if;
    
    --Document Number
    if(NVL(P_DOCUMENT_ID , 0) != 0) then
      BEGIN    
        D_CONDITION := D_CONDITION || ' AND PRI.pricing_id = ' ||  cast(P_DOCUMENT_ID as varchar);
      END;
    END if;
   
     --From and To Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Not Null) THEN
      BEGIN 
    
         D_CONDITION :=  D_CONDITION || ' and TO_DATE(To_CHAR(PRI.OFFER_DATE , ''DD/Mon/YYYY''))           
         BETWEEN ' || '''' || TO_DATE(To_CHAR(FN_TODATE(P_FROM_DATE),'DD/Mon/YYYY')) || '''' || '           
         AND ' || '''' || TO_DATE(To_CHAR(FN_TODATE(P_To_DATE),'DD/Mon/YYYY')) || '''' || ' '; 
    
      END;
    END IF;   
   
    --From Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Null) THEN
      BEGIN    
        D_CONDITION := D_CONDITION || ' and (To_CHAR(PRI.OFFER_DATE , ''DD/Mon/YYYY'')) >= '       
     || '''' ||  TO_DATE(To_CHAR(FN_TODATE(P_FROM_DATE),'DD/Mon/YYYY'))  || '''' || ' ';
      END;
    END IF;
    
    --To Date
   IF(P_from_Date Is Null and P_To_DATE Is Not Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and (To_CHAR(PRI.OFFER_DATE , ''DD/Mon/YYYY'')) <= '       
     || '''' ||  TO_DATE(To_CHAR(FN_TODATE(P_To_DATE),'DD/Mon/YYYY'))  || '''' || ' ';
    END;
    END IF;
    
    D_TBLVALUE := '
    INSERT INTO TMP_TBL_LAD_COMMON
    (COL1_NUM
    , COL2_NUM
    , COL9_VARCHAR
    , COL3_NUM
    , COL10_VARCHAR
    , COL4_NUM
    , COL11_VARCHAR
    , COL5_NUM
    , COL6_NUM
    , COL7_NUM
    , COL8_NUM
    , COL19_NUM)
     SELECT 
     ROW_NUMBER() OVER (ORDER BY BUSINESS_OFFER_NUMBER)
     , CUST.CUSTOMER_ID
     , CUST.CUSTOMER_NAME
     , PRI.PRICING_ID
     , PRI.BUSINESS_OFFER_NUMBER
     , PRI.LOB_ID
     , PRI.LOCATION_CODE
     , PRI.PRICING_ID
     , PRI.CREATED_BY
     , PRI.STATUS_ID
     , APVL.PRICINGAPPROVAL_ID
     , APVL.APPROVAL_SERIAL_NUMBER
     FROM S3G_ORG_PRICING PRI
    INNER JOIN S3G_ORG_CUSTMASTER CUST ON CUST.CUSTOMER_ID = PRI.CUSTOMER_ID
    left join S3G_ORG_PRICINGAPPROVAL APVL
    ON APVL.Pricing_ID = PRI.Pricing_ID and APVL.APPROVER_ID = ' || CAST(P_User_ID AS VARCHAR) || '
    '  ||  d_Condition
    || ' AND APVL.Pricing_ID Is Null';--Pending

--    DBMS_OUTPUT.PUT_LINE(d_tblValue);
    
    EXECUTE IMMEDIATE D_TBLVALUE;
    
    OPEN P_OUTTBL1 FOR
    Select
      COL1_NUM AS SL_NO,--partition by PRI.CUSTOMER_ID 
      COL2_NUM as CUSTOMER_ID,
      COL9_VARCHAR as Entity,
      COL3_NUM as ID,
      COL10_VARCHAR as Document_No,
      COL10_VARCHAR AS ORDER_NO,
      P_USER_NAME as Approver,
      GETUSERDATEFORMAT(FN_TODATE(P_Approval_Date),P_Company_ID) AS APPROVAL_DATE,
      0 as Approval_status_id ,  
      COL8_NUM as APPROVAL_ID,
      '' AS APPROVAL_STATUS,
      P_User_ID as User_id,
      COL4_NUM AS LOB_ID,
      FN_GET_LOCATIONID(COL11_VARCHAR) as LOCATION_ID,
      COL5_NUM as Task_number            
      ,1 as Task_status_type_code   -- Pricing Type        
      ,COL6_NUM as created_by            
      ,'' as Status            
      ,'' as REMARKS                             
      ,42 AS PROGRAM_ID   -- Check List for Deal Processing
      ,COL7_NUM AS ACCOUNTSTATUS
      ,'' AS DOCUMENT_PATH
      ,COL19_NUM AS APPROVAL_SERIAL_NUMBER
    From TMP_TBL_LAD_COMMON;
    
    /*
    
    OPEN P_OUTTBL1 FOR
    SELECT 
    Row_number() over (order by BUSINESS_OFFER_NUMBER) as Sl_no,--partition by PRI.CUSTOMER_ID 
    CUST.CUSTOMER_ID,
    CUST.CUSTOMER_NAME as Entity,
    PRI.PRICING_ID as ID,
    PRI.BUSINESS_OFFER_NUMBER as Document_No,
    PRI.BUSINESS_OFFER_NUMBER as order_no,
    P_USER_NAME as Approver,
    GETUSERDATEFORMAT(SYSDATE,P_COMPANY_ID) AS APPROVAL_DATE,
    0 as Approval_status_id ,  
    0 as APPROVAL_ID,
    '' as Approval_status,
    P_User_ID as User_id,
    PRI.lob_id as lob_id,
    FN_GET_LOCATIONID(PRI.LOCATION_CODE) as LOCATION_ID,
    PRI.PRICING_ID as Task_number            
    ,1 as Task_status_type_code   -- Pricing Type        
    ,PRI.created_by as created_by            
    ,'' as Status            
    ,'' as REMARKS                             
    ,42 as PROGRAM_ID   -- Check List for Deal Processing
    ,PRI.STATUS_ID AS ACCOUNTSTATUS
    ,'' as Document_Path,
    NVL(APR.approval_serial_number,0) as approval_serial_number
    from S3G_ORG_PRICING PRI
    INNER JOIN S3G_ORG_CUSTMASTER CUST ON CUST.CUSTOMER_ID=PRI.CUSTOMER_ID
    LEFT JOIN S3g_Org_Pricingapproval APR ON APR.Pricing_Id=PRI.PRICING_ID AND APR.Approver_ID=P_User_ID AND APR.Action_ID IN (47,51,44)  
    WHERE (D_LOB_ID IS NULL OR PRI.LOB_ID=D_LOB_ID)
    AND (D_LOCATION_ID IS NULL OR PRI.LOCATION_ID=D_LOCATION_ID)
    and (d_document_id is null or pri.pricing_id=d_document_id)
    --AND (PRI.STATUS_ID IN (1,6) OR (PRI.STATUS_ID =51 AND PRI.PRICINGAPPROVAL_STATUS=1))--=44
    AND (PRI.STATUS_ID IN (1,6) OR ( PRI.PRICINGAPPROVAL_STATUS=1))--=44
    and APR.PRICING_ID is null
    and rownum < 11
    ;--Pending
    
    */
    
END;
END IF;
IF(P_Tran_Type='APAP')THEN   --Application Approval(Pricing Approval)
  BEGIN
        
    OPEN P_OUTTBL FOR
    SELECT VALUE AS Lookup_Code , NAME as Lookup_Description
    FROM S3G_ORG_LOOKUP 
    WHERE TYPE = 'ORG_APPLICATION_PROCESS_ACTION'
    AND VALUE in (2 , 4);


    D_CONDITION := ' Where (APP.COMPANY_ID = ' || CAST(P_COMPANY_ID AS VARCHAR) || ' and APP.STATUS_ID in (1))';    
   
    --LOB
    if(NVL(P_lob_id , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND APP.LOB_ID = ' ||  cast(P_lob_id as varchar);
    END;
    END if;    
    
    --Location
    if(NVL(P_LOCATION_ID , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND APP.LOCATION_ID = ' ||  cast(P_LOCATION_ID as varchar);
    END;
    END if;
    
    --Customer
    if(NVL(P_ENTITY_ID , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND APP.CUSTOMER_ID = ' ||  cast(P_ENTITY_ID as varchar);
    END;
    END if;
    
    --Document Number
    if(NVL(P_DOCUMENT_ID , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND APP.APPLICATION_PROCESS_ID = ' ||  cast(P_DOCUMENT_ID as varchar);
    END;
    END if;
   
     --From and To Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Not Null) THEN
    BEGIN 
    
         D_CONDITION :=  D_CONDITION || ' and TO_DATE(To_CHAR(APP.APPLICAION_PROCESS_DATE , ''DD/Mon/YYYY''))           
         BETWEEN ' || '''' || TO_DATE(To_CHAR(FN_TODATE(P_FROM_DATE),'DD/Mon/YYYY')) || '''' || '           
         AND ' || '''' || TO_DATE(To_CHAR(FN_TODATE(P_To_DATE),'DD/Mon/YYYY')) || '''' || ' '; 
    
    END;
    END IF;   
   
    --From Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and (To_CHAR(APP.APPLICAION_PROCESS_DATE , ''DD/Mon/YYYY'')) >= '       
     || '''' ||  TO_DATE(To_CHAR(FN_TODATE(P_FROM_DATE),'DD/Mon/YYYY'))  || '''' || ' ';
    END;
    END IF;
    
    --To Date
   IF(P_from_Date Is Null and P_To_DATE Is Not Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and (To_CHAR(APP.APPLICAION_PROCESS_DATE , ''DD/Mon/YYYY'')) <= '       
     || '''' ||  TO_DATE(To_CHAR(FN_TODATE(P_To_DATE),'DD/Mon/YYYY'))  || '''' || ' ';
    END;
    END IF;
    
    D_TBLVALUE := '
    INSERT INTO TMP_TBL_LAD_COMMON
    (COL1_NUM
    , COL2_NUM
    , COL9_VARCHAR
    , COL3_NUM
    , COL10_VARCHAR
    , COL4_NUM
    , COL11_VARCHAR
    , COL5_NUM
    , COL6_NUM
    , COL7_NUM
    ,COL18_DATE
    )
     SELECT 
     ROW_NUMBER() OVER (ORDER BY APPLICATION_NUMBER)
     , CUST.CUSTOMER_ID
     , CUST.CUSTOMER_NAME
     , APP.APPLICATION_PROCESS_ID
     , APP.APPLICATION_NUMBER
     , APP.LOB_ID
     , APP.LOCATION_CODE
     , APP.APPLICATION_PROCESS_ID
     , APP.CREATED_BY
     , APP.STATUS_ID
     , APP.APPLICAION_PROCESS_DATE
     FROM S3G_ORG_APPPROC APP
    INNER JOIN S3G_ORG_CUSTMASTER CUST ON CUST.CUSTOMER_ID = APP.CUSTOMER_ID
    '  ||  d_Condition;--Pending
        
       -- d(D_TBLVALUE);
     EXECUTE IMMEDIATE D_TBLVALUE;
    
    OPEN P_OUTTBL1 FOR
    Select
    COL1_NUM AS SL_NO,--partition by PRI.CUSTOMER_ID 
    COL2_NUM as CUSTOMER_ID,
    COL9_VARCHAR as Entity,
    COL3_NUM as ID,
    COL10_VARCHAR as Document_No,
    COL10_VARCHAR AS ORDER_NO,
    P_USER_NAME as Approver,
    GETUSERDATEFORMAT(COL18_DATE,P_Company_ID) AS APPROVAL_DATE,
    0 as Approval_status_id ,  
    0 as APPROVAL_ID,
    '' AS APPROVAL_STATUS,
    P_User_ID as User_id,
    COL4_NUM AS LOB_ID,
    FN_GET_LOCATIONID(COL11_VARCHAR) as LOCATION_ID,
    COL5_NUM as Task_number            
    ,1 as Task_status_type_code   -- Pricing Type        
    ,COL6_NUM as created_by            
    ,'' as Status            
    ,'' as REMARKS                             
    ,42 AS PROGRAM_ID   -- Check List for Deal Processing
    ,COL7_NUM AS ACCOUNTSTATUS
    ,'' AS DOCUMENT_PATH
    ,0 AS APPROVAL_SERIAL_NUMBER
    From TMP_TBL_LAD_COMMON;    
  END;
END IF;
IF(P_Tran_Type='ACAC')THEN   --Account Activation
  BEGIN
    OPEN P_OUTTBL1 FOR
      SELECT 
        AC.ACCOUNT_CREATION_ID as ID,
        AC.PANUM as Document_No        
      from S3G_LAD_ACCCREATION AC
      WHERE (D_LOB_ID IS NULL OR AC.LOB_ID=D_LOB_ID)
        AND (D_LOCATION_ID IS NULL OR AC.LOCATION_ID=D_LOCATION_ID)
        AND (D_DOCUMENT_ID IS NULL OR AC.ACCOUNT_CREATION_ID=D_DOCUMENT_ID);
  END;
END IF;
if(P_Tran_Type='PAAP')THEN    
  BEGIN--if(P_Tran_Type='FAFT')   
--      D('Payment Approval');
  RP_GET_CAMP_LOCATION(NULL,D_LOCATION_ID,D_LOCATION_CURSOR);
  RP_GET_USERLOBLOCMAPPING(P_USER_ID,D_LOB_ID,FN_GET_LOCATIONCODE(D_LOCATION_ID),56,P_COMPANY_ID,D_LOCATION_CURSOR);   -- Payment Approval
  
    OPEN P_OUTTBL FOR
          SELECT LOOKUP_CODE, LOOKUP_DESCRIPTION 
          FROM S3G_LAD_LOOKUPTYPEDET
          WHERE LOOKUPTYPE_CODE = 9 AND LOOKUP_CODE IN(3,4);
    D_CONDITION := ' Where (PR.COMPANY_ID = ' || TO_CHAR(P_COMPANY_ID) || ' and PR.PMT_VOUCHER_STATUS IN (1,2))';  -- Pending,Under Process Stage     
    --LOB
    if(NVL(P_lob_id , 0) != 0) then
     BEGIN    
        D_CONDITION := D_CONDITION || ' AND PR.LOB_ID = ' ||  TO_CHAR(P_lob_id);
     END;
    END if;    
    --Location
    if(NVL(P_LOCATION_ID , 0) != 0) then
     BEGIN    
        D_CONDITION := D_CONDITION || ' AND PR.LOCATION_ID = ' ||  TO_CHAR(P_LOCATION_ID);
     END;
    END if;
    
    -- Entity Type
    if(NVL(P_Entity_Type_code , 0) != 0) then
     BEGIN    
        D_CONDITION := D_CONDITION || ' AND PR.PAY_TO_TYPE_CODE = ' ||  TO_CHAR(P_Entity_Type_code);
     END;
    END if;
    --Customer
    if(NVL(P_ENTITY_ID , 0) != 0) then
     BEGIN    
        if(NVL(P_Entity_Type_code , 0) != 0 AND P_Entity_Type_code!=1) then
          BEGIN 
            D_CONDITION := D_CONDITION || ' AND PR.VENDOR_CODE = ' ||  TO_CHAR(P_ENTITY_ID);
          END;
        ELSE
          BEGIN
            D_CONDITION := D_CONDITION || ' AND PR.CUSTOMER_ID = ' ||  TO_CHAR(P_ENTITY_ID);
          END;
        END IF;
     END;
    END if;
    
    --Payment Request Number
    if(NVL(P_DOCUMENT_ID , 0) != 0) then
      BEGIN    
        D_CONDITION := D_CONDITION || ' AND PR.REQUEST_NO = ' ||  TO_CHAR(P_DOCUMENT_ID);
      END;
    END if;
   
     --From and To Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Not Null) THEN
      BEGIN 
         D_CONDITION :=  D_CONDITION || ' and TRUNC(PR.PAYMENT_REQUEST_DATE)           
         BETWEEN TRUNC(FN_TODATE(' || '''' || P_FROM_DATE || '''' || '))           
         AND TRUNC(FN_TODATE(' || '''' || P_To_DATE || '''' || ')) '; 
      END;
    END IF;   
   
    --From Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and TRUNC(PR.PAYMENT_REQUEST_DATE) >= TRUNC(FN_TODATE('       
     || '''' ||  P_FROM_DATE  || '''' || ')) ';
    END;
    END IF;
    
    --To Date
   IF(P_from_Date Is Null and P_To_DATE Is Not Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and TRUNC(PR.PAYMENT_REQUEST_DATE) <= TRUNC(FN_TODATE('       
     || '''' ||  P_To_DATE  || '''' || ')) ';
    END;
    END IF;
    
    D_TBLVALUE := '
    INSERT INTO TMP_TBL_LAD_COMMON
    (
     COL1_NUM
    , COL2_NUM
    , COL9_VARCHAR
    , COL3_NUM
    , COL10_VARCHAR
    , COL4_NUM
    , COL11_VARCHAR
    , COL5_NUM
    , COL6_NUM
    , COL7_NUM
    , COL8_NUM
    , COL19_NUM)
    SELECT 
      ROW_NUMBER() OVER (ORDER BY REQUEST_NO),
      CUSTOMER_ID,
      CUSTOMER_NAME,
      REQUEST_NO,
      PAYMENT_REQUEST_NO,
      LOB_ID,
      LOCATION_CODE,
      REQUEST_NO,
      CREATED_BY,
      PMT_VOUCHER_STATUS,
      APPROVAL_HDR_ID,
      TASK_APPROVAL_SERIALVALUE
    FROM (
     SELECT 
      DISTINCT
      NVL(CUST.CUSTOMER_ID,ent.entity_id) AS CUSTOMER_ID
     , NVL(CUST.CUSTOMER_NAME,ent.ENTITY_NAME) as CUSTOMER_NAME
     , pr.REQUEST_NO
     , pr.PAYMENT_REQUEST_NO
     , pr.LOB_ID
     , pr.LOCATION_ID
     , PR.LOCATION_CODE
--     , pr.REQUEST_NO as REQUEST_NOS
     , pr.CREATED_BY
     , pr.PMT_VOUCHER_STATUS
     , NVL(LAP.APPROVAL_HDR_ID,0) as APPROVAL_HDR_ID
     , NVL(TO_NUMBER(LAP.TASK_APPROVAL_SERIALVALUE),0) as TASK_APPROVAL_SERIALVALUE
     FROM S3G_LAD_PymntReqst pr
--     inner join S3G_LAD_PAYMENTREQSTDET PD on PD.REQUEST_NO=PR.REQUEST_NO  
     LEFT JOIN S3G_LAD_APPROVAL LAP ON LAP.TASK_NUMBER=pr.REQUEST_NO AND LAP.TASK_TYPE=10 AND LAP.TASK_APPROVALUSERID='|| TO_CHAR(P_User_ID)  || '
     INNER JOIN TMP_GETCAMP_LOCATION TEMP  ON TEMP.LOCATION_ID = pr.LOCATION_ID  
     INNER JOIN TMP_S3G_GEN_USERLOBLOCMAP USERLOCM  ON USERLOCM.LOB_ID = pr.LOB_ID AND USERLOCM.LOCATION_ID = pr.LOCATION_ID 
     left join S3G_ORG_CustMaster cust on cust.customer_id=pr.customer_id and pay_to_type_code=1  
--     LEFT join S3G_LAD_AccPASADet AD on PD.PA_SA_REF_ID=AD.PA_SA_REF_ID AND AD.SA_STATUSTYPE_CODE=25
     LEFT join S3G_ORG_EntityMaster ent on ent.entity_id=pr.vendor_code   and pay_to_type_code!=1     
    '  ||  d_Condition || ' AND LAP.TASK_NUMBER IS NULL) ';--Pending
        
        d(D_TBLVALUE);
     EXECUTE IMMEDIATE D_TBLVALUE;
    
    OPEN P_OUTTBL1 FOR
      Select
      COL1_NUM AS SL_NO,--partition by PRI.CUSTOMER_ID 
      COL2_NUM as CUSTOMER_ID,
      COL9_VARCHAR as Entity,
      COL3_NUM as ID,
      COL10_VARCHAR as Document_No,
      COL10_VARCHAR AS ORDER_NO,
      P_USER_NAME as Approver,
      GETUSERDATEFORMAT(FN_TODATE(P_Approval_Date),P_Company_ID) AS APPROVAL_DATE,
      0 as Approval_status_id ,  
      COL8_NUM as APPROVAL_ID,
      '' AS APPROVAL_STATUS,
      P_User_ID as User_id,
      COL4_NUM AS LOB_ID,
      FN_GET_LOCATIONID(COL11_VARCHAR) as LOCATION_ID,
      COL5_NUM as Task_number            
      ,10 as Task_status_type_code   -- Approval Type        
      ,COL6_NUM as created_by            
      ,'' as Status            
      ,'' as REMARKS                             
      ,54 AS PROGRAM_ID   --  Payment Request
      ,COL7_NUM AS ACCOUNTSTATUS
      ,'' AS DOCUMENT_PATH
      ,COL19_NUM AS APPROVAL_SERIAL_NUMBER
    
--        COL1_NUM AS SL_NO,--partition by PRI.CUSTOMER_ID 
--        COL2_NUM as CUSTOMER_ID,
--        COL9_VARCHAR as Entity,
--        COL3_NUM as ID,
--        COL10_VARCHAR as Document_No,
--        COL10_VARCHAR AS ORDER_NO,
--        P_USER_NAME as Approver,
--        GETUSERDATEFORMAT(SYSDATE,P_Company_ID) AS APPROVAL_DATE,
--        COL7_NUM as Approval_status_id ,  
--        COL8_NUM as APPROVAL_ID,
--        '' AS APPROVAL_STATUS,
--        P_User_ID as User_id,
--        COL4_NUM AS LOB_ID,
--        FN_GET_LOCATIONID(COL11_VARCHAR) as LOCATION_ID,
--        COL5_NUM as Task_number            
--        ,1 as Task_status_type_code   -- Pricing Type        
--        ,COL6_NUM as created_by            
--        ,'' as Status            
--        ,'' as REMARKS                             
--        ,54 AS PROGRAM_ID   -- Payment Request
--        ,COL7_NUM AS ACCOUNTSTATUS
--        ,'' AS DOCUMENT_PATH
--        ,0 AS APPROVAL_SERIAL_NUMBER
      From TMP_TBL_LAD_COMMON
      WHERE ROWNUM<D_NO_OF_RDS;
    
--      OPEN P_OUTTBL1 FOR
--       select             
--        case when nvl(Entity,'0')='0' then 'General' else Entity end as Entity,            
--       document_no            
--       ,order_no as order_no            
--       ,Approver            
--       , Approval_Date            
--       ,Approval_status_id as Approval_status_id            
--       ,Approval_status as Approval_status   
--       ,0 as APPROVAL_ID
--       , User_id             
--       ,Row_number() over (partition by order_no order by order_no) as Sl_no            
--       , lob_id            
--       , location_id            
--       , Task_number            
--       , Task_status_type_code            
--       , created_by            
--       ,status            
--       ,remarks            
--       ,id as id            
--       ,'' as Document_Path            
--       --,'' as Scanned_Ref_No 
--      , PROGRAM_ID
--      ,ACCOUNTSTATUS
--      ,0 approval_serial_number
--       from(            
--       select             
--        case when P_Entity_Type_code=1 then cust.customer_name else ent.entity_name end as Entity,            
--        Payment_Request_No as Document_No, 
--        Payment_Request_No as order_no,
--        P_USER_NAME as Approver,
--        GETUSERDATEFORMAT(SYSDATE,P_COMPANY_ID) AS APPROVAL_DATE,
--        0 as Approval_status_id,
--        '' as Approval_status,
--        P_user_id as User_id,
--        pr.lob_id as lob_id,
--        FN_GET_LOCATIONID(PR.LOCATION_CODE) as LOCATION_ID,
--        PR.request_no as Task_number,
--        9 as Task_status_type_code,
--        pr.created_by as created_by,
--        '' as status,
--        '' as REMARKS,
--        PR.Request_no as id,
--        10 as PROGRAM_ID,
--        AD.SA_STATUS_CODE AS ACCOUNTSTATUS
--      from             
--      S3G_LAD_PymntReqst pr     
--      inner join S3G_LAD_PAYMENTREQSTDET PD on PD.REQUEST_NO=PR.REQUEST_NO
--      left join S3G_ORG_CustMaster cust on cust.customer_id=pr.customer_id and pay_to_type_code=1
--      left join S3G_ORG_ENTITYMASTER ENT on ENT.ENTITY_ID=PR.VENDOR_CODE 
--      LEFT JOIN S3G_LAD_ACCPASADET AD ON PD.PA_SA_REF_ID=AD.PA_SA_REF_ID AND AD.SA_STATUSTYPE_CODE=25 
--      where pmt_voucher_status in(1,2)            
--      and pr.lob_id=nvl(P_lob_id,pr.lob_id)            
--      and pr.location_code=nvl(P_location_code,pr.location_code)            
--      and Pay_To_Type_Code=nvl(P_Entity_Type_code,Pay_To_Type_Code)            
--      and nvl(pr.customer_id,0)=case when P_Entity_Type_code=1 then nvl(P_Entity_id ,nvl(pr.customer_id,0)) else nvl(pr.customer_id,0) end            
--      and nvl(vendor_code,0)=case when P_Entity_Type_code!=1 then nvl(P_Entity_id ,nvl(vendor_code,0)) else nvl(vendor_code,0) end            
--      and Payment_Request_No=nvl(P_document_no,Payment_Request_No)            
----      and pr.created_by!=P_user_id            
--      and PR.COMPANY_ID=P_COMPANY_ID        
--      --and ent.Company_ID=P_Company_ID        
--      and pr.request_no not in(select Task_number from S3G_LAD_Approval where Task_approvalUserID=P_user_id and task_type=10 and Company_ID=P_Company_ID)            
--      union            
--       select             
--       case when P_Entity_Type_code=1 then cust.customer_name else ent.entity_name end as Entity,            
--         CASE WHEN  nvl(Is_Mobile,1)=1 Then            
--          '<img src="..\Images\Online_Receipt.png" alt="Online Receipt" style="width:20px;height:18px;"/>        '            
--          Else             
--          '<img src="..\Images\Mobile_Receipt.png" alt="Mobile Receipt" style="width:20px;height:18px;"/>        ' End            
--          || Payment_Request_No as document_no            
--          , Payment_Request_No as order_no            
--                  
--       ,USER_NAME as Approver            
--       ,GetUserDateFormat(Task_StatusDate,P_company_id) AS Approval_Date            
--       ,lookup_code as Approval_status_id            
--       ,lookup_description as Approval_status            
--       ,Task_ApprovalUserID as User_id            
--       ,pr.lob_id as lob_id            
--       ,FN_GET_LOCATIONID(PR.LOCATION_CODE) as LOCATION_ID            
--       ,PR.request_no as Task_number            
--       ,9 as Task_status_type_code            
--       ,pr.created_by as created_by            
--       ,'' as status            
--       ,APP.REMARKS as REMARKS            
--       ,PR.Request_no as id            
--        ,10 as PROGRAM_ID    
--        ,AD.SA_STATUS_CODE
--      from  
--      S3G_LAD_Approval app            
--      inner join S3G_LAD_PymntReqst PR on app.task_number=pr.request_no            
--      inner join s3g_sysad_usermaster us on us.user_id=app.Task_approvalUserID            
--      inner join S3G_LAD_LookupTypeDet det on det.lookup_code=task_status_code and lookuptype_code=9            
--      left join S3G_ORG_CustMaster cust on cust.customer_id=pr.customer_id and pay_to_type_code=1    
--      inner join S3G_LAD_PAYMENTREQSTDET PD on PD.REQUEST_NO=PR.REQUEST_NO
--      LEFT join S3G_LAD_AccPASADet AD on PD.PANum=AD.PANum AND AD.SA_STATUSTYPE_CODE=25
--      left join S3G_ORG_EntityMaster ent on ent.entity_id=pr.vendor_code            
--      where pmt_voucher_status in(1,2) and app.task_type=10            
--      and pr.lob_id=nvl(P_lob_id,pr.lob_id)            
--      and pr.location_code=nvl(P_location_code,pr.location_code)            
--      and Pay_To_Type_Code=nvl(P_Entity_Type_code,Pay_To_Type_Code)         
--      and PR.COMPANY_ID=P_COMPANY_ID        
--      --and ent.Company_ID=P_Company_ID           
--      and nvl(pr.customer_id,0)=case when P_Entity_Type_code=1 then nvl(P_Entity_id ,nvl(pr.customer_id,0)) else nvl(pr.customer_id,0) end            
--      and nvl(vendor_code,0)=case when P_Entity_Type_code!=1 then nvl(P_Entity_id ,nvl(vendor_code,0)) else nvl(vendor_code,0) end            
--      and Payment_Request_No=nvl(P_document_no,Payment_Request_No)            
--      )TMP            
--      order by order_no,Sl_no;  
    END;                                    
  END IF;   
if(P_Tran_Type='FINAPPR')THEN    
  BEGIN--if(P_Tran_Type='FAFT')   
      OPEN P_OUTTBL FOR
    SELECT VALUE AS Lookup_Code , NAME as Lookup_Description
    FROM S3G_ORG_LOOKUP 
    WHERE TYPE = 'ORG_APPLICATION_PROCESS_ACTION'
    AND VALUE in (2 , 4);


    D_CONDITION := ' Where (INVLOD.COMPANY_ID = ' || CAST(P_COMPANY_ID AS VARCHAR) || ' and LOADDET.STATUS_ID in (1))';--Pending    
   
    --LOB
    if(NVL(P_lob_id , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND INVLOD.LOB_ID = ' ||  cast(P_lob_id as varchar);
    END;
    END if;    
    
    --Location
    if(NVL(P_LOCATION_ID , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND INVLOD.LOCATION_ID = ' ||  cast(P_LOCATION_ID as varchar);
    END;
    END if;
    
    --Customer
    if(NVL(P_ENTITY_ID , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND INVLOD.CUSTOMER_ID = ' ||  cast(P_ENTITY_ID as varchar);
    END;
    END if;
    
    --Document Number
    if(NVL(P_DOCUMENT_ID , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND INVLOD.FACTORING_INV_LOAD_ID = ' ||  cast(P_DOCUMENT_ID as varchar);
    END;
    END if;
   
     --From and To Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Not Null) THEN
    BEGIN 
    
         D_CONDITION :=  D_CONDITION || ' and TO_DATE(To_CHAR(LOADDET.INVOICE_DATE , ''DD/Mon/YYYY''))           
         BETWEEN ' || '''' || TO_DATE(To_CHAR(FN_TODATE(P_FROM_DATE),'DD/Mon/YYYY')) || '''' || '           
         AND ' || '''' || TO_DATE(To_CHAR(FN_TODATE(P_To_DATE),'DD/Mon/YYYY')) || '''' || ' '; 
    
    END;
    END IF;   
   
    --From Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and (To_CHAR(LOADDET.INVOICE_DATE , ''DD/Mon/YYYY'')) >= '       
     || '''' ||  TO_DATE(To_CHAR(FN_TODATE(P_FROM_DATE),'DD/Mon/YYYY'))  || '''' || ' ';
    END;
    END IF;
    
    --To Date
   IF(P_from_Date Is Null and P_To_DATE Is Not Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and (To_CHAR(LOADDET.INVOICE_DATE , ''DD/Mon/YYYY'')) <= '       
     || '''' ||  TO_DATE(To_CHAR(FN_TODATE(P_To_DATE),'DD/Mon/YYYY'))  || '''' || ' ';
    END;
    END IF;
    
    D_TBLVALUE := '
    INSERT INTO TMP_TBL_LAD_COMMON
    (COL1_NUM
    , COL2_NUM
    , COL9_VARCHAR
    , COL3_NUM
    , COL10_VARCHAR
    , COL4_NUM
    , COL11_VARCHAR
    , COL5_NUM
    , COL6_NUM
    , COL7_NUM
    , COL8_NUM
    , COL19_NUM)
     SELECT 
     ROW_NUMBER() OVER (ORDER BY LOADDET.INVOICE_NO)
     , CM.CUSTOMER_ID
     , CM.CUSTOMER_NAME
     , LOADDET.FACTORING_INV_LOAD_DETAILS_ID
     , LOADDET.INVOICE_NO
     , INVLOD.LOB_ID
     , INVLOD.LOCATION_CODE
     , INVLOD.FACTORING_INV_LOAD_ID
     , INVLOD.CREATED_BY
     , LOADDET.STATUS_ID
     , INVAPP.INVOICE_APPROVAL_ID
     , INVAPP.APPROVAL_SERIAL_NUMBER
    
    
    
      FROM S3G_LAD_FACTRNGINVLOADING INVLOD
      INNER JOIN S3G_ORG_CUSTMASTER CM
      ON CM.CUSTOMER_ID=INVLOD.CUSTOMER_ID
      INNER JOIN S3G_LAD_FACTRNGINVLOADINGDET LOADDET
      ON LOADDET.FACTORING_INV_LOAD_ID=INVLOD.FACTORING_INV_LOAD_ID
      LEFT JOIN S3G_LAD_FACINVOICE_APPROVAL INVAPP
      ON (INVAPP.FACTORING_INV_LOAD_DETAILS_ID=LOADDET.FACTORING_INV_LOAD_DETAILS_ID AND INVAPP.FACTORING_INV_LOAD_ID=INVLOD.FACTORING_INV_LOAD_ID)
      
        '||d_Condition
         ||' AND INVAPP.FACTORING_INV_LOAD_DETAILS_ID Is Null and LOADDET.STATUS_ID=1 ';--Pending

    DBMS_OUTPUT.PUT_LINE(d_tblValue);
    
    EXECUTE IMMEDIATE D_TBLVALUE;
    
    OPEN P_OUTTBL1 FOR
    Select
    COL1_NUM AS SL_NO,--partition by PRI.CUSTOMER_ID 
    COL2_NUM as CUSTOMER_ID,
    COL9_VARCHAR as Entity,
    COL3_NUM as ID,
    COL10_VARCHAR as Document_No,
    COL10_VARCHAR AS ORDER_NO,
    P_USER_NAME as Approver,
    GETUSERDATEFORMAT(SYSDATE,P_Company_ID) AS APPROVAL_DATE,
    0 as Approval_status_id ,  
    0 as APPROVAL_ID,
    '' AS APPROVAL_STATUS,
    P_User_ID as User_id,
    COL4_NUM AS LOB_ID,
    FN_GET_LOCATIONID(COL11_VARCHAR) as LOCATION_ID,
    COL5_NUM as Task_number            
    ,1 as Task_status_type_code      
    ,COL6_NUM as created_by            
    ,'' as Status            
    ,'' AS REMARKS                             
    ,568 AS PROGRAM_ID   -- Check List for Deal Processing
    ,COL7_NUM AS ACCOUNTSTATUS
    ,'' AS DOCUMENT_PATH
    ,0 AS APPROVAL_SERIAL_NUMBER
    From TMP_TBL_LAD_COMMON;   
    
   
    end;
                                     
  END IF;     

IF(P_Tran_Type='ROPCCN')THEN   --ROP CASE CANCELLATION APPROVAL
BEGIN
    OPEN P_OUTTBL FOR
    SELECT LOOKUP_CODE AS LOOKUP_CODE,
           LOOKUP_DESCRIPTION as Lookup_Description
        FROM S3G_LAD_LOOKUPTYPEDET WHERE LOOKUPTYPE_CODE = 9
        And Lookup_Code In (3 , 4); 

    D_CONDITION := ' Where CM.COMPANY_ID = ' || CAST(P_COMPANY_ID AS VARCHAR) ;
   
    --LOB
    if(NVL(P_lob_id , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND CM.LOB_ID = ' ||  cast(P_lob_id as varchar);
    END;
    END if;    
    
    --Location
--    if(NVL(P_LOCATION_ID , 0) != 0) then
--    BEGIN    
--        D_CONDITION := D_CONDITION || ' AND PRI.LOCATION_ID = ' ||  cast(P_LOCATION_ID as varchar);
--    END;
--    END if;
    

   
     --From and To Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Not Null) THEN
    BEGIN 
    
         D_CONDITION :=  D_CONDITION || ' and TO_DATE(To_CHAR(CMC.CASE_CANCEL_DATE , ''DD/Mon/YYYY''))           
         BETWEEN ' || '''' || TO_DATE(To_CHAR(FN_TODATE(P_FROM_DATE),'DD/Mon/YYYY')) || '''' || '           
         AND ' || '''' || TO_DATE(To_CHAR(FN_TODATE(P_To_DATE),'DD/Mon/YYYY')) || '''' || ' '; 
    
    END;
    END IF;   
   
    --From Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and (To_CHAR(CMC.CASE_CANCEL_DATE , ''DD/Mon/YYYY'')) >= '       
     || '''' ||  TO_DATE(To_CHAR(FN_TODATE(P_FROM_DATE),'DD/Mon/YYYY'))  || '''' || ' ';
    END;
    END IF;
    
    --To Date
   IF(P_from_Date Is Null and P_To_DATE Is Not Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and (To_CHAR(CMC.CASE_CANCEL_DATE , ''DD/Mon/YYYY'')) <= '       
     || '''' ||  TO_DATE(To_CHAR(FN_TODATE(P_To_DATE),'DD/Mon/YYYY'))  || '''' || ' ';
    END;
    END IF;
        
   
    
    D_TBLVALUE := '
    INSERT INTO TMP_TBL_LAD_COMMON
    (COL1_NUM
     ,COL2_NUM
     ,COL3_NUM
     ,COL9_VARCHAR
     ,COL4_NUM
     ,COL10_VARCHAR
     ,COL5_NUM
     ,COL6_NUM
     ,COL7_NUM
   )
     SELECT 
     ROW_NUMBER() OVER (ORDER BY CASE_CANCEL_ID)
     , CMC.CASE_CANCEL_ID
     , CM.CASE_ID
     , CMC.CASE_CANCEL_NUMBER
     , CM.LOB_ID
     , CM.LOCATION_CODE
     , CMC.CREATED_BY
     , CM.CUSTOMER_ID
     , CM.LOCATION_ID
     FROM S3G_LR_CASEMASTER_CANCEL CMC
    INNER JOIN S3G_LR_CASEMASTER CM ON CMC.CASE_ID = CM.CASE_ID
   
    '  ||  d_Condition
    || ' AND CMC.CASE_CANCEL_STATUS = 1';--Pending


    DBMS_OUTPUT.PUT_LINE(d_tblValue);
    
    EXECUTE IMMEDIATE D_TBLVALUE;
    
    OPEN P_OUTTBL1 FOR
    Select
    COL1_NUM AS SL_NO,--partition by PRI.CUSTOMER_ID 
    COL2_NUM AS ID,
    COL3_NUM AS CASE_ID,
    COL3_NUM AS Task_number,
    COL4_NUM AS LOB_ID,
    COL6_NUM AS CUSTOMER_ID,
    COL7_NUM AS LOCATION_ID,
    COL9_VARCHAR as Document_No,
    COL9_VARCHAR AS ORDER_NO,
    COL5_NUM AS CREATED_BY,
    P_USER_NAME AS APPROVER,
    GETUSERDATEFORMAT(SYSDATE,P_Company_ID) AS APPROVAL_DATE,
    0 as Approval_status_id ,  
    0 as APPROVAL_ID,
    '' AS APPROVAL_STATUS,  
    P_User_ID as User_id,
    '' AS APPROVAL_STATUS
    ,'' as Status            
    ,'' as REMARKS                             
    ,574 AS PROGRAM_ID   --ROP CASE CANCELLATION
    ,'' AS ACCOUNTSTATUS
    ,'' AS DOCUMENT_PATH
    ,0 AS APPROVAL_SERIAL_NUMBER
    ,'' AS ENTITY
   
    From TMP_TBL_LAD_COMMON TMP; 
    
     
   
    
END;
END IF;


------table[3]----------------- 

IF(P_Tran_Type='NOCT')THEN   --NOC Approval
BEGIN

--    D('Pricing');
    
    OPEN P_OUTTBL FOR
        SELECT LOOKUP_CODE, LOOKUP_DESCRIPTION 
          FROM S3G_LAD_LOOKUPTYPEDET
          WHERE LOOKUPTYPE_CODE = 9 AND LOOKUP_CODE IN(3,4);
--    SELECT VALUE AS Lookup_Code , NAME as Lookup_Description
--    FROM S3G_ORG_LOOKUP 
--    WHERE TYPE = 'ORG_APPLICATION_PROCESS_ACTION'
--    And Value In (2 , 4);

     D_CONDITION := ' Where NOC.COMPANY_ID = ' || CAST(P_COMPANY_ID AS VARCHAR) ;
   
    --LOB
    if(NVL(P_lob_id , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND NOC.LOB_ID = ' ||  cast(P_lob_id as varchar);
    END;
    END if;    
    
    --Location
    if(NVL(P_LOCATION_ID , 0) != 0) then
    BEGIN    
        D_CONDITION := D_CONDITION || ' AND NOC.LOCATION_ID = ' ||  cast(P_LOCATION_ID as varchar);
    END;
    END if;
    
  
     --From and To Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Not Null) THEN
    BEGIN 
    
         D_CONDITION :=  D_CONDITION || ' and TO_DATE(To_CHAR(NOC.NOC_DATE , ''DD/Mon/YYYY''))           
         BETWEEN ' || '''' || TO_DATE(To_CHAR(FN_TODATE(P_FROM_DATE),'DD/Mon/YYYY')) || '''' || '           
         AND ' || '''' || TO_DATE(To_CHAR(FN_TODATE(P_To_DATE),'DD/Mon/YYYY')) || '''' || ' '; 
    
    END;
    END IF;   
   
    --From Date
    IF(P_from_Date Is Not Null and P_To_DATE Is Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and (To_CHAR(NOC.NOC_DATE , ''DD/Mon/YYYY'')) >= '       
     || '''' ||  TO_DATE(To_CHAR(FN_TODATE(P_FROM_DATE),'DD/Mon/YYYY'))  || '''' || ' ';
    END;
    END IF;
    
    --To Date
   IF(P_from_Date Is Null and P_To_DATE Is Not Null) THEN
    BEGIN    
        D_CONDITION := D_CONDITION || ' and (To_CHAR(NOC.NOC_DATE , ''DD/Mon/YYYY'')) <= '       
     || '''' ||  TO_DATE(To_CHAR(FN_TODATE(P_To_DATE),'DD/Mon/YYYY'))  || '''' || ' ';
    END;
    END IF;
    
    D_TBLVALUE := '
    INSERT INTO TMP_TBL_LAD_COMMON
    (COL1_NUM
    , COL2_NUM
    , COL9_VARCHAR
    , COL10_VARCHAR
    , COL3_NUM
    , COL4_NUM
    , COL11_VARCHAR
    , COL5_NUM
    )
     SELECT 
     ROW_NUMBER() OVER (ORDER BY NOCTERMINATN_ID)
     , CUST.CUSTOMER_ID
     , CUST.CUSTOMER_NAME
     , NOC.NOC_NUMBER
     , NOC.NOCTERMINATN_ID
     , NOC.LOB_ID
     , NOC.LOCATION_CODE
     , NOC.CREATED_BY
--     , PRI.STATUS_ID
     FROM S3G_LAD_NOCTerminatn NOC
    INNER JOIN S3G_ORG_CUSTMASTER CUST ON CUST.CUSTOMER_ID = NOC.CUSTOMER_ID
--    AND NOC.CREATED_BY NOT IN('''||p_user_id||''')
    '  ||  d_Condition
    || ' AND NOC.NOC_STATUS_CODE = 1';--Pending
    

    DBMS_OUTPUT.PUT_LINE(d_tblValue);
    
    EXECUTE IMMEDIATE D_TBLVALUE;
    
    OPEN P_OUTTBL1 FOR
    Select
    COL1_NUM AS SL_NO,--partition by PRI.CUSTOMER_ID 
--    COL10_VARCHAR as ID,
    COL2_NUM as CUSTOMER_ID,
    COL9_VARCHAR as Entity,
    COL3_NUM as ID,
--    COL10_VARCHAR as ID,
    COL4_NUM as lob_id,
    COL10_VARCHAR as Document_No,
    COL10_VARCHAR AS ORDER_NO,
    P_USER_NAME as Approver,
     GETUSERDATEFORMAT(SYSDATE,P_Company_ID) AS APPROVAL_DATE,
    0 as Approval_status_id ,  
    0 as APPROVAL_ID,
    '' AS APPROVAL_STATUS,  
    P_User_ID as User_id,
    '' AS APPROVAL_STATUS
    ,'' as Status            
    ,'' as REMARKS                             
    ,76 AS PROGRAM_ID   -- NOC
    ,'' AS ACCOUNTSTATUS
    ,'' AS DOCUMENT_PATH
    ,0 AS APPROVAL_SERIAL_NUMBER
    ,'' AS ENTITY
    From TMP_TBL_LAD_COMMON;
    
END;
End If;

--Added on 15-Nov-2018 Starts Here

--Added for MJV Approval = > Code Starts

IF(P_Tran_Type = 'MJA')THEN   --MJV Approval
BEGIN
  OPEN P_OUTTBL FOR
    SELECT LOOKUP_CODE, LOOKUP_DESCRIPTION
    FROM S3G_LAD_LOOKUPTYPEDET
    WHERE LOOKUPTYPE_CODE = 9 AND LOOKUP_CODE IN (3,4) AND COMPANY_ID = P_Company_ID;
    
  --OPEN P_OUTTBL1 FOR
  /*INSERT INTO TMP_TBL_LAD_COMMON
    (COL1_NUM
    , COL2_NUM
    , COL9_VARCHAR
    , COL10_VARCHAR
    , COL3_NUM
    , COL4_NUM
    , COL11_VARCHAR
    , COL5_NUM
    )  */
    OPEN P_OUTTBL1 FOR
    SELECT ROW_NUMBER() OVER (ORDER BY MJ.MANUAL_JV_ID) AS SL_NO
    --MJ.MANUAL_JV_ID
     ,0 AS CUSTOMER_ID
     ,'' AS "Entity"
     ,MJ.MANUAL_JV_NO AS Document_No
     ,MJ.MANUAL_JV_ID AS ID
     ,MJ.LOB_ID AS lob_id
     ,MJ.MANUAL_JV_NO AS ORDER_NO
     ,P_USER_NAME as Approver
     ,GETUSERDATEFORMAT(SYSDATE,P_Company_ID) AS APPROVAL_DATE
     ,0 AS Approval_status_id
     ,0 AS APPROVAL_ID
     ,'' AS APPROVAL_STATUS
     ,P_User_ID as User_id
     ,'' AS Status
     ,'' AS REMARKS
     ,77 AS PROGRAM_ID
     ,'' AS ACCOUNTSTATUS
     ,'' AS DOCUMENT_PATH
     ,0 AS APPROVAL_SERIAL_NUMBER
     ,'' AS ENTITY
     FROM S3G_LAD_MANUALJN MJ
     WHERE MJ.COMPANY_ID = P_COMPANY_ID AND MJ.CREATED_BY = P_User_ID AND (MJ.LOB_ID = P_lob_id OR P_lob_id IS NULL)
     AND (MJ.LOCATION_CODE = P_location_code OR P_location_code IS NULL) 
     AND ((MJ.MANUAL_JV_DATE BETWEEN FN_TODATE(P_From_Date) AND FN_TODATE(P_To_Date) AND (P_From_Date IS NOT NULL AND P_To_Date IS NOT NULL)) 
     OR (P_From_Date IS NULL OR P_To_Date IS NULL))
     AND ((MJ.MANUAL_JV_DATE >= FN_TODATE(P_From_Date)) OR (P_From_Date IS NULL))
     AND ((MJ.MANUAL_JV_DATE <= FN_TODATE(P_To_Date)) OR (P_To_Date IS NULL))
     ;

   /* OPEN P_OUTTBL1 FOR
    SELECT
    COL1_NUM AS SL_NO,
    COL2_NUM as CUSTOMER_ID,
    COL9_VARCHAR as Entity,
    COL3_NUM as ID,
    COL4_NUM as lob_id,
    COL10_VARCHAR as Document_No,
    
    COL10_VARCHAR AS ORDER_NO,
    P_USER_NAME as Approver,
     GETUSERDATEFORMAT(SYSDATE,P_Company_ID) AS APPROVAL_DATE,
    0 as Approval_status_id,
    0 as APPROVAL_ID,
    '' AS APPROVAL_STATUS,
    P_User_ID as User_id,
    '' AS APPROVAL_STATUS
    ,'' as Status
    ,'' as REMARKS
    ,77 AS PROGRAM_ID
    ,'' AS ACCOUNTSTATUS
    ,'' AS DOCUMENT_PATH
    ,0 AS APPROVAL_SERIAL_NUMBER
    ,'' AS ENTITY
    FROM TMP_TBL_LAD_COMMON;  */
     
END;
END IF;

--Added for MJV Approval = > Code Ends

--Cheque Return Authorization

If(P_Tran_Type = 'CHA')Then
Begin

    S3g_Cln_Get_Chqrtn_Apvl(
    P_Company_ID ,                                    
    P_User_ID ,                                  
    P_Entity_Type_code,    
    P_ENTITY_ID,             
    D_LOB_ID,                                    
    D_LOCATION_ID,                                    
    P_DOCUMENT_NO,    
    P_DOCUMENT_ID,   
    P_STATUS,
    P_From_Date,
    P_To_Date,
    P_Approval_Date,
    1
    ,P_Outtbl
    ,P_OUTTBL1 );


End;
END IF;
--Added on 15-Nov-2018 Ends Here

  -- Created By : Anbuvel.T, Date : 08-12-2018, Description : Challan Generation
--  If(P_Tran_Type = 'CHL')Then-- Challan Generation
--  Begin
--      S3G_CLN_GET_CHALLAN_APVL(
--      P_Company_ID ,                                    
--      P_User_ID ,                                  
--      P_Entity_Type_code,    
--      P_ENTITY_ID,             
--      D_LOB_ID,                                    
--      D_LOCATION_ID,                                    
--      P_DOCUMENT_NO,    
--      P_DOCUMENT_ID,   
--      P_STATUS,
--      P_From_Date,
--      P_To_Date,
--      P_Approval_Date,
--      1
--      ,P_Outtbl
--      ,P_OUTTBL1 );
--  End;
--  END IF;

END;

/

create or replace
PROCEDURE "S3G_ORG_APP_CHK_VER" 
(
  P_Company_Id IN NUMBER DEFAULT NULL 
 ,P_OPTION in number default null
 ,P_USER_ID in number default null
 ,P_PROGRAM_ID in number default null
 ,P_APPLICATION_ID in number default null
 ,P_ASSET_CODE VARCHAR2 DEFAULT NULL
 ,P_Page_Mode VARCHAR2 DEFAULT NULL
 
, P_OUTTBL OUT SYS_REFCURSOR
, P_OUTTBL1 OUT SYS_REFCURSOR
, P_OUTTBL2 OUT SYS_REFCURSOR
, P_OUTTBL3 OUT SYS_REFCURSOR

) as 
D_CUSTOMER_NAME varchar(100);
D_PASSPORT_NUMBER varchar(100);
DATEOFBIRTH date;
D_ASSET_DESCRIPTION varchar(100);
D_COUNT number;

D_LOB_ID NUMBER;
D_PRODUCT_ID NUMBER;
D_CONSTITUTION_ID NUMBER;
d_APPLICATION_NUMBER varchar(100);

D_APP_VERIFY_HDR_ID NUMBER;

BEGIN
/*_____________________________________________________________________________

    Created By    : Sathish R
    Created On    : 13/Jan/2019
 ______________________________________________________________________________*/
OPEN P_OUTTBL FOR SELECT 'ORA_DUMMY' FROM DUAL;
open P_OUTTBL1 for select 'ORA_DUMMY' from DUAL;
open P_OUTTBL2 for select 'ORA_DUMMY' from DUAL;
open P_OUTTBL3 for select 'ORA_DUMMY' from DUAL;





open P_OUTTBL for
select 'X' into d_count from S3G_ORG_APP_Verify_Tran where application_process_id=P_APPLICATION_ID;


open P_OUTTBL1 for
select 'X' into d_count from S3G_ORG_APP_Verify_Tran 
where application_process_id=P_APPLICATION_ID and ( IS_VARIFIED=0);

open P_OUTTBL2 for
select 'X' into d_count from S3G_ORG_APP_VERIFY_TRAN_AST 
where application_process_id=P_APPLICATION_ID ;

open P_OUTTBL3 for
select 'X' into d_count from S3G_ORG_APP_VERIFY_TRAN_AST 
where application_process_id=P_APPLICATION_ID and ( IS_VARIFIED=0);


END S3G_ORG_APP_CHK_VER;

/

create or replace
PROCEDURE "S3G_OR_INS_APPDET_VER"(
    p_application_process_id NUMBER   := NULL,
    p_Application_No         VARCHAR2 := NULL,
    P_XML_APPLICATION_VER CLOB,
    P_XML_APPLICATION_ASSET_VER CLOB,
    P_APPLICATION_NUMBER OUT VARCHAR2,
    p_User_Id NUMBER   := NULL,
    p_ErrorCode OUT NUMBER )
AS
  P_XMLDOCID SYS.XMLTYPE;
  d_PK_ID number;
BEGIN
  -- =============================================
  -- Author:  Sathish R --03-Jan-2019
  -- Purpose:Application Verification
  -- =============================================
  
  DELETE FROM S3G_ORG_APP_VERIFY_TRAN WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
  DELETE FROM S3G_ORG_APP_VERIFY_TRAN_AST WHERE APPLICATION_PROCESS_ID=P_APPLICATION_PROCESS_ID;
   --select SEQ_ORG_APPVER.nextval into d_PK_ID from dual;
  IF(P_XML_APPLICATION_VER IS NOT NULL)THEN
    BEGIN
      p_xmldocid := SYS.XMLTYPE.createXML(P_XML_APPLICATION_VER);
      FOR APPVER IN
      (SELECT EXTRACTVALUE(VALUE(X),'/Details/@sno')                     AS SNO,
        extractvalue(value(x),'/Details/@Parameter')                     AS Parameter_Id,
        EXTRACTVALUE(VALUE(X),'/Details/@Verifi')    AS Verifi,
        EXTRACTVALUE(VALUE(X),'/Details/@VerificationResultsNotinOrder') AS VERIFICATIONRESULTSNOTINORDER,
        EXTRACTVALUE(VALUE(X),'/Details/@Remarks')                       AS REMARKS,
        EXTRACTVALUE(VALUE(X),'/Details/@VERDETID')                      AS VERDETID
      FROM TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
      )
      LOOP
        INSERT
        INTO S3G_ORG_APP_VERIFY_TRAN
          (
            APP_VERIFY_DET_ID,
            APP_VERIFY_TRAN_ID,
            APPLICATION_PROCESS_ID,
            IS_IN_ORDER,
            IS_VARIFIED,
            REMARKS
          )
        SELECT 
          APPVER.VERDETID,
          SEQ_ORG_APPVER.nextval,
          p_application_process_id,
          APPVER.VERIFICATIONRESULTSNOTINORDER,
          APPVER.Verifi,
          APPVER.REMARKS
        FROM dual;
      END LOOP;
    END ;
  END IF;
  
  
   IF(P_XML_APPLICATION_VER IS NOT NULL)THEN
    BEGIN
      p_xmldocid := SYS.XMLTYPE.createXML(P_XML_APPLICATION_ASSET_VER);
      FOR APPVERASSET IN
      (SELECT EXTRACTVALUE(VALUE(X),'/Details/@sno')                     AS SNO,
        extractvalue(value(x),'/Details/@Parameter')                     AS Parameter_Id,
        EXTRACTVALUE(VALUE(X),'/Details/@VIO')    AS Verifi,
        EXTRACTVALUE(VALUE(X),'/Details/@VNIO') AS VERIFICATIONRESULTSNOTINORDER,
        EXTRACTVALUE(VALUE(X),'/Details/@RM')                       AS REMARKS,
        EXTRACTVALUE(VALUE(X),'/Details/@APP_VERIFY_EXTN_DET_ID')                      AS VERDETIDEXTNID,
         EXTRACTVALUE(VALUE(X),'/Details/@APPLICATION_PROCESS_ASSET_ID')                      AS VERASSETDETID
      FROM TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
      )
      LOOP
      INSERT INTO  S3G_ORG_APP_VERIFY_TRAN_AST
      (
        APPLICATION_PROCESS_ASSET_ID,
        APPLICATION_PROCESS_ID,
        APP_VERIFY_EXTN_DET_ID,
        APP_VERIFY_TRAN_AST_ID,
        IS_VARIFIED,
        IS_IN_ORDER,
        REMARKS
      )
      select 
      APPVERASSET.VERASSETDETID,
      p_application_process_id,
      APPVERASSET.VERDETIDEXTNID,
      SEQ_APP_VERIFY_TRAN_AST_ID.NEXTVAL,
      APPVERASSET.Verifi,
      APPVERASSET.VERIFICATIONRESULTSNOTINORDER,
      APPVERASSET.REMARKS
      from dual;
      
      END LOOP;
      
      END;
     END IF; 
  
  
  
  UPDATE S3G_ORG_APPPROC  SET APP_VERIFIED_BY=p_User_Id,
APP_VERIFIED_ON=SYSDATE,
APP_VERIFY_HDR_ID=  d_PK_ID where APPLICATION_PROCESS_ID=p_application_process_id;
  
  P_ERRORCODE:=0;
  p_application_number:=' ';
END S3G_OR_INS_APPDET_VER;


/

create or replace
PROCEDURE "S3G_OR_INS_APPDET" 
(                                                               
  p_application_process_id NUMBER := NULL,
  p_Application_No varchar2 := null,  
  p_Status_ID VARCHAR2 := null,
  p_Company_ID NUMBER default null,  
  p_created_by NUMBER := null,
  p_constitution_id NUMBER:=NULL,
  p_lease_type NUMBER:=NULL,
  p_PaymentRuleCardId NUMBER:=NULL,
  p_LOB_ID NUMBER:=null,    
  P_Business_Offer_Number Varchar2 := Null,
  p_PRICING_PRO_ID NUMBER:=null,
  p_location_id NUMBER:=null,
  p_Sub_Location_ID NUMBER:=NULL,
  p_Credit_Purpose NUMBER:=NULL,
  p_product_id NUMBER := NULL, 
  p_date VARCHAR2 := NULL,
  p_CONTRACT_TYPE NUMBER:=NULL,
  p_sales_person_id NUMBER:=null,
  P_COVENANTS NUMBER:=NULL,
  p_Covenants_Terms VARCHAR2:=NULL,
  P_CUSTOMER_ID NUMBER:=NULL,
  p_Credit_Limit decimal:=NULL,
  p_Deal_Type NUMBER:=NULL, 
  p_Dealer_Id NUMBER:=NULL, 
  p_Dealer_Sales_Persion_Id NUMBER:=NULL,
  p_Debt_Collector_Name_Id NUMBER:=null, 
  p_Lead_Source_Type NUMBER:=NULL,
  P_LEAD_SOURCE_NAME_ID number:=null,
  p_Lead_Other_Source_Name VARCHAR2 := null, 
  p_Business_Source_Id NUMBER:=NULL, 
  p_Dealer_Scheme_Name_Id NUMBER:=null, 
  p_Seller_Code VARCHAR2 := NULL,
  p_Seller_Name VARCHAR2 := NULL,   
  p_Dealer_Commission_Applicable NUMBER:= NULL,   
  p_Finance_Amount decimal:=NULL,  
  P_TENURE NUMBER:=NULL,
  p_tenure_type NUMBER:=null,
  p_refinance_contract NUMBER:=NULL,
  P_MARGIN_AMOUNT NUMBER:=NULL,
  p_offer_residual_value decimal:=NULL,
  P_AREAR_ADVANCE NUMBER:=NULL,
  p_Discount decimal:=null,
  p_First_Installment_Date VARCHAR2:= null,
  p_Income_Book_Start_Date VARCHAR2:= null,
  p_Tentative_Account_Date VARCHAR2:= null,
  P_REPAYMENT_MODE NUMBER:=NULL,
  p_PNTD NUMBER:=NULL,
  p_Employer_Bank_Name NUMBER:=null,
  p_business_irr number := null,                                                                    
  p_company_irr NUMBER := NULL,                                                                    
  P_ACCOUNTING_IRR NUMBER := NULL,
  P_Existence_of_First_Charge NUMBER := NULL,
  P_Existence_of_Second_Charge NUMBER := NULL,  
  P_No_of_Days_to_be_considered NUMBER := NULL,
  P_Start_dly_chrg_Applicable NUMBER := NULL,  
  P_DELAY_DAYS NUMBER := NULL,  
  P_Start_Date_delay_rate decimal := NULL,  
  P_Start_delay_charges decimal := NULL,  
  P_Over_Due_Charges decimal := NULL,  
  P_Life_Insurance_Applicable NUMBER := NULL,  
  P_Life_Insurance_Entity number := null, 
  P_LIFE_INS_PRE_CUSTOMER DECIMAL := NULL,  
  P_Life_Ins_Prem_Amount decimal := NULL,  
  P_Insurance_Amount decimal := NULL,  
  P_Risk_Rating NUMBER := NULL,  
  P_Risk_Remarks Varchar2 := Null,  
  P_Risk_Score NUMBER:=NULL,  
  P_Risk_Document_No VARCHAR2 := NULL,  
  P_Risk_Quality_Value Varchar2 := Null,  
  P_Risk_Aml_Classification Varchar2 := Null, 
  P_RemarksFWC Varchar2 := Null, 
  
  --FT
  P_DEBT_PURCHASE_LIMIT DECIMAL := NULL, 
  P_PREPAYMENT_LIMIT in  decimal := NULL,
  P_EVALUATOR VARCHAR2 := NULL,
  P_AUDITOR VARCHAR2 := null, 
  P_DEALTRANSFER NUMBER := NULL, 
  P_INVOICE_CAP_VALUE decimal := NULL,
  p_DISCOUNT_RATE_LOC decimal := NULL,
  p_PENAL_RATE decimal := NULL,
  p_CREDIT_PERIOD_DAYS NUMBER := NULL,
  p_GRACE_PERIOD_DAYS NUMBER := NULL,
  p_DISP_PERIOD_DAYS NUMBER := NULL,
  p_RESUL_PERIOD_DAYS NUMBER := NULL,
  p_INSURANCE_COVERAGE_DAY NUMBER := NULL,
  P_INSURANCE_COMPANY_RATE decimal := NULL,
  p_INSURANCE_CUST_RATE decimal := NULL,
  P_INSURANCE_PAYABLE_AMOUNT NUMBER := NULL,
  
  p_DELAY_CHARGE_GRACE_DAYS NUMBER := NULL,
  p_DELAY_CHARGE_RATE decimal := NULL,
  p_DELAY_CHARGE_AMOUNT decimal := NULL,
  
  p_CRM_ID NUMBER:=NULL,                                                                    
  p_residual_value NUMBER:=NULL,
  p_offer_residual_value_amount decimal:=NULL,
  P_OFFER_MARGIN decimal:=NULL,
  p_offer_margin_amount decimal:=null,
  
  p_mla_applicable number:=null,
  p_MLA_Number varchar2:= null,                                                                    
  p_mla_validity_to varchar2:= null,                                         
  p_mla_validity_from varchar2:= null,                                                                    

  p_xml_alert varchar2:= null,
  p_xml_guarantor CLOB := null,                                                    
  p_XML_Invoice CLOB := NULL,                                                             
  p_XML_Moratorium CLOB:= null,
  p_XML_FollowDetail CLOB:= null,
  p_xml_repayment CLOB:= null,
  p_XML_Inflow CLOB := NULL,                                                                    
  p_xml_outflow CLOB:= null,
  p_XML_AssetDetails CLOB := NULL,                                                                    
  p_XML_Constitution CLOB:= null,
  p_XML_PDD CLOB := NULL,
  P_Xml_Roirule CLOB:= null,
  p_xml_repaymentstructure CLOB := null, 
  P_XMLDEALTRANSFER clob := null,   
  p_XMLLienAccount CLOB := NULL,   
  p_XMLCovenants CLOB := null,   
  p_fbdate number := null,
  P_Loan_Type Int := Null,
  P_Xmlmortgage CLOB := Null,
  P_XMLRepayDetailsOthers      CLOB:=NULL,    
  
  ---New FT Parameter
  P_RELATIONSHIPMANAGER in number default null,
  P_FACILITY_START_DATE in varchar2 default null,
  P_FACILITY_END_DATE in varchar2 default null,

  
  P_XMLCUSTOMERMAP CLOB:=NULL, 
  p_strXMLOtherCharges CLOB:=NULL, 
  P_XMLDISRATFORUTIL CLOB:=NULL, 
  
  p_application_number OUT varchar2,
  p_ErrorCode OUT Number                                          
)                                                                    
                                                                    
AS                                                                    

  p_application_process_type varchar2(30);
  P_OFFER_DATE TIMESTAMP;
  p_PDDT_ID number;  
  p_progarm_id number;
  p_Document_Type_Code Varchar2(5);
  p_OfferROIDetailsID number;
  p_ROIruleID number;
  p_MarginROI number;
  p_residualroi number;
  p_Location_Code VARCHAR2(30);
  p_xmldocid sys.xmltype;
  p_followupheaderid number;
  p_program_pk_id number;
  p_pricingid number;
  p_responsestatus_id number;
  p_response_id number;
  p_enquiryno varchar2(100);
  p_roundno number;
  p_program_id number;
  p_pricing_id number;
  p_offer_number varchar2(100);
  
  Str_application_process_id number;
  str_product_id number := null;
  str_status_id varchar2(100);
  str_business_offer_number varchar2(100);
  
  p_varIndex number;
  p_varDocCount number;
  p_DocId number;
  p_Collected number;
  p_scanned number;
  p_remarks varchar2(100);
  p_Value VARCHAR2(100);
  
  Pdd_Id_Count Number;
  D_Mortgage_Type Int;
  D_Mortgage_Fees Numeric(10,2);
  D_Stepdown_Revisiontype Int;
  D_hdocMortgage sys.xmltype;
  
  D_Xml Varchar2(1000);     
  D_Varasr Varchar2(8000); 
  D_MORTGAGECOUNT INT;
  D_COUNT INT;
  
  d_pri_dt date;
  D_APP_DT date;
  D_CRM_ID INT;
  d_CASHFLOW_FLAG_ID int;

begin                                                                    

-- =============================================
-- Author:  Sathish R --03-Sep-2018 
-- Purpose:Capture Application Process Datails-MFC
-- =============================================
  
 
  
  Delete From Tmp_Tblappprodocdtls;
  Delete From Tmp_Or_Prddtdetails;
  Delete From Tmp_Tbl_Mortgage;
  
   p_application_number :='';
   p_errorcode := 0;
   p_document_type_code := 'PRO';
   p_application_process_type := '';                                 
  
   Str_application_process_id := p_application_process_id;
   str_status_id := p_status_id;
   str_product_id := p_product_id;
   str_business_offer_number := p_business_offer_number;
   p_Location_Code := FN_Get_LocationCode(p_Location_ID); 
   

--    if(p_Business_Offer_Number is not null) then
--      begin
--          select offer_date into D_Pri_Date from s3g_org_pricing where pricing_id=p_Business_Offer_Number;
--          
--          if(D_Pri_Date < p_date) then
--            begin
--                return;
--            end;
--          end if;
--      end;
--    end if;
    
   
--    IF (P_Xmlmortgage)IS NOT NULL Then                                                                    
--
--        D_Hdocmortgage := Sys.Xmltype.Createxml(P_Xmlmortgage);
--
--        FOR Mort IN
--        (
--          Select 
--            Extractvalue(Value(X),'/Details/@Mortgage_Type') As Mortgage_Type,
--            Extractvalue(Value(X),'/Details/@Mortgage_Fees') As Mortgage_Fees,
--            EXTRACTVALUE(value(x),'/Details/@Stepdown_Revisiontype') as Stepdown_Revisiontype
--          FROM
--            TABLE (XMLSEQUENCE (D_hdocMortgage.EXTRACT ('//Root/Details'))) X
--        )
--        loop
--          Insert Into Tmp_Tbl_Mortgage (Mortgage_Type,Mortgage_Fees,Stepdown_Revisiontype)
--          values (Mort.Mortgage_Type,Mort.Mortgage_Fees,Mort.Stepdown_Revisiontype);
--        end loop;
--    End IF;
    
--    select Count(*) into D_MortgageCount from Tmp_tbl_Mortgage;
--    
--    If(D_MortgageCount > 0)Then
--        Select Mortgage_Type,Mortgage_Fees,Stepdown_Revisiontype 
--        Into D_Mortgage_Type,d_Mortgage_Fees,d_Stepdown_Revisiontype
--        From Tmp_Tbl_Mortgage;
--    End if;
--d('p_company_id==>'||p_company_id);


 --select offer_date into D_Pri_Date from s3g_org_pricing where BUSINESS_OFFER_NUMBER=p_Business_Offer_Number;











    if(Str_application_process_id=0)then
    
           if(p_Application_No is null)then                                                             
              begin
                      S3G_OR_Get_DocCtrlNo(p_company_id ,p_document_type_code,1,p_lob_id,p_location_id ,p_application_number);
      --d('p_company_id==>'||p_company_id||'p_document_type_code==>'||p_document_type_code||'p_lob_id==>'||p_lob_id||'p_location_id==>'||p_location_id||'p_application_number==>'||p_application_number);
                        IF (p_Application_Number = '-1' or p_Application_Number = '-2') Then
                          begin                                                    
                            p_errorcode := p_application_number;
                            return;
                          end;                                               
                        END IF;
                        
                         --p_application_number:=substr(fn_get_locationcode(p_location_id),4,5)||p_application_number;
                        
              end ;
              else--PROPOSAL FROM CHECK LIST
              begin
              p_Application_Number:=p_Application_No;
              END;
          END IF;
       end if;   
      
    
    if str_product_id = '-1' then
      begin
        Str_product_id := null;
      end;
    End IF;
                                                                        
    IF (Str_application_process_id = 0 or Str_application_process_id is null) Then
      begin                                                                    
--        select lookup_id into str_Status_ID from s3g_org_lookup 
--          Where Type='ORG_APPLICATION_PROCESS_ACTION' And VALUE = Str_Status_Id;
                                                                        
        if (str_business_offer_number != '-1') then
          BEGIN                                          
            select id into p_responsestatus_id from s3g_status_lookup 
              Where Type='ENQUIRY_RESPONSE_STATUS' And Name='Application Process'
              and   rownum<2;
              
           -- p_pricingid := str_business_offer_number;
           
           
           
            select count(1) into d_count
            from s3g_org_pricing where pricing_id=p_pricingid;
           
           if(d_count>0)then
                select business_offer_number,enquiry_response_id,offer_date 
                  into str_business_offer_number,p_response_id,p_offer_date
                  from s3g_org_pricing where pricing_id=p_pricingid;
                  
                p_application_process_type := 'Pricing';
                
                --ADDED   
                PDD_ID_Count := 0 ;
                
                SELECT COUNT(PreDisbursement_Doc_Tran_ID) into PDD_ID_Count
                FROM S3G_ORG_PreDisbDocTrans WHERE Document_Type_ID=P_PricingID 
                AND Document_Type=2;    
                
                IF(PDD_ID_Count > 0)THEN
                  SELECT PreDisbursement_Doc_Tran_ID into P_PDDT_ID
                  FROM S3G_ORG_PreDisbDocTrans WHERE Document_Type_ID=P_PricingID 
                  AND Document_Type=2; 
                end if;
            end if;
            
            
            
            
            
          END;
        ELSE                                                    
          begin
--            SELECT PreDisbursement_Doc_Tran_ID into P_PDDT_ID
--            FROM S3G_ORG_PreDisbDocTrans WHERE Document_Type_ID = P_Application_Process_ID 
--            AND Document_Type=3;    
            
            p_application_process_type := 'Customer';
          end;
        End IF;
                                                    
        --Application Process Insert Start---
         

                                                       
        Select SEQ_ORG_APPPROC.NextVal into Str_application_process_id from dual;
        
        INSERT INTO S3G_ORG_AppProc
           (                                                                    
                APPLICATION_PROCESS_ID,--	1
                APPLICATION_NUMBER,--	2
                APPLICATION_PROCESS_TYPE,--	3
                APPLICAION_PROCESS_DATE,--	4
                PRICING_ID,--	5
                OFFER_DATE,--	6
                STATUS_ID,--	7
                CUSTOMER_ID,--	8
                COMPANY_ID,--	9
                LOB_ID,--	10
                LOCATION_CODE,--	11
                PRODUCT_ID,--	12
                SALES_PERSON_ID,--	13
                BUSINESS_IRR,--	14
                COMPANY_IRR,--	15
                ACCOUNTING_IRR,--	16
                FINANCE_AMOUNT,--	17
                TENURE,--	18
                TENURE_TYPE,--	19
                MARGIN_AMOUNT,--	20
                RESIDUAL_VALUE,--	21
                REFINANCE_CONTRACT,--	22
                CONSTITUTION_ID,--	23
                LEASE_TYPE,--	24
                PAYMENT_RULE_CARD_ID,--	25
                OFFER_RESIDUAL_VALUE,--	26
                OFFER_RESIDUAL_VALUE_AMOUNT,--	27
                OFFER_MARGIN,--	28
                OFFER_MARGIN_AMOUNT,--	29
                MLA_APPLICABLE,--	30
                MLA_NUMBER,--	31
                APPLICATIONAPPROVAL_STATUS,--	32
                CREATED_BY,--	33
                CREATED_ON,--	34
                MODIFIED_BY,--	35
                MODIFIED_ON,--	36
                MLA_STATUS,--	37
                ROUND_NO,--	38
                FBDATE,--	39
                AUTH_ID,--	40
                IS_GOLDLOAN,--	41
                LOAN_TYPE,--	42
                COMP_STATUS_ID,--	43
                LOCATION_ID,--	44
                SUB_LOCATION_ID,--	45
                CONTRACT_TYPE,--	46
                DEAL_TYPE,--	47
                SOURCE_TYPE,--	48
                SOURCE_ID,--
                SOURCE_NAME,--	49
                DEBT_COLLECTOR_NAME,--	50
                CREDIT_PURPOSE,--	51
                BUSINESS_SOURCE,--	52
                DEALER_ID,--	53
                DEALER_SALESPERSON_ID,--	54
                DEALER_SCHEME_NAME,--	55
                SELLER_NAME,--	56
                SELLER_ID,--	57
                TEMPLATE_VERSION,--	58
                OLD_APP_PROCESS_ID,--	59
                TENTATIVE_ACCOUNT_DATE,--	60
                FIRST_INSTALMENT_DATE,--	61
                INCOME_BOOKING_START_DATE,--	62
                DELAY_CHARGES_APPLI,--	63
                Chargeable_Delay_Days,--	64
                Delay_Charge_Amount,--	65
                OVERDUE_CHARGES,--	66
                EX_FIRST_CHARGES,--	67
                EX_SECOND_CHARGES,--	68
                RECEIPT_TYPE,--	69
                PAYMENT_DUE_DATE,--	70
                DEALER_CREDIT_PERIOD,--	71
                LIFE_INSURANCE_APPLI,--	72
                LIFE_INSURANCE_ENTITY,--	73
                Insurance_Prem_Amount,--	74
                Insurance_Payable_Amount,--	75
                DEALER_COMM_APPLI,--	76
                DEALER_COMM_BASIC_RATE,--	77
                DEALER_COMM_RATE,--	78
                DEALER_COMM_AMOUNT,--	79
                RISK_RATING,--	80
                RISK_REMARKS,--	81
                RISK_SCORE,--	82
                RISK_DOC_NO,--	83
                RISK_QUALITY_VALUE,--	84
                DEBT_PURCHASE_LIMIT,--	85
                EVALUATOR,--	86
                AUDITOR,--	87
                INVOICE_CAP_VALUE,--	88
                DISCOUNT_RATE_LOC,--	89
                PENAL_RATE,--	90
                CREDIT_PERIOD_DAYS,--	91
                GRACE_PERIOD_DAYS,--	92
                DISP_PERIOD_DAYS,--	93
                RESUL_PERIOD_DAYS,--	94
                INSURANCE_AMOUNT,--	95
                INSURANCE_COVERAGE_DAY,--	96
                INSURANCE_COMPANY_RATE,--	97
                Insurance_Cust_Rate,--	98
                COVENANTS,--	99
                EMPLOYER_BANK_NAME,--	100
                DELAY_CHARGE_GRACE_DAYS,--	101
                DELAY_CHARGE_RATE,--	102
                --DELAY_CHARGE_AMOUNT,--	103
                MLA_VALIDITY_FROM,
                Mla_Validity_To,
                Covenants_Condi,
                Risk_Aml_Class,
                FACTORING_REMARKS
                
                



      
           )                                                                    
           VALUES                                                                    
           (                                                                    
             str_application_process_id,	--	1
             p_application_number,	--	2
             p_application_process_type,--	3
             FN_TODATE(p_Date),--4	--	4
             p_PRICING_PRO_ID,	--	5
             FN_TODATE(p_Offer_Date), --	6
             P_STATUS_ID,	--	7
             p_Customer_ID,	--	8
             p_Company_ID, --	9
             p_LOB_ID,	--	10
             p_Location_Code,	--	11
             str_product_id,	--	12
             p_Sales_Person_ID,--	13
             p_Business_IRR,	--	14
             p_Company_IRR,	--	15
             p_Accounting_IRR,--	16
             p_Finance_Amount,	--	17
             p_Tenure,	--	18
             p_Tenure_Type, --	19
             p_Margin_Amount,	--	20
             p_Residual_Value,	--	21
             p_Refinance_Contract,--	22
             p_Constitution_ID,	--	23
             p_Lease_Type, --	24
             p_PaymentRuleCardId ,	--	25
             p_Offer_Residual_Value,	--	26
             p_Offer_Residual_Value_Amount,--	27
             p_offer_margin,	--	28
             p_offer_margin_amount,	--	29
             p_mla_applicable,--	30
             p_MLA_Number,	--	31
             NULL,	--	32
             P_Created_By,	--	33
             SYSDATE,	--	34
             NULL,	--	35
             NULL,	--	36
             NULL,	--	37
             1,	--	38
             P_Fbdate,	--	39
             P_Loan_Type,	--	40
             NULL,	--	41
             NULL,	--	42
             NULL,	--	43
            p_location_id,	--	44
            p_Sub_Location_ID,	--	45
            p_CONTRACT_TYPE,	--	46
            p_Deal_Type,	--	47
            p_Lead_Source_Type,	--	48
            P_LEAD_SOURCE_NAME_ID,	--	49
            p_Lead_Other_Source_Name,
            P_DEBT_COLLECTOR_NAME_ID,	--	50
            p_Credit_Purpose,	--	51
            P_BUSINESS_SOURCE_ID,	--	52
            decode(p_Dealer_Id,0,null,p_Dealer_Id),	--	53
            P_DEALER_SALES_PERSION_ID,	--	54
            decode(p_Dealer_Scheme_Name_Id,0,null,p_Dealer_Scheme_Name_Id),	--	55
            p_Seller_Code,	--	56
            p_Seller_Name,	--	57
            null,	--	58
            NULL,	--	59
            FN_TODATE(p_Tentative_Account_Date),	--	60
            FN_TODATE(p_First_Installment_Date),	--	61
            FN_TODATE(p_Income_Book_Start_Date),	--	62
            P_Start_dly_chrg_Applicable,	--	63
            P_Delay_Days,	--	64
            P_Start_delay_charges,	--	65
            P_Over_Due_Charges,	--	66
            P_Existence_of_First_Charge,	--	67
            P_Existence_of_Second_Charge,	--	68
            p_Repayment_Mode,	--	69
            NULL,	--	70
            NULL,	--	71
            P_Life_Insurance_Applicable,	--	72
            P_Life_Insurance_Entity,	--	73
            P_Life_Ins_Pre_Customer,	--	74
            P_Life_Ins_Prem_Amount,	--	75
            p_Dealer_Commission_Applicable,	--	76
            NULL,	--	77
            null,	--	78
            NULL,	--	79
            p_Risk_Rating,	--	80
            p_Risk_Remarks,	--	81
            p_Risk_Score,	--	82
            p_Risk_Document_No,	--	83
            p_Risk_Quality_Value,	--	84
            P_DEBT_PURCHASE_LIMIT,	--	85
            P_EVALUATOR,	--	86
            P_AUDITOR,	--	87
            P_INVOICE_CAP_VALUE,	--	88
            p_DISCOUNT_RATE_LOC,	--	89
            p_PENAL_RATE ,	--	90
            p_CREDIT_PERIOD_DAYS ,	--	91
            p_GRACE_PERIOD_DAYS ,	--	92
            p_DISP_PERIOD_DAYS ,	--	93
            p_RESUL_PERIOD_DAYS ,	--	94
            p_INSURANCE_AMOUNT ,	--	95
            p_INSURANCE_COVERAGE_DAY ,	--	96
            p_INSURANCE_COMPANY_RATE ,	--	97
            p_INSURANCE_CUST_RATE ,	--	98
            p_COVENANTS,	--	99
            P_Employer_Bank_Name,	--	100
            p_No_of_Days_to_be_considered ,	--	101--grace days
            P_START_DATE_DELAY_RATE ,	--	102
            --P_DELAY_CHARGE_AMOUNT,	--	103
            FN_TODATE(P_FACILITY_START_DATE),
            FN_TODATE(P_FACILITY_END_DATE),
            P_Covenants_Terms,
            P_Risk_Aml_Classification,
            P_RemarksFWC
            
            

           );
        
        p_Program_PK_ID := Str_application_process_id;
           
        SELECT PROGRAM_ID INTO P_PROGARM_ID FROM S3G_SYSAD_PROGRAMMASTER 
          where program_code='APPP';
          
          S3G_SYSAD_TRANS_HISTORY(38,str_application_process_id,p_application_number,TO_CHAR(SYSTIMESTAMP,'MM/DD/YYYY'),P_CREATED_BY,1);
            
        select SEQ_ORG_FOLLOWUP.NextVal into p_followupheaderid from dual;
        
        d('p_followupheaderid==>'||p_followupheaderid);
            
        IF p_PRICING_PRO_ID IS NOT NULL Then                                                                    
          begin                                                    
           
            
            --select p_EnquiryNo from dual;                                                
            
            insert into s3g_org_followup                                                  
               (
               FOLLOW_UP_ID
               ,Program_ID                                                  
               ,Program_PK_ID                                                  
               ,LOB_ID                                                  
               ,Location_Code                                                  
               ,Company_ID                                                  
               ,Enquiry_Number                                                  
               ,Offer_Number                                                  
               ,application_number
               ,FOLLOWUP_DATE
               ,Created_By                                                  
               ,Created_On)                                                  
            values                                                  
               (p_followupheaderid,p_progarm_id,p_program_pk_id,
               p_lob_id,p_location_code,
               p_company_id,p_enquiryno,str_business_offer_number,
               p_application_number,sysdate,p_created_by,sysdate);
          END;
        ELSE                                                    
          BEGIN                                                    
            ------Follow header details INSERT  start--
            INSERT INTO S3G_ORG_FollowUp
               (         
              FOLLOW_UP_ID,Program_ID,Program_PK_ID,LOB_ID,                                                                    
              Location_Code,Company_ID,Application_Number,                                                                    
              FOLLOWUP_DATE,Created_By,Created_On
               )                                                                    
               VALUES                                                                    
               (                                  
              p_followupheaderid,p_Progarm_id,p_Program_PK_ID,                                                                    
              p_lob_id,p_location_code,p_company_id,                                                                    
              p_Application_Number,Sysdate,                                              
              p_created_by,Sysdate 
              );                                                                    
            ------Follow header details INSERT end--
          end;
        end if;
        
---------Added By Sathish R        
If(nvl(P_CRM_ID,0) > 0)THEN                  
 Begin                  
  update S3G_CLN_CRM_LEAD          
   set APPLICATION_ID = str_application_process_id                  
    where LEAD_ID = P_CRM_ID;           
 end;
 END IF;
 --Aded on 22Aug2015 Ends Here                
 /**********Added On 10Mar2016 Starts Here***********************/              
 if(NVL(P_PricingID , 0) > 0)THEN              
 Begin              
               
 update S3G_CLN_CRM_LEAD           
 set APPLICATION_ID = str_application_process_id          
   Where Pricing_ID = P_PricingID ;             
               
 Select  Lead_ID INTO D_CRM_ID  from S3G_CLN_CRM_Lead           
 inner join S3G_CLN_CRM_HDR on S3G_CLN_CRM_HDR.CRM_ID =S3G_CLN_CRM_LEAD.CRM_ID           
 Where Pricing_ID = P_PricingID AND Company_ID=P_Company_ID; --MC CHANGES BY SWARNA           
   
 EXCEPTION WHEN OTHERS THEN   D_CRM_ID:=NULL;
               
 end;
 END IF;
 ---------Added By Sathish R        
        
        
      END; --Application Process Insert End--
else                                                       
      
      begin --Application Update Start                                                                    
                select round_no into p_roundno from s3g_org_appproc 
                    where application_process_id = Str_application_process_id;
                if(p_RoundNo is null) Then
                  begin                                     
                    p_roundno := 1;                               
                  end;                                    
                else                                    
                  begin                                    
                    p_roundno := p_roundno + 1;
                  end;
                END IF;
          P_APPLICATION_NUMBER:=P_APPLICATION_NO;

        UPDATE S3G_ORG_AppProc SET   
--        APPLICAION_PROCESS_DATE=FN_TODATE(p_Date),-- For Backdate change & ticket id = 4090
--          lob_id = p_lob_id,location_code = p_location_code,
--          product_id = str_product_id,sales_person_id = p_sales_person_id,
--          business_irr = p_business_irr,company_irr = p_company_irr,
--          accounting_irr = p_accounting_irr,finance_amount = p_finance_amount,
--          tenure = p_tenure,tenure_type = p_tenure_type,
--          margin_amount = p_margin_amount,residual_value = p_residual_value,
--          refinance_contract = p_refinance_contract,constitution_id = p_constitution_id,
--          lease_type = p_lease_type,offer_residual_value = p_offer_residual_value,
--          offer_residual_value_amount = p_offer_residual_value_amount,
--          offer_margin = p_offer_margin,offer_margin_amount = p_offer_margin_amount,
--          payment_rule_card_id = p_paymentrulecardid,modified_by = p_created_by,
--          Modified_On = Sysdate,Round_No = P_Roundno,Fbdate = P_Fbdate,
--          --Added by saran on 2-Aug-2013 start                        
--          Loan_Type = P_Loan_Type ,
--          --Added by saran on 2-Aug-2013 end  
--          --Added by Chandru K on 19-Sep-2013 start       
--          Mortgage_Type = D_Mortgage_Type, Mortgage_Fees = D_Mortgage_Fees, StepDown_RevisionType = D_StepDown_RevisionType
          --End
                APPLICATION_PROCESS_TYPE=	p_application_process_type	,
                APPLICAION_PROCESS_DATE	=	FN_TODATE(p_Date)	,
                PRICING_ID	=	p_PRICING_PRO_ID	,
                OFFER_DATE	=FN_TODATE(p_Offer_Date)	,
                STATUS_ID	=P_STATUS_ID	,
                CUSTOMER_ID	=p_Customer_ID	,
                COMPANY_ID	=	p_Company_ID	,
                LOB_ID	=	p_LOB_ID	,
                LOCATION_CODE	=	p_Location_Code	,
                PRODUCT_ID	=	str_product_id	,
                SALES_PERSON_ID	=p_Sales_Person_ID	,
                BUSINESS_IRR	=	p_Business_IRR	,
                COMPANY_IRR	=	 p_Company_IRR	,
                ACCOUNTING_IRR	=p_Accounting_IRR	,
                FINANCE_AMOUNT	=p_Finance_Amount	,
                TENURE	=	p_Tenure	,
                TENURE_TYPE	=	p_Tenure_Type	,
                MARGIN_AMOUNT	=	p_Margin_Amount	,
                RESIDUAL_VALUE	=	p_Residual_Value	,
                REFINANCE_CONTRACT	=p_Refinance_Contract	,
                CONSTITUTION_ID	=p_Constitution_ID	,
                LEASE_TYPE	=	p_Lease_Type	,
                PAYMENT_RULE_CARD_ID	=	p_PaymentRuleCardId 	,
                OFFER_RESIDUAL_VALUE	= p_Offer_Residual_Value	,
                OFFER_RESIDUAL_VALUE_AMOUNT	=p_Offer_Residual_Value_Amount	,
                OFFER_MARGIN	=	p_offer_margin	,
                OFFER_MARGIN_AMOUNT	=	p_offer_margin_amount	,
                MLA_APPLICABLE	=p_mla_applicable	,
                MLA_NUMBER	=	p_MLA_Number	,
                APPLICATIONAPPROVAL_STATUS	=	NULL	,
                CREATED_BY	=P_Created_By	,
                CREATED_ON	=SYSDATE	,
                MODIFIED_BY	=NULL	,
                MODIFIED_ON	=NULL	,
                MLA_STATUS	= NULL	,
                ROUND_NO	=	1	,
                FBDATE	=	P_Fbdate	,
                AUTH_ID	=	 P_Loan_Type	,
                IS_GOLDLOAN	=NULL	,
                LOAN_TYPE	=	NULL	,
                COMP_STATUS_ID	=	NULL	,
                LOCATION_ID	=	p_location_id	,
                SUB_LOCATION_ID	=p_Sub_Location_ID	,
                CONTRACT_TYPE	=p_CONTRACT_TYPE	,
                DEAL_TYPE	=p_Deal_Type	,
                SOURCE_TYPE	=p_Lead_Source_Type	,
                SOURCE_ID	=P_LEAD_SOURCE_NAME_ID	,
                SOURCE_NAME	=p_Lead_Other_Source_Name	,
                DEBT_COLLECTOR_NAME	=p_Debt_Collector_Name_Id	,
                CREDIT_PURPOSE	=p_Credit_Purpose	,
                BUSINESS_SOURCE	=P_BUSINESS_SOURCE_ID	,
                DEALER_ID=decode(p_Dealer_Id,0,null,p_Dealer_Id),	--	53
                DEALER_SALESPERSON_ID	=P_DEALER_SALES_PERSION_ID	,
                DEALER_SCHEME_NAME=decode(p_Dealer_Scheme_Name_Id,0,null,p_Dealer_Scheme_Name_Id),
                SELLER_NAME	=p_Seller_Code	,
                SELLER_ID	=p_Seller_Name	,
                TEMPLATE_VERSION	=null	,
                OLD_APP_PROCESS_ID	=NULL	,
                TENTATIVE_ACCOUNT_DATE	=FN_TODATE(p_Tentative_Account_Date)	,
                FIRST_INSTALMENT_DATE	=FN_TODATE(p_First_Installment_Date)	,
                INCOME_BOOKING_START_DATE	=FN_TODATE(p_Income_Book_Start_Date)	,
                Delay_Charges_Appli	=P_Start_Dly_Chrg_Applicable	,
               
                CHARGEABLE_DELAY_DAYS	=p_Delay_Days	,
                Delay_Charge_Amount	=P_Start_delay_charges	,
                OVERDUE_CHARGES	=P_Over_Due_Charges	,
                EX_FIRST_CHARGES	= P_Existence_of_First_Charge	,
                EX_SECOND_CHARGES	=P_Existence_of_Second_Charge	,
                RECEIPT_TYPE	=p_Repayment_Mode	,
                PAYMENT_DUE_DATE	= NULL	,
                DEALER_CREDIT_PERIOD	=NULL	,
                LIFE_INSURANCE_APPLI	= P_Life_Insurance_Applicable	,
                LIFE_INSURANCE_ENTITY	=P_Life_Insurance_Entity	,
                Insurance_Prem_Amount	=P_Life_Ins_Pre_Customer	,
                Insurance_Payable_Amount	=P_Life_Ins_Prem_Amount	,
                DEALER_COMM_APPLI	=p_Dealer_Commission_Applicable	,
                DEALER_COMM_BASIC_RATE	=	NULL	,
                DEALER_COMM_RATE	=null	,
                DEALER_COMM_AMOUNT	=NULL	,
                RISK_RATING       = p_Risk_Rating ,
                RISK_REMARKS = p_Risk_Remarks ,
                RISK_SCORE = p_Risk_Score ,
                RISK_DOC_NO = p_Risk_Document_No ,
                RISK_QUALITY_VALUE = p_Risk_Quality_Value ,
                DEBT_PURCHASE_LIMIT = P_DEBT_PURCHASE_LIMIT ,
                EVALUATOR = P_EVALUATOR , AUDITOR = P_AUDITOR , 
                INVOICE_CAP_VALUE = P_INVOICE_CAP_VALUE ,
                DISCOUNT_RATE_LOC = P_DISCOUNT_RATE_LOC , 
                PENAL_RATE = P_PENAL_RATE , 
                CREDIT_PERIOD_DAYS = P_CREDIT_PERIOD_DAYS , 
                GRACE_PERIOD_DAYS = p_GRACE_PERIOD_DAYS ,
                DISP_PERIOD_DAYS = p_DISP_PERIOD_DAYS ,
                RESUL_PERIOD_DAYS = P_RESUL_PERIOD_DAYS , 
                INSURANCE_AMOUNT = P_INSURANCE_AMOUNT , 
                INSURANCE_COVERAGE_DAY = P_INSURANCE_COVERAGE_DAY , 
                INSURANCE_COMPANY_RATE = p_INSURANCE_COMPANY_RATE ,
                Insurance_Cust_Rate = p_INSURANCE_CUST_RATE ,
                COVENANTS = p_COVENANTS ,
                Employer_Bank_Name = P_Employer_Bank_Name ,
                Delay_Charge_Grace_Days = P_No_Of_Days_To_Be_Considered ,--grace days
                --DELAY_CHARGE_AMOUNT = P_DELAY_CHARGE_AMOUNT ,
                MLA_VALIDITY_FROM = FN_TODATE(P_FACILITY_START_DATE),
                Mla_Validity_To = Fn_Todate(P_Facility_End_Date),
                Covenants_Condi=P_Covenants_Terms,
                Risk_Aml_Class=P_Risk_Aml_Classification,
                Delay_Charge_Rate=P_Start_Date_Delay_Rate,
                FACTORING_REMARKS=p_RemarksFWC
       
       where  application_process_id  = Str_application_process_id;
        
        
        S3G_SYSAD_TRANS_HISTORY(38,str_application_process_id,p_application_number,TO_CHAR(SYSTIMESTAMP,'MM/DD/YYYY'),P_CREATED_BY,2);
          
        delete from S3G_ORG_PreDisbursementDocDet 
          where collected_from_id = Str_application_process_id 
          and Collected_From = 'Application';
        delete from S3G_ORG_AppProcDocDet 
          where application_process_id = Str_application_process_id;
      
        delete from S3G_ORG_AppProcOfferROIDet 
          where application_process_id = Str_application_process_id;
        delete from S3G_ORG_AppProcOfferDet 
          WHERE APPLICATION_PROCESS_ID = STR_APPLICATION_PROCESS_ID;
          
        
          
          if(P_XMLDEALTRANSFER is not null)then
          delete from S3G_ORG_APP_DEAL_TRAN 
          where application_process_id = Str_application_process_id;
          end if;
          
          if(P_XMLLIENACCOUNT is not null)then
          delete from  S3G_ORG_APP_Lien where application_process_id = Str_application_process_id;
          end if;
          
          
           If P_Xml_Assetdetails Is Not Null Then
               BEGIN
                     Delete From S3g_Org_Appprocassetdet 
                    Where Application_Process_Id = Str_Application_Process_Id;
                END;
           END IF;
            
        if(p_XML_RepaymentStructure is not null) Then
          begin                            
            delete from S3G_ORG_AppRepayStruct 
              where APPLICATION_PROCESS_ID = STR_APPLICATION_PROCESS_ID;
              delete from S3G_ORG_APPREPAYSTRUCT_EXTN    where APPLICATION_PROCESS_ID = STR_APPLICATION_PROCESS_ID;
          end;
        end if;
          
        delete from s3g_org_appprocrepaydet 
          where application_process_id = Str_application_process_id;
        delete from s3g_org_appprocguarantordet 
          where application_process_id = str_application_process_id;
        delete from S3G_ORG_AppProcAlertDet 
          where application_process_id = Str_application_process_id;
        delete from S3G_ORG_FollowUpDetail 
          where follow_up_id in (select follow_up_id from s3g_org_followup 
          where Program_PK_ID = Str_application_process_id);
        delete from s3g_org_appprocmoratdet 
          where application_process_id = Str_application_process_id;
          
          --CR_SISSL12E046_018 Vinodh.N 07-Jul2014 Start

         delete from s3g_org_appprocrepaydetamort 
          where application_process_id = Str_application_process_id;
          
          IF(P_STRXMLOTHERCHARGES IS NOT NULL)THEN
          BEGIN
          delete from  S3G_ORG_APP_Fact_CHARGE where APPLICATION_PROCESS_ID=Str_application_process_id;
          END;
          end if;
          
          IF(P_XMLCUSTOMERMAP IS NOT NULL)THEN
            BEGIN
            delete from S3G_ORG_APP_Sublimit where APPLICATION_PROCESS_ID=Str_application_process_id;
            end;
          end if;
          
          
          
          --CR_SISSL12E046_018 Vinodh.N 07-Jul2014 End
          
        p_program_pk_id := Str_application_process_id;                                                                    

        select program_id into p_program_id 
          from s3g_sysad_programmaster where program_code='APPP';
          
         
          
        select pricing_id into p_pricing_id from s3g_org_appproc 
          where Application_Process_Id  = Str_application_process_id;
          
           D('Str_application_process_id==>'||STR_APPLICATION_PROCESS_ID);
            d('p_pricing_id==>'||p_pricing_id);
 
        if(p_Pricing_Id is null or p_Pricing_Id=0) Then
          begin                                        
            SELECT Follow_Up_ID into p_FollowupHeaderID 
              from s3g_org_followup where program_id=p_program_id  
              and program_pk_id = Str_application_process_id;
          end;                                                    
        else                                                    
          begin            
          
          Select Count(1) Into D_Count From 
          s3g_org_pricing where pricing_id = p_pricing_id;
          
          If(D_Count>0)Then
          begin
              select business_offer_number into p_offer_number 
                from s3g_org_pricing where pricing_id = p_pricing_id;
                
                d('p_offer_number==>'||p_offer_number);
                
                
                 select count(1) into d_count from (
                select follow_up_id
                from S3G_ORG_FOLLOWUP where OFFER_NUMBER = P_OFFER_NUMBER 
                Order By Follow_Up_Id Desc) Maintbl Where Rownum < 2;
                
                if(d_count>0)then
                  select follow_up_id into p_followupheaderid from (
                  select follow_up_id
                  from s3g_org_followup where offer_number = p_offer_number 
                  order by FOLLOW_UP_ID desc) MAINTBL where rownum < 2;
                end if;
                end;
           end if;   
          end;
        end if;
      end;
    end if; -----Application Update End  
    
    IF p_XML_Constitution IS NOT NULL Then                                                                    
      begin                     
        p_xmldocid := SYS.XMLTYPE.createXML(p_xml_constitution);
        p_varindex := 1;
        
        FOR DOC IN
        (
          select 
            EXTRACTVALUE(VALUE(X),'/Details/@ID') AS ITD,
            extractvalue(value(x),'/Details/@REMARK') as REMARK,
            extractvalue(value(x),'/Details/@COLLECTED') as COLLECTED,
            extractvalue(value(x),'/Details/@SCANNED') as scanned,
            extractvalue(value(x),'/Details/@VALUE') as VALUESS,
            extractvalue(value(x),'/Details/@ISFOLLOWUP') as ISFOLLOWUP,
            EXTRACTVALUE(VALUE(X),'/Details/@DOCUMENTID') AS DOCUMENTID
          FROM
            TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
        )
        loop
          insert into tmp_tblappprodocdtls (tblid,itd,remarks,collected,
            scanned,valuess,isfollowup,documentid)
            values (p_varindex,doc.itd,doc.remark,doc.collected,doc.scanned,
            doc.valuess,doc.isfollowup,doc.documentid);
            p_varindex := p_varindex + 1;
        end loop;
        
        p_varindex := 1;
        
        select count(DOCUMENTID) into p_varDocCount from tmp_tblappprodocdtls;

        while (p_varIndex <= p_varDocCount)
        Loop                                      
          begin                                       
            select documentid,collected,scanned,remarks,valuess 
              into p_docid,p_collected,p_scanned,p_remarks,p_value 
              from tmp_tblappprodocdtls where tblid = p_varindex;                                      
            if(p_Collected = 1) Then
              begin                                      
                update S3G_ORG_CustConstDocs 
                  set is_collected = p_collected,is_scanned = p_scanned,
                  remarks = p_remarks,identity_values = p_value,
                  collected_from = 'Application' 
                  where Cust_Constitution_Docs_ID = p_DocId;
              end;
            End If;
            p_varindex := p_varindex + 1;                                      
          end;                                       
        End loop;
      end;
    End IF;

--    IF p_XML_PDD IS NOT NULL Then
--      begin                                                                    
--        p_xmldocid := SYS.XMLTYPE.createXML(p_XML_PDD);
--        PDD_ID_Count := 1;  
--        FOR DOC IN
--        (
--          select 
--            EXTRACTVALUE(VALUE(X),'/Details/@PRDDCTYPEID') AS PRDDCTYPEID,
--            Extractvalue(Value(X),'/Details/@COLLECTEDBY') As Collectedby,
--            Extractvalue(Value(X),'/Details/@COLLECTEDDATE') As Collecteddate,
--            Extractvalue(Value(X),'/Details/@SCANNEDBY') As Scannedby,
--            Extractvalue(Value(X),'/Details/@SCANNEDDATE') As Scanneddate,
--            Extractvalue(Value(X),'/Details/@FILEUPLOAD') As Fileupload,
--            Extractvalue(Value(X),'/Details/@REMARKS') As Remarks
--          FROM
--            TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
--        )
--        loop
--          Insert Into TMP_OR_PRDDTDetails
--          (ID,PRDDC_DOC_CAT_ID,COLLECTED_BY,COLLECTED_DATE,SCANNED_BY,SCANNED_DATE,SCANNED_REF_NO
--           ,REMARKS)
--          Values
--          ( PDD_ID_Count,DOC.PRDDCTYPEID,DOC.Collectedby,DOC.Collecteddate
--           ,DOC.Scannedby,DOC.Scanneddate,DOC.Fileupload,DOC.Remarks);
--          
--          PDD_ID_Count := PDD_ID_Count +1;
--        end loop;
--        
--        For i in(Select b.PRDDC_Doc_Cat_ID,b.Collected_By,b.Collected_Date,b.Scanned_By,b.Scanned_Date,
--                  b.Scanned_Ref_No,b.Remarks
--                  From S3G_ORG_PreDisbDocTranDet AA,TMP_OR_PRDDTDetails b
--                  Where AA.PRDDC_Doc_Cat_ID= b.PRDDC_Doc_Cat_ID                      
--                  AND AA.PREDISBURSEMENT_DOC_TRAN_ID = P_PDDT_ID)
--        LOOP
--           UPDATE S3G_ORG_PreDisbDocTranDet AA
--           SET                      
--           Collected_By = i.Collected_By       
--          ,Collected_Date = i.Collected_Date                       
--          ,Scanned_By = i.Scanned_By                       
--          ,Scanned_Date = i.Scanned_Date                       
--          ,Scanned_Ref_No = i.Scanned_Ref_No                       
--          ,Remarks = i.Remarks                       
--          WHERE AA.PRDDC_Doc_Cat_ID= i.PRDDC_Doc_Cat_ID                      
--          AND AA.PREDISBURSEMENT_DOC_TRAN_ID = P_PDDT_ID;
--        END LOOP;
--     end;
--    end if;
    --Constitution documents INSERT  end--
                                                           
    --ROI rules details INSERT   start--
    IF p_XML_ROIRULE IS NOT NULL Then
      begin
        p_xmldocid := SYS.XMLTYPE.createXML(p_XML_ROIRULE);

        FOR DOC IN
        (
          select 
            EXTRACTVALUE(VALUE(X),'/Details/@ROI_RULES_ID') AS ROI_RULES_ID,
            extractvalue(value(x),'/Details/@MODEL_DESCRIPTION') as MODEL_DESCRIPTION,
            extractvalue(value(x),'/Details/@RATE_TYPE') as Rate_Type,
            extractvalue(value(x),'/Details/@ROI_RULE_NUMBER') as ROI_Rule_Number,
            extractvalue(value(x),'/Details/@RETURN_PATTERN') as Return_Pattern,
            extractvalue(value(x),'/Details/@TIME_VALUE') as Time_Value,
            extractvalue(value(x),'/Details/@FREQUENCY') as frequency,
            extractvalue(value(x),'/Details/@REPAYMENT_MODE') as repayment_mode,      
            EXTRACTVALUE(VALUE(X),'/Details/@RATE') AS Rate,
            EXTRACTVALUE(VALUE(X),'/Details/@IRR_REST') AS IRR_Rest,
            EXTRACTVALUE(VALUE(X),'/Details/@INTEREST_CALCULATION') AS Interest_Calculation,
            EXTRACTVALUE(VALUE(X),'/Details/@INTEREST_LEVY') AS Interest_Levy,
            EXTRACTVALUE(VALUE(X),'/Details/@RECOVERY_PATTERN_YEAR1') AS Recovery_Pattern_Year1,
            EXTRACTVALUE(VALUE(X),'/Details/@RECOVERY_PATTERN_YEAR2') AS Recovery_Pattern_Year2,
            EXTRACTVALUE(VALUE(X),'/Details/@RECOVERY_PATTERN_YEAR3') AS Recovery_Pattern_Year3,
            EXTRACTVALUE(VALUE(X),'/Details/@RECOVERY_PATTERN_REST') AS Recovery_Pattern_Rest,
            extractvalue(value(x),'/Details/@INSURANCE') as Insurance,
            EXTRACTVALUE(VALUE(X),'/Details/@RESIDUAL_VALUE') AS Residual_Value,
            extractvalue(value(x),'/Details/@MARGIN') as Margin,
            Extractvalue(Value(X),'/Details/@MARGIN_PERCENTAGE') As Margin_Percentage,
            Extractvalue(Value(X),'/Details/@IRR_RATE') As Irr_Rate,
            Extractvalue(Value(X),'/Details/@Collateral_Type_Rate') As Collateral_Type_Rate
            
          FROM
            TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
        )
        LOOP
        D('Doc.Margin_Percentage'||DOC.MARGIN_PERCENTAGE);
        d('Doc.Margin'||Doc.Margin);
        
          insert into s3g_org_appprocofferroidet(app_proc_offer_roi_id,
          application_process_id,ROI_Rules_ID,Model_Description,Rate_Type,                                                                    
          ROI_Rule_Number,Return_Pattern,Time_Value,Frequency,                                                                    
          Repayment_Mode,Rate,IRR_Rest,Interest_Calculation,           
          Interest_Levy,Recovery_Pattern_Year1,Recovery_Pattern_Year2,
          Recovery_Pattern_Year3,Recovery_Pattern_Rest,Insurance,
          residual_value,margin,Margin_Percentage,Irr_Rate,Collateral_Type_Rate) 
          values (SEQ_ORG_APPPROCOFFERROIDET.NextVal,Str_application_process_id,
          Doc.Roi_Rules_Id,Doc.Model_Description,Doc.Rate_Type,
          Doc.Roi_Rule_Number,Doc.Return_Pattern,Doc.Time_Value,Doc.Frequency,
          Doc.Repayment_Mode,Doc.Rate,Doc.Irr_Rest,Doc.Interest_Calculation,
          Doc.Interest_Levy,Doc.Recovery_Pattern_Year1,
          Doc.Recovery_Pattern_Year2,Doc.Recovery_Pattern_Year3,
          Doc.Recovery_Pattern_Rest,Doc.Insurance,Doc.Residual_Value,
          Doc.Margin,Doc.Margin_Percentage,Doc.Irr_Rate,Doc.Collateral_Type_Rate);
        end loop;
                                                                  
        Select SEQ_ORG_APPPROCOFFERROIDET.CurrVal into p_OfferROIDetailsID from dual;
        
        select roi_rules_id into p_roiruleid from s3g_org_appprocofferroidet 
          where app_proc_offer_roi_id = p_OfferROIDetailsID;
          
        select margin,residual_value into p_marginroi,p_residualroi 
          from  s3g_org_roi_rules where roi_rules_id=p_roiruleid;
          
        if(p_MarginROI is null) Then
          begin   
          d('hi');
              update s3g_org_appprocofferroidet 
                set margin=null,margin_percentage = null 
                where  app_proc_offer_roi_id = p_OfferROIDetailsID;
          end;
        End IF;--
       
        if(p_ResidualROI = 0) Then
          begin             
            update s3g_org_appprocofferroidet set residual_value=0 
              where app_proc_offer_roi_id = p_offerroidetailsid;                                
          end;
        end if;
      end;
    End IF;
    --ROI rules  details INSERT   end---
    --In flow INSERT   start---
    IF p_XML_Inflow IS NOT NULL Then
      begin
        p_xmldocid := sys.xmltype.createxml(p_XML_Inflow);
        
        for doc in
        (
          select 
            extractvalue(value(x),'/Details/@CASHINFLOWID') as cashinflowid,
            extractvalue(value(x),'/Details/@DATE') as DATES,
            extractvalue(value(x),'/Details/@ENTITYID') as ENTITYID,
            extractvalue(value(x),'/Details/@AMOUNT') as AMOUNT,
            extractvalue(value(x),'/Details/@INFLOWFROMID') as INFLOWFROMID
          FROM
            TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
        )
        loop
          insert into s3g_org_appprocofferdet
            (Application_Process_Offer_Id,Application_Process_Id,Cashflow_Id,
            appdate,entity,amount,inflow_payto,CASHFLOW_TYPE)
            Values (Seq_Org_Appprocofferdet.Nextval,Str_Application_Process_Id,
            doc.cashinflowid,FN_TODATE(doc.dates),doc.entityid,doc.amount,doc.inflowfromid,53);
        end loop;
      end;
    end if;
    --In flow INSERT   end--
                                                                    
    --Out flow INSERT   start--
    IF p_XML_OutFlow IS NOT NULL Then
      begin
        p_xmldocid := sys.xmltype.createxml(p_XML_OutFlow);

        for doc in
        (
          select 
            extractvalue(value(x),'/Details/@CASHOUTFLOWID') as CASHOUTFLOWID,
            extractvalue(value(x),'/Details/@DATE') as DATES,
            extractvalue(value(x),'/Details/@ENTITYID') as ENTITYID,
            extractvalue(value(x),'/Details/@AMOUNT') as AMOUNT,
            extractvalue(value(x),'/Details/@OUTFLOWFROMID') as OUTFLOWFROMID
          FROM
            TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
        )
        loop
          insert into S3G_ORG_AppProcOfferDet
            (Application_Process_Offer_Id,Application_Process_Id,Cashflow_Id,
            appdate,entity,amount,inflow_payto,CASHFLOW_TYPE)
            Values (Seq_Org_Appprocofferdet.Nextval,Str_Application_Process_Id,
            doc.CASHOUTFLOWID,FN_TODATE(doc.dates),doc.entityid,doc.amount,doc.OUTFLOWFROMID,55);
        end loop;
      end;
    end if;
    --Out flow INSERT   end--
    
    --Repayment details INSERT start--
    if p_xml_repayment is not null then
      begin
      
        p_xmldocid := sys.xmltype.createxml(p_XML_Repayment);

        for doc in
        (
          select 
            extractvalue(value(x),'/Details/@CASHFLOWID') as CASHFLOWID,
            extractvalue(value(x),'/Details/@PERINSTALL') as PERINSTALL,
            extractvalue(value(x),'/Details/@BREAKUPPERCENTAGE') as BREAKUPPERCENTAGE,
            extractvalue(value(x),'/Details/@FROMINSTALL') as FROMINSTALL,
            extractvalue(value(x),'/Details/@TOINSTALL') as TOINSTALL,
            extractvalue(value(x),'/Details/@FROMDATE') as FROMDATE,
            extractvalue(value(x),'/Details/@TODATE') as TODATE
          FROM
            TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
        )
        loop
          insert into s3g_org_appprocrepaydet
            (application_process_repay_id,application_process_id,
            repayment_cashflow,per_instalment_amount,
            breakup_percentage,from_instalment,to_instalment,from_date,to_date)
            values (seq_org_appprocrepaydet.nextval,Str_application_process_id,
            doc.cashflowid,doc.perinstall,doc.breakuppercentage,doc.frominstall,
            doc.toinstall,FN_TODATE(doc.fromdate),FN_TODATE(doc.todate));
        end loop;      
      end;
    End If;
    --Repayment details INSERT end--
    
    --Repayment Amort details INSERT Start--
    --CR_SISSL12E046_018 Vinodh.N 07-Jul2014 Start
      if P_XMLRepayDetailsOthers is not null then
      begin
      
        p_xmldocid := sys.xmltype.createxml(P_XMLRepayDetailsOthers);

        for oth in
        (
          select 
            extractvalue(value(x),'/Details/@CASHFLOWID') as CASHFLOWID,
            extractvalue(value(x),'/Details/@PERINSTALL') as PERINSTALL,
            extractvalue(value(x),'/Details/@BREAKUP') as BREAKUPPERCENTAGE,
            extractvalue(value(x),'/Details/@FROMINSTALL') as FROMINSTALL,
            extractvalue(value(x),'/Details/@TOINSTALL') as TOINSTALL,
            extractvalue(value(x),'/Details/@FROMDATE') as FROMDATE,
            extractvalue(value(x),'/Details/@TODATE') as TODATE
          FROM
            TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
        )
        loop
          insert into s3g_org_appprocrepaydetamort
            (application_process_repay_id,application_process_id,
            repayment_cashflow,per_instalment_amount,
            breakup_percentage,from_instalment,to_instalment,from_date,to_date)
            values (seq_org_appprocrepaydetamort.nextval,Str_application_process_id,
            oth.cashflowid,oth.perinstall,oth.breakuppercentage,oth.frominstall,
            oth.toinstall,FN_TODATE(oth.fromdate),FN_TODATE(oth.todate));
        end loop;      
      end;
    End If;
    --CR_SISSL12E046_018 Vinodh.N 07-Jul2014 End
    --Repayment Amort details INSERT End--
    
    --alert INSERT start--
    IF p_XML_ALERT IS NOT NULL Then
      BEGIN                                                                    
        p_xmldocid := sys.XMLTYPE.createxml(p_XML_ALERT);
        for doc in
        (
          select 
            extractvalue(value(x),'/Details/@TYPEID') as TYPEID,
            extractvalue(value(x),'/Details/@USERCONTACTID') as USERCONTACTID,
            extractvalue(value(x),'/Details/@SMS') as SMS,
            extractvalue(value(x),'/Details/@EMAIL') as EMAIL
          FROM
            TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
        )
        loop
          insert into s3g_org_appprocalertdet
            (application_process_alert_id,application_process_id,
            alerts_type,alerts_usercontact,Alerts_SMS,Alerts_EMail)
            Values (Seq_S3g_Org_Appprocalertdet.Nextval,Str_Application_Process_Id,
            Doc.Typeid,Doc.Usercontactid,
            Case When Upper(Doc.Sms) = 'TRUE' Then 1 Else 0 End,
            Case When Upper(doc.email)= 'TRUE' Then 1 Else 0 End);
        end loop;
      end;
    end if;
    --alert INSERT end--
                                                                    
    --Guarantor INSERT start--
    if p_xml_guarantor is not null then
      BEGIN
        p_xmldocid := sys.xmltype.createxml(p_XML_Guarantor);
        for doc in
        (
          select 
            extractvalue(value(x),'/Details/@GUARANTORTYPE') as GUARANTORTYPE,
            extractvalue(value(x),'/Details/@CODE') as CODE,
            EXTRACTVALUE(VALUE(X),'/Details/@AMOUNT') AS AMOUNT,
            EXTRACTVALUE(VALUE(X),'/Details/@CHARGE') AS CHARGE,
             extractvalue(value(x),'/Details/@NATURE_OF_RELATION_ID') as NATURE_OF_RELATION_ID
          FROM
            TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
        )
        loop
          insert into s3g_org_appprocguarantordet
            (APPLICATION_PROC_GURANTOR_ID,APPLICATION_PROCESS_ID,
            Guarantee_Type_ID,Guarantee_ID,Guarantee_Amount,Charge_Sequence,GUARANTEE_RELATIONSHIP)
            VALUES (SEQ_ORG_APPPROCGUARANTORDET.NEXTVAL,STR_APPLICATION_PROCESS_ID,
            doc.guarantortype,doc.code,doc.amount,doc.charge,doc.NATURE_OF_RELATION_ID);
        end loop;
      end;
    End IF;
    --Guarantor INSERT end--
                                                                    
    --Moratorium INSERT start--
--    if p_xml_moratorium is not null then
--      begin
--        p_xmldocid := sys.xmltype.createxml(p_xml_moratorium);
--        for doc in
--        (
--          select 
--            extractvalue(value(x),'/Details/@MORATORIUMTYPE') as moratoriumtype,
--            extractvalue(value(x),'/Details/@FROMDATE') as fromdate,
--            extractvalue(value(x),'/Details/@TODATE') as todate
--          FROM
--            table (xmlsequence (p_xmldocid.extract ('//Root/Details'))) x
--        )
--        loop
--          insert into s3g_org_appprocmoratdet
--            (app_prc_moratorium_id,application_process_id,moratorium_type,
--            From_Date,To_Date)
--            values (seq_org_appprocmoratdet.nextval,str_application_process_id,
--            doc.moratoriumtype,FN_TODATE(doc.fromdate),FN_TODATE(doc.todate));
--        end loop;
--      end;                                                                    
--    end if;
    --Moratorium INSERT end--
                                                                    
    --follow up details INSERT start--
    
    if p_xml_followdetail is not null then
      begin

        p_xmldocid := sys.xmltype.createxml(p_XML_FollowDetail);
        for doc in
        (
          select 
            extractvalue(value(x),'/Details/@FROMUSERID') as FROMUSERID,
            extractvalue(value(x),'/Details/@TOUSERID') as TOUSERID,
            extractvalue(value(x),'/Details/@ACTION') as action,
            extractvalue(value(x),'/Details/@DATE') as DATES,
            extractvalue(value(x),'/Details/@ACTIONDATE') as ACTIONDATE,
            extractvalue(value(x),'/Details/@CUSTOMERRESPONSE') as CUSTOMERRESPONSE,
            extractvalue(value(x),'/Details/@REMARKS') as REMARKS
          FROM
            table (xmlsequence (p_xmldocid.extract ('//Root/Details'))) x
        )
        loop
          insert into s3g_org_followupdetail
            (FOLLOW_UP_DETAIL_ID,follow_up_id,from_userid,to_userid,action,
            FOLLOWUP_DATE,action_date,
            Customer_Response,Remarks,Created_By,Created_On)
            values (seq_org_followupdetail.nextval,p_followupheaderid,
            doc.fromuserid,doc.touserid,doc.action,fn_todate(doc.dates),
            fn_todate(doc.actiondate),doc.customerresponse,
            doc.REMARKS,p_Created_By,Sysdate);
        end loop;
      end;
    End IF;
    --follow up details INSERT end--

    --Asset details INSERT start--
    if p_xml_assetdetails is not null Then
      begin


 

        p_xmldocid := sys.xmltype.createxml(p_XML_AssetDetails);
        for doc in
        (
          select 
            Extractvalue(Value(X),'/Details/@ASSET_CODE') As Asset_Code,
             extractvalue(value(x),'/Details/@ASSET_ID') as ASSET_ID,
            extractvalue(value(x),'/Details/@REQUIRED_FROMDATE') as required_fromdate,
            extractvalue(value(x),'/Details/@NOOF_UNITS') as noof_units,
            extractvalue(value(x),'/Details/@UNIT_VALUE') as unit_value,
            extractvalue(value(x),'/Details/@MARGIN_PERCENTAGE') as margin_percentage,
            extractvalue(value(x),'/Details/@MARGIN_AMOUNT') as margin_amount,
            extractvalue(value(x),'/Details/@BOOK_DEPRECIATION_PERCENTAGE') as book_dep_per,
            extractvalue(value(x),'/Details/@BLOCK_DEPRECIATION_PERCENTAGE') as block_dep_per,
            extractvalue(value(x),'/Details/@FINANCE_AMOUNT') as finance_amount,
            extractvalue(value(x),'/Details/@CAPITAL_PORTION') as capital_portion,            
            extractvalue(value(x),'/Details/@NONCAPITAL_PORTION') as noncapital_portion,
            extractvalue(value(x),'/Details/@PAY_TO_ID') as pay_to_id,
            extractvalue(value(x),'/Details/@PAYMENT_PERCENTAGE') as payment_percentage,
            extractvalue(value(x),'/Details/@ENTITY_ID') as entity_id,
            extractvalue(value(x),'/Details/@LEASETYPE') as leasetype,
            Extractvalue(Value(X),'/Details/@LEASE_ASSET_NO') As Lease_Asset_No,
            EXTRACTVALUE(value(X),'/Details/@DISCOUNT_AMOUNT') as DISCOUNT_AMOUNT,
            EXTRACTVALUE(value(X),'/Details/@DISCOUNT_ABSORBED') as DISCOUNT_ABSORBED,
            EXTRACTVALUE(value(X),'/Details/@SECURITY_TYPE') as SECURITY_TYPE,
            EXTRACTVALUE(value(X),'/Details/@SECURITY_TYPE_IDENTIFIER') as SECURITY_TYPE_IDENTIFIER,
            extractvalue(value(x),'/Details/@SECURITY_TYPE_IDENTIFIER_VALUE') as SECURITY_TYPE_IDENTIFIER_VALUE,
            
            EXTRACTVALUE(VALUE(X),'/Details/@MARGIN_DEALER') AS MARGIN_DEALER,
            EXTRACTVALUE(VALUE(X),'/Details/@MARGIN_MFC') AS MARGIN_MFC,
            EXTRACTVALUE(VALUE(X),'/Details/@TRADE_IN') AS TRADE_IN,
            EXTRACTVALUE(VALUE(X),'/Details/@ENGINE_NO') AS ENGINE_NO,
            EXTRACTVALUE(VALUE(X),'/Details/@CHASIS_NO') AS CHASIS_NO,
            EXTRACTVALUE(VALUE(X),'/Details/@DATE_OF_REG') AS DATE_OF_REG,
            EXTRACTVALUE(VALUE(X),'/Details/@REG_NO') AS REG_NO,
            EXTRACTVALUE(VALUE(X),'/Details/@REG_NO2') AS REG_NO2,
            EXTRACTVALUE(VALUE(X),'/Details/@REG_EXPIRY_DATE') AS REG_EXPIRY_DATE,
            EXTRACTVALUE(VALUE(X),'/Details/@MODEL_YEAR') AS MODEL_YEAR,
            EXTRACTVALUE(VALUE(X),'/Details/@MANUFACTORING_YEAR') AS MANUFACTORING_YEAR,
            extractvalue(value(x),'/Details/@REGISTERED_OWNER') as REGISTERED_OWNER,
            EXTRACTVALUE(VALUE(X),'/Details/@DEALER_COMMISSION_RATE') AS DEALER_COMMISSION_RATE,
            EXTRACTVALUE(VALUE(X),'/Details/@DEALER_COMMISSION_AMOUNT') AS DEALER_COMMISSION_AMOUNT,
            EXTRACTVALUE(VALUE(X),'/Details/@DEALER_COMM_ID') AS DEALER_COMM_ID,
            EXTRACTVALUE(value(X),'/Details/@ASSET_TYPE') as ASSET_TYPE,
            EXTRACTVALUE(value(X),'/Details/@DEALER_COMM_RATE_ID') as DEALER_COMM_RATE_ID
            
            
          FROM
            table (xmlsequence (p_xmldocid.extract ('//Root/Details'))) x
        )
        loop
          insert into S3G_ORG_AppProcAssetDet
            (application_process_asset_id,application_process_id,asset_code,
            required_from,no_of_units,unit_value,margin_percentage,
            margin_amount,book_depreciation_percentage,
            block_depreciation_percentage,finance_amount,capital_portion,
            NON_CAPITAL_PORTION,PAY_TO,PAYMENT_PERCENTAGE,ENTITY_ID,
            ISOWNASSET,LEASE_ASSET_NO,DISCOUNT_AMOUNT,DISCOUNT_ABSORBED,SECURITY_TYPE,SECURITY_TYPE_IDENTIFIER,SECURITY_TYPE_IDENTIFIER_VALUE
            
            ,MARGIN_TO_DEALER,MARGIN_TO_COMPANY,TRADE_IN,ENGINE_NUMBER,CHASIS_NUMBER,REGN_DATE,REGN_NUMBER,REGN_NUMBER1,REGN_NUMBER2,REGN_EXP_DATE,REGISTER_NAME,DEALER_COMM_AMOUNT,DEALER_COMM_ID,DEALER_COMM_RATE,IS_NEW,ASSET_ID
           ,DEALER_COMM_RATE_ID
            )
            values (seq_org_appprocassetdet.nextval,Str_application_process_id,
            (select column_value from table (fn_split(doc.asset_code,'-')) where rownum < 2),
            FN_TODATE(doc.required_fromdate),doc.noof_units,doc.unit_value,
            doc.margin_percentage,doc.margin_amount,doc.book_dep_per,
            doc.block_dep_per,doc.finance_amount,doc.capital_portion,
            DOC.NONCAPITAL_PORTION,DOC.PAY_TO_ID,DOC.PAYMENT_PERCENTAGE,
            CASE WHEN (DOC.ENTITY_ID IS NULL OR DOC.ENTITY_ID=' ') THEN 0 ELSE TO_NUMBER(DOC.ENTITY_ID) END ,
            DOC.LEASETYPE,DOC.LEASE_ASSET_NO,DOC.DISCOUNT_AMOUNT,DOC.DISCOUNT_ABSORBED
            ,DOC.SECURITY_TYPE,DOC.SECURITY_TYPE_IDENTIFIER,DOC.SECURITY_TYPE_IDENTIFIER_VALUE,
            DOC.MARGIN_DEALER,DOC.MARGIN_MFC,DOC.TRADE_IN,DOC.ENGINE_NO,DOC.CHASIS_NO,FN_TODATE(DOC.DATE_OF_REG),DOC.REG_NO||DOC.REG_NO2,DOC.REG_NO,DOC.REG_NO2,
            FN_TODATE(DOC.REG_EXPIRY_DATE),DOC.REGISTERED_OWNER,DOC.DEALER_COMMISSION_AMOUNT,decode(DOC.DEALER_COMM_ID,0,null),DOC.DEALER_COMMISSION_RATE
            ,doc.ASSET_TYPE,doc.ASSET_ID,decode(doc.DEALER_COMM_RATE_ID,0,null)
            
            );
        end loop;
        
       
       --EXCEPTION WHEN OTHERS THEN P_ERRORCODE:=345;
        
      end;                 
    End IF; 
    --Asset details INSERT end--

    --Repayment Structure Begin--
    if p_xml_repaymentstructure is not null then
      begin
          p_xmldocid := SYS.XMLTYPE.createXML(p_XML_RepaymentStructure);
          FOR Strt IN
          (
            select 
              extractvalue(value(x),'/Details/@NOOFDAYS') as NOOFDAYS,
              extractvalue(value(x),'/Details/@INSTALLMENTNO') as INSTALLMENTNO,
              extractvalue(value(x),'/Details/@FROMDATE') as FROMDATE,
              extractvalue(value(x),'/Details/@TODATE') as TODATE,
              extractvalue(value(x),'/Details/@INSTALLMENTDATE') as INSTALLMENTDATE,
              extractvalue(value(x),'/Details/@INSTALLMENTAMOUNT') as installmentamount,
              EXTRACTVALUE(VALUE(X),'/Details/@INSURANCE') AS INSURANCE,
              EXTRACTVALUE(VALUE(X),'/Details/@OTHERS') AS OTHERAMOUNT,
              extractvalue(value(x),'/Details/@FINANCECHARGES') as FINANCECHARGES,
              Extractvalue(Value(X),'/Details/@PRINCIPALAMOUNT') As Principalamount,
              EXTRACTVALUE(VALUE(X),'/Details/@Tax') AS Tax,
              EXTRACTVALUE(VALUE(X),'/Details/@ET_IW') AS ET_IW,
              EXTRACTVALUE(VALUE(X),'/Details/@ET_OW') AS ET_OW,
              EXTRACTVALUE(VALUE(X),'/Details/@CUS_OW') AS CUS_OW
            FROM
              TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
          )
          loop
            insert into s3g_org_apprepaystruct(application_process_id,
              noofdays,installment_no,fromdate,todate,installmentdate,
              Installmentamount,Insuranceamount,Others,Financecharges,
              PRINCIPALAMOUNT,TAX
              ,et_iw,et_ow,cus_ow,APPREPAYSTRUCT_ID
              )values 
              (Str_application_process_id,strt.noofdays,strt.installmentno,
              to_timestamp(strt.fromdate,'MM-DD-RRRR HH12:MI:SS AM'),
              to_timestamp(strt.todate,'MM-DD-RRRR HH12:MI:SS AM'),
              to_timestamp(strt.installmentdate,'MM-DD-RRRR HH12:MI:SS AM'),
              Strt.Installmentamount,Strt.Insurance,Strt.Otheramount,
              STRT.FINANCECHARGES,STRT.PRINCIPALAMOUNT,STRT.TAX
              ,strt.ET_IW,strt.ET_OW,strt.CUS_OW,SEQ_ORG_APPREPAYSTRUCT.NEXTVAL
              );
          end loop;  
      end;
    End If;
    
   begin--S3G_ORG_APPREPAYSTRUCT_EXTN LIP CUSTOMER INSERT START 
     if p_xml_repaymentstructure is not null then
      begin
          p_xmldocid := SYS.XMLTYPE.createXML(p_XML_RepaymentStructure);
          FOR Strt IN
          (
            select 
              extractvalue(value(x),'/Details/@NOOFDAYS') as NOOFDAYS,
              extractvalue(value(x),'/Details/@INSTALLMENTNO') as INSTALLMENTNO,
              extractvalue(value(x),'/Details/@INSTALLMENTDATE') as INSTALLMENTDATE,
              extractvalue(value(x),'/Details/@INSTALLMENTAMOUNT') as installmentamount,
              EXTRACTVALUE(VALUE(X),'/Details/@INSURANCE_AMT') AS INSURANCE_AMT
              
            FROM
              TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
          )
          Loop
          IF(NVL(STRT.INSURANCE_AMT,0)>0) THEN
            insert into S3G_ORG_APPREPAYSTRUCT_EXTN
                 (
                    APPLICATION_PROCESS_ID,
                    APPREPAYSTRUCT_EXTN_ID,
                    CASHFLOW_FLAG_ID,
                    INSTALMENT_AMOUNT,
                    INSTALMENT_DATE,
                    INSTALMENT_NO--,
                 )
                select 
                  Str_application_process_id,
                  SEQ_APPREPAYSTRUCT_EXTN.NEXTVAL,
                  108,
                  STRT.INSURANCE_AMT,
                  FN_TODATE(Strt.INSTALLMENTDATE),
                  Strt.INSTALLMENTNO
                  From Dual;
          END IF;     
                  
          end LOOP;  
      end;
    end if;
  END;--S3G_ORG_APPREPAYSTRUCT_EXTN LIP CUSTOMER INSERT END 
    
     begin--S3G_ORG_APPREPAYSTRUCT_EXTN LIP COMPANY INSERT START 
     if p_xml_repaymentstructure is not null then
      begin
          p_xmldocid := SYS.XMLTYPE.createXML(p_XML_RepaymentStructure);
          FOR Strt IN
          (
            select 
              extractvalue(value(x),'/Details/@NOOFDAYS') as NOOFDAYS,
              extractvalue(value(x),'/Details/@INSTALLMENTNO') as INSTALLMENTNO,
              extractvalue(value(x),'/Details/@INSTALLMENTDATE') as INSTALLMENTDATE,
              extractvalue(value(x),'/Details/@INSTALLMENTAMOUNT') as installmentamount,
              EXTRACTVALUE(VALUE(X),'/Details/@INSURANCE_PAYABLE') AS INSURANCE_PAYABLE
              
            FROM
              TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
          )
          loop
          
           IF(NVL(STRT.INSURANCE_PAYABLE,0)>0) THEN
            insert into S3G_ORG_APPREPAYSTRUCT_EXTN
                 (
                    APPLICATION_PROCESS_ID,
                    APPREPAYSTRUCT_EXTN_ID,
                    CASHFLOW_FLAG_ID,
                    INSTALMENT_AMOUNT,
                    INSTALMENT_DATE,
                    INSTALMENT_NO--,
                 )
                select 
                  Str_application_process_id,
                  SEQ_APPREPAYSTRUCT_EXTN.NEXTVAL,
                  109,--LIP COMPANY
                  STRT.INSURANCE_PAYABLE,
                  FN_TODATE(Strt.INSTALLMENTDATE),
                  Strt.INSTALLMENTNO
                  From Dual;
             END IF;     
                  
          end LOOP;  
      end;
    end if;
  end;--S3G_ORG_APPREPAYSTRUCT_EXTN LIP COMPANY INSERT END 
    
    
    begin--S3G_ORG_APPREPAYSTRUCT_EXTN DEALER COMMISSION INSERT START 
     if p_xml_repaymentstructure is not null then
      begin
          p_xmldocid := SYS.XMLTYPE.createXML(p_XML_RepaymentStructure);
          FOR Strt IN
          (
            select 
              extractvalue(value(x),'/Details/@NOOFDAYS') as NOOFDAYS,
              extractvalue(value(x),'/Details/@INSTALLMENTNO') as INSTALLMENTNO,
              extractvalue(value(x),'/Details/@INSTALLMENTDATE') as INSTALLMENTDATE,
              extractvalue(value(x),'/Details/@INSTALLMENTAMOUNT') as installmentamount,
              EXTRACTVALUE(VALUE(X),'/Details/@DEAL_COMMISSION') AS DEAL_COMMISSION
              
            FROM
              TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
          )
          Loop
           IF(NVL(STRT.DEAL_COMMISSION,0)>0) THEN
            insert into S3G_ORG_APPREPAYSTRUCT_EXTN
                 (
                    APPLICATION_PROCESS_ID,
                    APPREPAYSTRUCT_EXTN_ID,
                    CASHFLOW_FLAG_ID,
                    INSTALMENT_AMOUNT,
                    INSTALMENT_DATE,
                    INSTALMENT_NO--,
                 )
                select 
                  Str_application_process_id,
                  SEQ_APPREPAYSTRUCT_EXTN.NEXTVAL,
                  28,--DEALER COMMISSION
                  STRT.DEAL_COMMISSION,
                  FN_TODATE(Strt.INSTALLMENTDATE),
                  Strt.INSTALLMENTNO
                  From Dual;
             END IF;
          end LOOP;  
      end;
    end if;
  end;----S3G_ORG_APPREPAYSTRUCT_EXTN DEALER COMMISSION INSERT END    
    
    
    begin-----Factoring Customization
   
    if(p_XMLCustomerMap is not null)then
    begin
      p_xmldocid := SYS.XMLTYPE.createXML(p_XMLCustomerMap);
          FOR CUSTMAP IN
          (
            SELECT 
              extractvalue(value(x),'/Details/@Entity_Id') as Entity_Id,    
              EXTRACTVALUE(VALUE(X),'/Details/@Limit') AS LIMIT,
              extractvalue(value(x),'/Details/@Serial_Number') as Serial_Number
              
            FROM
              TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
          )
          LOOP
         
          if(CUSTMAP.Entity_Id is not null)then
          
          
            insert into S3G_ORG_APP_Sublimit
             (
                APP_SUBLIMIT_ID,
                APPLICATION_PROCESS_ID,
                ENTITY_ID,
                LIMIT_VAL,
                CUTOFF_DATE
              )
              select 
              SEQ_S3G_ORG_APP_Sublimit.NEXTVAL,
              Str_application_process_id,
              CUSTMAP.Entity_Id,
              CUSTMAP.LIMIT,
              sysdate
              FROM DUAL; 
          end if;
             
          end loop;  
          end;
    end if;
    
    if(p_strXMLOtherCharges is not null)then
    begin
      p_xmldocid := SYS.XMLTYPE.createXML(p_strXMLOtherCharges);
          FOR CUSTMAP IN
          (
            select 
              extractvalue(value(x),'/Details/@Cashflow_ID') as Cashflow_ID,
              extractvalue(value(x),'/Details/@ChargeSequence_id') as ChargeSequence_id,
              extractvalue(value(x),'/Details/@ChargeType_Id') as ChargeType_Id,
              extractvalue(value(x),'/Details/@Chargeamount') as Chargeamount
            FROM
              TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
          )
          LOOP
          select CASHFLOW_FLAG_ID into d_CASHFLOW_FLAG_ID from S3G_ORG_CASHFLOWMASTER where CASHFLOW_ID=CUSTMAP.Cashflow_ID;
          
            insert into S3G_ORG_APP_Fact_CHARGE
             (
            APP_FACT_CHARGE_ID,
            APPLICATION_PROCESS_ID,
            CASHFLOW_FLAG_ID,
            CHARGE_FREQUENCY,
            CHARGE_TYPE,  
            CHARGE_AMOUNT,
            IS_ACTIVE,
            CASHFLOW_ID
              )
              select 
              SEQ_S3G_ORG_APP_Fact_CHARGE.NEXTVAL,
              Str_application_process_id,
              d_CASHFLOW_FLAG_ID,
              CUSTMAP.ChargeSequence_id,
              CUSTMAP.ChargeType_Id,
              CUSTMAP.Chargeamount,
              1,
               CUSTMAP.Cashflow_ID
              from dual; 
             
          end loop;  
          end;
    end if;
    
    
    if(p_XMLDisRatforUtil is not null)then
    begin
      p_xmldocid := SYS.XMLTYPE.createXML(p_XMLDisRatforUtil);
          FOR CUSTMAP IN
          (
            select 
              extractvalue(value(x),'/Details/@Start_Slab') as Start_Slab,
              extractvalue(value(x),'/Details/@End_Slab') as End_Slab,
              EXTRACTVALUE(VALUE(X),'/Details/@Discount_Rate') AS DISCOUNT_RATE,
              EXTRACTVALUE(VALUE(X),'/Details/@Sno') AS Sno
              
            
            FROM
              TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
          )
          LOOP
          if(CUSTMAP.Sno<>'-1')then
                insert into S3G_ORG_APP_Dis_Util
    
                 (
                APP_DIS_UTIL_ID,
                APPLICATION_PROCESS_ID,
                DISC_RATE,
                END_SLAB,
                START_SLAB
                  )
                  select 
                  SEQ_S3G_ORG_APP_Dis_Util.NEXTVAL,
                  Str_application_process_id,
                  CUSTMAP.Discount_Rate,
                  CUSTMAP.END_SLAB,
                  CUSTMAP.Start_Slab
                  FROM DUAL; 
           end   if;
          end loop;  
          end;
    end if;
    
     if(P_XMLDEALTRANSFER is not null)then
    begin
      p_xmldocid := SYS.XMLTYPE.createXML(P_XMLDEALTRANSFER);
          FOR CUSTMAP IN
          (
            select 
              extractvalue(value(x),'/Details/@sno') as sno,
              extractvalue(value(x),'/Details/@CONTRACT_NO_ID') as Contract_No_Id,
              EXTRACTVALUE(VALUE(X),'/Details/@finance_amount') AS finance_amount
            
              
            
            FROM
              TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
          )
          LOOP
       
                insert into S3G_ORG_APP_DEAL_TRAN
    
                 (
                  APP_DEAL_TRAN_ID,
                  APPLICATION_PROCESS_ID,
                  FINANCE_AMOUNT,
                  PA_SA_REF_ID
              )
                  select 
                    SEQ_S3G_ORG_APP_DEAL_TRAN.NEXTVAL,
                    Str_application_process_id,
                    CUSTMAP.finance_amount,
                    CUSTMAP.Contract_No_Id
                  FROM DUAL; 
         
          end LOOP;  
          END;
          
          
          
    end if;
    
     if(p_XMLLienAccount is not null)then
    begin
      p_xmldocid := SYS.XMLTYPE.createXML(p_XMLLienAccount);
          FOR CUSTMAP IN
          (
            select 
              extractvalue(value(x),'/Details/@sno') as sno,
              extractvalue(value(x),'/Details/@CONTRACT_NO_ID') as Contract_No_Id,
              EXTRACTVALUE(VALUE(X),'/Details/@finance_amount') AS finance_amount
            
              
            
            FROM
              TABLE (XMLSEQUENCE (p_xmldocid.EXTRACT ('//Root/Details'))) X
          )
          LOOP
       
                insert into S3G_ORG_APP_Lien
    
                 (
                  APPLICATION_PROCESS_ID,
                  APP_LIEN_ID,
                  PA_SA_REF_ID
              )
                  select 
                    Str_application_process_id,
                    SQ_S3G_ORG_APP_Lien.NEXTVAL,
                    CUSTMAP.Contract_No_Id
                  FROM DUAL; 
         
          end LOOP;  
          END;
          
          
          
    end if;
    
    
    
   
    end;
    
    
    D_varASR := 'Application ' || p_application_number ||' created.';   
    S3g_Common_Createfollowupent (TO_CHAR(SYSTIMESTAMP,'MM/DD/YYYY HH12:MI:SS AM'),P_Customer_Id,TO_CHAR(SYSTIMESTAMP,'MM/DD/YYYY HH12:MI:SS AM'),P_Created_By       
                      ,TO_CHAR(systimestamp,'MM/DD/YYYY HH12:MI:SS AM'),D_XML,null,null,'PRI',P_CREATED_BY,P_COMPANY_ID,P_APPLICATION_NUMBER          
                      ,D_varASR,p_CRM_ID);
    
END S3G_OR_INS_APPDET;

/

create or replace
PROCEDURE "S3G_OR_GET_APPAST" 
 (
  p_OPTION Number,
  p_COMPANYID Number,
  p_AssetId varchar2 := null,
  P_LEASEASSETNO varchar2 := null,
  P_APPASSET OUT SYS_REFCURSOR,
  P_APPASSET_SEURTY OUT SYS_REFCURSOR,
  P_APPASSET_SEURTY_TPY OUT SYS_REFCURSOR
 )
AS                      
BEGIN                      

-- =============================================
-- Author:  Thalaiselvam N
-- Create Date: 19-10-2011
-- Description: To Get Application Asset
-- =============================================

open  P_APPASSET for select 'ORA_DUMMY' from dual; 
open  P_APPASSET_SEURTY for select 'ORA_DUMMY' from DUAL; 
open  P_APPASSET_SEURTY_TPY for select 'ORA_DUMMY' from dual;  



  IF p_OPTION = 1 Then 
    Open p_AppAsset For 
        SELECT A.LEASE_ASSET_NO,
          --B.BOOK_DEPRECIATION_RATE,
          0 as BOOK_DEPRECIATION_RATE,
          B.BLOCK_DEPRECIATION_RATE,
          A.ASSET_ID AS LEASE_ASSET_ID,
          A.ASSET_ID,
          MAX(LAN_BOOKING_TO_DATE) AS AVAILABLE_DATE,
          A.LEASE_ASSET_NO         AS ASSET_CODE,
          to_number(NVL((
          CASE
            WHEN (A.Current_Value IS NULL
            OR A.Current_Value     =0 )
            THEN A.Asset_Value
            ELSE A.Current_Value
          END),0)) AS Assetvalue
        FROM S3g_Lad_Leaseastreg A
        INNER JOIN S3G_ORG_ASSETMASTER B
        ON A.ASSET_id   = B.ASSET_id
        AND B.Is_Active = 1
        LEFT JOIN S3g_Lad_Leaseastdet C
        ON C.LEASE_ASSET_NO          = A.LEASE_ASSET_NO
        AND AVAILABILITY_STATUS_CODE = 1
        WHERE A.COMPANY_ID           = p_COMPANYID
        GROUP BY A.LEASE_ASSET_NO,
         -- B.BOOK_DEPRECIATION_RATE 0 BOOK_DEPRECIATION_RATE,
          B.BLOCK_DEPRECIATION_RATE,
          A.ASSET_ID,
          A.Current_Value,
          A.Asset_Value;
  ELSIF p_OPTION = 2 Then
    Open p_AppAsset For 
        SELECT B.Asset_Code AS Asset_Id ,
          B.Asset_Code
          ||'-'
          || B.ASSET_DESCRIPTION                                            AS ASSET_CODE,
          --S3g_Fn_Getgpsdecimalformat(B.Book_Depreciation_Rate,P_Companyid) 0 
          0  AS Book_Depreciation_Rate,
          S3g_Fn_Getgpsdecimalformat(B.Block_Depreciation_Rate,P_Companyid) AS Block_Depreciation_Rate,
          ' '                                                               AS Assetvalue
        FROM S3G_ORG_ASSETMASTER B
        WHERE B.COMPANY_ID = p_COMPANYID
        AND B.IS_ACTIVE    = 1;
  ELSIF p_OPTION = 3 Then
    Open p_AppAsset For 
      SELECT A.LEASE_ASSET_NO,
          A.ASSET_ID               AS LEASE_ASSET_ID,
          MAX(LAN_BOOKING_TO_DATE) AS AVAILABLE_DATE,
          To_Number(NVL((
          CASE
            WHEN (A.Current_Value IS NULL
            OR A.Current_Value     = 0 )
            THEN A.Asset_Value
            ELSE A.Current_Value
          END),0)) AS Assetvalue
        FROM S3g_Lad_Leaseastreg A
        INNER JOIN S3G_ORG_ASSETMASTER B
        ON A.ASSET_id   = B.ASSET_id
        AND B.IS_ACTIVE = 1
        LEFT JOIN S3g_Lad_Leaseastdet C
        ON C.LEASE_ASSET_NO          = A.LEASE_ASSET_NO
        AND AVAILABILITY_STATUS_CODE = 1
        WHERE A.COMPANY_ID           = p_COMPANYID
        AND B.Asset_Code             = p_AssetId
        GROUP BY A.LEASE_ASSET_NO,
          --B.BOOK_DEPRECIATION_RATE,
          -- 0 as BOOK_DEPRECIATION_RATE,
          B.BLOCK_DEPRECIATION_RATE,
          A.ASSET_ID,
          A.Current_Value,
          A.Asset_Value; 
  ELSIF p_OPTION = 4 Then
    Open P_Appasset For 
        SELECT A.Asset_Value AS Wdv,
          B.Asset_Code
        FROM S3g_Lad_Leaseastreg A
        INNER JOIN S3g_Org_Assetmaster B
        ON A.Asset_Id        = B.Asset_Id
        WHERE Lease_Asset_No = p_LeaseAssetNo
        AND A.COMPANY_ID     = p_COMPANYID;
  ELSIF p_OPTION = 5 Then
    Open P_Appasset For 
        SELECT Temp.Lease_Asset_No,
          S3g_Fn_Getgpsdecimalformat(Temp.Book_Depreciation_Rate,P_Companyid)  AS Book_Depreciation_Rate,
          S3g_Fn_Getgpsdecimalformat(Temp.Block_Depreciation_Rate,P_Companyid) AS Block_Depreciation_Rate,
          Temp.Asset_Id                                                        AS Lease_Asset_Id,
          Temp.Asset_Id,
          Temp.Available_Date,
          Temp.Asset_Code,
          S3g_Fn_Getgpsdecimalformat(Temp.Assetvalue,p_COMPANYID) AS Assetvalue
        FROM
          ( SELECT A.LEASE_ASSET_NO ,
            --B.Book_Depreciation_Rate,
            0 as Book_Depreciation_Rate,
            B.Block_Depreciation_Rate,
            A.Asset_Id AS Lease_Asset_Id,
            A.Asset_Id,
            MAX(Lan_Booking_To_Date) AS Available_Date,
            A.Lease_Asset_No         AS Asset_Code,
            to_number(NVL((
            CASE
              WHEN (A.Current_Value IS NULL
              OR A.Current_Value     =0 )
              THEN A.Asset_Value
              ELSE A.Current_Value
            END),0)) AS Assetvalue
          FROM S3g_Lad_Leaseastreg A
          INNER JOIN S3G_ORG_ASSETMASTER B
          ON A.ASSET_id   = B.ASSET_id
          AND B.IS_ACTIVE = 1
          LEFT JOIN S3g_Lad_Leaseastdet C
          ON C.LEASE_ASSET_NO          = A.LEASE_ASSET_NO
          AND AVAILABILITY_STATUS_CODE = 1
          WHERE A.COMPANY_ID           = p_COMPANYID
          AND B.Asset_Code             = p_AssetId
          GROUP BY A.LEASE_ASSET_NO,
            --B.BOOK_DEPRECIATION_RATE,
            B.BLOCK_DEPRECIATION_RATE,
            A.ASSET_ID,
            A.Current_Value,
            A.Asset_Value
          ) temp
        WHERE Assetvalue >=
          (SELECT Parameter_Value
          FROM S3G_GLOBAL_ParameterValues
          WHERE Parameter_Code=21
          AND Company_Id      = P_Companyid
          );
  ELSIF p_OPTION = 6 Then
    Open P_Appasset For 
        SELECT DISTINCT B.Asset_Code AS Asset_Id ,
          B.Asset_Code
          ||'-'
          ||B.ASSET_DESCRIPTION                                            AS ASSET_CODE,
         -- S3g_Fn_Getgpsdecimalformat(B.Book_Depreciation_Rate,P_Companyid) 0  AS Book_Depreciation_Rate,
         0  AS Book_Depreciation_Rate,
          S3g_Fn_Getgpsdecimalformat(B.Block_Depreciation_Rate,P_Companyid) AS Block_Depreciation_Rate,
          ' '                                                               AS Assetvalue
        FROM S3g_Org_Assetmaster B
        INNER JOIN S3g_Lad_Leaseastreg A
        ON A.Asset_Id = B.Asset_Id
        AND A.STATUS  = 0
          /*Performing Well*/
        WHERE B.COMPANY_ID = p_COMPANYID
        and B.IS_ACTIVE    = 1;
        
  End If;
  
   OPEN P_APPASSET_SEURTY FOR SELECT LOOKUP_CODE
as
  VALUE,LOOKUP_DESCRIPTION
AS
  name from S3G_LAD_LOOKUPTYPEDET where LOOKUPTYPE_CODE=122;
  
  OPEN P_APPASSET_SEURTY_TPY FOR SELECT LOOKUP_CODE
AS
  VALUE,LOOKUP_DESCRIPTION
AS
  name FROM S3G_LAD_LOOKUPTYPEDET WHERE LOOKUPTYPE_CODE=123;
END S3G_OR_Get_AppAst;