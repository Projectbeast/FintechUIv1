#region Page Header
/// © 2010 SUNDARAM INFOTECH SOLUTIONS P LTD . All rights reserved
/// 
/// <Program Summary>
/// Module Name			: Origination
/// Screen Name			: Pricing
/// Created By			: Nataraj Y
/// Created Date		: 15-July-2010
/// Purpose	            : 
/// Last Updated By		: Nataraj Y
/// Last Updated Date   : 02-Nov-2010   
/// Purpose	            : Bug Fixing Round 4
/// Last Updated By		: Nataraj Y
/// Last Updated Date   : 07-Dec-2010  
/// <Program Summary>
#endregion

#region NameSpaces
using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using S3GBusEntity;
using System.Globalization;
using System.Data;
using S3GBusEntity.Origination;
using System.Web.Security;
using System.Configuration;
using System.Web.Security;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Data.Common;
using System.IO;
using System.Linq;
using System.Text;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.Text.RegularExpressions;
using CrystalDecisions.Shared;
using CrystalDecisions.CrystalReports.Engine;
#endregion

public partial class Origination_S3gOrgPricing_Add : ApplyThemeForProject
{

    #region Variable declaration
    UserInfo ObjUserInfo;
    S3GSession ObjS3GSession = new S3GSession();
    Dictionary<string, string> Procparam;
    string _Add = "1", _Edit = "2", _Query = "3";
    int _SlNo = 0;
    // bool PaintBG = false;
    int intCompany_Id, intEnqNewCustomerId;
    int intUserId;
    int intResult;
    int intPricingId;

    static string strMode;
    string strErrorMessagePrefix = @"Correct the following validation(s): </br></br>   ";
    DataTable dtAstChk = new DataTable();
    DataTable DtAlertDetails = new DataTable();
    DataTable DtFollowUp = new DataTable();
    DataTable DtCashFlow = new DataTable();
    DataTable DtCashFlowOut = new DataTable();
    DataTable DtRepayGrid = new DataTable();
    bool bCreate = false;
    bool bModify = false;
    bool bQuery = false;
    bool bClearList = false;


    double intAssetamount = 0;
    public string strDateFormat;
    public string strCustomer_Id = string.Empty;
    public string strCustomer_Value = string.Empty;
    public string strCustomer_Name = string.Empty;

    string strKey = "Insert";
    string strAlert = "alert('__ALERT__');";

    string strRedirectPageView = "window.location.href='../Origination/S3GORGTransLander.aspx?Code=ORPRC';";
    string strRedirectPageAdd = "window.location.href='../Origination/S3GOrgPricing_Add.aspx?qsMode=C';";
    string strRedirectPage = "~/Origination/SS3GORGTransLander.aspx?Code=ORPRC";
    string strRedirectHomePage = "window.location.href='../Common/HomePage.aspx';";
    bool blnIsWorkflowApplicable = Convert.ToBoolean(ConfigurationManager.AppSettings["IsWorkflowApplicable"]);
    PricingMgtServicesReference.PricingMgtServicesClient ObjPricingMgtServices;
    PricingMgtServices.S3G_ORG_PricingDataTable ObjS3G_ORG_Pricing;
    OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService;
    //string strNewWin = "window.open('../Origination/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes&NewCustomerID=0', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
    //string strNewWin_Repay = "window.showModalDialog('../Origination/S3GORGRepaymentDetails_Add.aspx?IsFrom=Pricing', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');return false;";
    string strPageName = "Pricing";
    ReportDocument rpd = new ReportDocument();
    public static Origination_S3gOrgPricing_Add obj_PageValue;
    #endregion

    #region Page Load

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            // WF Implementation
            ProgramCode = "042";
            obj_PageValue = this;
            ObjUserInfo = new UserInfo();
            strDateFormat = ObjS3GSession.ProDateFormatRW;
            // S3GSession ObjS3GSession = new S3GSession();
            if (Request.QueryString["qsMode"] != null)
                strMode = Request.QueryString["qsMode"];

            if (Request.QueryString.Get("qsViewId") != null)
            {
                FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsViewId"));
                intPricingId = Convert.ToInt32(fromTicket.Name);
            }

            intCompany_Id = ObjUserInfo.ProCompanyIdRW;
            btnShowRepayment.Enabled = false;
            intUserId = ObjUserInfo.ProUserIdRW;

            Session["Date"] = DateTime.Now.ToString(strDateFormat) + " " + DateTime.Now.ToString().Split(' ')[1].ToString() + " " + DateTime.Now.ToString().Split(' ')[2].ToString();
            //User Authorization
            bCreate = ObjUserInfo.ProCreateRW;
            bModify = ObjUserInfo.ProModifyRW;
            bQuery = ObjUserInfo.ProViewRW;
            bClearList = Convert.ToBoolean(ConfigurationManager.AppSettings.Get("ClearListValues"));
            txtOfferValidTill.Attributes.Add("readonly", "readonly");
            txtRequiredFromDate.Attributes.Add("readonly", "readonly");
            txtTotalAssetValue.Attributes.Add("readonly", "readonly");
            txtBusinessIRR_Repay.Attributes.Add("readonly", "readonly");
            txtBusinessIRR.Attributes.Add("readonly", "readonly");

            txtAccIRR.Attributes.Add("readonly", "readonly");
            txtAccountIRR_Repay.Attributes.Add("readonly", "readonly");

            txtCompanyIRR_Repay.Attributes.Add("readonly", "readonly");
            txtCompanyIRR.Attributes.Add("readonly", "readonly");

            txtOfferDate.Attributes.Add("readonly", "readonly");

            if (ddlEnquiryNumber.SelectedValue != "0")
            {
                rfvCustomerCode.Enabled = false;
            }
            else
            {
                rfvCustomerCode.Enabled = true;
            }
            strDateFormat = ObjS3GSession.ProDateFormatRW;
            calExeOfferValidTill.Format = strDateFormat;
            CalendarExtenderSD_RequiredFromDate.Format = strDateFormat;

            if (ViewState["hdnRoundOff"] != null && !string.IsNullOrEmpty(ViewState["hdnRoundOff"].ToString()))
            {
                S3GBusEntity.CommonS3GBusLogic.GPSRoundOff = Convert.ToInt32(ViewState["hdnRoundOff"].ToString());
            }




            //#region Load Enquiry Details
            //if (Session["EnquiryNumber"] != null)
            //{
            //    FunPriLoadDetailsFromEnquiry(Session["EnquiryNumber"].ToString(), "Enqr");
            //    Session["EnquiryNumber"] = null;
            //}
            //#endregion

            //FunPriLoadMarginResidual(); 

            if (!IsPostBack)
            {
                //btnPrev.Enabled = false;
                //btnCreateCustomer.Attributes.Add("onclick", strNewWin);
                //btnShowRepayment.Attributes.Add("onclick", strNewWin_Repay);             
                if (PageMode == PageModes.Create)
                {
                    btnchklist.Enabled = false;
                }
                FunPriLoadPage();
                if (PageMode == PageModes.WorkFlow)
                {
                    ViewState["PageMode"] = PageModes.WorkFlow;
                }

                // WORK FLOW IMPLEMENTATION
                if (ViewState["PageMode"] != null && ViewState["PageMode"].ToString() == PageModes.WorkFlow.ToString())
                {
                    PreparePageForWFLoad();
                }

              

                tcPricing.ActiveTabIndex = 0;


                #region Setting New Customer Created Form Popup
                if (Session["EnqNewCustomerId"] != null)
                {
                    intEnqNewCustomerId = Convert.ToInt32(Utility.Load("EnqNewCustomerId", ""));
                    if (intEnqNewCustomerId > 0)
                    {
                        FunPriLoadCustomerCode();
                        if (Session["EnquiryValue"] != null)
                        {
                            ddlEnquiryNumber.SelectedValue = Session["EnquiryValue"].ToString();
                            ddlEnquiryNumber_SelectedIndexChanged(this, new EventArgs());
                        }
                        FunPriLoadCustDetails(intEnqNewCustomerId.ToString(), "2");
                        //ddlLob_SelectedIndexChanged(null, null);
                        Session["EnqNewCustomerId"] = null;
                        Session["EnquiryValue"] = null;
                    }
                }
                #endregion
                //Added by Thangam M on 25/Jul/2013 to create Pricing from CRM
                if (Request.QueryString.Get("qsCRMID") != null)
                {
                    FunPrILoadCRMInfo();
                }
                //End here
            }

            FunPriLoadFileNameInPRDDT();
            FunPriSetMaxLength();
            txtSanctionDate.ReadOnly = true;
            //Workflow for Modify Mode
            if (ViewState["PageMode"] != null && ViewState["PageMode"].ToString() == PageModes.WorkFlow.ToString())
            {
                if (ViewState["intPricingId"] != null)
                    intPricingId = Convert.ToInt32(ViewState["intPricingId"]);
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Due to Data Problem, Unable to Load the Pricing Details";
            cvPricing.IsValid = false;
        }
    }


    protected void Page_UnLoad(object sender, EventArgs e)
    {
        if (rpd != null)
        {
            rpd.Close();
            rpd.Dispose();
        }
    }


    //Added by Thangam M on 25/Jul/2013 to create Pricing from CRM
    private void FunPrILoadCRMInfo()
    {
        try
        {
            Page.Master.FindControl("SiteMapPath1").Visible = false;
            lblHeading.Text = lblHeading.Text + "  [From CRM]";


            FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsCRMID"));
            int intCRMID = Convert.ToInt32(fromTicket.Name);



            btnCreateCustomer.Enabled = false;
            cmbCustomerCode.ReadOnly = true;

            Procparam = new Dictionary<string, string>();
            Procparam.Add("@CRM_ID", intCRMID.ToString());
            Procparam.Add("@Company_ID", intCompany_Id.ToString());

            DataSet dSet = Utility.GetDataset("S3G_CLN_GET_CRM_FOR_PERI", Procparam);

            if (dSet != null && dSet.Tables[0].Rows.Count > 0)
            {
                if (hdnCustID.Value == null || hdnCustID.Value==string.Empty)
                {
                    cmbCustomerCode.Text = dSet.Tables[0].Rows[0]["Customer"].ToString();
                    hdnCustID.Value = dSet.Tables[0].Rows[0]["Customer_ID"].ToString();
                    cmbCustomerCode_OnTextChanged(null, null);
                    ddlLob.SelectedValue = dSet.Tables[0].Rows[0]["LOB_ID"].ToString();
                    ddlLob_SelectedIndexChanged(null, null);
                    ddlBranch.SelectedValue = dSet.Tables[0].Rows[0]["LocationID"].ToString();
                    ddlBranch_SelectedIndexChanged(null, null);
                    txtFacilityAmt.Text = dSet.Tables[0].Rows[0]["Finance_Amount"].ToString();
                    txtTenure.Text = dSet.Tables[0].Rows[0]["Tenure"].ToString();
                }

                if (dSet.Tables[1].Rows.Count == 0)
                {
                    dSet.Tables[1].Rows.Add();
                    dSet.Tables[1].Columns.Add("AssetValue", typeof(decimal));
                    gvAssetDetails.DataSource = dSet.Tables[1];
                    gvAssetDetails.DataBind();

                    gvAssetDetails.Rows[0].Cells.Clear();
                    gvAssetDetails.Rows[0].Visible = false;
                    gvAssetDetails.Visible = false;
                    dSet.Tables[1].Rows.Clear();
                }
                else
                {
                    gvAssetDetails.DataSource = dSet.Tables[1];
                    gvAssetDetails.DataBind();
                    Panel2.Visible = true;
                    gvAssetDetails.Visible = true;
                    gvAssetDetails.Columns[1].Visible = false;
                    gvAssetDetails.Columns[11].Visible = false;

                    ViewState["ObjDTAssetDetails"] = dSet.Tables[1];
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
        }
    }

    private void PreparePageForWFLoad()
    {
        WorkflowMgtServiceReference.WorkflowMgtServiceClient objWorkflowToDoClient = new
            WorkflowMgtServiceReference.WorkflowMgtServiceClient();

        try
        {

            //if (Session["Program_Ref_No"] != null)
            //{
            //    if (Convert.ToString(Session["Program_Ref_No"]).EndsWith("0"))
            //    {
            //        FunPriLoadPage();

            //    }
            //    else
            //    {
            WorkFlowSession WFSessionValues = new WorkFlowSession();

            FunProPageLoad(_Add);
            FunPriPricingControlStatus(0);
            //WorkflowMgtServiceReference.WorkflowMgtServiceClient objWorkflowToDoClient = new WorkflowMgtServiceReference.WorkflowMgtServiceClient();
            byte[] bytePricing = objWorkflowToDoClient.FunPubLoadPricing(WFSessionValues.WorkFlowDocumentNo, int.Parse(CompanyId), WFSessionValues.Document_Type);
            DataSet dsEnquiryAppraisal = (DataSet)ClsPubSerialize.DeSerialize(bytePricing, SerializationMode.Binary, typeof(DataSet));


            if (dsEnquiryAppraisal.Tables.Count > 1)
            {
                if (dsEnquiryAppraisal.Tables[1].Rows.Count > 0)
                {
                    intPricingId = Convert.ToInt32(dsEnquiryAppraisal.Tables[1].Rows[0]["Doc_Id"].ToString());
                    ViewState["intPricingId"] = intPricingId;
                    FunAssetPanelVisible(true);
                    FunPriGetPricingDetails(intPricingId);
                    FunPriPricingControlStatus(1);

                }
            }
            else
            {
                if (dsEnquiryAppraisal.Tables[0].Rows.Count > 0)
                {
                    cmbCustomerCode.Text = Convert.ToString(dsEnquiryAppraisal.Tables[0].Rows[0]["Customer_Id"]);
                    // strCustomer_Id = Convert.ToString(dsEnquiryAppraisal.Tables[0].Rows[0]["Customer_Id"]);
                    ddlEnquiryNumber.SelectedValue = Convert.ToString(dsEnquiryAppraisal.Tables[0].Rows[0]["Enquiry_Response_ID"]);
                    ddlSanctionNumber.SelectedValue = Convert.ToString(dsEnquiryAppraisal.Tables[0].Rows[0]["Santion_Number"]);
                    txtSanctionDate.Text = DateTime.Parse(Convert.ToString(dsEnquiryAppraisal.Tables[0].Rows[0]["Sanction_Date"]), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                    FunPriShowCustomerDetails();
                    FunPriLoadDetailsFromEnquiry(ddlEnquiryNumber.SelectedValue, "Enqr");
                }
            }


            btnClear.Enabled = false;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable Load Pricing page");
        }
        finally
        {
            objWorkflowToDoClient.Close();
        }

    }
    //    }
    //}


    private void FunPriLoadPage()
    {
        try
        {

            FunProPageLoad(_Add);

            //panROIRules.Visible = false;
            // panPaymentRules.Visible = false;

            if (intPricingId > 0)
            {

                FunAssetPanelVisible(true);
                FunPriGetPricingDetails(intPricingId);
                if (strMode == "M")
                {
                    FunPriGetTemplateNames();
                    FunPriPricingControlStatus(1);
                }
                if (strMode == "Q")
                {
                    FunPriPricingControlStatus(-1);
                }
            }
            else
            {
                FunPriPricingControlStatus(0);


            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable Load Pricing page");
        }
    }

    private void FunPriLoadMarginResidual()
    {
        if (ViewState["ROIRules"] != null)
        {

        }
    }

    #endregion

    #region Page Events
    protected void btnClear_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriResetValues();
        }
        catch (Exception ex)
        {
            //ClsPubCommErrorLog.CustomErrorRoutine(ex,strPageName) ;
            //cvPricing.ErrorMessage = "Error in clearing values";
            //cvPricing.IsValid = false;
        }
    }

    protected void btnCreateCustomer_Click(object sender, EventArgs e)
    {

        try
        {
            string strNewWin = string.Empty;
            if (ddlEnquiryNumber.SelectedValue != "0")
            {
                Session["EnquiryValue"] = ddlEnquiryNumber.SelectedValue;
                strNewWin = "window.open('../Origination/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes&NewCustomerID=0 &CR_VALUE=" + ViewState["CR_VALUE"].ToString() + " &qsMode=C&EnquiryID=" + ddlEnquiryNumber.SelectedValue + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            }
            else if (Request.QueryString.Get("qsCRMID") != null)
            {
                FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsCRMID"));
                strNewWin = "window.open('../Origination/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes&qsMode=C&NewCustomerID=0&CRM_ID=" + Convert.ToString(fromTicket.Name) + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            }
            else
            {
                strNewWin = "window.open('../Origination/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes& qsMode=C&NewCustomerID=0', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            }

            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strNewWin, true);
            this.Focus();
            return;
        }
        catch (Exception ae)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ae, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to create new customer";
            cvPricing.IsValid = false;
        }
    }

    protected void ddlSanctionNumber_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            if (ddlSanctionNumber.SelectedIndex > 0)
            {
                LoadDetailsFromSanction(ddlSanctionNumber.SelectedValue, hdnCustID.Value);
                FunPriOLRelatedChanges();
            }
            else
            {
                FunPriResetValues();
                // txtSanctionDate.Text = "";
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load Sanction number details";
            cvPricing.IsValid = false;
        }

    }

    protected void ddlEnquiryNumber_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (ddlEnquiryNumber.SelectedIndex > 0)
            {

                FunPriLoadDetailsFromEnquiry(ddlEnquiryNumber.SelectedValue, "Enqr");
                FunPriOLRelatedChanges();
            }
            else
            {
                FunPriResetValues();
                //  txtEnquiryDate.Text = "";
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load Enquiry number details";
            cvPricing.IsValid = false;
        }
    }

    protected void ddlLob_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (ddlLob.SelectedIndex > 0)
            {
                //Removed By shibu 19-Sep-2013
                //FunpriloadLocation();
                FunPriLOBBasedvalidations(ddlLob.SelectedItem.Text, ddlLob.SelectedItem.Value, _Add);
                FunPriOLRelatedChanges();
                FunPriLobReset();
                //if (ddlSanctionNumber.SelectedIndex > 0)
                //{
                //    Procparam = new Dictionary<string, string>();
                //    Procparam.Add("@LOB_ID", ddlLob.SelectedItem.Value);
                //    Procparam.Add("@Sanction_Id", ddlSanctionNumber.SelectedValue.Split(',')[0].ToString());
                //    Procparam.Add("@Option", "24");
                //    DataTable dtSanctionAmount = Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, Procparam);
                //    txtSanctionDate.Text = Utility.StringToDate(dtSanctionAmount.Rows[0]["Approved_Date"].ToString()).ToString(strDateFormat);
                //    txtFacilityAmt.Text = Math.Round(Convert.ToDecimal(dtSanctionAmount.Rows[0]["Final_Sanctioned_Limit"].ToString()), 0).ToString();
                //    txtFacilityAmt.ReadOnly = true;
                //}
                FunProLoadSanctionDetails();
                //FunPriLoadPreDisbursementDocument();
                if (grvConsDocuments.Rows.Count > 0)
                {
                    grvConsDocuments.Visible = true;
                }
            }
            else
            {
                ddlProduct.Items.Clear();
                //ddlConstitutionCodeList.Items.Clear();
                ddlROIRuleList.Items.Clear();
                ddlPaymentRuleList.Items.Clear();
                grvConsDocuments.Visible = false;


            }
            ddlLob.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load line of business based details";
            cvPricing.IsValid = false;
        }

    }

    protected void FunProLoadSanctionDetails()
    {
        if (ddlSanctionNumber.SelectedIndex > 0)
        {
            if (ddlLob.SelectedValue != "0" && ddlProduct.SelectedValue != "0")
            {
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@LOB_ID", ddlLob.SelectedValue);
                Procparam.Add("@Product_ID", ddlProduct.SelectedValue);
                Procparam.Add("@Sanction_Id", ddlSanctionNumber.SelectedValue.Split(',')[0].ToString());
                Procparam.Add("@Option", "24");
                DataTable dtSanctionAmount = Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, Procparam);
                if (dtSanctionAmount.Rows.Count > 0)
                {
                    txtSanctionDate.Text = Utility.StringToDate(dtSanctionAmount.Rows[0]["Approved_Date"].ToString()).ToString(strDateFormat);
                    //txtFacilityAmt.Text = Math.Round(Convert.ToDecimal(dtSanctionAmount.Rows[0]["Final_Sanctioned_Limit"].ToString()), 0).ToString();
                }
                else
                {
                    Utility.FunShowAlertMsg(this, "Sanction details not available for selected Line of Bussiness and Product");
                    txtSanctionDate.Text = txtFacilityAmt.Text = "";
                    ddlProduct.SelectedValue = "0";
                    return;

                }
                //txtFacilityAmt.ReadOnly = true;
            }
            else
            {
                txtSanctionDate.Text = txtFacilityAmt.Text = "";
            }
        }
    }

    //Code added by Saran on 25-Nov-2011 for the observation raised by RS.-start
    protected void ddlCollectedBy_SelectedIndexChanged(object sender, EventArgs e)
    {
        DropDownList ddlCollectedBy = sender as DropDownList;
        if (ddlCollectedBy.SelectedIndex > 0)
        {
            int intCurrentRow = ((GridViewRow)ddlCollectedBy.Parent.Parent).RowIndex;
            Label lblCollectedBy = (Label)gvPRDDT.Rows[intCurrentRow].FindControl("lblCollectedBy");
            lblCollectedBy.Text = ddlCollectedBy.SelectedValue;
        }

    }
    protected void ddlScannedBy_SelectedIndexChanged(object sender, EventArgs e)
    {
        DropDownList ddlScannedBy = sender as DropDownList;
        if (ddlScannedBy.SelectedIndex > 0)
        {
            int intCurrentRow = ((GridViewRow)ddlScannedBy.Parent.Parent).RowIndex;
            Label lblScannedBy = (Label)gvPRDDT.Rows[intCurrentRow].FindControl("lblScannedBy");
            lblScannedBy.Text = ddlScannedBy.SelectedValue;
        }
    }
    //Code added by Saran on 25-Nov-2011 for the observation raised by RS.-end

    protected void rdnlAssetType_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            txtBookDepreciationPerc.Text = "";
            txtBlockDepreciationPerc.Text = "";

            if (rdnlAssetType.SelectedValue == "1")
            {
                FunProLoadAssetValue("OLD");
                FunPriLANNumVisble(true);
                lblRequiredFromDate.CssClass = "styleReqFieldLabel";
                CalendarExtenderSD_RequiredFromDate.Enabled = true;
                //FunPriOLRelatedChanges();//ol related changes on 27-07-2011.
                txtUnitValue.ReadOnly = true;
            }
            else
            {
                FunProLoadAssetValue("NEW");
                FunPriLANNumVisble(false);
                lblStatus.Visible = false;
                txtStatus.Visible = false;
                lblRequiredFromDate.CssClass = "styleDisplayLabel";
                CalendarExtenderSD_RequiredFromDate.Enabled = false;
                //FunPriOLRelatedChanges();//ol related changes on 27-07-2011.
                txtUnitValue.ReadOnly = false;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            if (rdnlAssetType.SelectedValue == "1")
            {
                cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load Lease Asset Numbers";
            }
            else
            {
                cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load Asset Codes";
            }
            cvPricing.IsValid = false;
        }
    }

    private void FunProLoadAssetValue(string StrAssetType)
    {
        DataTable DtRate = new DataTable();
        Dictionary<string, string> dictParam = new Dictionary<string, string>();

        if (StrAssetType.ToUpper() == "NEW")
            dictParam.Add("@OPTION", "2");
        else
            dictParam.Add("@OPTION", "6");

        dictParam.Add("@COMPANYID", intCompany_Id.ToString());
        DtRate = Utility.GetDataset("S3G_ORG_GETAPPLICATIONASSET", dictParam).Tables[0];
        //ddlAssetCodeList.DataSource = DtRate;
        //ddlAssetCodeList.DataTextField = "Asset_Code";
        //ddlAssetCodeList.DataValueField = "Asset_ID";
        //ddlAssetCodeList.DataBind();
        //ddlAssetCodeList.Items.Insert(0, new ListItem("--Select--", "0"));
        //ddlAssetCodeList.Items.Insert(0, new System.Web.UI.WebControls.ListItem("--Select--", "0"));
        ViewState["RateDt1"] = DtRate;

        if (ddlPayTo.SelectedItem.Text.ToUpper() == "ENTITY")
        {
            FunToggleEntityControls(true);
        }
        else if (ddlPayTo.SelectedItem.Text.ToUpper() == "CUSTOMER")
        {
            FunToggleEntityControls(false);
        }
    }

    //To Load Asset through Auto Suggest
    #region Service Methods
    [System.Web.Services.WebMethod]
    public static string[] GetAsset(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@COMPANYID", obj_PageValue.intCompany_Id.ToString());
        Procparam.Add("@PrefixText", prefixText);
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_Get_PRIAST", Procparam), true);
        //if (suggetions.Count > 0)
        //{
        //    obj_PageValue.FunAssetchanges();
        //}
        return suggetions.ToArray();

    }
    #endregion

    protected void FunAssetchanges()
    {
        lblStatus.Visible = false;
        txtStatus.Visible = false;
        txtBookDepreciationPerc.Text = "";
        txtBlockDepreciationPerc.Text = "";
        txtUnitValue.Text = "";
        txtTotalAssetValue.Text = "";
        txtMarginPercentage.Text = "";
        txtMarginAmountAsset.Text = "";
        FunPriFillDepreciationRate((DataTable)ViewState["RateDt1"], null);
        // ddlAssetCodeList.ToolTip = ddlAssetCodeList.SelectedItem.Text;
    }

    private void FunPriOLRelatedChanges()
    {
        //OL related changes on 27-07-2011.
        //ViewState["OlExistingAsset"] = AssetType;
        string strType;
        strType = ddlLob.SelectedItem.Text.ToLower().Split('-')[0].Trim();
        if (strType == "ol")
        {
            gvOutFlow.Enabled = false;
            ddlPaymentRuleList.SelectedIndex = -1;
            rfvddlPaymentRuleList.Enabled = false;
            lblPaymentRuleList.CssClass = "styleDisplayLabel";
            ddlPaymentRuleList.Enabled = false;
            btnFetchPayment.Enabled = false;
            hdnPayment.Value = "";
            gvPaymentRuleDetails.DataSource = null;
            gvPaymentRuleDetails.DataBind();
            rfvFacilityAmount.Enabled = false;
            lblFacilityAmt.CssClass = "styleDisplayLabel";
        }
        else
        {
            rfvddlPaymentRuleList.Enabled = true;
            lblRequiredFromDate.CssClass = "styleReqFieldLabel";
            ddlPaymentRuleList.Enabled = true;
            btnFetchPayment.Enabled = true;
            gvOutFlow.Enabled = true;
            rfvFacilityAmount.Enabled = true;
            lblFacilityAmt.CssClass = "styleReqFieldLabel";
        }
    }

    protected void ddlProduct_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            ddlPaymentRuleList.Items.Clear();
            div8.Visible = false;
            if (ddlProduct.SelectedIndex > 0)
            {
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Is_Active", "1");
                Procparam.Add("@Company_ID", intCompany_Id.ToString());
                Procparam.Add("@LOB_ID", ddlLob.SelectedItem.Value);
                Procparam.Add("@Product_ID", ddlProduct.SelectedItem.Value);
                Procparam.Add("@Option", "8");
                ddlPaymentRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, new string[] { "Payment_RuleCard_ID", "Payment_Rule_Number" });
                FunPriLoadPreDisbursementDocument();
                hdnPayment.Value = "";
            }
            FunProLoadSanctionDetails();
            ddlProduct.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load product based details";
            cvPricing.IsValid = false;
        }

    }

    protected void ddlBranch_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlBranch.SelectedValue != "0")
        {
            txtBranch_Followup.Text = ddlBranch.SelectedText;
        }
        else
        {
            txtBranch_Followup.Text = "";
        }
    }
    // Added By Shibu 17-Sep-2013 Branch List 
    [System.Web.Services.WebMethod]
    public static string[] GetBranchList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggestions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_PageValue.intCompany_Id.ToString());
        Procparam.Add("@Type", "GEN");
        Procparam.Add("@User_ID", obj_PageValue.intUserId.ToString());
        Procparam.Add("@Program_Id", "042");
        Procparam.Add("@Lob_Id", obj_PageValue.ddlLob.SelectedValue);
        Procparam.Add("@Is_Active", "1");
        Procparam.Add("@PrefixText", prefixText);
        suggestions = Utility.GetSuggestions(Utility.GetDefaultData(SPNames.S3G_SA_GET_BRANCHLIST, Procparam));

        return suggestions.ToArray();
    }

    // Added By Shibu 17-Sep-2013 User List (Auto Suggestion)
    [System.Web.Services.WebMethod]
    public static string[] GetUserList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggestions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_PageValue.intCompany_Id.ToString());
        Procparam.Add("@Prefix", prefixText);
        suggestions = Utility.GetSuggestions(Utility.GetDefaultData(SPNames.S3G_Get_User_List, Procparam));

        return suggestions.ToArray();
    }

    protected void btnSave_Click(object sender, EventArgs e)
    {
        try
        {
            if (hdnCustID.Value == "" || hdnCustID.Value == "0")
            {
                Utility.FunShowAlertMsg(this, "Select an existing customer or create a new customer");
                return;
            }
            //if (chk_lblMargin.Visible == true && chk_lblMargin.Checked)
            //{
            //    if (gvAssetDetails.Rows.Count > 0)
            //    {
            //        if (gvAssetDetails.Columns.Count > 1)
            //        {
            //            Utility.FunShowAlertMsg(this, "Asset is Mandatory, If Margin is applicaple");
            //            return;
            //        }

            //    }
            //}

            //if (ddlLob.SelectedItem.Text.ToUpper().Contains("LN"))
            //{
            //    if (((DataTable)ViewState["ObjDTAssetDetails"]).Rows.Count == 0)
            //    {
            //        dtAstChk = new DataTable();
            //        Procparam = new Dictionary<string, string>();
            //        Procparam.Add("@Company_ID", intCompany_Id.ToString());
            //        Procparam.Add("@LOB_ID", ddlLob.SelectedItem.Value);
            //        Procparam.Add("@Product_ID", ddlProduct.SelectedItem.Value);
            //        dtAstChk = Utility.GetDefaultData("S3G_SYSAD_GET_PRODASTCHK", Procparam);
            //        if (dtAstChk.Rows[0]["ACTCHK"].ToString() == "1")
            //        {
            //            if (dtAstChk.Rows[0]["ASTCHK"].ToString() == "1")
            //            {
            //                Utility.FunShowAlertMsg(this.Page, "Asset is mandatory for the selected LOB and Product");
            //                return;
            //            }
            //        }
            //    }
            //}

            if (Convert.ToInt32(lblRoundNo.Text) < 10)
            {
                // cvPricing.ValidationGroup = "btnSave";
                if (FunPriCheckIsPageValid())
                {
                    FunPubPricingSave();
                }
            }
            else
            {
                Utility.FunShowAlertMsg(this, "Pricing round cannot exceed 10");
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to save pricing details";
            cvPricing.IsValid = false;
        }
        //finally
        //{
        //    if (ObjPricingMgtServices != null)
        //        ObjPricingMgtServices.Close();

        //}

    }

    protected void btnReset_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriFill_Repayment_Tab(_Add);
            FunPriIRRReset();
            gvRepaymentSummary.ClearGrid();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to reset the values";
            cvPricing.IsValid = false;
        }

    }

    protected void btnCancel_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["qsCRMID"] != null)
        {
            //ScriptManager.RegisterStartupScript(this, this.GetType(), "Popup", "window.close();", true);
            //ScriptManager.RegisterStartupScript(this, this.GetType(), "Popup", "window.parent.document.getElementById('ctl00_ContentPlaceHolder1_btnFrameCancel').click()", true);

            FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(hdnCustID.Value, false, 0);
            //Response.Redirect("S3GOrgCRM.aspx?qsCustomer=" + FormsAuthentication.Encrypt(Ticket));
            Response.Redirect("~/Origination/S3GOrgCRM_View.aspx?Code=CRM", false);
        }
        else if (Request.QueryString["Popup"] != null)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Close", "window.close();", true);
        }
        else if (PageMode == PageModes.WorkFlow)
        {
            ReturnToWFHome();
        }
        else
        {
            Response.Redirect("~/Origination/S3GORGTransLander.aspx?Code=ORPRC");
        }
    }

    protected void btnWithdraw_Click(object sender, EventArgs e)
    {
        ObjPricingMgtServices = new PricingMgtServicesReference.PricingMgtServicesClient();
        try
        {
            //ObjPricingMgtServices = new PricingMgtServicesReference.PricingMgtServicesClient();
            int intErrorCode = 0;
            intErrorCode = ObjPricingMgtServices.FunPubWithDrawPricingInt(intPricingId, intCompany_Id, intUserId);
            if (intErrorCode == 0)
            {
                strAlert = strAlert.Replace("__ALERT__", "Offer " + txtOfferNo.Text + " Withdrawn Successfully");
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
            }
            else
            {
                Utility.FunShowAlertMsg(this, "Error in Withdrawing offer " + txtOfferNo.Text);
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to withdraw the pricing";
            cvPricing.IsValid = false;
        }
        finally
        {
            ObjPricingMgtServices.Close();
        }
    }

    protected void cmbCustomerCode_OnTextChanged(object sender, EventArgs e)
    {
        try
        {
            string[] strcustCode = cmbCustomerCode.Text.Split(new string[] { "--" }, StringSplitOptions.RemoveEmptyEntries);
            if (strcustCode.Length > 1)
            {
                FunPriLoadCustDetails(strcustCode[1].ToString().Trim(), "1");
            }
            else if (strcustCode.Length > 0)
            {
                FunPriLoadCustDetails(strcustCode[0].ToString().Trim(), "1");
            }
            else
            {
                if (cmbCustomerCode.Text != "")
                {
                    Utility.FunShowAlertMsg(this, "Select a valid customer");
                    return;
                }
                else
                {
                    FunPriLoadCustDetails("", "1");
                }
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load Customer details";
            cvPricing.IsValid = false;
        }
    }

    protected void btnCalIRR_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddlLob.SelectedItem.Text.ToUpper().Split('-')[0].Trim() != "FT")
            {
                if (gvRepaymentDetails.Rows.Count > 0)
                {
                    FunPriCalculateIRR(1);

                    if (!ddlLob.SelectedItem.Text.ToUpper().StartsWith("OL") && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "TERM LOAN")
                    {
                        FunPriInsertUMFC();
                    }
                    if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT"))
                    {
                        grvRepayStructure.Columns[5].Visible = false;
                        //grvRepayStructure.Columns[6].Visible = true;
                        //grvRepayStructure.Columns[7].Visible = true;
                    }
                    else
                    {
                        grvRepayStructure.Columns[5].Visible = true;
                        grvRepayStructure.Columns[6].Visible = false;
                        grvRepayStructure.Columns[7].Visible = false;
                    }

                }
                else
                {
                    Utility.FunShowAlertMsg(this, "Add atleast one repayment details");
                }
            }

        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, ex.Message);
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.IsValid = false;
            cvPricing.ErrorMessage = strErrorMessagePrefix + ex.Message;
        }

    }

    #region Offer Tab

    #region Cash In Flows Grid
    protected void CashInflow_AddRow_OnClick(object sender, EventArgs e)
    {
        try
        {
            DtCashFlow = (DataTable)ViewState["DtCashFlow"];
            //Code Modified by nataraj
            TextBox txtDate_GridInflow1 = gvInflow.FooterRow.FindControl("txtDate_GridInflow") as TextBox;
            DropDownList ddlInflowDesc1 = gvInflow.FooterRow.FindControl("ddlInflowDesc") as DropDownList;
            //DropDownList ddlEntityName_InFlow1 = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_InFlow1 = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as UserControls_S3GAutoSuggest;
            DropDownList ddlEntityName_InFlowFrom = gvInflow.FooterRow.FindControl("ddlEntityName_InFlowFrom") as DropDownList;
            TextBox txtAmount_Inflow1 = gvInflow.FooterRow.FindControl("txtAmount_Inflow") as TextBox;


            DataRow dr = DtCashFlow.NewRow();
            DtCashFlow.PrimaryKey = new DataColumn[] { DtCashFlow.Columns["Date"], DtCashFlow.Columns["CashInFlowID"], DtCashFlow.Columns["InflowFromId"], DtCashFlow.Columns["EntityID"] };
            dr["Date"] = Utility.StringToDate(txtDate_GridInflow1.Text);
            if (txtEnquiryDate.Text != "")
            {
                if (Utility.CompareDates(txtEnquiryDate.Text, txtDate_GridInflow1.Text) == -1)
                {
                    Utility.FunShowAlertMsg(this, "Inflow date cannot be less than enquiry date");
                    return;
                }
            }
            else
            {
                if (txtSanctionDate.Text != "")
                {
                    if (Utility.CompareDates(txtSanctionDate.Text, txtDate_GridInflow1.Text) == -1)
                    {
                        Utility.FunShowAlertMsg(this, "Inflow date cannot be less than Sanction date");
                        return;
                    }
                }
            }
            string[] strArrayIds = ddlInflowDesc1.SelectedValue.Split(',');

            if (DtCashFlow.Rows.Count > 0)
            {
                DataRow[] drDupCashFlow = DtCashFlow.Select(" Date ='"
                    + Utility.StringToDate(txtDate_GridInflow1.Text)
                    + "' and CashFlow_Flag_ID = " + strArrayIds[4]
                    + " and InflowFromId = " + ddlEntityName_InFlowFrom.SelectedValue
                    + " and EntityID = " + ddlEntityName_InFlow1.SelectedValue);

                if (drDupCashFlow.Count() > 0)
                {
                    Utility.FunShowAlertMsg(this, "Cannot add duplicate Cash inflow");
                    return;
                }
            }

            dr["CashInFlowID"] = strArrayIds[0];
            dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
            dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
            dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
            dr["CashFlow_Flag_ID"] = strArrayIds[4];
            dr["CashInFlow"] = ddlInflowDesc1.SelectedItem;
            dr["EntityID"] = ddlEntityName_InFlow1.SelectedValue;
            dr["Entity"] = ddlEntityName_InFlow1.SelectedText;
            dr["InflowFromId"] = ddlEntityName_InFlowFrom.SelectedValue;
            dr["InflowFrom"] = ddlEntityName_InFlowFrom.SelectedItem;
            dr["Amount"] = txtAmount_Inflow1.Text;

            DtCashFlow.Rows.Add(dr);

            gvInflow.DataSource = DtCashFlow;
            gvInflow.DataBind();

            ViewState["DtCashFlow"] = DtCashFlow;
            FunPriFillCashInflow_ViewState();
            FunPriIRRReset();
            FunPriSetMaxLength_gvInflow();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Column 'CashInFlowID, Date' is constrained to be unique."))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Cash Outflow", "alert('Cash flow cannot be repeted for the same date');", true);
            }
            else
            {
                ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
                cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in adding Inflow details";
                cvPricing.IsValid = false;
            }
        }
    }

    protected void gvInflow_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DtCashFlow = (DataTable)ViewState["DtCashFlow"];
            if (DtCashFlow.Rows.Count > 0)
            {
                txtAccIRR.Text = txtAccountIRR_Repay.Text = txtBusinessIRR.Text = txtBusinessIRR_Repay.Text =
                txtCompanyIRR.Text = txtCompanyIRR_Repay.Text = "";
                grvRepayStructure.ClearGrid();
                DtCashFlow.Rows.RemoveAt(e.RowIndex);
                ViewState["DtCashFlow"] = DtCashFlow;
                if (DtCashFlow.Rows.Count == 0)
                {
                    FunPriFill_CashInFlow(_Add);
                }
                else
                {
                    gvInflow.DataSource = DtCashFlow;
                    gvInflow.DataBind();
                    FunPriFillCashInflow_ViewState();
                }
            }
            FunPriSetMaxLength_gvInflow();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in deleting Inflow details";
            cvPricing.IsValid = false;
        }
    }

    protected void gvInflow_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            TextBox txtDate_GridInflow1 = e.Row.FindControl("txtDate_GridInflow") as TextBox;
            txtDate_GridInflow1.Attributes.Add("readonly", "readonly");
            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_InflowDate1 = e.Row.FindControl("CalendarExtenderSD_InflowDate") as AjaxControlToolkit.CalendarExtender;
            CalendarExtenderSD_InflowDate1.Format = ObjS3GSession.ProDateFormatRW;
        }
    }

    protected void ddlEntityName_InFlowFrom_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            //DropDownList ddlEntityName_InFlow = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_InFlow = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as UserControls_S3GAutoSuggest;
            DropDownList ddlEntityName_InFlowFrom = gvInflow.FooterRow.FindControl("ddlEntityName_InFlowFrom") as DropDownList;


            Label lblHeading = gvInflow.HeaderRow.FindControl("lblHeading") as Label;
            Procparam = new Dictionary<string, string>();
            if (ddlEntityName_InFlowFrom.SelectedItem.Text.ToUpper() == "CUSTOMER")
            {

                if (cmbCustomerCode.Text != string.Empty) //SelectedIndex > 0)
                {
                    //ddlEntityName_InFlow.Items.Clear();
                    //System.Web.UI.WebControls.ListItem lstItem = new System.Web.UI.WebControls.ListItem(cmbCustomerCode.Text, hdnCustID.Value);
                    //ddlEntityName_InFlow.Items.Add(lstItem);
                    ddlEntityName_InFlow.Clear();
                    ddlEntityName_InFlow.SelectedValue = hdnCustID.Value;
                    ddlEntityName_InFlow.SelectedText = cmbCustomerCode.Text;
                    ddlEntityName_InFlow.ReadOnly = true;

                }
                //else
                //{
                //    ddlEntityName_InFlowFrom.SelectedIndex = 1;
                //}

            }
            else
            {
                lblHeading.Text = "Entity Name";

                ddlEntityName_InFlow.ReadOnly = false;
                ddlEntityName_InFlow.Clear();

                //Procparam.Add("@Option", "11");
                //Procparam.Add("@Company_ID", intCompany_Id.ToString());
                //ddlEntityName_InFlow.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, true, new string[] { "Entity_ID", "Entity_Code", "Entity_Name" });

            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load Enity/Customer Code";
            cvPricing.IsValid = false;
        }
    }

    #endregion

    #region Cash Out Flow Grid
    protected void gvOutFlow_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
            if (DtCashFlowOut.Rows.Count > 0)
            {
                DtCashFlowOut.Rows.RemoveAt(e.RowIndex);
                ViewState["DtCashFlowOut"] = DtCashFlowOut;
                if (DtCashFlowOut.Rows.Count == 0)
                {
                    FunPriFill_CashOutFlow(_Add);
                    lblTotalOutFlowAmount.Text = "0";
                    FunPriIRRReset();
                }
                else
                {

                    FunProBindCashFlow();
                }
            }
            FunPriSetMaxLength_gvOutFlow();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in deleting Outflow details";
            cvPricing.IsValid = false;
        }
    }

    protected void CashOutflow_AddRow_OnClick(object sender, EventArgs e)
    {
        try
        {
            DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
            if (dtAcctype != null && dtAcctype.Rows.Count > 0)
            {
                DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];

                TextBox txtDate_GridOutflow = gvOutFlow.FooterRow.FindControl("txtDate_GridOutflow") as TextBox;
                DropDownList ddlOutflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
                DropDownList ddlPaymentto_OutFlow = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
                //DropDownList ddlEntityName_OutFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as DropDownList;
                UserControls_S3GAutoSuggest ddlEntityName_OutFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as UserControls_S3GAutoSuggest;
                TextBox txtAmount_Outflow = gvOutFlow.FooterRow.FindControl("txtAmount_Outflow") as TextBox;

                DataRow dr = DtCashFlowOut.NewRow();

                dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";

                //if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString() == "Normal Payment")
                //{
                //    DtCashFlowOut.PrimaryKey = new DataColumn[] { DtCashFlowOut.Columns["CashOutFlowID"], DtCashFlowOut.Columns["Date"], DtCashFlowOut.Columns["EntityID"] };
                //}
                DtCashFlowOut.PrimaryKey = new DataColumn[] { DtCashFlowOut.Columns["Date"], DtCashFlowOut.Columns["CashOutFlowID"], DtCashFlowOut.Columns["OutflowFromId"], DtCashFlowOut.Columns["EntityID"] };

                dr["Date"] = Utility.StringToDate(txtDate_GridOutflow.Text);
                string[] strArrayIds = ddlOutflowDesc.SelectedValue.Split(',');
                if (Utility.CompareDates(txtEnquiryDate.Text, txtDate_GridOutflow.Text) == -1)
                {
                    Utility.FunShowAlertMsg(this, "Outflow date cannot be less than enquiry date");
                    return;
                }

                if (strArrayIds[4] == "41")
                {
                    if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().ToUpper() == "DEFERRED PAYMENT")
                    {
                        if (Utility.CompareDates(txtOfferDate.Text, txtDate_GridOutflow.Text) != 0 && Utility.CompareDates(txtOfferDate.Text, txtDate_GridOutflow.Text) != 1)
                        {
                            Utility.FunShowAlertMsg(this, "Outflow date should be greater than or Equal to Offer date for Deferred Payment");
                            return;
                        }

                        if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count > 0)
                        {
                            if (!string.IsNullOrEmpty(Convert.ToString(((DataTable)ViewState["DtCashFlowOut"]).
                                Compute("Count(CashFlow_Flag_ID)", "CashFlow_Flag_ID = 41 and " +
                                " Date <> #" + Utility.StringToDate(txtDate_GridOutflow.Text.Trim()) + "#"))))
                            {
                                Int32 IntTotalOutflow = (Int32)((DataTable)ViewState["DtCashFlowOut"]).
                                    Compute("Count(CashFlow_Flag_ID)", "CashFlow_Flag_ID = 41 and " +
                                    " Date <> #" + Utility.StringToDate(txtDate_GridOutflow.Text.Trim()) + "#");
                                if (IntTotalOutflow >= 1)
                                {
                                    Utility.FunShowAlertMsg(this, "Finance amount Outflow date should " +
                                        "be the same for all entities (" +
                                        DateTime.Parse(((DataTable)ViewState["DtCashFlowOut"]).Rows[0]["Date"].ToString(),
                                        CultureInfo.CurrentCulture).ToString(strDateFormat) + ")");
                                    return;
                                }
                            }
                        }

                    }
                    if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString() == "Trade Advance" || dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString() == "Normal Payment")
                    {
                        if (Utility.StringToDate(txtOfferDate.Text) != Utility.StringToDate(txtDate_GridOutflow.Text))
                        {
                            Utility.FunShowAlertMsg(this, "Outflow date should be equal to Offer date for Normal Payment/Trade Advance");
                            return;
                        }
                    }
                }

                if (DtCashFlowOut.Rows.Count > 0)
                {
                    DataRow[] drDupCashFlow = DtCashFlowOut.Select(" Date ='"
                        + Utility.StringToDate(txtDate_GridOutflow.Text)
                        + "' and CashFlow_Flag_ID = " + strArrayIds[4]
                        + " and OutflowFromId = " + ddlPaymentto_OutFlow.SelectedValue
                        + " and EntityID = " + ddlEntityName_OutFlow.SelectedValue);

                    if (drDupCashFlow.Count() > 0)
                    {
                        Utility.FunShowAlertMsg(this, "Cannot add duplicate Cash outflow");
                        return;
                    }
                }

                dr["CashOutFlowID"] = strArrayIds[0];
                dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                dr["CashFlow_Flag_ID"] = strArrayIds[4];
                dr["CashOutFlow"] = ddlOutflowDesc.SelectedItem;
                dr["OutflowFrom"] = ddlPaymentto_OutFlow.SelectedItem;
                dr["OutflowFromId"] = ddlPaymentto_OutFlow.SelectedValue;
                dr["EntityID"] = ddlEntityName_OutFlow.SelectedValue;
                dr["Entity"] = ddlEntityName_OutFlow.SelectedText;
                dr["Amount"] = txtAmount_Outflow.Text;
                DtCashFlowOut.Rows.Add(dr);
                ViewState["DtCashFlowOut"] = DtCashFlowOut;
                //gvOutFlow.DataSource = DtCashFlowOut;
                //gvOutFlow.DataBind();
                //FunPriFillCashOutflow_ViewState();
                try
                {

                    FunProBindCashFlow();
                }
                catch
                {
                    Utility.FunShowAlertMsg(this, "Total finance amount in cashoutflow should be equal to amount financed with margin money");
                    //cvPricing.ErrorMessage = strErrorMessagePrefix + "Total finance amount in cashoutflow should be equal to amount financed with margin money";
                    //cvPricing.IsValid = false;
                }
            }
            else
            {
                Utility.FunShowAlertMsg(this, "Select a Payment Rule");
                //cvPricing.ErrorMessage = strErrorMessagePrefix + "Select a Payment Rule";
                //cvPricing.IsValid = false;
            }

            if (ddlLob.SelectedItem.Text.ToUpper().Contains("WC") ||
                ddlLob.SelectedItem.Text.ToUpper().Contains("FT") ||
                ((ddlLob.SelectedItem.Text.ToUpper().StartsWith("TE") ||
                ddlLob.SelectedItem.Text.ToUpper().StartsWith("TL")) &&
                ddl_Repayment_Mode.SelectedItem.Text.ToUpper().StartsWith("PRO")))
            {
                btnGenerateRepay_Click(sender, e);
                tcPricing.Tabs[3].Enabled = false;
            }
            else
                tcPricing.Tabs[3].Enabled = true;

            FunPriSetMaxLength_gvOutFlow();

        }
        catch (Exception ex)
        {


            if (ex.Message.Contains("Column 'CashOutFlowID, Date, EntityID' is constrained to be unique."))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Cash Outflow", "alert('Cash flow cannot be repeted for the same date');", true);
            }
            else
            {
                ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
                cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in adding Outflow details";
                cvPricing.IsValid = false;
            }
        }

    }

    //hide the IRR panel visibility for WC,FT,TLE(Product) method as per Malolan raised on 23-feb-2012 start by saran

    private void FunPriDisableIRRPanel()
    {
        if (ddl_Repayment_Mode.SelectedIndex > 0)
        {
            if (Convert.ToInt32(ddl_Repayment_Mode.SelectedValue) > 0)
                if (Convert.ToInt32(ddl_Repayment_Mode.SelectedValue) >= 4)
                {
                    FunPriDisableIRRPanel(false);
                }
                else
                {
                    FunPriDisableIRRPanel(true);
                }
        }
        else
        {
            FunPriDisableIRRPanel(true);
        }
    }

    private void FunPriDisableIRRPanel(bool bolStatus)
    {
        lblAccIRR.Visible = bolStatus;
        txtAccIRR.Visible = bolStatus;
        lblBussinessIRR.Visible = bolStatus;
        txtBusinessIRR.Visible = bolStatus;
        lblCompanyIrr.Visible = bolStatus;
        txtCompanyIRR.Visible = bolStatus;
    }

    //hide the IRR panel visibility for WC,FT,TLE(Product) method as per Malolan raised on 23-feb-2012 end by saran

    protected void ddlPaymentto_OutFlow_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            //DropDownList ddlEntityName_InFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_InFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as UserControls_S3GAutoSuggest;
            DropDownList ddlPaymentto_OutFlow = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
            Label lblHeading = gvOutFlow.HeaderRow.FindControl("lblHeading") as Label;
            Procparam = new Dictionary<string, string>();
            DropDownList ddlOutflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;

            string[] strArrayIds = ddlOutflowDesc.SelectedValue.Split(',');

            if (ddlPaymentto_OutFlow.SelectedItem.Text.ToUpper() == "CUSTOMER")
            {
                if (cmbCustomerCode.Text != string.Empty) //SelectedIndex > 0)
                {
                    //ddlEntityName_InFlow.Items.Clear();
                    //System.Web.UI.WebControls.ListItem lstItem = new System.Web.UI.WebControls.ListItem(cmbCustomerCode.Text, hdnCustID.Value);
                    //ddlEntityName_InFlow.Items.Add(lstItem);
                    ddlEntityName_InFlow.Clear();
                    ddlEntityName_InFlow.SelectedValue = hdnCustID.Value;
                    ddlEntityName_InFlow.SelectedText = cmbCustomerCode.Text;
                    ddlEntityName_InFlow.ReadOnly = true;
                }


            }
            else
            {
                ddlEntityName_InFlow.ReadOnly = false;
                ddlEntityName_InFlow.Clear();

                lblHeading.Text = "Entity Name";
                //Procparam.Add("@Option", "11");
                //Procparam.Add("@Company_ID", intCompany_Id.ToString());
                //if (strArrayIds.Length >= 4)
                //{
                //    if (strArrayIds[4].ToString() == "41")
                //    {
                //        Procparam.Add("@ID", "1");
                //    }
                //}
                //ddlEntityName_InFlow.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, true, new string[] { "Entity_ID", "Entity_Code", "Entity_Name" });

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load Enity/Customer Code";
            cvPricing.IsValid = false;
        }
    }

    [System.Web.Services.WebMethod]
    public static string[] GetVendors(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Add("@Company_ID", obj_PageValue.intCompany_Id.ToString());
        Procparam.Add("@Entity_Type", "8");
        Procparam.Add("@PrefixText", prefixText);

        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_ORG_GetEntity_Master_AGT", Procparam));

        return suggetions.ToArray();

    }

    protected void gvOutFlow_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            TextBox txtDate_GridOutflow = e.Row.FindControl("txtDate_GridOutflow") as TextBox;
            txtDate_GridOutflow.Attributes.Add("readonly", "readonly");
            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_OutflowDate = e.Row.FindControl("CalendarExtenderSD_OutflowDate") as AjaxControlToolkit.CalendarExtender;
            CalendarExtenderSD_OutflowDate.Format = ObjS3GSession.ProDateFormatRW;
        }

    }

    #endregion

    protected void ddlROIRuleList_SelectedIndexChanged(object sender, EventArgs e)
    {
        //if (ddlROIRuleList.SelectedIndex > 0)
        //{
        //    if (hdnROIRule.Value != "")
        //    {
        //        strAlert = "All cashflow releated data will be reset";
        //        strAlert += @"\n\nWould you like to proceed?";
        //        strAlert = "if(confirm('" + strAlert + "')){ document.getElementById('ctl00_ContentPlaceHolder1_tcPricing_TabOfferTerms_btnFetchROI').click();}else{document.getElementById('ctl00_ContentPlaceHolder1_tcPricing_TabOfferTerms_ddlROIRuleList').value=document.getElementById('ctl00_ContentPlaceHolder1_tcPricing_TabOfferTerms_hdnROIRule').value;}";
        //        ScriptManager.RegisterStartupScript(this, this.GetType(), "ROI Rule Card", strAlert, true);
        //    }
        //    else
        //    {
        //        strAlert = "document.getElementById('ctl00_ContentPlaceHolder1_tcPricing_TabOfferTerms_btnFetchROI').click()";
        //        ScriptManager.RegisterStartupScript(this, this.GetType(), "New ROI Rule Card", strAlert, true);
        //    }
        //}

        //else
        //{
        //    div7.Visible = false;
        //}
    }

    protected void btnFetchROI_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlROIRuleList.SelectedIndex > 0)
            {
                FunPriLoad_ROIRule(_Add);
                div7.Visible = true;
                hdnROIRule.Value = ddlROIRuleList.SelectedValue;
                if (hdnROIRule.Value != "" || div7.Visible == false)
                {
                    FunPriFill_Repayment_Tab(_Add);
                    grvRepayStructure.ClearGrid();
                    FunPriFill_CashOutFlow(_Add);
                    FunPriFill_CashInFlow(_Add);
                    ddlROIRuleList.ToolTip = ddlROIRuleList.SelectedItem.Text;
                    FunPriIRRReset();
                    FunPriSetRateMaxLength();
                    //Making null to handle new ROI Rule Card and make Flate rate For IRR given as null
                    ViewState["decRate"] = null;
                    gvRepaymentSummary.ClearGrid();
                }
            }
            else
            {
                if (intPricingId == 0)
                {
                    txt_ROI_Rule_Number.Text = "";
                    FunPriFill_OfferTab(_Add);
                    //FunPriFillROIDLL(strAddMode);
                    txt_Model_Description.Text = "";
                    txtRate.Text = "";
                    txtRate.Enabled = false;
                    txt_Recovery_Pattern_Year1.Text = "";
                    txt_Recovery_Pattern_Year2.Text = "";
                    txt_Recovery_Pattern_Year3.Text = "";
                    txt_Recovery_Pattern_Rest.Text = "";
                    hdnROIRule.Value = "";
                }
            }
            ddlROIRuleList.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load ROI Rule Details";
            cvPricing.IsValid = false;
            div7.Visible = false;
        }
    }


    protected void ddlPaymentRuleList_SelectedIndexChanged(object sender, EventArgs e)
    {
        //if (ddlPaymentRuleList.SelectedIndex > 0)
        //{
        //    if (hdnPayment.Value != "")
        //    {
        //        strAlert = "alert('__ALERT__');";
        //        strAlert = " All cashflow releated data will be reset";
        //        strAlert += @"\n\nWould you like to proceed?";
        //        strAlert = "if(confirm('" + strAlert + "')){ document.getElementById('ctl00_ContentPlaceHolder1_tcPricing_TabOfferTerms_btnFetchPayment').click();}else{document.getElementById('ctl00_ContentPlaceHolder1_tcPricing_TabOfferTerms_ddlPaymentRuleList').value=document.getElementById('ctl00_ContentPlaceHolder1_tcPricing_TabOfferTerms_hdnPayment').value;}";
        //        ScriptManager.RegisterStartupScript(this, this.GetType(), "Payment Rule Card", strAlert, true);
        //    }
        //    else
        //    {
        //        strAlert = "document.getElementById('ctl00_ContentPlaceHolder1_tcPricing_TabOfferTerms_btnFetchPayment').click()";
        //        ScriptManager.RegisterStartupScript(this, this.GetType(), "New Payment Rule Card", strAlert, true);
        //    }

        //}
        //else
        //{
        //    div8.Visible = false;
        //}

    }

    protected void btnFetchPayment_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlPaymentRuleList.SelectedIndex > 0)
            {
                FunPriLoad_PaymentRule();
                div8.Visible = true;
                hdnPayment.Value = ddlPaymentRuleList.SelectedValue;
                if (hdnPayment.Value != "")
                {
                    FunPriFill_Repayment_Tab(_Add);
                    ddlPaymentRuleList.ToolTip = ddlPaymentRuleList.SelectedItem.Text;
                    FunPriFill_CashOutFlow(_Add);
                    lblTotalOutFlowAmount.Text = "0";
                    FunPriIRRReset();
                    gvRepaymentSummary.ClearGrid();
                }
            }
            ddlPaymentRuleList.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to load payment rule card details";
            cvPricing.IsValid = false;
            div8.Visible = true;
        }
    }

    protected void txt_Margin_Percentage_TextChanged(object sender, EventArgs e)
    {
        txtMarginMoneyPer_Cashflow.Text = txt_Margin_Percentage.Text;
        txtMarginMoneyPer_Cashflow.ReadOnly = true;
        txtMarginMoneyAmount_Cashflow.ReadOnly = true;
        txtMarginMoneyAmount_Cashflow.Text = FunPriGetMarginAmout().ToString();
        txt_Margin_Percentage.Focus();
    }

    protected void txtResidualValue_Cashflow_TextChanged(object sender, EventArgs e)
    {
        if (txtResidualValue_Cashflow.Text != "")
        {
            //rfvResidualValue.Enabled = false;
            txtResidualAmt_Cashflow.ReadOnly = true;

            if (txtFacilityAmt.Text != "")
            {
                txtResidualAmt_Cashflow.Text =
                    ((Convert.ToDecimal(txtResidualValue_Cashflow.Text) *
                    Convert.ToDecimal(txtFacilityAmt.Text)) / 100).ToString();//5366
            }

        }
        else
        {
            //rfvResidualValue.Enabled = true;
            txtResidualAmt_Cashflow.ReadOnly = false;
        }
        txtResidualValue_Cashflow.Focus();
    }
    protected void txtResidualAmt_Cashflow_TextChanged(object sender, EventArgs e)
    {
        if (txtResidualAmt_Cashflow.Text.Trim() != "")
        {
            if (Convert.ToDecimal(txtResidualAmt_Cashflow.Text.Trim()) >
                Convert.ToDecimal(txtFacilityAmt.Text.Trim())
                && (!ddlLob.SelectedItem.Text.ToUpper().StartsWith("OL")))
            {
                Utility.FunShowAlertMsg(this, "Residual amount should be less than or equal to facility amount");
                txtResidualAmt_Cashflow.Text = "";
                txtResidualValue_Cashflow.Text = "";
                txtResidualAmt_Cashflow.Focus();
            }
            else
            {
                rfvResidualValue.Enabled = false;
                txtResidualValue_Cashflow.ReadOnly = true;
                txtResidualValue_Cashflow.Text = "";
            }
        }
        else
        {
            txtResidualAmt_Cashflow.Text = "";
            rfvResidualValue.Enabled = true;
            txtResidualValue_Cashflow.ReadOnly = false;
        }
        txtResidualAmt_Cashflow.Focus();
    }
    #endregion

    #region Asset Tab

    private string Funsetsuffix()
    {

        int suffix = 1;

        // S3GSession ObjS3GSession = new S3GSession();
        suffix = ObjS3GSession.ProGpsSuffixRW;
        // suffix = 0;
        string strformat = "0.";
        for (int i = 1; i <= suffix; i++)
        {
            strformat += "0";
        }
        return strformat;
    }

    protected void btnAddNew_OnClick(object sender, EventArgs e)
    {
        try
        {

            lblErrorMessage.Text = "";
            DataTable ObjDTAssetDetail = new DataTable();
            if (ViewState["ObjDTAssetDetails"] != null)
                ObjDTAssetDetail = (DataTable)ViewState["ObjDTAssetDetails"];




            //ObjDTAssetDetail.Columns["Asset_ID"].Unique = true;
            if (strMode == "C" || strMode == "M")
            {
                //ObjDTAssetDetail.Columns["Required_FromDate"].DataType = typeof(string);
                ObjDTAssetDetail.Columns["AssetValue"].DataType = typeof(decimal);
            }
            DataRow dr = ObjDTAssetDetail.NewRow();
            if (rdnlAssetType.SelectedValue == "1")
            {
                dr["Asset_Code"] = ddlLeaseAssetNo.SelectedItem;
                dr["Asset_ID"] = ddlLeaseAssetNo.SelectedValue;
                //dr["Asset_Code"] = ddlAssetCodeList.SelectedItem;
                //dr["Asset_ID"] = ddlAssetCodeList.SelectedValue;
                dr["IsOwnAsset"] = 1;
                //Added by saranya
                if (ViewState["Status_Code"] != null)
                    dr["Status_Code"] = ViewState["Status_Code"];
                else
                    dr["Status_Code"] = 0;
                if (ViewState["Status"] != null)
                    dr["Status"] = ViewState["Status"];
                else
                    dr["Status"] = 0;
                dr["Status_Desc"] = txtStatus.Text;

            }
            else
            {
                dr["Asset_Code"] = ddlAssetCodeList1.SelectedText;
                dr["Asset_ID"] = ddlAssetCodeList1.SelectedValue;
                dr["IsOwnAsset"] = 0;
                dr["Status_Code"] = 0;
                dr["Status"] = 0;
                dr["Status_Desc"] = "";
                //dr["Margin_Percentage"] = txt_Margin_Percentage.Text;
                //dr["Margin_Amount"] = txtMarginAmountAsset.Text;
                //if (txtBookDepreciationPerc.Text != "")
                //dr["Book_Depreciation_Percentage"] = txtBookDepreciationPerc.Text.ToString();
                //if (txtBlockDepreciationPerc.Text != "")
                //dr["Block_Depreciation_Percentage"] = txtBlockDepreciationPerc.Text.ToString();
            }
            //if (strMode == "C")
            //{
            //    if (!string.IsNullOrEmpty(txtRequiredFromDate.Text))
            //        dr["Required_FromDate"] = txtRequiredFromDate.Text;
            //    else
            //        dr["Required_FromDate"] = "     ";
            //}
            //else
            //{
            if (!string.IsNullOrEmpty(txtRequiredFromDate.Text))
                dr["Required_FromDate"] = Utility.StringToDate(txtRequiredFromDate.Text);
            else
                dr["Required_FromDate"] = DBNull.Value;
            //    else
            //        dr["Required_FromDate"] = "01/01/1900";
            //}
            dr["Noof_Units"] = txtUnitCount.Text;
            dr["Unit_Value"] = txtUnitValue.Text;
            dr["AssetValue"] = txtTotalAssetValue.Text;

            if (ObjDTAssetDetail.Rows.Count > 0)
            {
                dr["Sl_No"] = Convert.ToInt32(ObjDTAssetDetail.Rows[ObjDTAssetDetail.Rows.Count - 1]["Sl_No"]) + 1;
            }
            else
            {
                dr["Sl_No"] = 1;
            }
            if (!string.IsNullOrEmpty(txtMarginPercentage.Text))
                dr["Margin_Percentage"] = Convert.ToDecimal(txtMarginPercentage.Text);
            else
                dr["Margin_Percentage"] = Funsetsuffix();

            if (!string.IsNullOrEmpty(txtMarginAmountAsset.Text))
                //dr["Margin_Amount"] = Math.Round(Convert.ToDecimal(txtMarginPercentage.Text)
                //    * Convert.ToDecimal(txtTotalAssetValue.Text) / 100, 3).ToString(Funsetsuffix());
                dr["Margin_Amount"] = Convert.ToDecimal(txtMarginAmountAsset.Text);
            else
                dr["Margin_Amount"] = Funsetsuffix();

            if (!string.IsNullOrEmpty(txtBookDepreciationPerc.Text))
                dr["Book_Depreciation_Percentage"] = Convert.ToDecimal(txtBookDepreciationPerc.Text.ToString());
            else
                dr["Book_Depreciation_Percentage"] = Funsetsuffix();

            if (!string.IsNullOrEmpty(txtBlockDepreciationPerc.Text))
                dr["Block_Depreciation_Percentage"] = Convert.ToDecimal(txtBlockDepreciationPerc.Text.ToString());
            else
                dr["Block_Depreciation_Percentage"] = Funsetsuffix();


            if (ddlLeaseAssetNo.Visible && ddlLeaseAssetNo.SelectedIndex > 0)
            {
                DataRow[] DrRate = (((DataTable)ViewState["RateDt2"]).Select("Lease_Asset_No = '" + ddlLeaseAssetNo.SelectedValue.ToString() + "'"));
                if (DrRate.Count() > 0)
                {
                    if (Convert.ToString(DrRate[0]["AVAILABLE_DATE"]) != string.Empty)
                    {
                        if (Convert.ToDateTime(Utility.StringToDate(txtRequiredFromDate.Text).ToShortDateString()) <= Convert.ToDateTime(Utility.StringToDate(Convert.ToString(DrRate[0]["AVAILABLE_DATE"])).ToShortDateString()))
                        {
                            Utility.FunShowAlertMsg(this, "Asset not available for the selected date");
                            return;
                        }
                    }
                }
            }

            dr["pay_to"] = ddlPayTo.SelectedValue;
            dr["pay_id"] = ddlEntityNameList.SelectedValue;
            dr["paytype"] = ddlPayTo.SelectedItem.Text;
            dr["payname"] = ddlEntityNameList.SelectedText;

            ObjDTAssetDetail.Rows.Add(dr);

            //OL related changes on 28-07-2011.
            if (ObjDTAssetDetail.Rows.Count > 0)
            {
                rdnlAssetType.Enabled = false;
            }
            else
            {
                rdnlAssetType.Enabled = true;
            }

            string strType;
            strType = ddlLob.SelectedItem.Text.ToLower().Split('-')[0].Trim();

            //Asset Margin Amount validations not checked for Line of business Term loan extension(te),Term Loan(tl),Wroking Capital (wc),Factoring(ft)

            ViewState["ObjDTAssetDetails"] = ObjDTAssetDetail;
            FunProBindAssetGrid();

            FunPriResetAssetDetails();
            if (ObjDTAssetDetail.Rows.Count > 0)
            {
                FunAssetPanelVisible(true);
            }

            lblTotalOutFlowAmount.Text = "0";
            FunPriIRRReset();
            ddlAssetCodeList1.Clear();
            ddlEntityNameList.Clear();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Column 'Asset_ID' is constrained to be unique"))
            {
                Utility.FunShowAlertMsg(this, "Asset Code cannot be duplicated");
            }
            else
            {
                ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
                cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in adding asset details";
                cvPricing.IsValid = false;
            }
            //cv_TabAssetDetails.ErrorMessage = ex.Message;
            //cv_TabAssetDetails.IsValid = false;
        }

    }

    private void FunAssetPanelVisible(bool BoolStatus)
    {
        ContentPlaceHolder CPH = (ContentPlaceHolder)Page.Master.FindControl("ContentPlaceHolder1");
        AjaxControlToolkit.TabContainer tcPrice = (AjaxControlToolkit.TabContainer)CPH.FindControl("tcPricing");
        AjaxControlToolkit.TabPanel tpAsset = (AjaxControlToolkit.TabPanel)tcPrice.FindControl("TabAssetDetails");

        ((Panel)tpAsset.FindControl("Panel2")).Visible = BoolStatus;
        ((Label)tpAsset.FindControl("lblAssetAmt")).Visible = BoolStatus;
        ((Label)tpAsset.FindControl("lblTotalAssetAmount")).Visible = BoolStatus;
    }
    protected void ddlAssetCodeList1_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            lblStatus.Visible = false;
            txtStatus.Visible = false;
            txtBookDepreciationPerc.Text = "";
            txtBlockDepreciationPerc.Text = "";
            txtUnitValue.Text = "";
            txtTotalAssetValue.Text = "";
            txtMarginPercentage.Text = "";
            txtMarginAmountAsset.Text = "";
            FunPriFillDepreciationRate((DataTable)ViewState["RateDt1"], ddlAssetCodeList1);
            ddlAssetCodeList1.ToolTip = ddlAssetCodeList1.SelectedText;

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in loading Depreciation rate";
            cvPricing.IsValid = false;
        }
    }
    //protected void ddlAssetCodeList_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        lblStatus.Visible = false;
    //        txtStatus.Visible = false;
    //        txtBookDepreciationPerc.Text = "";
    //        txtBlockDepreciationPerc.Text = "";
    //        txtUnitValue.Text = "";
    //        txtTotalAssetValue.Text = "";
    //        txtMarginPercentage.Text = "";
    //        txtMarginAmountAsset.Text = "";
    //        if (ddlAssetCodeList.SelectedIndex > 0)
    //        {
    //            FunPriFillDepreciationRate((DataTable)ViewState["RateDt1"], ddlAssetCodeList);
    //            ddlAssetCodeList.ToolTip = ddlAssetCodeList.SelectedItem.Text;
    //            /* for OL change*/
    //            if (rdnlAssetType.SelectedValue == "1")
    //            {
    //                Dictionary<string, string> dictParam = new Dictionary<string, string>();
    //                dictParam.Add("@OPTION", "5");
    //                dictParam.Add("@COMPANYID", intCompany_Id.ToString());
    //                dictParam.Add("@AssetID", ddlAssetCodeList.SelectedValue);
    //                DataTable DtRate = Utility.GetDataset("S3G_ORG_GETAPPLICATIONASSET", dictParam).Tables[0];
    //                ViewState["RateDt2"] = DtRate;
    //                ddlLeaseAssetNo.DataSource = DtRate;
    //                ddlLeaseAssetNo.DataTextField = "LEASE_ASSET_NO";
    //                ddlLeaseAssetNo.DataValueField = "LEASE_ASSET_NO";
    //                ddlLeaseAssetNo.DataBind();
    //                ddlLeaseAssetNo.Items.Insert(0, new System.Web.UI.WebControls.ListItem("--Select--", "0"));
    //            }
    //            /* for OL change*/
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
    //        cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in loading Depreciation rate";
    //        cvPricing.IsValid = false;
    //    }
    //}

    protected void ddlLeaseAssetNo_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (ddlLeaseAssetNo.SelectedIndex > 0)
            {
                //Added by Saranya I
                lblStatus.Visible = true;
                txtStatus.Visible = true;
                gvAssetDetails.Columns[12].Visible = true;
                //End
                //FunPriFillDepreciationRate((DataTable)ViewState["RateDt2"], ddlLeaseAssetNo);

                DataTable RateDt = new DataTable();
                if (ViewState["RateDt2"] != null)
                {
                    RateDt = (DataTable)ViewState["RateDt2"];
                }
                txtBookDepreciationPerc.Text = "";
                txtBlockDepreciationPerc.Text = "";
                txtUnitValue.Text = "";
                txtMarginPercentage.Text = "";
                DataRow[] DrRate = (RateDt.Select("LEASE_ASSET_NO = '" + ddlLeaseAssetNo.SelectedValue + "'"));

                if (DrRate.Length > 0)
                {
                    txtBookDepreciationPerc.Text = DrRate[0]["Book_Depreciation_Rate"].ToString();
                    txtBlockDepreciationPerc.Text = DrRate[0]["Block_Depreciation_Rate"].ToString();
                    txtUnitValue.Text = DrRate[0]["Assetvalue"].ToString();
                    txtTotalAssetValue.Text = DrRate[0]["Assetvalue"].ToString();
                    //Added by Saranya I on 23-Feb-2012 to get Asset Status
                    FunPriBindStatus();
                    //End 
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in loading Depreciation rate";
            cvPricing.IsValid = false;
        }
    }
    private void FunPriBindStatus()
    {
        try
        {

            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Lease_Asset_No", ddlLeaseAssetNo.SelectedItem.Text);
            DataTable dtStatus = new DataTable();
            dtStatus = Utility.GetDefaultData("S3G_ORG_GetAssetStatus", Procparam);
            if (dtStatus != null)
            {
                if (dtStatus.Rows.Count > 0)
                {
                    txtStatus.Text = dtStatus.Rows[0]["status_Desc"].ToString();
                    ViewState["Status_Code"] = dtStatus.Rows[0]["Status_Code"].ToString();
                    ViewState["Status"] = dtStatus.Rows[0]["Status"].ToString();

                }
                else
                {
                    lblStatus.Visible = false;
                    txtStatus.Visible = false;
                    ViewState["Status_Code"] = null;
                    ViewState["Status"] = null;
                    gvAssetDetails.Columns[12].Visible = false;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error filling Status");
        }
    }
    protected void gvAssetDetails_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DataTable dtDelete = (DataTable)ViewState["ObjDTAssetDetails"];
            //dtDelete.Rows.RemoveAt(e.RowIndex);


            //DataRow[] drAsset = dtDelete.Select("SL_NO = " + e.RowIndex);
            //drAsset[0].Delete();
            dtDelete.Rows.RemoveAt(e.RowIndex);
            dtDelete.AcceptChanges();
            DataRow[] drSerialAsset = dtDelete.Select("SL_NO > " + e.RowIndex);
            foreach (DataRow dr in drSerialAsset)
            {
                dr["SL_NO"] = Convert.ToInt32(dr["SL_NO"]) - 1;
                dr.AcceptChanges();
            }

            ViewState["ObjDTAssetDetails"] = dtDelete;

            FunProBindAssetGrid();
            if (dtDelete.Rows.Count == 0)
            {
                FunPriLoad_AssetDetails(_Add);
                lblTotalAssetAmount.Text = "0";
                rdnlAssetType.Enabled = true;
                FunAssetPanelVisible(false);
            }
            else
            {
                rdnlAssetType.Enabled = false;
            }

            //lblTotalOutFlowAmount.Text = "0";
            //FunPriIRRReset();
            //FunPriShowRepaymetDetails(0);
            //gvRepaymentSummary.ClearGrid();
            //gvRepaymentDetails.ClearGrid();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in deleting asset details";
            cvPricing.IsValid = false;
        }
    }

    protected void gvAssetDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblDate = e.Row.FindControl("lblReqFrm") as Label;
            if (!string.IsNullOrEmpty(lblDate.Text) && lblDate.Text != "&nbsp;")
                lblDate.Text = DateTime.Parse(lblDate.Text, CultureInfo.CurrentCulture).ToString(strDateFormat);
        }
    }


    #endregion

    #region Repayment Tab
    protected void Repayment_AddRow_OnClick(object sender, EventArgs e)
    {
        try
        {
            FunPriAddRepaymentSchedule();
            FunPriSetMaxLength();
        }
        catch (Exception ex)
        {
            cvPricing.ErrorMessage = strErrorMessagePrefix + ex.Message;
            cvPricing.IsValid = false;
        }

    }

    protected void gvRepaymentDetails_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];

            if (ViewState["DtRepayGrid_TL"] != null)
            {
                DataTable DtRepayGrid_TL = (DataTable)ViewState["DtRepayGrid_TL"];
                if (DtRepayGrid_TL.Rows.Count > 0)
                {
                    DtRepayGrid_TL.Rows.RemoveAt(DtRepayGrid_TL.Rows.Count - 1);
                }
                //ViewState["DtRepayGrid_TL"] = DtRepayGrid_TL;
            }

            if (DtRepayGrid.Rows.Count > 0)
            {

                DtRepayGrid.Rows.RemoveAt(e.RowIndex);

                if (DtRepayGrid.Rows.Count == 0)
                {
                    FunPriFill_Repayment_Tab(_Add);
                    gvRepaymentSummary.ClearGrid();
                }
                else
                {
                    gvRepaymentDetails.DataSource = DtRepayGrid;
                    gvRepaymentDetails.DataBind();
                    FunFillNextInstallmentDate();
                    FunPriFillRepayment_ViewState();
                    FunPriCalculateSummary(DtRepayGrid, "CashFlow", "TotalPeriodInstall");
                    if (ddl_Repayment_Mode.SelectedValue != "2")
                    {
                        Label lblCashFlowId = (Label)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lblCashFlow_Flag_ID");
                        if (lblCashFlowId.Text != "23")
                        {
                            ((LinkButton)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lnRemoveRepayment")).Visible = true;
                        }
                    }
                    else
                    {
                        ((LinkButton)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lnRemoveRepayment")).Visible = true;
                    }
                }
            }
            grvRepayStructure.ClearGrid();
            FunPriIRRReset();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in deleting Repayment details";
            cvPricing.IsValid = false;
        }
    }

    protected void gvRepaymentDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                _SlNo += 1;
                e.Row.Cells[0].Text = _SlNo.ToString();

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in binding Repayment details";
            cvPricing.IsValid = false;
        }
    }

    protected void gvRepaymentDetails_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            TextBox txtfromdate_RepayTab = e.Row.FindControl("txtfromdate_RepayTab") as TextBox;
            txtfromdate_RepayTab.Attributes.Add("readonly", "readonly");
            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_fromdate_RepayTab = e.Row.FindControl("CalendarExtenderSD_fromdate_RepayTab") as AjaxControlToolkit.CalendarExtender;
            CalendarExtenderSD_fromdate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;


        }
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            AjaxControlToolkit.CalendarExtender calext_FromDate = e.Row.FindControl("calext_FromDate") as AjaxControlToolkit.CalendarExtender;
            calext_FromDate.Format = ObjS3GSession.ProDateFormatRW;
            TextBox txRepaymentFromDate = e.Row.FindControl("txRepaymentFromDate") as TextBox;
            txRepaymentFromDate.Attributes.Add("readonly", "readonly");
        }
    }

    protected void btnGenerateRepay_Click(object sender, EventArgs e)
    {
        try
        {
            strMode = Request.QueryString["qsMode"];


            if (strMode != "Q")
            {
                ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                //if (objRepaymentStructure.FunPubGetCashFlowDetails(intCompany_Id, Convert.ToInt32(ddlLob.SelectedValue)).Rows.Count == 0)
                //{
                //    Utility.FunShowAlertMsg(this, "Define Installment Flag in Cashflow Master for selected Line of Business");
                //    return;
                //}

                if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
                {
                    if (objRepaymentStructure.FunPubGetCashFlowDetails_TL_Princ(intCompany_Id, Convert.ToInt32(ddlLob.SelectedValue)).Rows.Count == 0)
                    {
                        Utility.FunShowAlertMsg(this, "Define Principal and Interest Flags in Cashflow Master for selected Line of Business");
                        return;
                    }
                }
                else
                {
                    if (objRepaymentStructure.FunPubGetCashFlowDetails(intCompany_Id, Convert.ToInt32(ddlLob.SelectedValue)).Rows.Count == 0)
                    {
                        Utility.FunShowAlertMsg(this, "Define Installment Flag in Cashflow Master for selected Line of Business");
                        return;
                    }
                }

                if (!ddlLob.SelectedItem.Text.ToUpper().StartsWith("OL"))
                {
                    if (!string.IsNullOrEmpty(Convert.ToString(((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 41"))))
                    {
                        decimal decToatlFinanceAmt = (decimal)((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 41");

                        if (decToatlFinanceAmt <= 0)
                        {
                            Utility.FunShowAlertMsg(this, "Add atleast one Finance Amount Cash flow in Outflow details");
                            return;
                        }
                    }
                    else
                    {
                        Utility.FunShowAlertMsg(this, "Add atleast one Finance Amount Cash flow in Outflow details");
                        return;
                    }
                }
                else
                {
                    if (((DataTable)ViewState["ObjDTAssetDetails"]).Rows.Count == 0)
                    {
                        Utility.FunShowAlertMsg(this, "Add atleast one asset details");
                        return;
                    }
                }
                FunPriIRRReset();
                FunPriGenerateRepayment(Utility.StringToDate(txtOfferDate.Text));
                FunPriLOBBasedvalidations(ddlLob.SelectedItem.Text);

                /*UMFC has been calculated automatically for other than Product & TermLoan Return Pattern 
             (Also applicable to HP,FL,LN,TE,TL) Updated on 28th Oct 2010*/
                if (!ddlLob.SelectedItem.Text.ToUpper().StartsWith("OL") && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "TERM LOAN")
                {
                    FunPriInsertUMFC();
                }
                if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT"))
                {
                    grvRepayStructure.Columns[5].Visible = false;
                    //grvRepayStructure.Columns[6].Visible = true;
                    //grvRepayStructure.Columns[7].Visible = true;
                }
                else
                {
                    grvRepayStructure.Columns[5].Visible = true;
                    grvRepayStructure.Columns[6].Visible = false;
                    grvRepayStructure.Columns[7].Visible = false;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            if (!ex.Message.Contains("Object Reference"))
            {
                if ((ex.Message.Contains("IRR")) || ex.Message.Contains("Rate"))
                {
                    Utility.FunShowAlertMsg(this, ex.Message);
                }
                cvPricing.ValidationGroup = "TabRepayment";
                cvPricing.ErrorMessage = strErrorMessagePrefix + ex.Message;
            }
            else
            {
                cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in generating repayment structure";
            }
            cvPricing.IsValid = false;
        }
    }


    private void FunPriInsertUMFC()
    {
        try
        {

            Dictionary<string, string> dictParam = new Dictionary<string, string>();
            dictParam.Add("@CompanyId", intCompany_Id.ToString());
            dictParam.Add("@LobId", ddlLob.SelectedValue);
            DataSet dsUMFC = Utility.GetDataset("s3g_org_loadInflowLov", dictParam);
            DtCashFlow = (DataTable)ViewState["DtCashFlow"];
            //DataSet dsUMFC = (DataSet)ViewState["InflowDDL"];
            DataRow dr = DtCashFlow.NewRow();
            DtCashFlow.PrimaryKey = new DataColumn[] { DtCashFlow.Columns["CashInFlowID"], DtCashFlow.Columns["Date"] };
            dr["Date"] = DateTime.Today.ToString();
            string[] strArrayIds = null;
            string cashflowdesc = "";
            foreach (DataRow drOut in dsUMFC.Tables[2].Rows)
            {
                string[] strCashflow = drOut["CashFlow_ID"].ToString().Split(',');
                if (strCashflow[4].ToString() == "34")
                {
                    strArrayIds = strCashflow;
                    cashflowdesc = drOut["CashFlow_Description"].ToString();
                }
            }
            if (strArrayIds == null)
            {
                Utility.FunShowAlertMsg(this, "Define the Cashflow for UMFC in Cashflow Master");
                return;
            }
            dr["CashInFlowID"] = strArrayIds[0];
            dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
            dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
            dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
            dr["CashFlow_Flag_ID"] = strArrayIds[4];
            dr["CashInFlow"] = cashflowdesc;
            dr["EntityID"] = hdnCustID.Value;
            dr["Entity"] = S3GCustomerCommAddress.CustomerName;
            dr["InflowFromId"] = "144";
            dr["InflowFrom"] = "Customer";
            if (ddl_Repayment_Mode.SelectedValue == "2")
            {
                if (ddl_Return_Pattern.SelectedIndex > 0 && Convert.ToInt32(ddl_Return_Pattern.SelectedValue) > 2)
                {
                    dr["Amount"] = FunPriGetInterestAmount().ToString();
                }
                else
                {
                    dr["Amount"] = FunPriGetStructureAdhocInterestAmount().ToString();
                }
            }
            else
            {
                dr["Amount"] = FunPriGetInterestAmount().ToString();
            }

            DtCashFlow.Rows.Add(dr);

            gvInflow.DataSource = DtCashFlow;
            gvInflow.DataBind();

            ViewState["DtCashFlow"] = DtCashFlow;
            //FunPriGenerateNewInflow();
            FunPriFillCashInflow_ViewState();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + ex.Message;
            cvPricing.IsValid = false;
        }
    }


    protected void txRepaymentFromDate_TextChanged(object sender, EventArgs e)
    {
        try
        {
            TextBox txtBoxFromdate = (TextBox)sender;
            FunPriGenerateRepayment(Utility.StringToDate(txtBoxFromdate.Text));
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + ex.Message;
            cvPricing.IsValid = false;
        }
    }

    protected void ddlRepaymentCashFlow_RepayTab_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlCashFlowDesc = sender as DropDownList;
            FunPriDoCashflowBasedValidation(ddlCashFlowDesc);
        }
        catch (Exception ex)
        {
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in fetching values based on cash flow details";
            cvPricing.IsValid = false;
        }

    }

    protected void btnShowRepayment_Click(object sender, EventArgs e)
    {
        //ModalPopupExtenderRepayDetails.Show();
        PanRepay.Visible = true;
    }

    #endregion

    #region Alert Tab
    protected void Alert_AddRow_OnClick(object sender, EventArgs e)
    {
        try
        {
            DtAlertDetails = (DataTable)ViewState["DtAlertDetails"];
            DropDownList ddlAlert_Type = gvAlert.FooterRow.FindControl("ddlType_AlertTab") as DropDownList;
            //Removed By Shibu 18-Sep-2013

            //  DropDownList ObjddlContact_AlertTab = gvAlert.FooterRow.FindControl("ddlContact_AlertTab") as DropDownList;
            UserControls_S3GAutoSuggest ddlContact_AlertTab = gvAlert.FooterRow.FindControl("ddlContact_AlertTab") as UserControls_S3GAutoSuggest;
            CheckBox ChkAlertEmail = gvAlert.FooterRow.FindControl("ChkEmail") as CheckBox;
            CheckBox ChkAlertSMS = gvAlert.FooterRow.FindControl("ChkSMS") as CheckBox;

            if (ChkAlertEmail.Checked || ChkAlertSMS.Checked)
            {

                if (DtAlertDetails.Rows.Count > 0)
                {
                    //foreach (DataRow dr in DtAlertDetails.Rows)
                    //{

                    //    if ((dr["Type"].ToString() == ddlAlert_Type.SelectedValue) &&
                    //        (dr["UserContact"].ToString() == ddlAlert_ContactList.SelectedValue))
                    //    {
                    //        Utility.FunShowAlertMsg(this, " Selected combination already exists");
                    //         return;
                    //    }

                    //}
                }

                DataRow dr = DtAlertDetails.NewRow();

                dr["TypeId"] = ddlAlert_Type.SelectedValue;
                dr["Type"] = ddlAlert_Type.SelectedItem;
                dr["UserContactId"] = ddlContact_AlertTab.SelectedValue.ToString();
                dr["UserContact"] = ddlContact_AlertTab.SelectedText;
                dr["EMail"] = ChkAlertEmail.Checked;
                dr["SMS"] = ChkAlertSMS.Checked;

                DtAlertDetails.Rows.Add(dr);

                gvAlert.DataSource = DtAlertDetails;
                gvAlert.DataBind();
                //gvAlert0.DataSource = DtAlertDetails;
                //gvAlert0.DataBind();
                ViewState["DtAlertDetails"] = DtAlertDetails;
                FunPriFillAlert_ViewState();
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Select Email or SMS');", true);
                //cv_TabMainPage.ErrorMessage = "Please select Email or SMS";
                //cv_TabMainPage.IsValid = false;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in adding alert details";
            cvPricing.IsValid = false;
        }
    }

    protected void gvAlert_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DtAlertDetails = (DataTable)ViewState["DtAlertDetails"];
            if (DtAlertDetails.Rows.Count > 0)
            {
                DtAlertDetails.Rows.RemoveAt(e.RowIndex);

                if (DtAlertDetails.Rows.Count == 0)
                {
                    FunPriFill_Alert_Tab(_Add);
                }
                else
                {
                    gvAlert.DataSource = DtAlertDetails;
                    gvAlert.DataBind();
                    FunPriFillAlert_ViewState();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in deleting Alert details";
            cvPricing.IsValid = false;
        }
    }
    #endregion

    #region Follow Up Tab

    protected void FollowUp_AddRow_OnClick(object sender, EventArgs e)
    {
        try
        {
            DtFollowUp = (DataTable)ViewState["DtFollowUp"];

            TextBox txttxtDate_GridFollowup1 = gvFollowUp.FooterRow.FindControl("txtDate_GridFollowup") as TextBox;
            //Removed By Shibu 18-Sep-2013
            //DropDownList ddlfrom_GridFollowup = gvFollowUp.FooterRow.FindControl("ddlfrom_GridFollowup") as DropDownList;
            //DropDownList ddlTo_GridFollowup = gvFollowUp.FooterRow.FindControl("ddlTo_GridFollowup") as DropDownList;
            UserControls_S3GAutoSuggest ddlfrom_GridFollowup1 = gvFollowUp.FooterRow.FindControl("ddlfrom_GridFollowup") as UserControls_S3GAutoSuggest;
            UserControls_S3GAutoSuggest ddlTo_GridFollowup1 = gvFollowUp.FooterRow.FindControl("ddlTo_GridFollowup") as UserControls_S3GAutoSuggest;

            TextBox txtAction_GridFollowup1 = gvFollowUp.FooterRow.FindControl("txtAction_GridFollowup") as TextBox;
            TextBox txtActionDate_GridFollowup1 = gvFollowUp.FooterRow.FindControl("txtActionDate_GridFollowup") as TextBox;
            TextBox txtCustomerResponse_GridFollowup1 = gvFollowUp.FooterRow.FindControl("txtCustomerResponse_GridFollowup") as TextBox;
            TextBox txtRemarks_GridFollowup1 = gvFollowUp.FooterRow.FindControl("txtRemarks_GridFollowup") as TextBox;



            DataRow dr = DtFollowUp.NewRow();
            dr["Date"] = Utility.StringToDate(txttxtDate_GridFollowup1.Text);
            dr["From"] = ddlfrom_GridFollowup1.SelectedText;
            dr["FromUserId"] = ddlfrom_GridFollowup1.SelectedValue;
            dr["To"] = ddlTo_GridFollowup1.SelectedText;
            dr["ToUserId"] = ddlTo_GridFollowup1.SelectedValue;
            dr["Action"] = txtAction_GridFollowup1.Text;
            dr["ActionDate"] = Utility.StringToDate(txtActionDate_GridFollowup1.Text);
            dr["CustomerResponse"] = txtCustomerResponse_GridFollowup1.Text;
            dr["Remarks"] = txtRemarks_GridFollowup1.Text;
            if (ddlfrom_GridFollowup1.SelectedValue == ddlTo_GridFollowup1.SelectedValue)
            {
                Utility.FunShowAlertMsg(this, "From user and To user cannot be the same");
                return;
            }
            if (Utility.CompareDates(txttxtDate_GridFollowup1.Text, txtActionDate_GridFollowup1.Text) == -1)
            {
                Utility.FunShowAlertMsg(this, "Action Date cannot be less than the Follow up date");
                return;
            }
            DtFollowUp.Rows.Add(dr);

            gvFollowUp.DataSource = DtFollowUp;
            gvFollowUp.DataBind();

            ViewState["DtFollowUp"] = DtFollowUp;
            FunPriFillFollowUp_ViewState();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in adding followup details";
            cvPricing.IsValid = false;
        }
    }

    protected void gvFollowUp_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DtFollowUp = (DataTable)ViewState["DtFollowUp"];
            if (DtFollowUp.Rows.Count > 0)
            {
                DtFollowUp.Rows.RemoveAt(e.RowIndex);

                if (DtFollowUp.Rows.Count == 0)
                {
                    FunPriFillFollowUp_Tab(_Add);
                }
                else
                {
                    gvFollowUp.DataSource = DtFollowUp;
                    gvFollowUp.DataBind();
                    FunPriFillFollowUp_ViewState();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Error in deleting following details";
            cvPricing.IsValid = false;
        }
    }

    protected void gvFollowUp_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            TextBox txtDate_GridFollowup = e.Row.FindControl("txtDate_GridFollowup") as TextBox;
            txtDate_GridFollowup.Attributes.Add("readonly", "readonly");
            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_FollowupDate = e.Row.FindControl("CalendarExtenderSD_FollowupDate") as AjaxControlToolkit.CalendarExtender;
            CalendarExtenderSD_FollowupDate.Format = ObjS3GSession.ProDateFormatRW;

            TextBox txtActionDate_GridFollowup = e.Row.FindControl("txtActionDate_GridFollowup") as TextBox;
            txtActionDate_GridFollowup.Attributes.Add("readonly", "readonly");
            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_FollowupActionDate = e.Row.FindControl("CalendarExtenderSD_FollowupActionDate") as AjaxControlToolkit.CalendarExtender;
            CalendarExtenderSD_FollowupActionDate.Format = ObjS3GSession.ProDateFormatRW;
        }
    }
    #endregion

    #region Document Details
    protected void grvConsDocs_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        e.Row.Cells[0].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            TextBox txtValues = (TextBox)e.Row.FindControl("txtValues");
            CheckBox ObjchkIsMandatory = (CheckBox)e.Row.FindControl("chkIsMandatory");
            CheckBox ObjchkIsNeedImageCopy = (CheckBox)e.Row.FindControl("chkIsNeedImageCopy");

            ObjchkIsMandatory.Enabled = false;
            ObjchkIsNeedImageCopy.Enabled = false;
            CheckBox chkScanned = (CheckBox)e.Row.FindControl("chkScanned");
            LinkButton lnkScannedReference = (LinkButton)e.Row.FindControl("lnkScannedReference");

            if (ObjchkIsNeedImageCopy.Checked == true)
                chkScanned.Enabled = !chkScanned.Checked; //if yes then disabled
            else
                chkScanned.Enabled = false;

            lnkScannedReference.Enabled = chkScanned.Checked; // if yes then enabled


            if (e.Row.Cells[1].Text.Contains("CID"))
            {
                txtValues.Visible = true;
                txtValues.ReadOnly = false;
            }
            else
            {
                txtValues.Visible = false;
            }

            CheckBox chkCollected = (CheckBox)e.Row.FindControl("chkCollected");
            TextBox txtRemarks = (TextBox)e.Row.FindControl("txtRemark");

            if (chkCollected.Checked)
                chkCollected.Enabled = false;

            if (strMode == "Q")
            {
                chkCollected.Enabled = chkScanned.Enabled = false;
                txtValues.ReadOnly = txtRemarks.ReadOnly = true;
                txtRemarks.ToolTip = txtRemarks.Text;
            }

        }
    }

    protected void hlnkView_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriShowDocumentDet(sender);
        }
        catch (Exception ex)
        {
            cvPricing.ErrorMessage = ex.Message;
            cvPricing.IsValid = false;
        }
    }
    private void FunPriShowDocumentDet(object sender)
    {
        try
        {
            string strFieldAtt = ((LinkButton)sender).ClientID;
            int gRowIndex = Utility.FunPubGetGridRowID("grvConsDocuments", strFieldAtt);
            Label lblPath = grvConsDocuments.Rows[gRowIndex].FindControl("lblDocumentPath") as Label;
            string strFileName = lblPath.Text.Replace("\\", "/").Trim();
            string strScipt = "window.open('../Common/S3GViewFile.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Due to Data Problem, Unable to View the Document");
        }
    }

    #region PRDT

    protected void hyplnkView_Click(object sender, EventArgs e)
    {
        try
        {
            string strFieldAtt = ((LinkButton)sender).ClientID;
            int gRowIndex = Utility.FunPubGetGridRowID("gvPRDDT", strFieldAtt);
            Label lblPath = gvPRDDT.Rows[gRowIndex].FindControl("lblPath") as Label;
            string strFileName = lblPath.Text.Replace("\\", "/").Trim();
            string strScipt = "window.open('../Common/S3GViewFile.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Unable to View the Document";
            cvPricing.IsValid = false;
        }
    }

    protected void gvPRDDT_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            UserInfo ObjUserInfo = new UserInfo();

            //code added by saran on 25-Nov-2011 as per the observation raised by RS-Start
            //Label lblCollectedby = (Label)e.Row.FindControl("txtColletedBy");
            //Label txtColletedDate = (Label)e.Row.FindControl("txtColletedDate");
            //Label txtScannedDate = (Label)e.Row.FindControl("txtScannedDate");
            DropDownList ddlCollectedby = (DropDownList)e.Row.FindControl("ddlCollectedby");
            AjaxControlToolkit.CalendarExtender calCollectedDate = (AjaxControlToolkit.CalendarExtender)e.Row.FindControl("calCollectedDate");
            AjaxControlToolkit.CalendarExtender calScannedDate = (AjaxControlToolkit.CalendarExtender)e.Row.FindControl("calScannedDate");
            calScannedDate.Format = calCollectedDate.Format = strDateFormat;
            TextBox txtColletedDate = (TextBox)e.Row.FindControl("txtCollectedDate");
            DropDownList ddlScannedby = (DropDownList)e.Row.FindControl("ddlScannedby");
            TextBox txtScannedDate = (TextBox)e.Row.FindControl("txtScannedDate");
            //code added by saran on 25-Nov-2011 as per the observation raised by RS-End

            LinkButton Viewdoct = (LinkButton)e.Row.FindControl("hyplnkView");
            CheckBox Cbx1 = (CheckBox)e.Row.FindControl("CbxCheck");

            TextBox txtUpload = (TextBox)e.Row.FindControl("txOD");

            //code added by saran on 25-Nov-2011 as per the observation raised by RS-Start

            //txtColletedDate.Attributes.Add("readonly", "readonly");
            //txtScannedDate.Attributes.Add("readonly", "readonly");
            OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            ObjStatus.Option = 35;
            ObjStatus.Param1 = intCompany_Id.ToString();
            Utility.FillDLL(ddlCollectedby, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

            ObjStatus.Option = 35;
            ObjStatus.Param1 = intCompany_Id.ToString();
            Utility.FillDLL(ddlScannedby, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

            Label lblCollectedBy = e.Row.FindControl("lblCollectedBy") as Label;
            Label lblScannedBy = e.Row.FindControl("lblScannedBy") as Label;
            if (lblCollectedBy.Text != "")
            {
                ddlCollectedby.SelectedValue = lblCollectedBy.Text;
            }
            if (lblScannedBy.Text != "")
            {
                ddlScannedby.SelectedValue = lblScannedBy.Text;
            }

            string Path = "";
            if (ViewState["Docpath"] != null && ViewState["Docpath"].ToString() != " ")
            {
                txtUpload.Text = ViewState["Docpath"].ToString();

                Path = txtUpload.Text.Split('\\')[1].ToString();
            }
            AjaxControlToolkit.AsyncFileUpload asyFileUpload = e.Row.FindControl("asyFileUpload") as AjaxControlToolkit.AsyncFileUpload;
            Label lblScanned = e.Row.FindControl("lblScanned") as Label;

            if (lblScanned != null && asyFileUpload != null)
            {
                if (lblScanned.Text == "False")
                {
                    asyFileUpload.Enabled = false;
                    Viewdoct.Enabled = false;
                    txtScannedDate.Text = "";
                    txtScannedDate.Visible = false; //added
                    ddlScannedby.Visible = false; //added
                    calScannedDate.Enabled = false;
                    ddlScannedby.ClearDropDownList();
                }
                else
                {
                    if (Path == string.Empty)
                    {
                        Viewdoct.Enabled = false;

                    }
                    else
                    {

                        Viewdoct.Enabled = true;
                    }
                }

            }
            if (txtScannedDate.Text.Contains("1900"))
            {
                Cbx1.Checked = false;
                txtScannedDate.Text = "";
                txtScannedDate.Visible = false; //added
                ddlScannedby.ClearDropDownList();
                ddlScannedby.Visible = false; //added
            }


            //code added by saran on 25-Nov-2011 as per the observation raised by RS-End


            //if (intPricingId == 0)
            //{
            //    Viewdoct.Enabled = false;
            //    txtUpload.Visible = false;
            //}
            if (intPricingId >= 0)
            {
                //if (txtUpload.Text == ViewState["Docpath"].ToString())
                //{
                //    txtUpload.Text = "";
                //}
                Cbx1.Checked = true;
                txtUpload.Visible = true;
            }

            //code added by saran on 25-Nov-2011 as per the observation raised by RS-Start

            ObjUserInfo = null;
            //if (Request.QueryString["qsMode"] != null)
            //{
            //    if (Request.QueryString["qsMode"].ToString() == "Q")
            //    {
            asyFileUpload.Enabled = false;
            // ddlCollectedby.ClearDropDownList();
            calCollectedDate.Enabled = false;
            txtColletedDate.ReadOnly = true;
            //  ddlScannedby.ClearDropDownList();
            calScannedDate.Enabled = false;
            txtScannedDate.ReadOnly = true;
            Cbx1.Enabled = false;
            TextBox txtRemarks = (TextBox)e.Row.FindControl("txtRemarks");
            txtRemarks.ReadOnly = true;
            gvPRDDT.Columns[9].Visible = false;
            //    }
            //}
            //code added by saran on 25-Nov-2011 as per the observation raised by RS-End

            //Added here to handle collected status in check box on 24-Dec-2015
            if (Convert.ToInt32(lblCollectedBy.Text) > 0)
            {
                Cbx1.Checked = true;
            }
            else
            {
                Cbx1.Checked = false;
            }
        }

    }

    protected void asyncFileUpload_UploadedComplete(object sender, AjaxControlToolkit.AsyncFileUploadEventArgs e)
    {

    }

    #endregion

    #endregion

    protected void txtFacilityAmt_TextChanged(object sender, EventArgs e)
    {
        try
        {

            FunPriFill_Repayment_Tab(_Add);
            FunPriFill_CashOutFlow(_Add);
            FunPriFill_CashInFlow(_Add);
            lblTotalOutFlowAmount.Text = "0";
            FunPriIRRReset();
            txtFacilityAmt.Focus();
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, ex.Message);
        }

    }

    //protected void chkDocwithRepaymentPrint_OnCheckedChanged(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        if (chkDocwithRepaymentPrint.Checked == true)
    //        {
    //            String htmlText = GetHTMLText();
    //            Guid objGuid = new Guid();
    //            string path = (Server.MapPath(".") + "\\PDF Files\\" + objGuid + DateTime.Now.ToString().Replace("/", "").Replace(":", "").Replace(" ", "") + ".pdf");
    //            string strFileName = "/Origination/PDF Files/" + objGuid + DateTime.Now.ToString().Replace("/", "").Replace(":", "").Replace(" ", "") + ".pdf";
    //            Document doc = new Document();
    //            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));
    //            doc.AddCreator("Sundaram Infotech Solutions");
    //            doc.AddTitle("New PDF Document");
    //            doc.Open();
    //            List<IElement> htmlarraylist = iTextSharp.text.html.simpleparser.HTMLWorker.ParseToList(new StringReader(htmlText), null);
    //            for (int k = 0; k < htmlarraylist.Count; k++)
    //            {
    //                doc.Add((IElement)htmlarraylist[k]);
    //            }
    //            doc.AddAuthor("S3G Team");
    //            doc.Close();

    //            Session["strPath"] = path;
    //            string strScipt = "window.open('../Common/S3GDownloadPage.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
    //            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        Utility.FunShowAlertMsg(this, ex.Message);
    //    }
    //}


    // Code changes by Santhosh.S on 14/05/2013 to display Crystal Report
    protected void chkDocwithRepaymentPrint_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chkDocwithRepaymentPrint.Checked == true)
            {
                if (ddlTemp.SelectedValue == "0")
                {
                    Utility.FunShowAlertMsg(this, "Select the template");
                    return;
                }


                //if (chkDocwithRepaymentPrint.Checked == true)
                //{
                //    //hdnPrint.Value = "1";
                //    GetReportData();
                //    string strScipt = "window.open('../Reports/S3gOrgPricingReport.aspx', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Pricing Report", strScipt, true);
                //}
                string Template = string.Empty;
                DataSet dss = new DataSet();
                DataTable dt = new DataTable();
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Company_Id", CompanyId.ToString());

                Procparam.Add("@Lob_Id", ddlLob.SelectedValue);
                Procparam.Add("@Location_ID", ddlBranch.SelectedValue);
                Procparam.Add("@Temp_Doc_ID", ddlTemp.SelectedValue);
                Procparam.Add("@Template_Type_Code", "1");
                dt = Utility.GetDefaultData("S3G_Get_PricingTemplateCont", Procparam);
                Template = dt.Rows[0]["Template_Content"].ToString();



                FunPriPricingDetails(Convert.ToInt32(CompanyId), ddlLob.SelectedValue, Template);
            }
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this, ex.Message);
        }
    }


    #endregion

    #region Page Methods

    private void FunProLoadCombos(int intCompany_Id)
    {
        FunPriCheckPricingStart();
        FunPriLoadAllCombos("", "enq");
        FunPriLoadAllCombos("", "sanc");
        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Option", "22");
        ddlTenureType.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, false, new string[] { "ID", "Name" });



    }

    private void Funproloadpaytype()
    {
        OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
        ObjStatus.Option = 1;
        ObjStatus.Param1 = S3G_Statu_Lookup.PAY_TO.ToString();
        Utility.FillDLL(ddlPayTo, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));
    }

    private void FunPriShowCustomerDetails()
    {
        if (strCustomer_Id != string.Empty && ddlEnquiryNumber.Items.Count > 0 && ddlEnquiryNumber.SelectedValue == "0")
        {
            FunPriLoadAllCombos(strCustomer_Id, "Enq");
            FunPriLoadAllCombos(strCustomer_Id, "sanc");
            btnCreateCustomer.Enabled = false;
        }

        if (ddlSanctionNumber.Items.Count <= 1 && ddlEnquiryNumber.Items.Count <= 1)
        {
            ddlSanctionNumber.Enabled = false;
            ddlEnquiryNumber.Enabled = false;
            // Removed By Shibu 17-Sep-2013 Branch List 
            FunPriLoadLObandBranch(intUserId, intCompany_Id);
            ddlLob.Enabled = true;
            ddlBranch.Enabled = true;
            ddlProduct.Enabled = true;
        }
        else
        {
            if (ddlSanctionNumber.SelectedIndex == 0 && ddlEnquiryNumber.SelectedIndex == 0)
            {
                FunPriLoadLObandBranch(intUserId, intCompany_Id);

                /**ddlLob.Items.Clear();
                ddlBranch.Clear();
                ddlProduct.Items.Clear();
                ddlLob.Enabled = false;
                ddlBranch.Enabled = false;
                ddlProduct.Enabled = false;
                ddlSanctionNumber.Enabled = true;
                ddlEnquiryNumber.Enabled = true;
                ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "Alert", "alert('Proceed by selecting either Enquiry/Sanction Number')", true);
                 * 
                 * Req Id:8845
                 * */
                
            }
            txtBusinessIRR.Attributes.Add("Readonly", "readonly");


        }
        FunPriLoadAllCombos(strCustomer_Id, "Cust");
    }

    private void FunPriLoadCustomerCode()
    {
        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Option", "1");
        Procparam.Add("@Company_ID", intCompany_Id.ToString());
        DataTable dt = Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, Procparam);// true, "--All Customers--", new string[] { "Customer_ID", "Customer_Code", "Customer_Name" });
        System.Web.HttpContext.Current.Session["CustomerDT"] = dt;
    }

    private void FunPriLoadAllCombos(string strCustomer_Id, string strOption)
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Clear();
            switch (strOption.ToLower())
            {
                case "sanc":
                    //if (ddlSanctionNumber.SelectedIndex == 0 || ddlSanctionNumber.Items.Count == 0)
                    //{
                    Procparam.Add("@Option", "2");
                    Procparam.Add("@Company_ID", intCompany_Id.ToString());
                    if (strCustomer_Id != string.Empty)
                    {
                        Procparam.Add("@Customer_ID", strCustomer_Id);
                    }
                    ddlSanctionNumber.Items.Clear();
                    ddlSanctionNumber.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, new string[] { "ID", "SANTION_NUMBER" });
                    if (strCustomer_Id != string.Empty)
                    {
                        if (ddlSanctionNumber.Items.Count == 2)
                        {
                            ddlSanctionNumber.SelectedIndex = 1;
                            LoadDetailsFromSanction(ddlSanctionNumber.SelectedValue, strCustomer_Id);
                        }
                    }
                    //}
                    break;
                case "enq":
                    Procparam.Add("@Option", "3");
                    Procparam.Add("@Company_ID", intCompany_Id.ToString());
                    if (strCustomer_Id != string.Empty)
                    {
                        Procparam.Add("@Customer_ID", strCustomer_Id);
                    }
                    ddlEnquiryNumber.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, true, new string[] { "Enquiry_Response_ID", "Enquiry_No" });
                    if (strCustomer_Id != string.Empty)
                    {
                        if (ddlEnquiryNumber.Items.Count == 2)
                        {

                            Procparam.Clear();
                            Procparam.Add("@Option", "2");
                            Procparam.Add("@Company_ID", intCompany_Id.ToString());
                            if (strCustomer_Id != string.Empty)
                            {
                                Procparam.Add("@Customer_ID", strCustomer_Id);
                            }
                            ddlSanctionNumber.Items.Clear();
                            ddlSanctionNumber.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, new string[] { "ID", "Santion_Number" });
                            if (ddlSanctionNumber.Items.Count == 2)
                            {
                                ddlEnquiryNumber.SelectedIndex = 1;
                                ddlSanctionNumber.SelectedIndex = 1;
                                FunPriLoadDetailsFromEnquiry(ddlEnquiryNumber.SelectedValue, "Enqr");
                            }
                        }
                    }
                    break;
                case "cust":
                    Procparam.Add("@Option", "4");
                    Procparam.Add("@Company_ID", intCompany_Id.ToString());
                    Procparam.Add("@Customer_ID", strCustomer_Id);
                    DataTable dtCustDetails = Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, Procparam);
                    cmbCustomerCode.Text = dtCustDetails.Rows[0]["Customer_Code"].ToString();
                    S3GCustomerCommAddress.SetCustomerDetails(dtCustDetails.Rows[0], true);
                    // txtCustomerAddress.Text = dtCustDetails.Rows[0]["Customer_Address"].ToString();
                    txtConstitutionCode.Text = dtCustDetails.Rows[0]["Consitution"].ToString();
                    ViewState["ConsitutionId"] = dtCustDetails.Rows[0]["Constitution_ID"].ToString();
                    txtCustNameAdd_Followup.Text = cmbCustomerCode.Text + System.Environment.NewLine +
                        dtCustDetails.Rows[0]["Comm_Address1"].ToString() + System.Environment.NewLine +
                        dtCustDetails.Rows[0]["Comm_Address2"].ToString() + System.Environment.NewLine +
                        dtCustDetails.Rows[0]["Comm_City"].ToString() + System.Environment.NewLine +
                        dtCustDetails.Rows[0]["Comm_State"].ToString() + System.Environment.NewLine +
                        dtCustDetails.Rows[0]["Comm_Country"].ToString() + "-" + dtCustDetails.Rows[0]["Comm_Pincode"].ToString();

                    FunPriGetConstitutionCodeDetails(strCustomer_Id);

                    // FunPriLoadPreDisbursementDocument();

                    break;

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading Combos");
        }

    }

    private bool FunPriCheckIsPageValid()
    {
        bool returnValue = true;
        try
        {
            string strType;
            strType = ddlLob.SelectedItem.Text.ToLower().Split('-')[0].Trim();
            //Commented by saranya for PRDDT Changes on 31-03-2012
            //if (gvPRDDT.Rows.Count > 0)
            //{
            //    FunPriUploadFiles();
            //}
            //End Here

            if (chk_lblMargin.Visible == true && chk_lblMargin.Checked)
            {
                if (((!ddlLob.SelectedItem.Text.ToUpper().StartsWith("FT")) && (!ddlLob.SelectedItem.Text.ToUpper().StartsWith("WC"))))
                {
                    if (gvAssetDetails.Rows.Count > 0 && gvAssetDetails.Visible == false)
                    {
                        cvPricing.IsValid = false;
                        cvPricing.ErrorMessage = strErrorMessagePrefix + "Asset is Mandatory, If Margin is applicaple";
                        //tcPricing.ActiveTabIndex = 1;
                        returnValue = false;
                        return false;
                        // Utility.FunShowAlertMsg(this, "Asset is Mandatory, If Margin is applicaple");
                        // return;
                    }
                }
            }


            //if (rdnlAssetType.SelectedValue != "1")

            //if (ViewState["OlExistingAsset"] == null && ViewState["OlExistingAsset"].ToString() != "1")
            //{

            //}

            if (strType != "ol")
            {
                if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count == 0)
                {
                    cvPricing.IsValid = false;
                    cvPricing.ErrorMessage = strErrorMessagePrefix + "Add atleast one Outflow details";
                    //tcPricing.ActiveTabIndex = 1;
                    returnValue = false;
                    return false;
                }



                if (ddl_Return_Pattern.SelectedValue == "1" || ddl_Return_Pattern.SelectedValue == "2")
                {
                    if (ViewState["DtCashFlow"] != null)
                    {
                        if (((DataTable)ViewState["DtCashFlow"]).Rows.Count > 0)
                        {
                            if (((DataTable)ViewState["DtCashFlow"]).Select("CashFlow_Flag_ID = 34").Length > 0)                            
                            {
                                decimal decUMFC = (decimal)((DataTable)ViewState["DtCashFlow"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 34");
                                if (decUMFC != FunPriGetInterestAmountUMCVal())
                                {
                                    cvPricing.IsValid = false;
                                    cvPricing.ErrorMessage = strErrorMessagePrefix + "Unmatured Finance Amount in inflow not matching with Interest";
                                    //tcPricing.ActiveTabIndex = 1;
                                    returnValue = false;
                                    return false;
                                }
                            }
                        }
                    }
                }

            }

            if (strMode != "Q")
            {
                if (!FunPriIsValidConstitution())
                {
                    cvPricing.IsValid = false;
                    //tcPricing.ActiveTabIndex = 6;
                    returnValue = false;
                    return false;
                }
            }

            /* Commented by saranya for PRDDT Changes on 31-03-2012
            if (strMode != "Q")
            {
                string strError;
                if (!FunPriValidatePRDt(out strError))
                {
                    cvPricing.IsValid = false;
                    if (strError == "Not Collected")
                    {
                        cvPricing.ErrorMessage = strErrorMessagePrefix + "PRDDT documents is mandatory";
                    }
                    else if (strError == "Not Scanned")
                    {
                        cvPricing.ErrorMessage = strErrorMessagePrefix + "PRDDT Scan file is mandatory";
                    }
                    //tcPricing.ActiveTabIndex = 6;
                    returnValue = false;
                    return false;
                }
            }
             End */

            switch (strType)
            {
                case "te"://Term loan Extensible
                case "tl"://Term loan
                case "ft"://Factoring 
                case "wc"://Working Capital
                case "ln"://Loan
                    string str = "true";//Asset is optional for Loan and not required for other Lobs above
                    break;
                default:
                    if (((DataTable)ViewState["ObjDTAssetDetails"]).Rows.Count == 0)
                    {
                        cvPricing.IsValid = false;
                        cvPricing.ErrorMessage = strErrorMessagePrefix + "Add atleast one asset details";
                        //tcPricing.ActiveTabIndex = 2;
                        returnValue = false;
                        return false;
                    }
                    break;
            }

            if (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddlLob.SelectedItem.Text.ToUpper().Split('-')[0].Trim() != "FT")
            {
                if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
                {
                    cvPricing.IsValid = false;
                    cvPricing.ErrorMessage = strErrorMessagePrefix + "Add atleast one Repayment details";
                    //tcPricing.ActiveTabIndex = 3;
                    returnValue = false;
                    return false;
                }
            }

            if (!ddlLob.SelectedItem.Text.Split('-')[0].ToLower().StartsWith("ol"))
            {
                DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
                dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";

                if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper() == "DEFERRED STRUCTURED")
                {

                    if (!string.IsNullOrEmpty(Convert.ToString(((DataTable)ViewState["DtCashFlowOut"]).Compute("Count(CashFlow_Flag_ID)", "CashFlow_Flag_ID = 41"))))
                    {
                        Int32 IntTotalOutflow = (Int32)((DataTable)ViewState["DtCashFlowOut"]).Compute("Count(CashFlow_Flag_ID)", "CashFlow_Flag_ID = 41");
                        if (IntTotalOutflow <= 1)
                        {
                            cvPricing.IsValid = false;
                            cvPricing.ErrorMessage = strErrorMessagePrefix + "Cash Outflow should be More than one for Deferred Structured";
                            returnValue = false;
                            return false;
                        }
                    }
                }
            }
            if (!ddlLob.SelectedItem.Text.Split('-')[0].ToLower().StartsWith("ol"))
            {
                if (!string.IsNullOrEmpty(Convert.ToString(((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 41"))))
                {
                    decimal decToatlFinanceAmt = (decimal)((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 41");

                    if (FunPriGetAmountFinanced() != decToatlFinanceAmt)
                    {
                        cvPricing.IsValid = false;
                        cvPricing.ErrorMessage = strErrorMessagePrefix + "Total finance amount in cashoutflow should be equal to amount financed";
                        returnValue = false;
                        return false;
                    }
                }
                else
                {
                    cvPricing.IsValid = false;
                    cvPricing.ErrorMessage = strErrorMessagePrefix + "Payment Cashflow Description not available in Outflow Details";
                    returnValue = false;
                    return false;
                }

                //Margin Amount Check in Outflow Tab
                #region Margin Amount Check in Outflow Tab
                DataRow[] drMarginAmountRow = ((DataTable)ViewState["DtCashFlowOut"]).Select("CashFlow_Flag_ID = 43");
                if (drMarginAmountRow.Length > 0)
                {
                    decimal decToatlMarginAmt = (decimal)((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 43");
                    if (Convert.ToDecimal(txtMarginMoneyAmount_Cashflow.Text) > decToatlMarginAmt)
                    {
                        cvPricing.ErrorMessage = strErrorMessagePrefix + "Total Margin Amount in Cashoutflow should be equal to Margin Amount in Assets";
                        cvPricing.IsValid = false;
                        returnValue = false;
                        return false;
                    }
                }
                #endregion
            }
            //Finance Amount Validation with Asset Cost & Margin
            #region Finance Amount Validation with Asset Cost & Margin
            /* Hided By Thalai on 02-Mar-2012 - Change the Validation, 
             * Remove LOB wise validation and Validate only Asset having Transaction */
            //if (strType != "te" && strType != "tl" && strType != "fl" && strType != "ol" && strType != "wc" && strType != "ft")
            if (Convert.ToDecimal(lblTotalAssetAmount.Text) > 0)
            {
                decimal decTotalAmount = 0;
                bool blnIsValidOutflow = false;
                // DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
                try
                {
                    decimal dcmAssetMarginAmount;
                    if (!string.IsNullOrEmpty(Convert.ToString(((DataTable)ViewState["ObjDTAssetDetails"]).Compute("Sum(Margin_Amount)", "Noof_Units > 0"))))
                        dcmAssetMarginAmount = Convert.ToDecimal(((DataTable)ViewState["ObjDTAssetDetails"]).Compute("Sum(Margin_Amount)", "Noof_Units > 0"));
                    else
                        dcmAssetMarginAmount = 0;

                    blnIsValidOutflow = S3GBusEntity.CommonS3GBusLogic.CashoutflowAssetValueValidate(FunPriGetAmountFinanced(),
                        Convert.ToDecimal(lblTotalAssetAmount.Text), dcmAssetMarginAmount, out decTotalAmount);

                    if (!blnIsValidOutflow)
                    {
                        /* Hided By Thalai on 02-Mar-2012 - Same Functionality in both condition 
                        if (strType != "ln")
                        {
                            if (((DataTable)ViewState["ObjDTAssetDetails"]).Rows.Count > 0)
                            {
                                //cvPricing.IsValid = false;
                                //cvPricing.ErrorMessage = strErrorMessagePrefix + "Finance amount should be less than or equal to total asset value with margin money ( " + decTotalAmount.ToString() + " )";
                                Utility.FunShowAlertMsg(this, "Facility Amount changed based on Revised Margin Amount ( " + decTotalAmount.ToString() + " )");
                                //tcPricing.ActiveTabIndex = 0;

                                txtFacilityAmt.Text = decTotalAmount.ToString();
                                FunPriFill_Repayment_Tab(_Add);
                                //FunPriFill_CashOutFlow(_Add);
                                //FunPriFill_CashInFlow(_Add);
                                //lblTotalOutFlowAmount.Text = "0";
                                FunPriIRRReset();

                                returnValue = false;
                                return false;
                            }
                        }
                        else
                        {*/
                        if (((DataTable)ViewState["ObjDTAssetDetails"]).Rows.Count > 0)
                        {

                            if (Convert.ToDecimal(txtFacilityAmt.Text) != decTotalAmount)//5366
                            {
                                //cvPricing.IsValid = false;
                                //cvPricing.ErrorMessage = strErrorMessagePrefix + "Finance amount should be less than or equal to total asset value with margin money ( " + decTotalAmount.ToString() + " )";
                                Utility.FunShowAlertMsg(this, "Facility Amount changed based on Revised Margin Amount ( " + Math.Round(decTotalAmount, 0).ToString() + " )");
                                //tcPricing.ActiveTabIndex = 0;

                                txtFacilityAmt.Text = decTotalAmount.ToString();//5366
                                FunPriFill_Repayment_Tab(_Add);
                                //FunPriFill_CashOutFlow(_Add);
                                //FunPriFill_CashInFlow(_Add);
                                //lblTotalOutFlowAmount.Text = "0";
                                FunPriIRRReset();
                                returnValue = false;
                                return false;
                            }
                        }
                        //}
                    }

                    if (FunPriGetMarginAmout() > dcmAssetMarginAmount)
                    {
                        Utility.FunShowAlertMsg(this, " The sum of Margin Amount in Asset Details should be greater than or equal to Margin Amount in ROI Rules");

                        returnValue = false;
                        return false;
                    }

                }
                catch (Exception ex)
                {
                    cvPricing.IsValid = false;
                    Utility.FunShowAlertMsg(this, ex.Message);
                    returnValue = false;
                    return false;
                }
            }
            #endregion

            //Margin Amount Validation in Asset Tab 
            #region Margin Amount Validation in Asset Tab
            if (strType != "te" && strType != "tl" && strType != "wc" && strType != "ft")//&& strType != "fl" && strType != "ol"
            {
                if (((DataTable)ViewState["ObjDTAssetDetails"]).Rows.Count > 0)
                {
                    decimal decMarginAmount = (decimal)((DataTable)ViewState["ObjDTAssetDetails"]).Compute("Sum(Margin_Amount)", "Sl_No > 0");
                    //decMarginAmount > 0 means Margin Amount given in asset Tab
                    if (decMarginAmount > 0)
                    {
                        decimal decActualMarginAmount = txtMarginMoneyAmount_Cashflow.Text == "" ? 0 : Convert.ToDecimal(txtMarginMoneyAmount_Cashflow.Text);

                        if (decActualMarginAmount > decMarginAmount)
                        {
                            cvPricing.IsValid = false;
                            cvPricing.ErrorMessage = strErrorMessagePrefix + "Total Margin Amount in Asset tab should be greater than or equal to margin amount in offer terms tab";
                            //tcPricing.ActiveTabIndex = 2;
                            returnValue = false;
                            return false;
                        }
                    }

                }
            }
            #endregion
            if (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddlLob.SelectedItem.Text.ToUpper().Split('-')[0].Trim() != "FT")
            {
                if (txtAccIRR.Text == "" || txtBusinessIRR.Text == "" || txtCompanyIRR.Text == "")
                {
                    FunPriIRRReset();
                    cvPricing.IsValid = false;
                    cvPricing.ErrorMessage = strErrorMessagePrefix + "Recalculate IRR ";
                    //tcPricing.ActiveTabIndex = 2;
                    returnValue = false;
                    return false;

                }
            }
            //decimal decBreakPercent = ((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID = 23"));
            //if (decBreakPercent!=0)
            //{
            //    if (decBreakPercent != 100)
            //    {
            //        cvPricing.IsValid = false;
            //        cvPricing.ErrorMessage = strErrorMessagePrefix + "Total break up percentage should be equal to 100%";
            //        tcPricing.ActiveTabIndex = 2;
            //        returnValue = false;
            //    }
            //}
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Due to Data Problem,Unable to Save";
            cvPricing.IsValid = false;
            returnValue = false;
            return false;

        }
        return returnValue;
    }


    private DataTable FunPriGetCheckListDetails()
    {
        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Company_ID", intCompany_Id.ToString());
        Procparam.Add("@Pricing_ID", intPricingId.ToString());
        DataSet ds = Utility.GetDataset("S3G_LAD_GET_PRE_DOCS_RPT", Procparam);// true, "--All Customers--", new string[] { "Customer_ID", "Customer_Code", "Customer_Name" });

        DataTable dtCheckDetails = ds.Tables["ListTable"];

        return dtCheckDetails;


    }


    private DataTable FunPriGetChargeDetails()
    {
        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Company_ID", intCompany_Id.ToString());
        Procparam.Add("@Pricing_ID", intPricingId.ToString());
        DataSet ds = Utility.GetDataset("S3G_ORG_GetPricing_Charges", Procparam);// true, "--All Customers--", new string[] { "Customer_ID", "Customer_Code", "Customer_Name" });

        DataTable dtAnyOtherCharges = ds.Tables["ListTable"];
        DataTable dtProcessingFee = ds.Tables["Table1"];

        decimal dcAnyOtherCharges = (dtAnyOtherCharges.Rows[0]["AnyOtherCharges_Dec"].ToString() == "") ? 0 : (Decimal)dtAnyOtherCharges.Rows[0]["AnyOtherCharges_Dec"];
        decimal dcProcessingFee = (dtProcessingFee.Rows[0]["ProcessingFee_Dec"].ToString() == "") ? 0 : (Decimal)dtProcessingFee.Rows[0]["ProcessingFee_Dec"];


        DataTable dtDecimal = new DataTable();
        dtDecimal.Columns.Add("AnyOtherCharges_Dec");
        dtDecimal.Columns.Add("ProcessingFee_Dec");

        DataRow dRow = dtDecimal.NewRow();
        dRow["AnyOtherCharges_Dec"] = dcAnyOtherCharges;
        dRow["ProcessingFee_Dec"] = dcProcessingFee;

        dtDecimal.Rows.Add(dRow);
        return dtDecimal;


    }


    private decimal FunPriGetInterestAmount()
    {
        /*decimal decFinAmount = FunPriGetAmountFinanced();
        decimal decRate = 0;

        switch (ddl_Return_Pattern.SelectedValue)
        {
            case "1":
                decRate = Convert.ToDecimal(txtRate.Text);
                break;
            case "2":
                if (ViewState["decRate"] != null)
                {
                    decRate = Convert.ToDecimal(ViewState["decRate"].ToString());
                }
                break;
        }
        string strLOB = ddlLob.SelectedItem.Text.Split('-')[0].ToString().Trim().ToLower();
        switch (strLOB)
        {
            case "tl":
            case "te":
                if (ddl_Repayment_Mode.SelectedValue == "5")
                {
                    decRate = 0;
                }
                break;
            case "ft":
            case "wc":
                decRate = 0;
                break;
        }

        return Math.Round(S3GBusEntity.CommonS3GBusLogic.FunPubInterestAmount(ddlTenureType.SelectedItem.Text.ToLower(), decFinAmount, decRate, int.Parse(txtTenure.Text)), 0);
         */
        decimal decFinAmount = FunPriGetAmountFinanced();
        decimal decUMFC = 0;
        if (!string.IsNullOrEmpty(lblTotalAmount.Text))
        {
            string strTotalAmount = (lblTotalAmount.Text.Split(':').Length > 1) ? lblTotalAmount.Text.Split(':')[1].Trim() : "";
            if (strTotalAmount != "")
            {
                decimal decTotalRepayable = Convert.ToDecimal(strTotalAmount);
                decUMFC = decTotalRepayable - decFinAmount;
            }
        }
        return decUMFC;
    }
    private decimal FunPriGetInterestAmountUMCVal()
    {
        /*decimal decFinAmount = FunPriGetAmountFinanced();
        decimal decRate = 0;

        switch (ddl_Return_Pattern.SelectedValue)
        {
            case "1":
                decRate = Convert.ToDecimal(txtRate.Text);
                break;
            case "2":
                if (ViewState["decRate"] != null)
                {
                    decRate = Convert.ToDecimal(ViewState["decRate"].ToString());
                }
                break;
        }
        string strLOB = ddlLob.SelectedItem.Text.Split('-')[0].ToString().Trim().ToLower();
        switch (strLOB)
        {
            case "tl":
            case "te":
                if (ddl_Repayment_Mode.SelectedValue == "5")
                {
                    decRate = 0;
                }
                break;
            case "ft":
            case "wc":
                decRate = 0;
                break;
        }

        return Math.Round(S3GBusEntity.CommonS3GBusLogic.FunPubInterestAmount(ddlTenureType.SelectedItem.Text.ToLower(), decFinAmount, decRate, int.Parse(txtTenure.Text)), 0);
         */
        decimal decFinAmount = FunPriGetAmountFinanced();
        decimal decUMFC = 0;
        if (!string.IsNullOrEmpty(lblTotalAmount.Text))
        {
            string strTotalAmount = (lblTotalAmount.Text.Split(':').Length > 1) ? lblTotalAmount.Text.Split(':')[1].Trim() : "";
            if (strTotalAmount != "")
            {
                decimal decTotalRepayable = Convert.ToDecimal(strTotalAmount);
                decUMFC = decTotalRepayable - Math.Round(decFinAmount,0);
            }
        }
        return decUMFC;
    }

    private decimal FunPriGetStructureAdhocInterestAmount()
    {
        decimal decFinAmount = FunPriGetAmountFinanced();
        decimal decRate = 0;
        decRate = Convert.ToDecimal(txtRate.Text);

        switch (ddl_Return_Pattern.SelectedValue)
        {
            case "1":
                decRate = Convert.ToDecimal(txtRate.Text);
                break;
            case "2":
                if (ViewState["decRate"] != null)
                {
                    decRate = Convert.ToDecimal(ViewState["decRate"].ToString());
                }
                break;
            case "3": //RepaymentType.PMPT:
                return ((Math.Round(((decFinAmount / 1000) * decRate) /
                    Convert.ToDecimal(hdnRoundOff.Value.ToString()), 0) *
                    Convert.ToDecimal(hdnRoundOff.Value.ToString())) *
                    int.Parse(txtTenure.Text)) - decFinAmount;
                break;
            case "4": //RepaymentType.PMPL:
                return ((Math.Round(((decFinAmount / 100000) * decRate) /
                    Convert.ToDecimal(hdnRoundOff.Value.ToString()), 0) *
                    Convert.ToDecimal(hdnRoundOff.Value.ToString())) *
                    int.Parse(txtTenure.Text)) - decFinAmount;
                break;
            case "5": //RepaymentType.PMPM:
                return ((Math.Round(((decFinAmount / 1000000) * decRate) /
                    Convert.ToDecimal(hdnRoundOff.Value.ToString()), 0) *
                    Convert.ToDecimal(hdnRoundOff.Value.ToString())) *
                    int.Parse(txtTenure.Text)) - decFinAmount;
                break;
            default:
                decRate = Convert.ToDecimal(txtRate.Text);
                break;
        }
        string strLOB = ddlLob.SelectedItem.Text.Split('-')[0].ToString().Trim().ToLower();
        switch (strLOB)
        {
            case "tl":
            case "te":
                if (ddl_Repayment_Mode.SelectedValue == "5")
                {
                    decRate = 0;
                }
                break;
            case "ft":
            case "wc":
                decRate = 0;
                break;
        }

        return Math.Round(S3GBusEntity.CommonS3GBusLogic.FunPubInterestAmount(ddlTenureType.SelectedItem.Text.ToLower(), decFinAmount, decRate, int.Parse(txtTenure.Text)), 0);
    }

    // Removed By Shibu 17-Sep-2013 Branch List 
    private void FunPriLoadLObandBranch(int intUser_id, int intCompany_id)
    {
        try
        {
            Dictionary<string, string> Procparam = new Dictionary<string, string>();
            Procparam.Clear();
            Procparam.Add("@Is_Active", "1");
            Procparam.Add("@User_Id", intUser_id.ToString());
            Procparam.Add("@Company_ID", intCompany_id.ToString());
            if (ViewState["ConsitutionId"] != null)
            {
                Procparam.Add("@Consitution_Id", ViewState["ConsitutionId"].ToString());
            }
            Procparam.Add("@Program_Id", "42");
            ddlLob.BindDataTable(SPNames.LOBMaster, Procparam, new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });
            Procparam.Remove("@Consitution_Id");
            //  ddlBranch.BindDataTable(SPNames.BranchMaster_LIST, Procparam, new string[] { "Branch_ID", "Branch_Code", "Branch_Name" });
            //FunpriloadLocation();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading Lob/Location");
        }
    }
    // Removed By Shibu 17-Sep-2013 Branch List 
    //private void FunpriloadLocation()
    //{
    //    Dictionary<string, string> Procparam = new Dictionary<string, string>();
    //    Procparam.Clear();
    //    Procparam.Add("@Is_Active", "1");
    //    Procparam.Add("@User_Id", intUserId.ToString());
    //    Procparam.Add("@Company_ID", intCompany_Id.ToString());
    //    if (ddlLob.SelectedIndex > 0)
    //        Procparam.Add("@Lob_Id", ddlLob.SelectedValue);
    //    Procparam.Add("@Program_Id", "42");
    //    //ddlBranch.BindDataTable(SPNames.BranchMaster_LIST, Procparam, new string[] { "Location_ID", "Location" });
    //}

    private void FunProPageLoad(string strLoadMode)
    {

        if (intPricingId == 0)
        {
            FunProLoadCombos(intCompany_Id);
            txtOfferDate.Text = DateTime.Parse(DateTime.Now.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
        }
        Funproloadpaytype();//To load Pay type
        div7.Visible = false;
        div8.Visible = false;
        gvAssetDetails.Visible = false;
        txtCompanyIRR.ReadOnly = true;
        txtAccIRR.ReadOnly = true;

        if (txtResidualValue_Cashflow.Text.Length > 0)
        {
            txtResidualAmt_Cashflow.Attributes.Add("disabled", "disabled");
        }
        else if (txtResidualAmt_Cashflow.Text.Length > 0)
        {
            txtResidualValue_Cashflow.Attributes.Add("disabled", "disabled");
        }

        if (txtMarginMoneyAmount_Cashflow.Text.Length > 0)
        {
            txtMarginMoneyPer_Cashflow.Attributes.Add("disabled", "disabled");
        }
        else if (txtMarginMoneyPer_Cashflow.Text.Length > 0)
        {
            txtMarginMoneyAmount_Cashflow.Attributes.Add("disabled", "disabled");
        }

        //To load dropdown in offer tab
        FunPriFill_OfferTab(strLoadMode);

        //To fill Gridview for in flow and outflow
        FunPriFill_CashInFlow(strLoadMode);
        FunPriFill_CashOutFlow(strLoadMode);

        //To fill Asset tab
        FunPriFill_AssetTab(strLoadMode);

        //Repayment grid creation
        FunPriFill_Repayment_Tab(strLoadMode);

        //Alert Tab
        FunPriFill_Alert_Tab(strLoadMode);

        //Follow up Tab
        FunPriFillFollowUp_Tab(strLoadMode);

        FunProGetIRRDetails();
    }

    /// <summary>
    /// Get IRR Details From Global Paramater Setup
    /// </summary>
    private void FunProGetIRRDetails()
    {
        try
        {
            DataTable dtIRRDetails = Utility.FunPubGetGlobalIRRDetails(intCompany_Id, null);
            ViewState["IRRDetails"] = dtIRRDetails;
            if (dtIRRDetails.Rows.Count > 0)
            {
                //Added by Thangam on 19-Jun-2012 to solve modify mode round off issue
                ViewState["hdnRoundOff"] = dtIRRDetails.Rows[0]["Roundoff"].ToString();
                S3GBusEntity.CommonS3GBusLogic.GPSRoundOff = Convert.ToInt32(ViewState["hdnRoundOff"].ToString());

                if (dtIRRDetails.Rows[0]["IsIRRApplicable"].ToString() == "True")
                {
                    txtAccIRR.Visible = true;
                    lblAccIRR.Visible = true;
                    txtCompanyIRR.Visible = true;
                    lblCompanyIrr.Visible = true;

                    txtCompanyIRR_Repay.Visible = true;
                    lblCompanyIRR_Repay.Visible = true;
                    rfvCompanyIRR.Enabled = true;
                    txtAccountIRR_Repay.Visible = true;
                    lblAccountIRR_Repay.Visible = true;
                    rfvAccountingIRR.Enabled = true;
                }
                else
                {
                    txtAccIRR.Visible = false;
                    lblAccIRR.Visible = false;
                    txtCompanyIRR.Visible = false;
                    lblCompanyIrr.Visible = false;

                    txtCompanyIRR_Repay.Visible = false;
                    lblCompanyIRR_Repay.Visible = false;
                    rfvCompanyIRR.Enabled = false;
                    txtAccountIRR_Repay.Visible = false;
                    lblAccountIRR_Repay.Visible = false;
                    rfvAccountingIRR.Enabled = false;
                }
            }
            else
            {
                strAlert = strAlert.Replace("__ALERT__", "Define start up screen in GlobalParameter setup");
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
                return;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in fetching Global IRR Details");
        }
    }

    private void FunPriLoadDetailsFromEnquiry(string strEnquiryId, string type)
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Clear();
            Procparam.Add("@Company_ID", intCompany_Id.ToString());
            Procparam.Add("@Enquiry_Response_ID", strEnquiryId);
            //if (Session["EnquiryNumber"] == null)
            //{
            Procparam.Add("@IsCheckRequired", "1");
            //}
            DataSet ds_EnqDetails = null;

            try
            {
                ds_EnqDetails = Utility.GetDataset("S3G_ORG_GetEnQuiryResponseDetails", Procparam);
                if (ds_EnqDetails.Tables.Count > 0)
                {
                    if (ds_EnqDetails.Tables[0].Columns.Contains("No_Data_Found") == true && ds_EnqDetails.Tables[0].Rows[0]["No_Data_Found"].ToString() == "No_Data_Found" && Session["EnqNewCustomerId"] == null)
                    {
                        Utility.FunShowAlertMsg(this, "Customer details not found.Map an existing customer or Create a new customer");
                        rfvCustomerCode.Enabled = false;
                        Session["EnquiryLoaded"] = true;
                        ViewState["CR_VALUE"] = ds_EnqDetails.Tables[0].Rows[0]["CR_VALUE"].ToString();

                    }
                    else
                    {
                        rfvCustomerCode.Enabled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
                if (type == "Enqr")
                {
                    cvPricing.ErrorMessage = strErrorMessagePrefix + ex.Message;
                    cvPricing.IsValid = false;
                }
                else
                {
                    cvPricing.ErrorMessage = strErrorMessagePrefix + ex.Message.Replace("Enquiry", "Sanction");
                    cvPricing.IsValid = false;

                }
                return;
            }
            cmbCustomerCode.Attributes.Add("readonly", "readonly");
            btnCreateCustomer.Enabled = false;
            rfvCustomerCode.Enabled = false;
            if (type == "Sanc")
            {
                FunPriLoadAllCombos("", "enq");
                ddlEnquiryNumber.SelectedValue = strEnquiryId;
                ddlEnquiryNumber.Enabled = false;
            }
            if (type == "Enqr")
            {
                ddlSanctionNumber.Enabled = false;
            }

            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Option", "21");
            Procparam.Add("@Company_ID", intCompany_Id.ToString());
            bool blnCanChageROI = Convert.ToBoolean(Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, Procparam).Rows[0]["Is_Program"].ToString());

            txtConstitutionCode.Text = ds_EnqDetails.Tables[0].Rows[0]["Consitution"].ToString();
            if (ds_EnqDetails != null)
            {
                txtEnquiryDate.Text = Convert.ToDateTime(ds_EnqDetails.Tables[0].Rows[0]["Response_Date"].ToString()).ToString(strDateFormat);
                txtEnquiry_Followup.Text = ds_EnqDetails.Tables[0].Rows[0]["Enquiry_No"].ToString();
                txtFacilityAmt.Text = Convert.ToDecimal(ds_EnqDetails.Tables[0].Rows[0]["Finance_Amount_Sought"].ToString()).ToString();//5366
                txtTenure.Text = ds_EnqDetails.Tables[0].Rows[0]["Tenure"].ToString();

                #region LOB/Product/Branch/Customer
                ddlLob.Items.Clear();
                System.Web.UI.WebControls.ListItem lstItem;
                lstItem = new System.Web.UI.WebControls.ListItem(ds_EnqDetails.Tables[0].Rows[0]["LOB"].ToString(), ds_EnqDetails.Tables[0].Rows[0]["LOB_ID"].ToString());
                ddlLob.Items.Add(lstItem);

                ddlProduct.Items.Clear();
                lstItem = new System.Web.UI.WebControls.ListItem(ds_EnqDetails.Tables[0].Rows[0]["PRODUCT"].ToString(), ds_EnqDetails.Tables[0].Rows[0]["PRODUCT_ID"].ToString());
                ddlProduct.Items.Add(lstItem);

                ddlBranch.Clear();
                // Removed By Shibu 17-Sep-2013 Branch List
                //lstItem = new System.Web.UI.WebControls.ListItem(ds_EnqDetails.Tables[0].Rows[0]["Branch"].ToString(), ds_EnqDetails.Tables[0].Rows[0]["Branch_ID"].ToString());
                //lstItem = new System.Web.UI.WebControls.ListItem(ds_EnqDetails.Tables[0].Rows[0]["Location"].ToString(), ds_EnqDetails.Tables[0].Rows[0]["Location_ID"].ToString());
                //ddlBranch.Items.Add(lstItem);
                // Added By Shibu 17-Sep-2013 Branch List(Auto Suggestion
                ddlBranch.SelectedValue = ds_EnqDetails.Tables[0].Rows[0]["Location_ID"].ToString();
                ddlBranch.SelectedText = ds_EnqDetails.Tables[0].Rows[0]["Location"].ToString();
                //txtBranch_Followup.Text = ds_EnqDetails.Tables[0].Rows[0]["Branch"].ToString();
                txtBranch_Followup.Text = ds_EnqDetails.Tables[0].Rows[0]["Location"].ToString();

                //txtCustomerAddress.Text = ds_EnqDetails.Tables[0].Rows[0]["Customer_Address"].ToString();
                S3GCustomerCommAddress.SetCustomerDetails(ds_EnqDetails.Tables[0].Rows[0], true);

                cmbCustomerCode.Text = Convert.ToString(ds_EnqDetails.Tables[0].Rows[0]["Customer"].ToString());//+ ","+ ds_EnqDetails.Tables[0].Rows[0]["Customer_ID"].ToString());

                hdnCustID.Value = ds_EnqDetails.Tables[0].Rows[0]["Customer_Id"].ToString();

                txtAccIRR.Text = ds_EnqDetails.Tables[0].Rows[0]["Repay_Accounting_IRR"].ToString();
                txtBusinessIRR.Text = ds_EnqDetails.Tables[0].Rows[0]["Repay_Business_IRR"].ToString();
                txtCompanyIRR.Text = ds_EnqDetails.Tables[0].Rows[0]["Repay_Company_IRR"].ToString();
                #endregion

                ddlLob.Enabled = true;
                ddlBranch.Enabled = true;
                ddlProduct.Enabled = true;

                FunPriGetConstitutionCodeDetails(ds_EnqDetails.Tables[0].Rows[0]["Customer_Id"].ToString());



                #region ROI Rules
                ddlROIRuleList.Items.Clear();
                if (ds_EnqDetails.Tables[3].Rows.Count > 0)
                {
                    if (blnCanChageROI)
                    {
                        Procparam = new Dictionary<string, string>();
                        Procparam.Add("@Is_Active", "1");
                        Procparam.Add("@Company_ID", intCompany_Id.ToString());
                        Procparam.Add("@LOB_ID", ds_EnqDetails.Tables[0].Rows[0]["LOB_ID"].ToString());
                        Procparam.Add("@Option", "7");
                        ddlROIRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, new string[] { "ROI_Rules_ID", "ROI_Rule_Number", "Model_Description" });
                        //
                        //hdnROIRule.Value = ds_EnqDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString();
                        lstItem = new System.Web.UI.WebControls.ListItem(ds_EnqDetails.Tables[3].Rows[0]["ROI_Number"].ToString(), ds_EnqDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString());
                        if (!ddlROIRuleList.Items.Contains(lstItem))
                        {
                            ddlROIRuleList.Items.Add(lstItem);
                        }
                        ddlROIRuleList.SelectedValue = ds_EnqDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString();
                        hdnROIRule.Value = ds_EnqDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString();
                        btnFetchROI.Visible = true;

                    }
                    else
                    {
                        lstItem = new System.Web.UI.WebControls.ListItem(ds_EnqDetails.Tables[3].Rows[0]["ROI_Number"].ToString(), ds_EnqDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString());
                        ddlROIRuleList.Items.Add(lstItem);
                        hdnROIRule.Value = ds_EnqDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString();
                        btnFetchROI.Visible = false;
                    }
                    ViewState["ROIRules"] = ds_EnqDetails.Tables[3];
                    FunPriFill_OfferTab(_Add);
                    FunPriLoad_ROIRule(_Edit);
                    div7.Visible = true;
                }
                else
                {
                    if (blnCanChageROI)
                    {
                        Procparam = new Dictionary<string, string>();
                        Procparam.Add("@Is_Active", "1");
                        Procparam.Add("@Company_ID", intCompany_Id.ToString());
                        Procparam.Add("@LOB_ID", ds_EnqDetails.Tables[0].Rows[0]["LOB_ID"].ToString());
                        Procparam.Add("@Option", "7");
                        ddlROIRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, new string[] { "ROI_Rules_ID", "ROI_Rule_Number", "Model_Description" });
                    }
                }
                #endregion

                #region Payment Rules
                ddlPaymentRuleList.Items.Clear();
                if (ds_EnqDetails.Tables[4].Rows.Count > 0)
                {
                    lstItem = new System.Web.UI.WebControls.ListItem(ds_EnqDetails.Tables[4].Rows[0]["Payment_Rule_Number"].ToString(), ds_EnqDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString());
                    ddlPaymentRuleList.Items.Add(lstItem);
                    hdnPayment.Value = ds_EnqDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString();
                    FunPriLoad_PaymentRule();
                    div7.Visible = true;
                    div8.Visible = true;
                    btnFetchPayment.Visible = false;
                }

                else
                {
                    FunPriBindPaymentDDL("0");
                }

                #endregion

                #region Inflow Details
                if (ds_EnqDetails.Tables[1].Rows.Count > 0)
                {
                    gvInflow.DataSource = ds_EnqDetails.Tables[1];
                    gvInflow.DataBind();
                    ViewState["DtCashFlow"] = ds_EnqDetails.Tables[1];
                    FunPriFill_CashInFlow(_Edit);
                }
                #endregion

                #region Repayment Details
                if (ds_EnqDetails.Tables[5].Rows.Count > 0)
                {
                    gvRepaymentDetails.DataSource = ds_EnqDetails.Tables[5];
                    gvRepaymentDetails.DataBind();
                    ((LinkButton)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lnRemoveRepayment")).Visible = true;
                    TextBox txtFromInstallment_RepayTab1_upd = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;
                    Label lblToInstallment_Upd = (Label)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lblToInstallment_RepayTab");
                    txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(Convert.ToDecimal(lblToInstallment_Upd.Text.Trim()) + Convert.ToInt32("1"));

                    ViewState["DtRepayGrid"] = ds_EnqDetails.Tables[5];
                    FunPriFill_Repayment_Tab(_Edit);
                }
                #endregion

                #region Alert Details
                if (ds_EnqDetails.Tables[6].Rows.Count > 0)
                {
                    gvAlert.DataSource = ds_EnqDetails.Tables[6];
                    gvAlert.DataBind();
                    ViewState["DtAlertDetails"] = ds_EnqDetails.Tables[6];
                    FunPriFill_Alert_Tab(_Edit);
                }
                else
                {
                    FunPriFill_Alert_Tab(_Add);
                }
                #endregion

                #region FollowUp
                txtEnquiry_Followup.Text = ds_EnqDetails.Tables[7].Rows[0]["Enquiry_Number"].ToString();
                txtOfferNo_Followup.Text = ds_EnqDetails.Tables[7].Rows[0]["Offer_Number"].ToString();
                txtApplication_Followup.Text = ds_EnqDetails.Tables[7].Rows[0]["Application_Number"].ToString();
                txtEnquiryDate_Followup.Text = Convert.ToDateTime(ds_EnqDetails.Tables[7].Rows[0]["Date"].ToString()).ToString(strDateFormat);
                txtCustNameAdd_Followup.Text = Convert.ToString(ds_EnqDetails.Tables[0].Rows[0]["Customer"].ToString()) + System.Environment.NewLine + ds_EnqDetails.Tables[0].Rows[0]["Customer_Address"].ToString();
                if (ds_EnqDetails.Tables[8].Rows.Count > 0)
                {
                    gvFollowUp.DataSource = ds_EnqDetails.Tables[8];
                    gvFollowUp.DataBind();
                    ViewState["DtFollowUp"] = ds_EnqDetails.Tables[8];
                    FunPriFillFollowUp_Tab(_Edit);
                }
                else
                {
                    FunPriFillFollowUp_Tab(_Add);
                }
                #endregion

                FunPriLOBBasedvalidations(ddlLob.SelectedItem.Text, ddlLob.SelectedItem.Value, _Edit);
                //txtFacilityAmt.ReadOnly = true;
                if (ds_EnqDetails.Tables[9].Rows.Count > 0)
                {
                    lblTotalOutFlowAmount.Text = ds_EnqDetails.Tables[9].Rows[0].ItemArray[0].ToString();
                }

                if (type == "Enqr")
                {
                    // ddlSanctionNumber.Items.Clear();
                    if (ddlSanctionNumber.Items.Count > 0)
                    {
                        //ddlSanctionNumber.SelectedValue = ds_EnqDetails.Tables[10].Rows[0].ItemArray[0].ToString();
                        //FunPriLoadSanctionBaseDetails();
                    }
                }

                #region Outflow Details
                if (ds_EnqDetails.Tables[2].Rows.Count > 0)
                {
                    ViewState["DtCashFlowOut"] = ds_EnqDetails.Tables[2];
                    DataTable ObjDtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];

                    if (!string.IsNullOrEmpty(Convert.ToString(ObjDtCashFlowOut.Compute("Sum(Amount)", "CashFlow_Flag_ID = 41"))))
                    {
                        decimal decToatlFinanceAmt = (decimal)ObjDtCashFlowOut.Compute("Sum(Amount)", "CashFlow_Flag_ID = 41");

                        if (FunPriGetAmountFinanced() != decToatlFinanceAmt)
                        {
                            DataRow[] dtSuggestions = ObjDtCashFlowOut.Select("CashFlow_Flag_ID = 41");

                            foreach (DataRow dr in dtSuggestions)
                            {
                                dr.Delete();
                            }
                            ObjDtCashFlowOut.AcceptChanges();
                            ViewState["DtCashFlowOut"] = ObjDtCashFlowOut;
                        }
                    }
                    gvOutFlow.DataSource = ObjDtCashFlowOut;
                    gvOutFlow.DataBind();
                    if (strMode.ToUpper().Trim() == "C" || strMode.ToUpper().Trim() == "W")
                        FunPriFill_CashOutFlow(_Add);
                    else
                        FunPriFill_CashOutFlow(_Edit);
                    //if (ObjDtCashFlowOut.Rows.Count > 0)
                    //{
                    //    gvOutFlow.DataSource = ObjDtCashFlowOut;
                    //    gvOutFlow.DataBind();
                    //}

                    if (!string.IsNullOrEmpty(Convert.ToString(ObjDtCashFlowOut.Compute("Sum(Amount)", "CashFlow_Flag_ID = 41"))))
                    {
                        decimal decToatlOutflowAmt = (decimal)ObjDtCashFlowOut.Compute("Sum(Amount)", "CashFlow_Flag_ID > 0");
                        lblTotalOutFlowAmount.Text = decToatlOutflowAmt.ToString();
                    }
                    else
                    {
                        lblTotalOutFlowAmount.Text = "0";
                    }

                }
                #endregion

                if (ds_EnqDetails.Tables.Count > 11)
                {
                    if (ds_EnqDetails.Tables[11].Rows.Count > 0)
                    {
                        Panel8.Visible = true;
                        gvPRDDT.DataSource = ds_EnqDetails.Tables[11];
                        gvPRDDT.DataBind();
                    }
                }
                if ((hdnCustID.Value == "" || hdnCustID.Value == "0") && ddlEnquiryNumber.SelectedValue != "0")
                {
                    cmbCustomerCode.Enabled = true;
                    cmbCustomerCode.ReadOnly = false;
                    cmbCustomerCode.Attributes.Remove("readonly");
                    btnCreateCustomer.Enabled = true;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading data from Enquiry/Sanction Number");
            //cvPricing.ErrorMessage =strErrorMessagePrefix+ "Error in loading data from Enquiry/Sanction Number";
            //cvPricing.IsValid = false;
        }

    }

    private void LoadDetailsFromSanction(string strSanctionId, string strCustomer_Id)
    {
        try
        {
            string[] strIds = ddlSanctionNumber.SelectedValue.Split(',');
            txtSanctionDate.Text = "";
            txtFacilityAmt.Text = "";
            DataTable dtSanctionDetails = FunPriLoadSanctionBaseDetails();
            if (strIds[1].ToString() != "0")
            {
                FunPriLoadDetailsFromEnquiry(strIds[1].ToString(), "Sanc");
            }
            else
            {
                if (strIds[2].ToString() != "0")
                {
                    FunPriLoadCustomerCode();
                    hdnCustID.Value = strIds[2].ToString();
                    cmbCustomerCode.Enabled = false;
                    ddlEnquiryNumber.SelectedIndex = 0;
                    ddlEnquiryNumber.Enabled = false;
                    strCustomer_Id = strIds[2].ToString();
                    FunPriLoadAllCombos(strCustomer_Id, "cust");
                    //Removed By Shibu 18-Sep-2013
                    //FunPriLoadLObandBranch(intUserId, intCompany_Id);
                }
                System.Web.UI.WebControls.ListItem lstItem;
                ddlLob.Items.Clear();
                if (dtSanctionDetails.Rows.Count > 1)
                {
                    lstItem = new System.Web.UI.WebControls.ListItem("--Select--", "0");
                    ddlLob.Items.Add(lstItem);
                    foreach (DataRow drLOB in dtSanctionDetails.Rows)
                    {
                        lstItem = new System.Web.UI.WebControls.ListItem(drLOB["LOB"].ToString(), drLOB["LOB_ID"].ToString());
                        ddlLob.Items.Add(lstItem);
                    }
                }
                else
                {
                    lstItem = new System.Web.UI.WebControls.ListItem(dtSanctionDetails.Rows[0]["LOB"].ToString(), dtSanctionDetails.Rows[0]["LOB_ID"].ToString());
                    ddlLob.Items.Add(lstItem);
                    ddlLob.SelectedValue = dtSanctionDetails.Rows[0]["LOB_ID"].ToString();
                    FunPriLOBBasedvalidations(ddlLob.SelectedItem.Text, ddlLob.SelectedItem.Value, _Add);
                    FunPriLobReset();
                }

                ddlLob.Enabled = true;
                ddlBranch.Enabled = true;
                ddlProduct.Enabled = true;
            }
            FunPriSetMaxLength();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading data from Sanction Number");
            //cvPricing.ErrorMessage = "Error in loading data from Enquiry/Sanction Number";
            //cvPricing.IsValid = false;
        }
    }

    private DataTable FunPriLoadSanctionBaseDetails()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            string[] strIds = ddlSanctionNumber.SelectedValue.Split(',');
            rfvCustomerCode.Enabled = false;
            Procparam.Add("@Option", "5");
            Procparam.Add("@Company_ID", intCompany_Id.ToString());
            Procparam.Add("@Sanction_Id", strIds[0].ToString());
            //Changed for Bug ID 2012
            DataTable dtSanctionDetails = Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, Procparam);
            if (dtSanctionDetails.Rows.Count == 1)
            {

                txtSanctionDate.Text = DateTime.Parse(dtSanctionDetails.Rows[0]["Sanction_Date"].ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                txtFacilityAmt.Text = Convert.ToDecimal(dtSanctionDetails.Rows[0]["Sanction_Amount"].ToString()).ToString();//5366
            }
            //txtFacilityAmt.ReadOnly = true;
            return dtSanctionDetails;

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading base sanction details");
        }
    }

    /// <summary>
    /// Function for LOB based validation 
    /// </summary>
    /// <param name="strLobName"></param>
    /// <param name="strLobId"></param>
    /// <param name="strMode"></param>
    private void FunPriLOBBasedvalidations(string strLobName, string strLobId, string strMode)
    {

        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {
            if (strMode == _Add)
            {
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Is_Active", "1");
                Procparam.Add("@Company_ID", intCompany_Id.ToString());
                Procparam.Add("@LOB_ID", strLobId);
                ddlProduct.BindDataTable(SPNames.SYS_ProductMaster, Procparam, new string[] { "Product_ID", "Product_Code", "Product_Name" });
                Procparam.Add("@Option", "7");
                ddlROIRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, new string[] { "ROI_Rules_ID", "ROI_Rule_Number", "Model_Description" });
                txtLOB_Followup.Text = strLobName;
            }
            if (strMode == _Edit)
            {


                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Is_Active", "1");
                Procparam.Add("@Company_ID", intCompany_Id.ToString());
                Procparam.Add("@LOB_ID", strLobId);
                Procparam.Add("@Option", "13");
                //ddlConstitutionCodeList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, new string[] { "Constitution_ID", "Constitution_Code", "Constitution_Name" });
                txtLOB_Followup.Text = strLobName;

            }

            DataTable dtPLR = (DataTable)ViewState["IRRDetails"];
            dtPLR.DefaultView.RowFilter = "LOB_ID = " + strLobId;
            dtPLR = dtPLR.DefaultView.ToTable();
            hdnRoundOff.Value = "2";
            if (dtPLR.Rows.Count > 0)
            {
                hdnCTR.Value = dtPLR.Rows[0]["Corporate_Tax_Rate"].ToString();
                hdnPLR.Value = dtPLR.Rows[0]["Prime_Lending_Rate"].ToString();
                hdnRoundOff.Value = dtPLR.Rows[0]["Roundoff"].ToString();
                ViewState["hdnRoundOff"] = dtPLR.Rows[0]["Roundoff"].ToString();
            }

            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();


            ObjStatus.Option = 310;
            ObjStatus.Param1 = intCompany_Id.ToString();
            ObjStatus.Param2 = ddlLob.SelectedValue;
            DtCashFlow = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
            ViewState["CashInflowList"] = DtCashFlow;

            DropDownList ddlInflowDesc = gvInflow.FooterRow.FindControl("ddlInflowDesc") as DropDownList;
            if (ViewState["CashInflowList"] != null)
            {
                Utility.FillDLL(ddlInflowDesc, DtCashFlow, true);
            }

            ObjStatus.Option = 170;
            ObjStatus.Param1 = intCompany_Id.ToString();
            ObjStatus.Param2 = strLobId;
            DtCashFlow = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
            ViewState["RepayCashInflowList"] = DtCashFlow;

            DropDownList ddlRepaymentCashFlow_RepayTab = gvRepaymentDetails.FooterRow.FindControl("ddlRepaymentCashFlow_RepayTab") as DropDownList;
            Utility.FillDLL(ddlRepaymentCashFlow_RepayTab, DtCashFlow, true);

            //FunPriLOBBasedvalidations(ddlLob.SelectedItem.Text);

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Cannot Process for selected lob");
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="strType"></param>
    private void FunPriLOBBasedvalidations(string strType)
    {
        strType = strType.Split('-')[0].Trim();
        switch (strType.ToLower())
        {
            case "ol":  //Operating lease
                tcPricing.Tabs[2].Visible = true;
                rdnlAssetType.Visible = true;
                FunPriLANNumVisble(false);
                if (((DataTable)ViewState["ObjDTAssetDetails"]).Rows.Count > 0)
                {
                    rdnlAssetType.Enabled = false;
                    if (rdnlAssetType.SelectedIndex == 1)
                        FunPriLANNumVisble(true);
                }
                else
                {
                    rdnlAssetType.Enabled = true;
                    rdnlAssetType.SelectedIndex = 0;
                }
                txtRequiredFromDate.Enabled = true;
                //lblRequiredFromDate.CssClass = "styleReqFieldLabel";
                //CalendarExtenderSD_RequiredFromDate.Enabled = true;

                break;


            case "te": //Term loan Extensible
            case "tl": //Term loan
            case "ft": //Factoring 
            case "wc":
                //tcPricing.Tabs[2].Visible = false;
                lblRequiredFromDate.CssClass = "styleDisplayLabel";
                //UpdatePanel4.Update();
                CalendarExtenderSD_RequiredFromDate.Enabled = false;
                rdnlAssetType.Visible = false;
                rdnlAssetType.SelectedIndex = 0;
                rfvRequiredFromDate.Enabled = false;
                txtRequiredFromDate.Enabled = false;
                break;

            default://for default case
                tcPricing.Tabs[2].Visible = true;
                rdnlAssetType.Visible = false;
                lblRequiredFromDate.CssClass = "styleDisplayLabel";
                CalendarExtenderSD_RequiredFromDate.Enabled = false;
                FunPriLANNumVisble(false);
                rfvRequiredFromDate.Enabled = false;
                txtRequiredFromDate.Enabled = false;
                break;
        }
        //FunPriLobbasedRoi(strType);
    }

    #region Offer Tab

    private void FunPriFill_OfferTab(string Mode)
    {
        //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();

        try
        {
            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            if (Mode == _Add)
            {

                //ObjStatus.Option = 44;
                //ObjStatus.Param1 = S3G_Statu_Lookup.ORG_ROI_RULES_RATE_TYPE.ToString();
                //Utility.FillDLL(ddl_Rate_Type, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                //ObjStatus.Param1 = S3G_Statu_Lookup.ORG_ROI_RULES_RETURN_PATTERN.ToString();
                //Utility.FillDLL(ddl_Return_Pattern, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                //ObjStatus.Param1 = S3G_Statu_Lookup.ORG_ROI_RULES_TIME_VALUE.ToString();
                //Utility.FillDLL(ddl_Time_Value, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                //ObjStatus.Param1 = S3G_Statu_Lookup.ORG_ROI_RULES_FREQUENCY.ToString();
                //Utility.FillDLL(ddl_Frequency, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                //ObjStatus.Param1 = S3G_Statu_Lookup.ORG_ROI_RULES_REPAYMENT_MODE.ToString();
                //Utility.FillDLL(ddl_Repayment_Mode, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                ////ObjStatus.Param1 = S3G_Statu_Lookup.ORG_ROI_RULES_RATE.ToString();
                ////Utility.FillDLL(ddl_Rate, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                //ObjStatus.Param1 = S3G_Statu_Lookup.ORG_ROI_RULES_IRR_REST.ToString();
                //Utility.FillDLL(ddl_IRR_Rest, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                //ObjStatus.Param1 = S3G_Statu_Lookup.ORG_ROI_RULES_FREQUENCY.ToString();
                //Utility.FillDLL(ddl_Interest_Calculation, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                //ObjStatus.Param1 = S3G_Statu_Lookup.ORG_ROI_RULES_FREQUENCY.ToString();
                //Utility.FillDLL(ddl_Interest_Levy, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                //ObjStatus.Param1 = S3G_Statu_Lookup.ORG_ROI_RULES_INSURANCE.ToString();
                //Utility.FillDLL(ddl_Insurance, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                Dictionary<string, string> objParameters = new Dictionary<string, string>();
                DataSet dsROILov = Utility.GetDataset("S3G_ORG_LOADROILOV", objParameters);
                ddl_Rate_Type.BindDataTable(dsROILov.Tables[0]);
                ddl_Return_Pattern.BindDataTable(dsROILov.Tables[1]);
                ddl_Time_Value.BindDataTable(dsROILov.Tables[2]);
                ddl_Frequency.BindDataTable(dsROILov.Tables[3]);
                ddl_Repayment_Mode.BindDataTable(dsROILov.Tables[4]);
                ddl_IRR_Rest.BindDataTable(dsROILov.Tables[5]);
                ddl_Interest_Calculation.BindDataTable(dsROILov.Tables[3]);
                ddl_Interest_Levy.BindDataTable(dsROILov.Tables[3]);
                ddl_Insurance.BindDataTable(dsROILov.Tables[6]);

            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error filling offer terms tab");
        }
        //finally
        //{
        //    //if (ObjCustomerService != null)
        //        ObjCustomerService.Close();
        //}

    }

    private void FunPriLoad_ROIRule(string Mode)
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();

        try
        {
            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            DataTable ObjDTROI = new DataTable();
            if (Mode == _Add)
            {

                ObjStatus.Option = 40;
                ObjStatus.Param1 = ddlROIRuleList.SelectedValue;
                ObjDTROI = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                ViewState["ROIRules"] = ObjDTROI;


            }
            if (Mode == _Edit)
            {
                //DataTable ObjDTROI;
                ObjDTROI = (DataTable)ViewState["ROIRules"];

            }
            string strRoirValue;
            if (hdnROIRule.Value != "")
            {
                strRoirValue = hdnROIRule.Value;
            }
            else
            {
                strRoirValue = "0";
            }
            switch (ObjDTROI.Rows[0]["Repayment_Mode"].ToString())
            {
                case "3":
                    Dictionary<int, decimal> dictRecovery = new Dictionary<int, decimal>();
                    if (!string.IsNullOrEmpty(ObjDTROI.Rows[0]["Recovery_Pattern_Year1"].ToString()) && Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year1"].ToString()) != 0)
                        dictRecovery.Add(1, Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year1"].ToString()));

                    if (!string.IsNullOrEmpty(ObjDTROI.Rows[0]["Recovery_Pattern_Year2"].ToString()) && Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year2"].ToString()) != 0)
                        dictRecovery.Add(2, Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year2"].ToString()));

                    if (!string.IsNullOrEmpty(ObjDTROI.Rows[0]["Recovery_Pattern_Year3"].ToString()) && Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year3"].ToString()) != 0)
                        dictRecovery.Add(3, Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year3"].ToString()));

                    if (!string.IsNullOrEmpty(ObjDTROI.Rows[0]["Recovery_Pattern_Rest"].ToString()) && Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Rest"].ToString()) != 0)
                        dictRecovery.Add(4, Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Rest"].ToString()));

                    int inMax = dictRecovery.Keys.Max();
                    int intNoofYears = FunPriGetNoofYearsFromTenure();

                    if (inMax != 4)
                    {
                        if (inMax != intNoofYears)
                        {
                            div7.Visible = false;
                            ddlROIRuleList.SelectedValue = strRoirValue;
                            hdnROIRule.Value = "";
                            Utility.FunShowAlertMsg(this, "Tenure and Recovery Pattern are not matching");
                            return;
                        }

                    }
                    else
                    {
                        if (intNoofYears < 4)
                        {
                            div7.Visible = false;
                            ddlROIRuleList.SelectedValue = strRoirValue;
                            hdnROIRule.Value = "";
                            Utility.FunShowAlertMsg(this, "Tenure and Recovery Pattern are not matching");
                            return;
                        }
                    }
                    break;
            }

            if (Convert.ToInt32(ObjDTROI.Rows[0]["Return_Pattern"].ToString()) > 2)
            {
                if (ddlTenureType.SelectedItem.Text.Trim().ToUpper() != "MONTHS")
                {
                    Utility.FunShowAlertMsg(this, "Tenure type should be months for PTF/PLF/PMF");
                    div7.Visible = false;
                    ddlROIRuleList.SelectedValue = strRoirValue;
                    hdnROIRule.Value = "";
                    return;
                }
            }

            //Ol realted changes on 29-7-2011.
            if (txtResidualAmt_Cashflow.Text.Length > 0 || txtResidualValue_Cashflow.Text.Length > 0)
            {
                if (ObjDTROI.Rows[0]["Residual_Value"].ToString() != "1")
                {
                    ddlROIRuleList.SelectedValue = strRoirValue;
                    Utility.FunShowAlertMsg(this, "Residual value is given.choose the ROI rule with residual value");
                    if (strRoirValue != "0" && strRoirValue != string.Empty)
                        div7.Visible = true;
                    else
                        div7.Visible = false;
                    return;

                }
            }

            //Dec rate 
            if (!string.IsNullOrEmpty(ObjDTROI.Rows[0]["IRR_Rate"].ToString()))
            {
                ViewState["decRate"] = ObjDTROI.Rows[0]["IRR_Rate"].ToString();
            }

            if (ObjDTROI.Rows.Count > 0)
            {
                //panROIRules.Visible = true;
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Serial_Number"], tr_lblSerial_Number, txt_Serial_Number, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Model_Description"], tr_lblModel_Description, txt_Model_Description, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Rate_Type"], tr_lblRate_Type, ddl_Rate_Type, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["ROI_Rule_Number"], tr_lblROI_Rule_Number, txt_ROI_Rule_Number, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Return_Pattern"], tr_lblReturn_Pattern, ddl_Return_Pattern, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Time_Value"], tr_lblTime_Value, ddl_Time_Value, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Frequency"], tr_lblFrequency, ddl_Frequency, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Repayment_Mode"], tr_lblRepayment_Mode, ddl_Repayment_Mode, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Rate"], tr_lblRate, txtRate, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["IRR_Rest"], tr_lblIRR_Rest, ddl_IRR_Rest, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Interest_Calculation"], tr_lblInterest_Calculation, ddl_Interest_Calculation, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Interest_Levy"], tr_lblInterest_Levy, ddl_Interest_Levy, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Recovery_Pattern_Year1"], tr_lblRecovery_Pattern_Year1, txt_Recovery_Pattern_Year1, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Recovery_Pattern_Year2"], tr_lblRecovery_Pattern_Year2, txt_Recovery_Pattern_Year2, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Recovery_Pattern_Year3"], tr_lblRecovery_Pattern_Year3, txt_Recovery_Pattern_Year3, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Recovery_Pattern_Rest"], tr_lblRecovery_Pattern_Rest, txt_Recovery_Pattern_Rest, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Insurance"], tr_lblInsurance, ddl_Insurance, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Residual_Value"], tr_lblResidual_Value, chk_lblResidual_Value, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Margin"], tr_lblMargin, chk_lblMargin, Mode);
                FunPriShow_ROI_Forms(ObjDTROI.Rows[0]["Margin_Percentage"], tr_lblMargin_Percentage, txt_Margin_Percentage, Mode);
                //Here
                //FunPriLoadMarginResidual();


                if (ObjDTROI.Rows[0]["Margin"].ToString() == "1")
                {
                    txtMarginMoneyPer_Cashflow.Text = ObjDTROI.Rows[0]["Margin_Percentage"].ToString();
                    txtMarginAmountAsset.ReadOnly = false;
                    txtMarginMoneyPer_Cashflow.ReadOnly = true;
                    txtMarginMoneyAmount_Cashflow.ReadOnly = true;

                    txtMarginMoneyAmount_Cashflow.Text = FunPriGetMarginAmout().ToString();
                    rfvMarginPercent.Enabled = true;
                    txtMarginPercentage.ReadOnly = false;//Added for Margin field disable for margin not applicable
                }
                else
                {
                    txtMarginMoneyPer_Cashflow.Text = "";
                    txtMarginMoneyAmount_Cashflow.Text = "";
                    txtMarginAmountAsset.ReadOnly = true;
                    txtMarginMoneyPer_Cashflow.ReadOnly = true;
                    txtMarginMoneyAmount_Cashflow.ReadOnly = true;
                    rfvMarginPercent.Enabled = false;
                    txtMarginPercentage.ReadOnly = true;//Added for Margin field disable for margin not applicable
                }
                if (ObjDTROI.Rows[0]["Residual_Value"].ToString() == "1")
                {
                    txtResidualAmt_Cashflow.ReadOnly = false;
                    txtResidualValue_Cashflow.ReadOnly = false;
                    rfvResidualValue.Enabled = true;
                }
                else
                {
                    rfvResidualValue.Enabled = false;
                    txtResidualAmt_Cashflow.ReadOnly = true;
                    txtResidualValue_Cashflow.ReadOnly = true;
                    txtResidualAmt_Cashflow.Text = "";
                    txtResidualValue_Cashflow.Text = "";
                }
                FunPriSetRateMaxLength();
                /*hide the IRR panel visibility for WC,FT,TLE(Product) method as per Malolan raised on 23-feb-2012 start*/
                FunPriDisableIRRPanel();
                /*hide the IRR panel visibility for WC,FT,TLE(Product) method as per Malolan raised on 23-feb-2012 End*/
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading ROI Rules");
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }
    }

    private void FunPriLoad_PaymentRule()
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {
            DataTable ObjDTPayment = new DataTable();

            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Is_Active", "1");
            Procparam.Add("@Rules_ID", ddlPaymentRuleList.SelectedItem.Value);
            Procparam.Add("@Option", "10");
            ObjDTPayment = Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, Procparam);
            string vendor = ObjDTPayment.Rows[0]["Entity_Type"].ToString().ToLower();
            ViewState["ObjDTPayment"] = ObjDTPayment;
            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

            ObjStatus.Option = 1;
            ObjStatus.Param1 = S3G_Statu_Lookup.CASH_FLOW_FROM.ToString();


            DropDownList ddlEntityName_InFlowFrom = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
            DataTable dtCashFlowFrom = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

            switch (vendor)
            {
                case "vendor":
                    dtCashFlowFrom.Rows.RemoveAt(0);
                    break;
                case "customer":
                    dtCashFlowFrom.Rows.RemoveAt(1);
                    break;
            }
            ViewState["vendor"] = vendor;
            ViewState["CashFlowTo"] = dtCashFlowFrom;
            Utility.FillDLL(ddlEntityName_InFlowFrom, dtCashFlowFrom, true);
            DataTable ObjDTPaymentGen = new DataTable();
            DataColumn dc1 = new DataColumn("FieldName");
            DataColumn dc2 = new DataColumn("FieldValue");
            ObjDTPaymentGen.Columns.Add(dc1);
            ObjDTPaymentGen.Columns.Add(dc2);
            ViewState["PaymentRules"] = ObjDTPaymentGen;
            for (int i = 0; i < ObjDTPayment.Columns.Count; i++)
            {
                if (ObjDTPayment.Rows[0][i].ToString() != string.Empty)
                {
                    DataRow dr = ObjDTPaymentGen.NewRow();
                    dr[0] = ObjDTPayment.Columns[i].ColumnName.Replace("_", " ");
                    if (ObjDTPayment.Rows.Count > 0) dr[1] = ObjDTPayment.Rows[0][i].ToString();
                    else dr[1] = string.Empty;
                    ObjDTPaymentGen.Rows.Add(dr);
                }
            }
            gvPaymentRuleDetails.DataSource = ObjDTPaymentGen;
            gvPaymentRuleDetails.DataBind();


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading Payment rule card");
        }
        finally
        {
            ObjCustomerService.Close();
        }


    }

    private void FunPriUpdateROIRule()
    {
        DataTable ObjDTROI;
        ObjDTROI = (DataTable)ViewState["ROIRules"];
        ObjDTROI.Rows[0]["Serial_Number"] = txt_Serial_Number.Text == "" ? 0 : Convert.ToInt64(txt_Serial_Number.Text);
        ObjDTROI.Rows[0]["Model_Description"] = txt_Model_Description.Text;
        ObjDTROI.Rows[0]["Rate_Type"] = ddl_Rate_Type.SelectedValue;
        ObjDTROI.Rows[0]["ROI_Rule_Number"] = txt_ROI_Rule_Number.Text;
        ObjDTROI.Rows[0]["Return_Pattern"] = ddl_Return_Pattern.SelectedValue;
        ObjDTROI.Rows[0]["Time_Value"] = ddl_Time_Value.SelectedValue;
        ObjDTROI.Rows[0]["Frequency"] = ddl_Frequency.SelectedValue;
        ObjDTROI.Rows[0]["Repayment_Mode"] = ddl_Repayment_Mode.SelectedValue;
        if (!string.IsNullOrEmpty(txtRate.Text))
            ObjDTROI.Rows[0]["Rate"] = txtRate.Text;
        ObjDTROI.Rows[0]["IRR_Rest"] = ddl_IRR_Rest.SelectedValue;
        ObjDTROI.Rows[0]["Interest_Calculation"] = ddl_Interest_Calculation.SelectedValue;
        ObjDTROI.Rows[0]["Interest_Levy"] = ddl_Interest_Levy.SelectedValue;
        ObjDTROI.Rows[0]["Recovery_Pattern_Year1"] = txt_Recovery_Pattern_Year1.Text;
        ObjDTROI.Rows[0]["Recovery_Pattern_Year2"] = txt_Recovery_Pattern_Year2.Text;
        ObjDTROI.Rows[0]["Recovery_Pattern_Year3"] = txt_Recovery_Pattern_Year3.Text;
        ObjDTROI.Rows[0]["Recovery_Pattern_Rest"] = txt_Recovery_Pattern_Rest.Text;
        ObjDTROI.Rows[0]["Insurance"] = ddl_Insurance.SelectedValue;
        ObjDTROI.Rows[0]["Residual_Value"] = chk_lblResidual_Value.Checked;
        ObjDTROI.Rows[0]["Margin"] = chk_lblMargin.Checked;
        ObjDTROI.Rows[0]["Margin_Percentage"] = txt_Margin_Percentage.Text == "" ? 0 : Convert.ToDecimal(txt_Margin_Percentage.Text);
        ObjDTROI.Rows[0].AcceptChanges();
        ViewState["ROIRules"] = ObjDTROI;
    }

    private void FunPriShow_ROI_Forms(Object Data, System.Web.UI.HtmlControls.HtmlTableRow rRow, Object ObjCtl, string str_Mode)
    {
        try
        {
            bool blnIsRowEnable = false;
            if (!string.IsNullOrEmpty(Convert.ToString(Data)))
            {
                //if (PaintBG)
                //{
                //    if (this.Theme == "S3GTheme_Silver")
                //    {
                //        rRow.BgColor = "#d6d7e0";
                //    }
                //    else if (this.Theme == "S3GTheme_Blue")
                //    {
                //        rRow.BgColor = "aliceblue";
                //    }
                //    else
                //    {
                //        rRow.BgColor = "#f9f9f9";
                //    }
                //    PaintBG = false;

                //}
                //else
                //{
                //    PaintBG = true;
                //}
                rRow.Visible = true;

                if (ObjCtl.GetType().Name == "TextBox")
                {
                    TextBox txtBox = ((TextBox)ObjCtl);
                    txtBox.Text = Convert.ToString(Data);
                    if (txtBox.ID == "txtRate" || txtBox.ID == "txt_Margin_Percentage")
                        blnIsRowEnable = true;
                }
                if (ObjCtl.GetType().Name == "DropDownList")
                {
                    DropDownList DDL = new DropDownList();

                    DDL = ((DropDownList)ObjCtl);

                    if (DDL.ID == "ddl_Time_Value" || DDL.ID == "ddl_Frequency" || DDL.ID == "ddl_Insurance")
                        blnIsRowEnable = true;

                    if (DDL.Items.Count > 0)
                    {
                        if (Convert.ToString(Data) != "0")
                            DDL.SelectedValue = Convert.ToString(Data);
                    }
                }
                if (ObjCtl.GetType().Name == "CheckBox")
                {
                    ((CheckBox)ObjCtl).Checked = Convert.ToBoolean(Data);
                }

                if (ddlROIRuleList.SelectedItem.Text.ToUpper().Contains("RRA"))//ROI Rule number selected in drop down
                    //rRow.Disabled = true;
                    ((WebControl)ObjCtl).Enabled = false;
                else
                {

                    if (blnIsRowEnable)
                        //rRow.Disabled = false;
                        ((WebControl)ObjCtl).Enabled = true;
                    else
                        //rRow.Disabled = true;
                        ((WebControl)ObjCtl).Enabled = false;

                    if (Request.QueryString["qsMode"].ToString() == "Q")
                        //    //rRow.Disabled = true;
                        ((WebControl)ObjCtl).Enabled = false;
                }

            }
            else
            {
                if (ObjCtl.GetType().Name == "DropDownList")
                {
                    ((DropDownList)ObjCtl).SelectedIndex = 0;
                }
                if (ObjCtl.GetType().Name == "TextBox")
                {
                    ((TextBox)ObjCtl).Text = "";
                }
                if (ObjCtl.GetType().Name == "CheckBox")
                {
                    ((CheckBox)ObjCtl).Checked = false;
                }
                rRow.Visible = false;
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loding ROI Controls");
        }
    }

    #region Cash In Flows Grid

    private void FunPriFill_CashInFlow(string Mode)
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {

            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            if (Mode == _Add)
            {
                gvInflow.ClearGrid();
                //ObjStatus.Option = 310;
                //ObjStatus.Param1 = intCompany_Id.ToString();
                //ObjStatus.Param2 = ddlLob.SelectedValue;
                //DtCashFlow = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                //ViewState["CashInflowList"] = DtCashFlow;

                //ObjStatus.Option = 170;
                //ObjStatus.Param1 = intCompany_Id.ToString();
                //ObjStatus.Param2 = ddlLob.SelectedValue;
                //DtCashFlow = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                //ViewState["RepayCashInflowList"] = DtCashFlow;
                //DtCashFlow.Dispose();

                ObjStatus.Option = 1;
                ObjStatus.Param1 = S3G_Statu_Lookup.CASH_FLOW_FROM.ToString();
                ViewState["CashFlowFrom"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                ObjStatus.Option = 38;
                ObjStatus.Param1 = intCompany_Id.ToString();
                DtFollowUp = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                ViewState["EntityMasterList"] = DtFollowUp;


                //Code Modified by nataraj
                //ObjStatus.Option = 50;
                //ObjStatus.Param1 = null;
                //DtCashFlow = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                DtCashFlow = new DataTable();
                DtCashFlow.Columns.Add("Date");
                DtCashFlow.Columns.Add("CashInFlowID");
                DtCashFlow.Columns.Add("CashInFlow");
                DtCashFlow.Columns.Add("EntityID");
                DtCashFlow.Columns.Add("Entity");
                DtCashFlow.Columns.Add("InflowFromId");
                DtCashFlow.Columns.Add("InflowFrom");
                DtCashFlow.Columns.Add("Amount", typeof(decimal));
                DtCashFlow.Columns.Add("Accounting_IRR");
                DtCashFlow.Columns.Add("Business_IRR");
                DtCashFlow.Columns.Add("Company_IRR");
                DtCashFlow.Columns.Add("CashFlow_Flag_ID", typeof(int));

                DataRow dr = DtCashFlow.NewRow();
                dr["Date"] = "01/01/1900";
                dr["CashInFlowID"] = "";
                dr["CashInFlow"] = "";
                dr["EntityID"] = "";
                dr["Entity"] = "";
                dr["InflowFromId"] = "";
                dr["InflowFrom"] = "";
                dr["Amount"] = 0;
                dr["Accounting_IRR"] = "";
                dr["Business_IRR"] = "";
                dr["Company_IRR"] = "";
                dr["CashFlow_Flag_ID"] = 0;
                DtCashFlow.Rows.Add(dr);
                //In flow grid




            }
            if (Mode == _Edit)
            {
                //ObjStatus.Option = 310;
                //ObjStatus.Param1 = intCompany_Id.ToString();
                //ObjStatus.Param2 = ddlLob.SelectedValue;
                //DtCashFlow = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                //ViewState["CashInflowList"] = DtCashFlow;

                //ObjStatus.Option = 170;
                //ObjStatus.Param1 = intCompany_Id.ToString();
                //ObjStatus.Param2 = ddlLob.SelectedValue;
                //DtCashFlow = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                //ViewState["RepayCashInflowList"] = DtCashFlow;
                //DtCashFlow.Dispose();

                ObjStatus.Option = 1;
                ObjStatus.Param1 = S3G_Statu_Lookup.CASH_FLOW_FROM.ToString();
                ViewState["CashFlowFrom"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                ObjStatus.Option = 38;
                ObjStatus.Param1 = intCompany_Id.ToString();
                DtFollowUp = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                ViewState["EntityMasterList"] = DtFollowUp;

                if ((DataTable)ViewState["DtCashFlow"] != null)
                    DtCashFlow = (DataTable)ViewState["DtCashFlow"];

            }

            gvInflow.DataSource = DtCashFlow;
            gvInflow.DataBind();
            if (Mode == _Add)
            {
                DtCashFlow.Rows.Clear();
                ViewState["DtCashFlow"] = DtCashFlow;
                DtCashFlow.Dispose();
                gvInflow.Rows[0].Cells.Clear();
                gvInflow.Rows[0].Visible = false;

            }

            FunPriFillCashInflow_ViewState();


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in filling cash inflow details");
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }
    }

    private void FunPriFillCashInflow_ViewState()
    {
        try
        {
            DropDownList ddlInflowDesc = gvInflow.FooterRow.FindControl("ddlInflowDesc") as DropDownList;
            // DropDownList ddlEntityName_InFlow = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as DropDownList;
            DropDownList ddlEntityName_InFlowFrom = gvInflow.FooterRow.FindControl("ddlEntityName_InFlowFrom") as DropDownList;
            if (ViewState["CashInflowList"] != null)
            {
                Utility.FillDLL(ddlInflowDesc, ((DataTable)ViewState["CashInflowList"]), true);
            }
            Utility.FillDLL(ddlEntityName_InFlowFrom, ((DataTable)ViewState["CashFlowFrom"]), true);
            //SetWhiteSpaceDLL(ddlEntityName_InFlowFrom);
            ddlEntityName_InFlowFrom.SelectedIndex = 0;

            TextBox txtDate_GridInflow1 = gvInflow.FooterRow.FindControl("txtDate_GridInflow") as TextBox;
            txtDate_GridInflow1.Attributes.Add("readonly", "readonly");
            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_InflowDate1 = gvInflow.FooterRow.FindControl("CalendarExtenderSD_InflowDate") as AjaxControlToolkit.CalendarExtender;
            CalendarExtenderSD_InflowDate1.Format = ObjS3GSession.ProDateFormatRW;


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in filling cash inflow form viewstate");
        }
    }

    #endregion

    #region Cash Out Flow Grid

    private void FunPriFill_CashOutFlow(string Mode)
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {
            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            if (Mode == _Add)
            {
                ObjStatus.Option = 311;//171
                ObjStatus.Param1 = intCompany_Id.ToString();
                ObjStatus.Param2 = ddlLob.SelectedValue;
                ViewState["CashOutflowList"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                ObjStatus.Option = 1;
                ObjStatus.Param1 = S3G_Statu_Lookup.CASH_FLOW_FROM.ToString();
                if (ViewState["CashFlowTo"] != null)
                    ViewState["CashFlowTo"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);



                //Code modified by Nataraj Y
                //Out flow grid
                //ObjStatus.Option = 51;
                //DtCashFlowOut = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                DtCashFlowOut = new DataTable();
                DtCashFlowOut.Columns.Add("Date");
                DtCashFlowOut.Columns.Add("CashOutFlowID");
                DtCashFlowOut.Columns.Add("CashOutFlow");
                DtCashFlowOut.Columns.Add("EntityID");
                DtCashFlowOut.Columns.Add("Entity");
                DtCashFlowOut.Columns.Add("OutflowFromId");
                DtCashFlowOut.Columns.Add("OutflowFrom");
                DtCashFlowOut.Columns.Add("Amount", typeof(decimal));
                DtCashFlowOut.Columns.Add("Accounting_IRR");
                DtCashFlowOut.Columns.Add("Business_IRR");
                DtCashFlowOut.Columns.Add("Company_IRR");
                DtCashFlowOut.Columns.Add("CashFlow_Flag_ID", typeof(int));
                DataRow dr_out = DtCashFlowOut.NewRow();
                dr_out["Date"] = "01/01/1900";
                dr_out["CashOutFlowID"] = "";
                dr_out["CashOutFlow"] = "";
                dr_out["EntityID"] = "";
                dr_out["Entity"] = "";
                dr_out["OutflowFromId"] = "";
                dr_out["OutflowFrom"] = "";
                dr_out["Amount"] = "0";
                dr_out["Accounting_IRR"] = "";
                dr_out["Business_IRR"] = "";
                dr_out["Company_IRR"] = "";
                dr_out["CashFlow_Flag_ID"] = 0;
                DtCashFlowOut.Rows.Add(dr_out);




            }
            if (Mode == _Edit)
            {
                ObjStatus.Option = 171;
                ObjStatus.Param1 = intCompany_Id.ToString();
                ObjStatus.Param2 = ddlLob.SelectedValue;
                ViewState["CashOutflowList"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                //ObjStatus.Option = 1;
                //ObjStatus.Param1 = S3G_Statu_Lookup.CASH_FLOW_FROM.ToString();
                //if (ViewState["CashFlowTo"] != null)
                //    ViewState["CashFlowTo"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                if ((DataTable)ViewState["DtCashFlowOut"] != null)
                    DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
            }

            gvOutFlow.DataSource = DtCashFlowOut;
            gvOutFlow.DataBind();

            if (Mode == _Add)
            {

                DtCashFlowOut.Rows.Clear();
                ViewState["DtCashFlowOut"] = DtCashFlowOut;
                DtCashFlowOut.Dispose();

                gvOutFlow.Rows[0].Cells.Clear();
                gvOutFlow.Rows[0].Visible = false;
            }
            FunPriFillCashOutflow_ViewState();

            if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count > 0)
            {

                lblTotalOutFlowAmount.Text = ((DataTable)ViewState["DtCashFlowOut"]).
                    Compute("sum(Amount)", "CashOutFlowID > 0").ToString();




            }
            else
                lblTotalOutFlowAmount.Text = "0";

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in filling cash outflow details");
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }
    }


    private void FunPriFillCashOutflow_ViewState()
    {
        try
        {
            DropDownList ddlInflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
            Utility.FillDLL(ddlInflowDesc, ((DataTable)ViewState["CashOutflowList"]), true);

            DropDownList ddlEntityName_InFlowFrom = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
            if (ViewState["CashFlowTo"] != null)
            {
                DataTable dtCashFlowFrom = (DataTable)ViewState["CashFlowTo"];
                string vendor = (string)ViewState["vendor"];
                if (dtCashFlowFrom.Rows.Count > 1)
                {
                    switch (vendor)
                    {
                        case "vendor":
                            dtCashFlowFrom.Rows.RemoveAt(0);
                            break;
                        case "customer":
                            dtCashFlowFrom.Rows.RemoveAt(1);
                            break;
                    }
                    ViewState["CashFlowTo"] = dtCashFlowFrom;
                }
                Utility.FillDLL(ddlEntityName_InFlowFrom, dtCashFlowFrom, true);
            }



        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in filling cash outflow form viewstate");
        }
    }

    protected void FunProBindCashFlow()
    {
        DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
        if (!string.IsNullOrEmpty(Convert.ToString(((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 41"))))
        {
            decimal decToatlFinanceAmt = (decimal)DtCashFlowOut.Compute("Sum(Amount)", "CashFlow_Flag_ID = 41");

            if (FunPriGetAmountFinanced() < decToatlFinanceAmt)
            {

                DtCashFlowOut.Rows.RemoveAt(DtCashFlowOut.Rows.Count - 1);
                ViewState["DtCashFlowOut"] = DtCashFlowOut;
                // cvPricing.ValidationGroup = "TabOfferTerms2";
                throw new ApplicationException("Total finance amount in cashoutflow should be equal to amount financed");
                //decToatlFinanceAmt = (decimal)DtCashFlowOut.Compute("Sum(Amount)", "CashFlow_Flag_ID = 41");
                //return;
            }
        }

        if (DtCashFlowOut.Rows.Count > 0)
        {
            decimal decToatlOutflowAmt = (decimal)DtCashFlowOut.Compute("Sum(Amount)", "CashFlow_Flag_ID > 0");
            lblTotalOutFlowAmount.Text = decToatlOutflowAmt.ToString();
            gvOutFlow.DataSource = DtCashFlowOut;
            gvOutFlow.DataBind();
            FunPriFillCashOutflow_ViewState();
        }
        else
        {
            FunPriFill_CashOutFlow(_Add);
        }

        FunPriIRRReset();
    }

    #endregion



    #endregion

    #region Asset Tab

    private void FunPriLoad_AssetDetails(string Mode)
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {
            DataTable ObjDTAssetDetails = new DataTable();
            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            ObjStatus.Option = 61;
            ObjStatus.Param1 = "0";
            ObjDTAssetDetails = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

            if (ObjDTAssetDetails.Rows.Count == 0)
            {
                ObjDTAssetDetails.Rows.Add();
                ObjDTAssetDetails.Columns.Add("AssetValue", typeof(decimal));
                gvAssetDetails.DataSource = ObjDTAssetDetails;
                gvAssetDetails.DataBind();

                gvAssetDetails.Rows[0].Cells.Clear();
                gvAssetDetails.Rows[0].Visible = false;
                gvAssetDetails.Visible = false;
                ObjDTAssetDetails.Rows.Clear();
            }
            else
            {
                gvAssetDetails.DataSource = ObjDTAssetDetails;
                gvAssetDetails.DataBind();
                gvAssetDetails.Columns[1].Visible = false;
                gvAssetDetails.Columns[11].Visible = false;
            }

            ViewState["ObjDTAssetDetails"] = ObjDTAssetDetails;


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading asset details");
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }
    }

    private void FunPriFill_AssetTab(string Mode)
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {
            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            if (Mode == _Add)
            {
                //ObjStatus.Option = 30;
                //ObjStatus.Param1 = intCompany_Id.ToString();
                //Utility.FillDLL(ddlAssetCodeList, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                FunProLoadAssetValue("NEW");

                //Dictionary<string, string> dictParam = new Dictionary<string, string>();
                //DataTable DtRate = new DataTable(); ;
                //dictParam.Add("@OPTION", "2");
                //dictParam.Add("@COMPANYID", intCompany_Id.ToString());
                //DtRate = Utility.GetDataset("S3G_ORG_GETAPPLICATIONASSET", dictParam).Tables[0];
                //ddlAssetCodeList.DataSource = DtRate;
                //ddlAssetCodeList.DataTextField = "Asset_Code";
                //ddlAssetCodeList.DataValueField = "Asset_ID";
                //ddlAssetCodeList.DataBind();
                //ddlAssetCodeList.Items.Insert(0, new System.Web.UI.WebControls.ListItem("--Select--", "0"));
                //ddlAssetCodeList.SelectedIndex = 0;
                //ViewState["RateDt1"] = DtRate;

                //dictParam = new Dictionary<string, string>();
                /* for OL change
                 
                dictParam.Add("@OPTION", "1");
                dictParam.Add("@COMPANYID", intCompany_Id.ToString());
                DtRate = Utility.GetDefaultData("S3G_ORG_GETAPPLICATIONASSET", dictParam);
                if (DtRate.Rows.Count > 0)
                {
                    ddlLeaseAssetNo.DataSource = DtRate;
                    ddlLeaseAssetNo.DataTextField = "Asset_Code";
                    ddlLeaseAssetNo.DataValueField = "Asset_ID";
                    ddlLeaseAssetNo.DataBind();
                    ViewState["RateDt2"] = DtRate;
                }
                ddlLeaseAssetNo.Items.Insert(0, new System.Web.UI.WebControls.ListItem("--Select--", "0"));
                 * 
                for OL change*/
                //ObjStatus.Option = 38;
                //ObjStatus.Param1 = intCompany_Id.ToString();
                //DtFollowUp = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                //ViewState["EntityMasterList"] = DtFollowUp;

                //DtFollowUp.Dispose();
                FunPriLoad_AssetDetails(Mode);
            }

            if (Mode == _Edit)
            {
                ObjStatus.Option = 30;
                ObjStatus.Param1 = intCompany_Id.ToString();
                //Utility.FillDLL(ddlAssetCodeList, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in filling Asset Tab");
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }

    }
    private void FunPriResetAssetDetails()
    {
        txtUnitCount.Text = "1";
        txtUnitValue.Text = "";
        txtTotalAssetValue.Text = "";
        txtMarginAmountAsset.Text = "";
        txtMarginPercentage.Text = "";
        txtRequiredFromDate.Text = "";
        txtBlockDepreciationPerc.Text = "";
        txtBookDepreciationPerc.Text = "";
        txtStatus.Text = "";
        //ddlAssetCodeList.SelectedIndex = -1;
        ddlLeaseAssetNo.SelectedIndex = -1;
    }
    protected void FunProBindAssetGrid()
    {
        DataTable ObjDTAssetDetail = new DataTable();
        if (ViewState["ObjDTAssetDetails"] != null)
            ObjDTAssetDetail = (DataTable)ViewState["ObjDTAssetDetails"];

        if (ObjDTAssetDetail.Rows.Count == 0)
            lblTotalAssetAmount.Text = "0";
        else
            lblTotalAssetAmount.Text = ((decimal)ObjDTAssetDetail.Compute("Sum(AssetValue)", "AssetValue > 0")).ToString();


        if (chk_lblMargin.Checked)
        {
            txtMarginMoneyAmount_Cashflow.Text = FunPriGetMarginAmout().ToString();
        }

        gvAssetDetails.DataSource = ObjDTAssetDetail;
        gvAssetDetails.DataBind();
        gvAssetDetails.Columns[1].Visible = false;
        gvAssetDetails.Columns[11].Visible = false;
        //added by saranya
        if (ObjDTAssetDetail.Rows.Count > 0)
        {
            if (Convert.ToInt32(ObjDTAssetDetail.Rows[0]["Status_Code"].ToString()) != 0)
            {
                gvAssetDetails.Columns[12].Visible = true;
            }
        }
        //end 
        gvAssetDetails.Visible = true;
        if (ddlLob.SelectedItem.Text.Split('-')[0].ToLower().StartsWith("ol"))
        {

            txtFacilityAmt.Text = Convert.ToDecimal(lblTotalAssetAmount.Text).ToString();//5366

        }


    }

    private void FunPriFillDepreciationRate(DataTable RateDt, UserControls_S3GAutoSuggest dfd)
    {
        txtBookDepreciationPerc.Text = "";
        txtBlockDepreciationPerc.Text = "";
        txtUnitValue.Text = "";
        DataRow[] DrRate = (RateDt.Select("Asset_Id = '" + ddlAssetCodeList1.SelectedValue.ToString() + "'"));

        if (DrRate.Length > 0)
        {
            txtBookDepreciationPerc.Text = DrRate[0]["Book_Depreciation_Rate"].ToString();
            txtBlockDepreciationPerc.Text = DrRate[0]["Block_Depreciation_Rate"].ToString();
            txtUnitValue.Text = DrRate[0]["Assetvalue"].ToString();
        }

    }

    #endregion

    #region Repayment Details Tab

    private void FunPriFill_Repayment_Tab(string Mode)
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {

            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            if (Mode == _Add)
            {
                gvRepaymentDetails.ClearGrid();
                ObjStatus.Option = 52;
                DtRepayGrid = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);


            }
            if (Mode == _Edit)
            {
                if ((DataTable)ViewState["DtRepayGrid"] != null)
                    DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];

            }

            gvRepaymentDetails.DataSource = DtRepayGrid;
            gvRepaymentDetails.DataBind();

            if (Mode == _Add)
            {
                DtRepayGrid.Rows.Clear();
                ViewState["DtRepayGrid"] = DtRepayGrid;
                //For TL
                ViewState["DtRepayGrid_TL"] = null;
                gvRepaymentDetails.Rows[0].Cells.Clear();
                gvRepaymentDetails.Rows[0].Visible = false;

                //gvRepaymentSummary.ClearGrid();

            }

            FunPriFillRepayment_ViewState();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error filling Repayment Tab");
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }
    }

    private void FunPriFillRepayment_ViewState()
    {
        try
        {
            DropDownList ddlRepaymentCashFlow_RepayTab = gvRepaymentDetails.FooterRow.FindControl("ddlRepaymentCashFlow_RepayTab") as DropDownList;
            if (ViewState["RepayCashInflowList"] != null)
            {
                Utility.FillDLL(ddlRepaymentCashFlow_RepayTab, ((DataTable)ViewState["RepayCashInflowList"]), true);

            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in loading repayment details from viewstate");
        }
    }

    private bool FunPriValidateTotalAmount(out decimal decActualAmount, out decimal decTotalAmount, string strOption)
    {
        decimal decFinAmount = FunPriGetAmountFinanced();

        if (strOption != "3")
        {

            decTotalAmount = decFinAmount + FunPriGetInterestAmount();
        }
        else
        {
            decTotalAmount = decFinAmount;
        }
        decActualAmount = 0;
        if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count <= 0)
        {
            cvPricing.ErrorMessage = strErrorMessagePrefix + "Correct the following validation(s): <br/><br/>  Add atleast one row Repayment details";
            cvPricing.IsValid = false;
            return false;
        }
        DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];

        // decActualAmount = Math.Round((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(TotalPeriodInstall)", "CashFlow_Flag_ID = 23"), 0);
        if (!((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))))
        {
            decActualAmount = Math.Round((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(TotalPeriodInstall)", "CashFlow_Flag_ID = 23"), 0);
        }
        else
        {
            DataRow[] dr = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23");
            if (dr.Length > 0)
            {
                decActualAmount = Math.Round((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(TotalPeriodInstall)", "CashFlow_Flag_ID = 23"), 0);
            }
            else
            {
                decActualAmount = Math.Round((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(TotalPeriodInstall)", "CashFlow_Flag_ID IN(91,35)"), 0);
            }

        }

        if (strOption == "1")
        {
            if (decActualAmount > decTotalAmount)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        else if (strOption == "2")
        {
            if (decActualAmount == decTotalAmount)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else if (strOption == "3")
        {
            if (decActualAmount >= decTotalAmount)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }

    private bool FunPriValidateTenurePeriod(DateTime dtStartDate, DateTime dtEndDate)
    {
        DateTime dateInterval = new DateTime();

        switch (ddlTenureType.SelectedItem.Text.ToLower())
        {
            case "months":
                dateInterval = dtStartDate.AddMonths(Convert.ToInt32(txtTenure.Text));
                break;
            case "weeks":

                int intAddweeks = Convert.ToInt32(txtTenure.Text) * 7;
                dateInterval = dtStartDate.AddDays(intAddweeks);
                break;
            case "days":
                dateInterval = dtStartDate.AddDays(Convert.ToInt32(txtTenure.Text));
                break;
        }

        if (dtEndDate > dateInterval)
        {
            return false;
        }
        else
        {
            return true;
        }

    }

    private bool FunPriValidateTenurePeriod(int intActualTenurePeriod)
    {
        if (intActualTenurePeriod == Convert.ToInt32(txtTenure.Text))
        {
            return true;
        }
        else
        {
            return false;
        }

    }

    private void FunPriCalculateSummary(DataTable objDataTable, string strGroupByField, string strSumField)
    {
        try
        {
            DataTable dtSummaryDetails = Utility.FunPriCalculateSumAmount(objDataTable, strGroupByField, strSumField);
            DataRow[] dr = dtSummaryDetails.Select("1=1");
            dr[0]["TotalPeriodInstall"] = Math.Round(Convert.ToDecimal( dr[0]["TotalPeriodInstall"]),3);
            dtSummaryDetails.AcceptChanges();
            gvRepaymentSummary.DataSource = dtSummaryDetails;
            gvRepaymentSummary.DataBind();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in calculating Summary");
        }

    }

    private void FunFillNextInstallmentDate()
    {
        DataRow[] drIstallmentRow;// = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23", "ToInstall Desc");
        if (!((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))))
        {
            drIstallmentRow = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23", "ToInstall Desc");
        }
        else
        {
            DataRow[] dr = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23");
            if (dr.Length > 0)
            {
                drIstallmentRow = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23", "ToInstall Desc"); ;
            }
            else
            {
                drIstallmentRow = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID IN(91,35)", "ToInstall Desc"); ;
            }

        }


        if (drIstallmentRow.Count() > 0)
        {

            TextBox txtFromInstallment_RepayTab1_upd = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;
            //txtFromInstallment_RepayTab1_upd.Text = drIstallmentRow[0][6].ToString();
            txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(Convert.ToDecimal(drIstallmentRow[0][6].ToString()) + Convert.ToInt32("1"));
            TextBox txtfromdate_RepayTab1_Upd = gvRepaymentDetails.FooterRow.FindControl("txtfromdate_RepayTab") as TextBox;
            //txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(drIstallmentRow[0][8].ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);

            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
            objRepaymentStructure.dtNextDate = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedValue, Utility.StringToDate(Convert.ToDateTime(drIstallmentRow[0][8].ToString()).ToString(strDateFormat)));
            txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);

        }
    }


    private void FunPriDoCashflowBasedValidation(DropDownList ddlCashFlowDesc)
    {
        try
        {
            if (ddlCashFlowDesc.SelectedIndex > 0)
            {
                string[] strvalues = ddlCashFlowDesc.SelectedValue.Split(',');
                DropDownList ddlRepaymentCashFlow_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("ddlRepaymentCashFlow_RepayTab") as DropDownList;
                TextBox txtFromInstallment_RepayTab1_upd = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;
                TextBox txtfromdate_RepayTab1_Upd = gvRepaymentDetails.FooterRow.FindControl("txtfromdate_RepayTab") as TextBox;
                TextBox txtPerInstallmentAmount_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtPerInstallmentAmount_RepayTab") as TextBox;
                TextBox txtBreakup_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtBreakup_RepayTab") as TextBox;

                AjaxControlToolkit.CalendarExtender CalendarExtenderSD_ToDate_RepayTab = gvRepaymentDetails.FooterRow.FindControl("CalendarExtenderSD_ToDate_RepayTab") as AjaxControlToolkit.CalendarExtender;
                AjaxControlToolkit.CalendarExtender CalendarExtenderSD_fromdate_RepayTab = gvRepaymentDetails.FooterRow.FindControl("CalendarExtenderSD_fromdate_RepayTab") as AjaxControlToolkit.CalendarExtender;
                //!=23 for checking cash flows other than Installment.Since 23 is the cashflow flag for Installment

                CalendarExtenderSD_fromdate_RepayTab.Enabled = false;
                txtfromdate_RepayTab1_Upd.Attributes.Add("readonly", "readonly");
                txtfromdate_RepayTab1_Upd.ReadOnly = true;

                if (!ddlLob.SelectedItem.Text.Contains("TL"))
                {
                    if (strvalues[4].ToString() != "23")
                    {
                        txtFromInstallment_RepayTab1_upd.Attributes.Remove("readonly");
                        txtFromInstallment_RepayTab1_upd.ReadOnly = false;
                        CalendarExtenderSD_ToDate_RepayTab.Enabled = false;
                        CalendarExtenderSD_fromdate_RepayTab.Enabled = false;
                        txtfromdate_RepayTab1_Upd.Text = "";
                        txtBreakup_RepayTab1.Text = "";
                        txtBreakup_RepayTab1.Attributes.Add("readonly", "readonly");
                    }
                    else
                    {
                        if (ddl_Time_Value.SelectedValue == "2" || ddl_Time_Value.SelectedValue == "4")
                        {
                            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                            objRepaymentStructure.dtNextDate = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedValue, Utility.StringToDate(DateTime.Now.ToString(strDateFormat)));
                            if (gvRepaymentDetails.Rows.Count > 0 && txtfromdate_RepayTab1_Upd.Text == "")  // 24 Jan 2012 By Rao. Fixed Observation- From Date Overlapping issue while selecting cashflow. 
                                txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                        }
                        else
                        {
                            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                            objRepaymentStructure.FunPubGetNextRepaydate((DataTable)ViewState["DtRepayGrid"], ddl_Frequency.SelectedValue);
                            txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(objRepaymentStructure.intNextInstall + 1);
                            txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                        }

                        if (ddl_Rate_Type.SelectedItem.Text.Trim().ToUpper() == "FLOATING")
                        {
                            if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
                            {
                                CalendarExtenderSD_fromdate_RepayTab.Enabled = true;
                                txtfromdate_RepayTab1_Upd.ReadOnly = false;
                            }
                            else
                            {
                                CalendarExtenderSD_fromdate_RepayTab.Enabled = false;
                                txtfromdate_RepayTab1_Upd.ReadOnly = true;
                            }
                        }
                        else
                        {
                            CalendarExtenderSD_fromdate_RepayTab.Enabled = false;
                            txtfromdate_RepayTab1_Upd.ReadOnly = true;
                        }

                        txtFromInstallment_RepayTab1_upd.Attributes.Add("readonly", "readonly");
                        txtBreakup_RepayTab1.Attributes.Remove("readonly");
                        txtFromInstallment_RepayTab1_upd.ReadOnly = true;

                        CalendarExtenderSD_ToDate_RepayTab.Enabled = true;
                        CalendarExtenderSD_ToDate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;


                        CalendarExtenderSD_fromdate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;
                    }

                }
                else
                {
                    if (strvalues[4].ToString() != "91")
                    {
                        txtFromInstallment_RepayTab1_upd.Attributes.Remove("readonly");
                        txtFromInstallment_RepayTab1_upd.ReadOnly = false;
                        CalendarExtenderSD_ToDate_RepayTab.Enabled = false;
                        CalendarExtenderSD_fromdate_RepayTab.Enabled = false;
                        txtfromdate_RepayTab1_Upd.Text = "";
                        txtBreakup_RepayTab1.Text = "";
                        txtBreakup_RepayTab1.Attributes.Add("readonly", "readonly");
                    }
                    else
                    {
                        if (ddl_Time_Value.SelectedValue == "2" || ddl_Time_Value.SelectedValue == "4")
                        {
                            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                            objRepaymentStructure.FunPubGetNextRepaydate((DataTable)ViewState["DtRepayGrid"], ddl_Frequency.SelectedValue);
                            //objRepaymentStructure.dtNextDate = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedValue, Utility.StringToDate(DateTime.Now.ToString(strDateFormat)));
                            //if (gvRepaymentDetails.Rows.Count > 0 && txtfromdate_RepayTab1_Upd.Text == "")  // 24 Jan 2012 By Rao. Fixed Observation- From Date Overlapping issue while selecting cashflow. 
                            //    txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                        }
                        else
                        {
                            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                            objRepaymentStructure.FunPubGetNextRepaydateTL((DataTable)ViewState["DtRepayGrid"], ddl_Frequency.SelectedValue, ddlRepaymentCashFlow_RepayTab1.SelectedValue);
                            txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(objRepaymentStructure.intNextInstall + 1);
                            txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                        }

                        if (ddl_Rate_Type.SelectedItem.Text.Trim().ToUpper() == "FLOATING")
                        {
                            if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
                            {
                                CalendarExtenderSD_fromdate_RepayTab.Enabled = true;
                                txtfromdate_RepayTab1_Upd.ReadOnly = false;
                            }
                            else
                            {
                                CalendarExtenderSD_fromdate_RepayTab.Enabled = false;
                                txtfromdate_RepayTab1_Upd.ReadOnly = true;
                            }
                        }
                        else
                        {
                            CalendarExtenderSD_fromdate_RepayTab.Enabled = true;
                            txtfromdate_RepayTab1_Upd.ReadOnly = false;
                        }
                    }

                    //txtFromInstallment_RepayTab1_upd.Attributes.Add("readonly", "readonly");
                    //txtBreakup_RepayTab1.Attributes.Remove("readonly");
                    //txtFromInstallment_RepayTab1_upd.ReadOnly = true;

                    CalendarExtenderSD_ToDate_RepayTab.Enabled = true;
                    CalendarExtenderSD_ToDate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;


                    CalendarExtenderSD_fromdate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex);
            throw new ApplicationException(ex.Message);
        }
    }

    private void FunPriAddRepaymentSchedule()
    {
        try
        {
            DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];
            DateTime dtNextFromdate; DateTime dtStartdate;
            DropDownList ddlRepaymentCashFlow_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("ddlRepaymentCashFlow_RepayTab") as DropDownList;

            if (ddlRepaymentCashFlow_RepayTab1.SelectedValue == "-1")
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select the Repayment CashFlow');", true);
                ddlRepaymentCashFlow_RepayTab1.Focus();
                return;
            }

            TextBox txtAmountRepaymentCashFlow_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtAmountRepaymentCashFlow_RepayTab") as TextBox;
            TextBox txtPerInstallmentAmount_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtPerInstallmentAmount_RepayTab") as TextBox;
            TextBox txtBreakup_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtBreakup_RepayTab") as TextBox;
            TextBox txtFromInstallment_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;
            TextBox txtToInstallment_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtToInstallment_RepayTab") as TextBox;
            TextBox txtfromdate_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtfromdate_RepayTab") as TextBox;
            TextBox txtToDate_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtToDate_RepayTab") as TextBox;
            string[] strIds = ddlRepaymentCashFlow_RepayTab1.SelectedValue.ToString().Split(',');

            if (Convert.ToInt32(txtToInstallment_RepayTab1.Text) > Convert.ToInt32(txtTenure.Text))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('To Installment should not exceed Tenure');", true);
                txtToInstallment_RepayTab1.Focus();
                return;
            }
            if (txtfromdate_RepayTab1.Text.Trim() != "" &&
               (Utility.StringToDate(txtfromdate_RepayTab1.Text.Trim()) < Utility.StringToDate(txtOfferDate.Text.Trim())))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('From Date should be greater than or Equal to Offer Date');", true);
                return;
            }


            if (strIds[4] == "23") // Installment
            {
                if (DtRepayGrid.Rows.Count > 0)
                {
                    FunPriGetNextRepaydate();
                    if (Utility.StringToDate(txtfromdate_RepayTab1.Text) < dtNextDate)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('From and To Installment should not be overlaped');", true);
                        txtToInstallment_RepayTab1.Focus();
                        return;
                    }

                }
            }
            else
            {
                if (DtRepayGrid.Rows.Count > 0)
                {
                    DataRow[] drRepayDetail = null;
                    drRepayDetail = DtRepayGrid.Select(" CASHFLOW_FLAG_ID = " + strIds[4] +
                        " and (( " + txtFromInstallment_RepayTab1.Text.Trim() + " >= FROMINSTALL " +
                        " and " + txtFromInstallment_RepayTab1.Text.Trim() + " <= TOINSTALL ) or " +
                        " ( " + txtToInstallment_RepayTab1.Text.Trim() + " >= FROMINSTALL and " +
                        txtToInstallment_RepayTab1.Text.Trim() + " <= TOINSTALL) or " +
                        " ( FROMINSTALL >= " + txtFromInstallment_RepayTab1.Text.Trim() +
                        " and FROMINSTALL <= " + txtToInstallment_RepayTab1.Text.Trim() + " ))");
                    if (drRepayDetail.Count() > 0)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('From and To Installment should not be overlaped');", true);
                        txtToInstallment_RepayTab1.Focus();
                        return;
                    }
                }
            }
            // Code Added By R. Mankandan 11 - MAR - 2015
            // To the Mail Raised by Vishal should not allow user to select the date exit the tenure
            if (DtRepayGrid.Rows.Count == 0)
            {
                DateTime strRepaymentEndDate;
                if (ddlTenureType.SelectedValue == "136")
                    strRepaymentEndDate = (Utility.StringToDate(txtOfferDate.Text)).AddDays(Convert.ToInt32(txtTenure.Text));
                else if (ddlTenureType.SelectedValue == "134")
                    strRepaymentEndDate = (Utility.StringToDate(txtOfferDate.Text)).AddMonths(Convert.ToInt32(txtTenure.Text));
                else
                    strRepaymentEndDate = (Utility.StringToDate(txtOfferDate.Text)).AddDays(Convert.ToInt32(txtTenure.Text) * 7);
                if (strRepaymentEndDate < Utility.StringToDate(txtfromdate_RepayTab1.Text))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Repayment From Date cannot exit the total tenure');", true);
                    txtToInstallment_RepayTab1.Focus();
                    return;
                }
            }
            // code added by R. MAnikandan on 11-Mar-2015 End

            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
            Dictionary<string, string> objMethodParameters = new Dictionary<string, string>();
            objMethodParameters.Add("REPAYMODE", ddl_Repayment_Mode.SelectedItem.Text.ToString());
            objMethodParameters.Add("LOB", ddlLob.SelectedItem.Text.ToString());
            objMethodParameters.Add("CashFlow", ddlRepaymentCashFlow_RepayTab1.SelectedItem.Text);
            objMethodParameters.Add("CashFlowId", ddlRepaymentCashFlow_RepayTab1.SelectedValue);
            objMethodParameters.Add("PerInstall", txtPerInstallmentAmount_RepayTab1.Text);
            objMethodParameters.Add("Breakup", txtBreakup_RepayTab1.Text);
            objMethodParameters.Add("FromInstall", txtFromInstallment_RepayTab1.Text);
            objMethodParameters.Add("ToInstall", txtToInstallment_RepayTab1.Text);
            objMethodParameters.Add("FromDate", txtfromdate_RepayTab1.Text);
            objMethodParameters.Add("Frequency", ddl_Frequency.SelectedItem.Value);
            objMethodParameters.Add("TenureType", ddlTenureType.SelectedItem.Text);
            objMethodParameters.Add("Tenure", txtTenure.Text);
            // Modified By R. Manikandan to Validate First Repayment Date as 16 - Mar - 2015
            //objMethodParameters.Add("DocumentDate", txtOfferDate.Text);
            if (ddl_Repayment_Mode.SelectedValue == "2" && DtRepayGrid.Rows.Count > 0)
                objMethodParameters.Add("DocumentDate", DtRepayGrid.Rows[0]["fromdate"].ToString());
            else
            {
                if (txtfromdate_RepayTab1.Text.Trim() != string.Empty)
                {
                    objMethodParameters.Add("DocumentDate", Utility.StringToDate(txtfromdate_RepayTab1.Text).ToString());
                    //objMethodParameters.Add("DocumentDate", txtfromdate_RepayTab1.Text);
                }
                else
                {
                    objMethodParameters.Add("DocumentDate", DtRepayGrid.Rows[0]["fromdate"].ToString());
                }
            }

            dtStartdate = Utility.StringToDate(txtOfferDate.Text);
            string strErrorMessage = "";
            //objRepaymentStructure.FunPubAddRepayment(out dtNextFromdate, out strErrorMessage, out DtRepayGrid, DtRepayGrid, objMethodParameters);
            if (ddlLob.SelectedItem.Text.Contains("TL") || ddlLob.SelectedItem.Text.Contains("TE"))
            {
                //For TL
                objMethodParameters.Add("repayMode_id", ddl_Repayment_Mode.SelectedValue);
                objMethodParameters.Add("Levy", ddl_Interest_Levy.SelectedItem.Value);

                //Checking if other than normal payment , start date should be last payment date.
                if (ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
                {
                    DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
                    dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";
                    string strAcctType = dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper();

                    if (strAcctType == "PROJECT FINANCE" || strAcctType == "DEFERRED PAYMENT" || strAcctType == "DEFERRED STRUCTURED")
                    {
                        DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
                        if (DtCashFlowOut.Rows.Count > 0)
                        {
                            DataRow drOutFlw = DtCashFlowOut.Select("CashFlow_Flag_ID=41").Last();
                            if (drOutFlw != null)
                            {
                                objMethodParameters.Remove("DocumentDate");
                                objMethodParameters.Add("DocumentDate", drOutFlw["Date"].ToString());
                                dtStartdate = Utility.StringToDate(drOutFlw["Date"].ToString());
                            }
                        }

                    }
                }
                objRepaymentStructure.FunPubAddRepaymentforTL(out dtNextFromdate, out strErrorMessage, out DtRepayGrid, DtRepayGrid, objMethodParameters);
            }
            else
            {
                objRepaymentStructure.FunPubAddRepayment(out dtNextFromdate, out strErrorMessage, out DtRepayGrid, DtRepayGrid, objMethodParameters);
            }

            if (strErrorMessage != "")
            {
                Utility.FunShowAlertMsg(this, strErrorMessage);
                return;
            }

            if (strIds[4] == "23")
            {
                decimal decIRRActualAmount = 0;
                decimal decTotalAmount = 0;
                if (!objRepaymentStructure.FunPubValidateTotalAmount(DtRepayGrid, txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedItem.Value, txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, out decIRRActualAmount, out decTotalAmount, "1", Convert.ToDecimal(hdnRoundOff.Value)))
                {
                    Utility.FunShowAlertMsg(this, "Total Amount Should be equal to facility amount + interest (" + decTotalAmount + ")");
                    if (DtRepayGrid.Rows.Count > 0)
                        DtRepayGrid.Rows.RemoveAt(DtRepayGrid.Rows.Count - 1);
                    return;
                }

                //if (!((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLOB.SelectedItem.Text.ToUpper().Contains("TE"))))
                //{
                //    decActualAmount = Math.Round((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(TotalPeriodInstall)", "CashFlow_Flag_ID = 23"), 0);
                //}
                //else
                //{
                //    DataRow[] dr = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23");
                //    if (dr.Length > 0)
                //    {
                //        decActualAmount = Math.Round((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(TotalPeriodInstall)", "CashFlow_Flag_ID = 23"), 0);
                //    }
                //    else
                //    {
                //        decActualAmount = Math.Round((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(TotalPeriodInstall)", "CashFlow_Flag_ID IN(91,35)"), 0);
                //    }

                //}
                if (!((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))))
                {
                    if (((decimal)DtRepayGrid.Compute("Sum(Breakup)", "CashFlow_Flag_ID = 23")) > 100)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Breakup Percentage cannot be greater that 100%');", true);
                        if (DtRepayGrid.Rows.Count > 0)
                            DtRepayGrid.Rows.RemoveAt(DtRepayGrid.Rows.Count - 1);
                        return;
                    }
                }
                else
                {
                    DataRow[] dr = DtRepayGrid.Select("CashFlow_Flag_ID = 23");
                    if (dr.Length > 0)
                    {
                        if (((decimal)DtRepayGrid.Compute("Sum(Breakup)", "CashFlow_Flag_ID = 23")) > 100)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Breakup Percentage cannot be greater that 100%');", true);
                            if (DtRepayGrid.Rows.Count > 0)
                                DtRepayGrid.Rows.RemoveAt(DtRepayGrid.Rows.Count - 1);
                            return;
                        }
                    }
                    else
                    {
                        if (((decimal)DtRepayGrid.Compute("Sum(Breakup)", "CashFlow_Flag_ID = 23")) > 100)
                        {
                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Breakup Percentage cannot be greater that 100%');", true);
                            if (DtRepayGrid.Rows.Count > 0)
                                DtRepayGrid.Rows.RemoveAt(DtRepayGrid.Rows.Count - 1);
                            return;
                        }
                    }

                }

            }

            gvRepaymentDetails.DataSource = DtRepayGrid;
            gvRepaymentDetails.DataBind();

            /*TextBox txtFromInstallment_RepayTab1_upd = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;
            Label lblToInstallment_Upd = (Label)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lblToInstallment_RepayTab");
            txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(Convert.ToDecimal(lblToInstallment_Upd.Text.Trim()) + Convert.ToInt32("1"));
            TextBox txtfromdate_RepayTab1_Upd = gvRepaymentDetails.FooterRow.FindControl("txtfromdate_RepayTab") as TextBox;
            txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(dtNextFromdate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
             */
            ViewState["DtRepayGrid"] = DtRepayGrid;

            if (ViewState["DtRepayGrid_TL"] != null)
            {
                DataTable DtRepayGrid_TL = (DataTable)ViewState["DtRepayGrid_TL"];
                DataRow drow = DtRepayGrid_TL.NewRow();

                for (int i = 0; i <= DtRepayGrid_TL.Columns.Count - 1; i++)
                {
                    drow[i] = DtRepayGrid.Rows[DtRepayGrid.Rows.Count - 1][i].ToString();
                }

                DtRepayGrid_TL.Rows.Add(drow);
                ViewState["DtRepayGrid_TL"] = DtRepayGrid_TL;
            }


            FunFillNextInstallmentDate();
            FunPriFillRepayment_ViewState();
            FunPriIRRReset();
            FunPriCalculateSummary(DtRepayGrid, "CashFlow", "TotalPeriodInstall");
            ((LinkButton)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lnRemoveRepayment")).Visible = true;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    #endregion

    #region Alert Tab

    private void FunPriFill_Alert_Tab(string Mode)
    {
        //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {

            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

            Dictionary<string, string> objParameters = new Dictionary<string, string>();
            objParameters.Add("@CompanyId", intCompany_Id.ToString());
            DataSet dsAlert = Utility.GetDataset("s3g_org_loadAlertLov", objParameters);
            //added by saranya on 08-Mar-2012 based on sudarsan observation to add Programs in Type field
            DataRow[] dr = dsAlert.Tables[0].Select("ID in(141,143,218,142,217)");
            DataTable dtAlert = dr.CopyToDataTable();
            ViewState["AlertDDL"] = dtAlert;
            ViewState["AlertUser"] = dsAlert;
            //End Here


            if (Mode == _Add)
            {

                //ObjStatus.Option = 1;
                //ObjStatus.Param1 = S3G_Statu_Lookup.ALERT_TYPE.ToString();
                //ViewState["Alert_Type"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                //ObjStatus.Option = 35;
                //ObjStatus.Param1 = intCompany_Id.ToString();
                //ViewState["UserList"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                DataTable ObjDT = new DataTable();
                //  ObjStatus.Option = 46;
                //ObjStatus.Param1 = null;
                // ObjDT = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                ObjDT.Columns.Add("Type");
                ObjDT.Columns.Add("TypeID");
                ObjDT.Columns.Add("UserContact");
                ObjDT.Columns.Add("UserContactID");
                ObjDT.Columns.Add("EMail");
                ObjDT.Columns["Email"].DataType = typeof(Boolean);
                ObjDT.Columns.Add("SMS");
                ObjDT.Columns["SMS"].DataType = typeof(Boolean);
                DataRow dr_Alert = ObjDT.NewRow();
                dr_Alert["Type"] = "";
                dr_Alert["TypeID"] = "";
                dr_Alert["UserContact"] = "";
                dr_Alert["UserContactID"] = "";
                dr_Alert["EMail"] = "False";
                dr_Alert["SMS"] = "False";
                ObjDT.Rows.Add(dr_Alert);

                gvAlert.DataSource = ObjDT;
                gvAlert.DataBind();

                ObjDT.Rows.Clear();
                ViewState["DtAlertDetails"] = ObjDT;

                gvAlert.Rows[0].Cells.Clear();
                gvAlert.Rows[0].Visible = false;


            }
            FunPriFillAlert_ViewState();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in filling alert tab");
        }
        //finally
        //{
        //    //if (ObjCustomerService != null)
        //        ObjCustomerService.Close();
        //}
    }

    private void FunPriFillAlert_ViewState()
    {
        try
        {
            DropDownList ObjddlType_AlertTab = gvAlert.FooterRow.FindControl("ddlType_AlertTab") as DropDownList;
            //DropDownList ObjddlContact_AlertTab = gvAlert.FooterRow.FindControl("ddlContact_AlertTab") as DropDownList;

            Utility.FillDLL(ObjddlType_AlertTab, ((DataTable)ViewState["AlertDDL"]), true);
            //Utility.FillDLL(ObjddlContact_AlertTab, ((DataSet)ViewState["AlertUser"]).Tables[1], true);

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in filling alert tab from viewstate");
        }
    }

    #endregion

    #region Follow Up Tab

    private void FunPriFillFollowUp_Tab(string Mode)
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();

        try
        {

            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            DataTable ObjDT = new DataTable();
            if (Mode == _Add)
            {

                ObjStatus.Option = 35;
                ObjStatus.Param1 = intCompany_Id.ToString();
                ViewState["UserListFolloup"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                ObjStatus.Option = 47;
                ObjStatus.Param1 = null;
                ObjDT = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                ObjDT.Columns.Add("FromUserId");
                ObjDT.Columns.Add("ToUserId");
                //ObjDT.Columns.Add("FromUserId");


            }
            if (Mode == _Edit)
            {
                ObjStatus.Option = 35;
                ObjStatus.Param1 = intCompany_Id.ToString();
                ViewState["UserListFolloup"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                if (((DataTable)ViewState["DtFollowUp"]) != null)
                    ObjDT = (DataTable)ViewState["DtFollowUp"];

            }


            gvFollowUp.DataSource = ObjDT;
            gvFollowUp.DataBind();

            if (Mode == _Add)
            {
                ObjDT.Rows.Clear();
                ViewState["DtFollowUp"] = ObjDT;
                if (gvFollowUp.Rows.Count > 0)
                {
                    gvFollowUp.Rows[0].Cells.Clear();
                    gvFollowUp.Rows[0].Visible = false;
                }
            }
            FunPriFillFollowUp_ViewState();


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in filling followup tab");
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }

    }

    private void FunPriFillFollowUp_ViewState()
    {
        try
        {
            //Removed By Shibu 18-Sep-2013 Changed to (Auto Suggestion)
            //DropDownList ddlfrom_GridFollowup = gvFollowUp.FooterRow.FindControl("ddlfrom_GridFollowup") as DropDownList;
            //DropDownList ddlTo_GridFollowup = gvFollowUp.FooterRow.FindControl("ddlTo_GridFollowup") as DropDownList;

            //Utility.FillDLL(ddlfrom_GridFollowup, ((DataSet)ViewState["AlertUser"]).Tables[1], true);
            //Utility.FillDLL(ddlTo_GridFollowup, ((DataSet)ViewState["AlertUser"]).Tables[1], true);


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in filling followup tab from viewstate");
        }
    }


    #endregion

    #region Document Details

    private void FunPriGetConstitutionCodeDetails(string intCustID)
    {
        Procparam = new Dictionary<string, string>();
        try
        {
            Procparam.Add("@CompanyId", intCompany_Id.ToString());
            Procparam.Add("@IsActive", "1");
            Procparam.Add("@CustomerId", intCustID.ToString());
            grvConsDocuments.BindGridView("s3g_Org_GetConstitution_Customer", Procparam);

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex);
            throw new ApplicationException("Unable to Load the Constitution Documents");
        }
    }

    private void FunPriLoadPreDisbursementDocument()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@COMPANYID", intCompany_Id.ToString());
            Procparam.Add("@USERID", intUserId.ToString());
            //objProcedureParameter.Add("@PROGRAMID", "38");
            if (ddlLob.SelectedIndex > 0)
            {
                Procparam.Add("@LOBID", ddlLob.SelectedValue);
            }
            if (ViewState["ConsitutionId"] != null)
            {
                Procparam.Add("@CONSTITUTIONID", Convert.ToString(ViewState["ConsitutionId"]));
            }
            if (ddlProduct.SelectedIndex > 0)
            {
                Procparam.Add("@PRODUCTID", ddlProduct.SelectedValue);
            }
            DataSet dsPDDCustomer = Utility.GetDataset("S3g_Org_LoadCustomerPDD", Procparam);
            gvPRDDT.DataSource = dsPDDCustomer;
            gvPRDDT.DataBind();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable to Load Pre-Disbursement Documents");
        }
    }

    private bool FunPriIsValidConstitution()
    {
        bool blnIsValid = true;

        foreach (GridViewRow gvRow in grvConsDocuments.Rows)
        {

            CheckBox chkIsMandatory = (CheckBox)gvRow.FindControl("chkIsMandatory");
            CheckBox chkCollected = (CheckBox)gvRow.FindControl("chkCollected");
            TextBox txtDocValues = (TextBox)gvRow.FindControl("txtValues");
            if (chkCollected != null && chkIsMandatory != null)
            {
                if (chkIsMandatory.Checked && !chkCollected.Checked)
                {
                    cvPricing.ErrorMessage = strErrorMessagePrefix + "Choose the Collected in Document Details";
                    cvPricing.IsValid = false;
                    return false;
                }

                if (chkCollected.Checked)
                {
                    if (gvRow.Cells[1].Text.Trim().ToUpper().Contains("CID"))
                    {
                        if (txtDocValues.Text.Trim() == "")
                        {
                            cvPricing.ErrorMessage = strErrorMessagePrefix + "Value cannot empty for collected document in Document Details";
                            cvPricing.IsValid = false;
                            return false;
                        }
                    }
                }
            }
            CheckBox chkIsNeedImageCopy = (CheckBox)gvRow.FindControl("chkIsNeedImageCopy");
            CheckBox chkScanned = (CheckBox)gvRow.FindControl("chkScanned");
            if (chkScanned != null && chkIsNeedImageCopy != null)
            {
                if (chkIsNeedImageCopy.Checked && !chkScanned.Checked)
                {
                    cvPricing.ErrorMessage = strErrorMessagePrefix + "Choose the Scanned in Document Details";
                    cvPricing.IsValid = false;
                    //tcPricing.ActiveTabIndex = 6;
                    return false;
                }
            }
        }
        return blnIsValid;
    }

    //private bool FunPriValidateConsDoct(out string strErrorMode)
    //{
    //    bool blnIsValid = true;
    //    strErrorMode = "";
    //    foreach (GridViewRow gvRow in grvConsDocuments.Rows)
    //    {

    //        if (gvRow.Cells[1].Text.Trim().ToUpper().Contains("CID"))
    //        {
    //            CheckBox chkCollected = gvRow.FindControl("chkCollected");
    //            TextBox txtDocValues = gvRow.FindControl("txtValues");                
    //            if (chkCollected.Checked)
    //            {
    //                if (txtDocValues.Text.Trim() = "")
    //                {
    //                    blnIsValid = false;

    //                }
    //            }
    //        }
    //    }



    //    return blnIsValid;
    //}


    private bool FunPriValidatePRDt(out string strErrorMode)
    {
        bool blnIsValid = true;
        strErrorMode = "";
        foreach (GridViewRow gvRow in gvPRDDT.Rows)
        {
            CheckBox Cbx1 = gvRow.FindControl("CbxCheck") as CheckBox;
            Label lblScanned = gvRow.FindControl("lblScanned") as Label;
            TextBox txOD = gvRow.FindControl("txOD") as TextBox;
            if (Cbx1.Checked == false)
            {
                blnIsValid = false;
                strErrorMode = "Not Collected";
                break;
            }
            if (lblScanned.Text != "False")
            {
                if (txOD.Text == "")
                {
                    blnIsValid = false;
                    strErrorMode = "Not Scanned";
                    break;
                }
            }
        }
        return blnIsValid;
    }

    private void FunPriUploadFiles()
    {
        try
        {
            foreach (GridViewRow grv in gvPRDDT.Rows)
            {
                AjaxControlToolkit.AsyncFileUpload AsyncFileUpload1 = (AjaxControlToolkit.AsyncFileUpload)grv.FindControl("asyFileUpload");
                TextBox txOD = grv.FindControl("txOD") as TextBox;
                if (AsyncFileUpload1.FileName != "")
                {
                    FileInfo fileInfo = new FileInfo(AsyncFileUpload1.FileName);
                    if (AsyncFileUpload1.HasFile)
                    {
                        string strNewFileName = "COMPANY" + intCompany_Id.ToString();
                        string strEnqNumber = "";
                        if (ddlEnquiryNumber.SelectedIndex > 0)
                        {
                            strEnqNumber = ddlEnquiryNumber.SelectedItem.Text.Replace("/", "-");
                            if (!string.IsNullOrEmpty(txtEnquiry_Followup.Text))
                            {
                                strNewFileName += @"\" + txtEnquiry_Followup.Text.Replace("/", "-");
                            }
                            else
                            {
                                strNewFileName += @"\" + strEnqNumber;
                            }
                        }
                        else
                        {
                            strEnqNumber = cmbCustomerCode.Text.Replace("/", "-");
                        }
                        strNewFileName = strNewFileName + @"\PRI-" + grv.RowIndex.ToString() + "-" + strEnqNumber;
                        string strPath = "";
                        if (txOD.Text != "")
                        {
                            strPath = Path.Combine(txOD.Text, strNewFileName);
                            if (Directory.Exists(strPath))
                            {
                                Directory.Delete(strPath, true);
                            }
                            Directory.CreateDirectory(strPath);
                            strPath += @"\" + AsyncFileUpload1.FileName;
                        }
                        txOD.Text = strPath;
                        FileInfo f1 = new FileInfo(strPath);
                        if (f1.Exists == true)
                            f1.Delete();
                        AsyncFileUpload1.SaveAs(strPath);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
        }
    }


    #endregion

    private decimal FunPriGetMarginAmout()
    {
        decimal decMarginAmount;

        if (((!ddlLob.SelectedItem.Text.ToUpper().StartsWith("FT")) && (!ddlLob.SelectedItem.Text.ToUpper().StartsWith("WC"))))
        {
            if (txtMarginMoneyPer_Cashflow.Text != "")
            {
                decMarginAmount = (Convert.ToDecimal(lblTotalAssetAmount.Text) * (Convert.ToDecimal(txtMarginMoneyPer_Cashflow.Text) / 100));
            }
            else
            {
                decMarginAmount = 0;
            }
        }
        else
        {
            decMarginAmount = 0;
        }
        return Math.Round(decMarginAmount, 0);
    }

    private decimal FunPriGetResidualAmount()
    {
        decimal decResidualAmount;


        if (txtResidualValue_Cashflow.Text != "")
        {
            decResidualAmount = (Convert.ToDecimal(txtFacilityAmt.Text) * (Convert.ToDecimal(txtResidualValue_Cashflow.Text) / 100));
        }
        else if (txtResidualAmt_Cashflow.Text != "")
        {
            decResidualAmount = Convert.ToDecimal(txtResidualAmt_Cashflow);
        }
        else
        {
            decResidualAmount = 0;
        }


        return decResidualAmount;
    }

    private decimal FunPriGetAmountFinanced()
    {
        try
        {
            decimal decFinanaceAmt;
            decFinanaceAmt = Convert.ToDecimal(txtFacilityAmt.Text);//- FunPriGetMarginAmout() ;
            return decFinanaceAmt;//5366
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in getting facility amount");
        }
    }

    private void FunPubPricingSave()
    {
        ObjPricingMgtServices = new PricingMgtServicesReference.PricingMgtServicesClient();

        try
        {

            string strOffer_No = string.Empty;
            ObjS3G_ORG_Pricing = new PricingMgtServices.S3G_ORG_PricingDataTable();
            PricingMgtServices.S3G_ORG_PricingRow ObjPricingRow;
            ObjPricingRow = ObjS3G_ORG_Pricing.NewS3G_ORG_PricingRow();
            ObjPricingRow.Company_ID = intCompany_Id;
            ObjPricingRow.Pricing_ID = intPricingId;
            ObjPricingRow.Company_IRR = txtCompanyIRR.Text == "" ? 0 : Convert.ToDecimal(txtCompanyIRR.Text);
            ObjPricingRow.Constitution_ID = Convert.ToInt32(0);
            ObjPricingRow.Customer_ID = Convert.ToInt32(hdnCustID.Value);
            ObjPricingRow.Facility_Amount = Convert.ToDecimal(txtFacilityAmt.Text);
            ObjPricingRow.LOB_ID = Convert.ToInt32(ddlLob.SelectedValue);
            if (ddlPaymentRuleList.SelectedIndex > 0)
                ObjPricingRow.XMLPaymentRule = ((DataTable)ViewState["PaymentRules"]).FunPubFormXml();
            else
                ObjPricingRow.XMLPaymentRule = "<Root></Root>";
            FunPriUpdateROIRuleDecRate();
            ObjPricingRow.XMLROIRule = ((DataTable)ViewState["ROIRules"]).FunPubFormXml();
            if (txtMarginMoneyPer_Cashflow.Text != "")
            {
                ObjPricingRow.Offer_Margin = Convert.ToDecimal(txtMarginMoneyPer_Cashflow.Text); ;
                ObjPricingRow.Offer_Margin_Amount = Convert.ToDecimal(txtMarginMoneyAmount_Cashflow.Text);
            }
            if (txtResidualValue_Cashflow.Text != "")
            {
                ObjPricingRow.Offer_Residual_Value = Convert.ToDecimal(txtResidualValue_Cashflow.Text);
            }
            if (txtResidualAmt_Cashflow.Text != "")
            {
                ObjPricingRow.Offer_Residual_Value_Amount = Convert.ToDecimal(txtResidualAmt_Cashflow.Text);
            }
            ObjPricingRow.Offer_Valid_Till = Utility.StringToDate(txtOfferValidTill.Text);
            ObjPricingRow.Product_ID = Convert.ToInt32(ddlProduct.SelectedValue);
            ObjPricingRow.Round_No = 0;//Hard coded and need to be changed


            //Added by Sathish R
            if (Request.QueryString.Get("qsCRMID") != null)
            {
                FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsCRMID"));
                ObjPricingRow.CRM_ID = Convert.ToInt64(fromTicket.Name);
            }
            //Added by Sathish R
            if (ddlEnquiryNumber.Items.Count > 0)
            {
                if (ddlEnquiryNumber.SelectedIndex > 0)
                {
                    ObjPricingRow.Enquiry_Response_Id = Convert.ToInt32(ddlEnquiryNumber.SelectedValue);
                }
            }
            if (ddlSanctionNumber.Items.Count > 0)
            {
                if (ddlSanctionNumber.SelectedIndex > 0)
                {
                    string[] strids = ddlSanctionNumber.SelectedValue.Split(',');
                    ObjPricingRow.Sanction_Number_Id = Convert.ToInt32(strids[0]);
                }
            }
            ObjPricingRow.Tenure = Convert.ToInt32(txtTenure.Text);
            ObjPricingRow.Tenure_Type = Convert.ToInt32(ddlTenureType.SelectedValue);// 1;//ddlTenureType.SelectedItem.Text; //Need to be uncommented

            if (((DataTable)ViewState["DtCashFlow"]).Rows.Count > 0)
                ObjPricingRow.XMLCashInflow = gvInflow.FunPubFormXml();
            else
                ObjPricingRow.XMLCashInflow = "<Root></Root>";

            string strType;
            strType = ddlLob.SelectedItem.Text.ToLower().Split('-')[0].Trim();

            //if (ViewState["OlExistingAsset"] != null && ViewState["OlExistingAsset"].ToString() == "1")//Ol related changes on 28-7-2011.
            if (strType == "ol")
            {
                ObjPricingRow.XMLCashOutflow = "<Root></Root>";

            }
            else
            {
                if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count > 0)
                    ObjPricingRow.XMLCashOutflow = gvOutFlow.FunPubFormXml();
                else
                    ObjPricingRow.XMLCashOutflow = "<Root></Root>";
            }

            if (((DataTable)ViewState["ObjDTAssetDetails"]).Rows.Count > 0)
                ObjPricingRow.XMLAsset = gvAssetDetails.FunPubFormXml();
            else
                ObjPricingRow.XMLAsset = "<Root></Root>";
            if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count > 0)
                ObjPricingRow.XMLRepayment = gvRepaymentDetails.FunPubFormXml();
            else
                ObjPricingRow.XMLRepayment = "<Root></Root>";


            if (((DataTable)ViewState["DtAlertDetails"]).Rows.Count == 0)
            {
                ObjPricingRow.XMLAlerts = "<Root></Root>";

            }
            else
            {
                ObjPricingRow.XMLAlerts = gvAlert.FunPubFormXml();
            }


            if (((DataTable)ViewState["DtFollowUp"]).Rows.Count == 0)
            {
                ObjPricingRow.XMLFollowUp = "<Root></Root>";

            }
            else
            {
                ObjPricingRow.XMLFollowUp = gvFollowUp.FunPubFormXml();
            }


            if (grvConsDocuments.Rows.Count > 0)
            {
                string XMLCommon = string.Empty;
                XMLCommon = grvConsDocuments.FunPubFormXml(true);
                XMLCommon = XMLCommon.Replace("OPTIONAL/MANDATORY='1'", "");
                XMLCommon = XMLCommon.Replace("OPTIONAL/MANDATORY='0'", "");
                XMLCommon = XMLCommon.Replace("VALUE=''", "VALUE=' '");
                ObjPricingRow.XMLConsDocDetails = XMLCommon;
            }
            //Commented by saranya for PRDDT Changes 
            //if (gvPRDDT.Rows.Count > 0)
            //{


            //}

            ObjPricingRow.XMLPDD = "<Root></Root>";

            DataTable dtrepaystructure = new DataTable();
            if (ViewState["RepaymentStructure"] != null)
            {
                dtrepaystructure = (DataTable)ViewState["RepaymentStructure"];
            }
            if (dtrepaystructure.Rows.Count > 0)
            {

                ObjPricingRow.XMLStructure = dtrepaystructure.FunPubFormXml(true);
            }

            //Added by saran on 3-Jul-2014 for CR_SISSL12E046_018 start
            DataTable dtRepayDetailsOthers = new DataTable();
            if (ViewState["dtRepayDetailsOthers"] != null)
            {
                dtRepayDetailsOthers = (DataTable)ViewState["dtRepayDetailsOthers"];
            }
            if (dtRepayDetailsOthers.Rows.Count > 0)
            {

                ObjPricingRow.XMLRepayDetailsOthers = dtRepayDetailsOthers.FunPubFormXml(true);
            }

            //Added by saran on 3-Jul-2014 for CR_SISSL12E046_018 end


            ObjPricingRow.Accounting_IRR = txtAccIRR.Text == "" ? 0 : Convert.ToDecimal(txtAccIRR.Text);
            ObjPricingRow.Branch_ID = Convert.ToInt32(ddlBranch.SelectedValue);
            ObjPricingRow.Business_IRR = txtBusinessIRR.Text == "" ? 0 : Convert.ToDecimal(txtBusinessIRR.Text);

            if (hdnROIRule.Value != string.Empty)
                ObjPricingRow.ROI_Rule_Id = Convert.ToInt32(hdnROIRule.Value);
            if (hdnPayment.Value != string.Empty)
                ObjPricingRow.Payment_Rule_Id = Convert.ToInt32(hdnPayment.Value);

            ObjPricingRow.Created_By = intUserId;
            ObjS3G_ORG_Pricing.AddS3G_ORG_PricingRow(ObjPricingRow);
            if (ObjS3G_ORG_Pricing.Rows.Count > 0)
            {
                //ObjPricingMgtServices = new PricingMgtServicesReference.PricingMgtServicesClient();
                SerializationMode SerMode = SerializationMode.Binary;
                byte[] ObjPricingDataTable = ClsPubSerialize.Serialize(ObjS3G_ORG_Pricing, SerMode);
                //ObjPricingMgtServices = new PricingMgtServicesReference.PricingMgtServicesClient();
                if (intPricingId > 0)
                {
                    intResult = ObjPricingMgtServices.FunPubModifyPricingInt(SerMode, ObjPricingDataTable);
                }
                else
                {
                    intResult = ObjPricingMgtServices.FunPubCreatePricingInt(out strOffer_No, SerMode, ObjPricingDataTable);

                }

                if (intResult == 0)
                {
                    if (intPricingId > 0)
                    {
                        //Added by Thangam M on 18/Oct/2012 to avoid double save click
                        btnSave.Enabled = false;
                        //End here

                        strOffer_No = txtOfferNo.Text;
                        strAlert = strAlert.Replace("__ALERT__", "Offer " + strOffer_No + " updated successfully");
                        if (ViewState["PageMode"] != null && ViewState["PageMode"].ToString() == PageModes.WorkFlow.ToString())  //if (isWorkFlowTraveler) in modify mode
                        {
                            WorkFlowSession WFValues = new WorkFlowSession();
                            Utility.FunShowAlertMsg(this, strAlert);
                            int intWorkflowStatus = 0;
                            try
                            {
                                intWorkflowStatus = UpdateWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), WFValues.LOBId, WFValues.BranchID, strOffer_No, WFValues.WorkFlowProgramId, WFValues.WorkFlowStatusID.ToString(), WFValues.ProductId, WFValues.Document_Type);
                                strAlert = "";
                            }
                            catch (Exception ex)
                            {
                                strAlert = "Work Flow not Assigned";
                            }
                            WFValues.LastDocumentNo = strOffer_No;

                            //ShowWFAlertMessage(strOffer_No, ProgramCode); 
                            ShowWFAlertMessage(strOffer_No, ProgramCode, strAlert);
                            return;
                        }
                    }
                    else
                    {
                        //Added by Thangam M on 18/Oct/2012 to avoid double save click
                        btnSave.Enabled = false;
                        //End here


                        txtOfferNo.Text = strOffer_No;
                        strAlert = "Offer " + strOffer_No + " created successfully";
                        DataTable dtWorkFlow = new DataTable();
                        int WFProgramId = 0;
                        if (ViewState["PageMode"] != null && ViewState["PageMode"].ToString() == PageModes.WorkFlow.ToString())  //if (isWorkFlowTraveler) 
                        {
                            WorkFlowSession WFValues = new WorkFlowSession();
                            Utility.FunShowAlertMsg(this, strAlert);
                            int intWorkflowStatus = 0;
                            try
                            {
                                intWorkflowStatus = UpdateWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), WFValues.LOBId, WFValues.BranchID, strOffer_No, WFValues.WorkFlowProgramId, WFValues.WorkFlowStatusID.ToString(), WFValues.ProductId, WFValues.Document_Type);
                                strAlert = "";
                            }
                            catch (Exception ex)
                            {
                                strAlert = "Work Flow not Assigned";
                            }
                            WFValues.LastDocumentNo = strOffer_No;

                            //ShowWFAlertMessage(strOffer_No, ProgramCode); 
                            ShowWFAlertMessage(strOffer_No, ProgramCode, strAlert);
                            return;
                        }
                        else if (Request.QueryString.Get("qsCRMID") != null)      // From CRM
                        {
                            btnSave.Enabled = false;

                            FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsCRMID"));
                            Session["InitiateNumber"] = fromTicket.Name;
                            FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(hdnCustID.Value, false, 0);

                            string strCustomerAlert = "alert('Pricing details " + strOffer_No + " added successfully');";
                            strCustomerAlert += "window.location.href='../Origination/S3GOrgCRM_View.aspx?Code=CRM'";
                            //strCustomerAlert += "window.location.href='../Origination/S3GOrgCRM.aspx?qsCustomer=" + FormsAuthentication.Encrypt(Ticket) + "'";
                            //strCustomerAlert += "window.parent.document.getElementById('ctl00_ContentPlaceHolder1_btnFrameCancel').click()";
                            //strCustomerAlert += "window.opener.location.reload();window.close();";
                            strRedirectPageView = "";

                            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", strCustomerAlert, true);
                            return;
                        }
                        else if (CheckForWorkFlowConfiguration(ProgramCode, WFLOBId, WFProductId, out WFProgramId, out dtWorkFlow) > 0)
                        {
                            AssignNewWorkFlowValues(WFProgramId, int.Parse(ProgramCode), strOffer_No, WFBranchId, WFLOBId, WFProductId, "", dtWorkFlow);
                            try
                            {
                                int intWorkflowStatus = InsertWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), WFLOBId, WFBranchId, strOffer_No, WFProgramId, WFProductId, 2);

                                //Added by Thangam M on 18/Oct/2012 to avoid double save click
                                btnSave.Enabled = false;
                                //End here

                                strAlert = "";
                            }
                            catch (Exception ex)
                            {
                                strAlert = "Work Flow not Assigned";
                            }
                            ShowWFAlertMessage(strOffer_No, ProgramCode, strAlert);
                            return;
                        }
                        else
                        {
                            //Added by Thangam M on 18/Oct/2012 to avoid double save click
                            btnSave.Enabled = false;
                            //End here

                            strAlert += @"\n\nWould you like to create one more offer?";
                            strAlert = "if(confirm('" + strAlert + "')){" + strRedirectPageAdd + "}else {" + strRedirectPageView + "}";
                            strRedirectPageView = "";
                        }

                    }
                }
                else if (intResult == -1)
                {
                    if (intPricingId == 0)
                    {
                        strAlert = strAlert.Replace("__ALERT__", Resources.LocalizationResources.DocNoNotDefined);
                    }
                    strRedirectPageView = "";
                }
                else if (intResult == -2)
                {
                    if (intPricingId == 0)
                    {
                        strAlert = strAlert.Replace("__ALERT__", Resources.LocalizationResources.DocNoExceeds);
                    }
                    strRedirectPageView = "";
                }
                else
                {
                    if (intPricingId > 0)
                    {
                        strAlert = strAlert.Replace("__ALERT__", "Error in updating offer");
                    }
                    else
                    {

                        strAlert = strAlert.Replace("__ALERT__", "Error in creating offer");

                    }
                    strRedirectPageView = "";
                }

                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in saving Pricing details");
        }
        finally
        {
            ObjPricingMgtServices.Close();
        }

    }
    /* WorkFlow Properties */
    private int WFLOBId { get { return int.Parse(ddlLob.SelectedValue); } }
    private int WFBranchId { get { return int.Parse(ddlBranch.SelectedValue); } }
    private int WFProductId { get { return int.Parse(ddlProduct.SelectedValue); } }

    private void FunPriCalculateIRR(int intbtnclk)
    {
        try
        {

            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
            decimal decTotalAmount = 0;
            decimal decIRRActualAmount = 0;
            DataTable dtRepayDetails = new DataTable();
            //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 start
            DataTable dtRepayDetailsOthers = new DataTable();
            //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 end
            DataTable dtMoratorium = null;
            if (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddlLob.SelectedItem.Text.ToUpper().Split('-')[0].Trim() != "FT")
            {
                if (gvRepaymentDetails.Rows.Count == 0)
                {
                    Utility.FunShowAlertMsg(this, "Add atleast one Repayment Details");
                    return;
                }
            }

            decimal DecRoundOff;
            if (Convert.ToString(ViewState["hdnRoundOff"]) != "")
                DecRoundOff = Convert.ToDecimal(ViewState["hdnRoundOff"]);
            else
                DecRoundOff = 2;
            string strRate = txtRate.Text;

            switch (ddl_Return_Pattern.SelectedValue)
            {
                case "1":
                    strRate = txtRate.Text;
                    break;
                case "2":
                    if (ViewState["decRate"] != null)
                    {
                        strRate = ViewState["decRate"].ToString();
                    }
                    break;
            }

            //if (ViewState["decRate"] != null)
            //{

            //}
            //else
            //{
            //    strRate = txtRate.Text;
            //}
            //if (!objRepaymentStructure.FunPubValidateTotalAmount((DataTable)ViewState["DtRepayGrid"], txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedItem.Value, strRate, ddlTenureType.SelectedItem.Text, txtTenure.Text, out decIRRActualAmount, out decTotalAmount, "", Convert.ToDecimal(hdnRoundOff.Value)))
            //{
            //    Utility.FunShowAlertMsg(this, "Total Amount Should be equal to facility amount + interest (" + decTotalAmount + ")");
            //    return;
            //}
            decimal decBreakPercent;// = ((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID = 23"));
            if ((ddlLob.SelectedItem.Text.ToUpper().Contains("TL") || ddlLob.SelectedItem.Text.ToUpper().Contains("TE")) && ddl_Repayment_Mode.SelectedValue == "2")//Only for structure adhoc
            {
                int intValidation = objRepaymentStructure.FunPubValidateTotalAmountTL((DataTable)ViewState["DtRepayGrid"], txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue, txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, out decIRRActualAmount, out decTotalAmount, "", DecRoundOff);
                if (intValidation == 1)
                {
                    Utility.FunShowAlertMsg(this, "Total Amount Should be equal to finance amount + interest (" + decTotalAmount + ")");
                    return;
                }
                else if (intValidation == 2)
                {
                    Utility.FunShowAlertMsg(this, "Principal Amount Should be equal to finance amount (" + txtFacilityAmt.Text + ")");
                    return;
                }
                else if (intValidation == 3)
                {
                    Utility.FunShowAlertMsg(this, "Interest Amount Should be equal to  (" + (decTotalAmount - Convert.ToDecimal(txtFacilityAmt.Text)).ToString() + ")");
                    return;
                }
                else if (intValidation == 6)
                {
                    Utility.FunShowAlertMsg(this, "No Principal and Interest amount entered to calculate");
                    return;
                }
                else if (intValidation == 4)
                {
                    Utility.FunShowAlertMsg(this, "No Principal amount entered to calculate");
                    return;
                }
                else if (intValidation == 5)
                {
                    Utility.FunShowAlertMsg(this, "No Interest amount entered to calculate");
                    return;
                }


                //DataRow[] dr = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23");
                //if (dr.Length > 0)
                //{
                //    decBreakPercent = Convert.ToDecimal(((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID in(23)"));
                //}
                //else
                //{
                //    decBreakPercent = Convert.ToDecimal(((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID in(35,91)"));
                //}
            }
            else if (!((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))))
            {
                if (!objRepaymentStructure.FunPubValidateTotalAmount((DataTable)ViewState["DtRepayGrid"], txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue, strRate, ddlTenureType.SelectedItem.Text, txtTenure.Text, out decIRRActualAmount, out decTotalAmount, "", Convert.ToDecimal(hdnRoundOff.Value)))
                {
                    Utility.FunShowAlertMsg(this, "Total Amount Should be equal to finance amount + interest (" + decTotalAmount + ")");
                    return;
                }
                decBreakPercent = Convert.ToDecimal(((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID = 23"));
            }


            DataRow[] dRows = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23");
            if (dRows.Length > 0)
            {
                decBreakPercent = Convert.ToDecimal(((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID in(23)"));
            }
            else
            {
                decBreakPercent = Convert.ToDecimal(((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID in(35,91)"));
            }

            if (decBreakPercent != 0)
            {
                if (decBreakPercent != 100)
                {
                    Utility.FunShowAlertMsg(this, "Total break up percentage should be equal to 100%");
                    return;
                }
            }
            double douAccountingIRR = 0;
            double douBusinessIRR = 0;
            double douCompanyIRR = 0;
            DataTable dtRepaymentStructure = new DataTable();
            try
            {
                string strStartDte = txtOfferDate.Text;
                int intDeffered = 0;


                //Checking if other than normal payment , start date should be last payment date.
                if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
                {
                    DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
                    dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";
                    string strAcctType = dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper();

                    if (strAcctType == "PROJECT FINANCE" || strAcctType == "DEFERRED PAYMENT" || strAcctType == "DEFERRED STRUCTURED")
                    {
                        intDeffered = 1;//Defferred Payment
                        DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
                        if (DtCashFlowOut.Rows.Count > 0)
                        {
                            DataRow drOutFlw = DtCashFlowOut.Select("CashFlow_Flag_ID=41").Last();
                            if (drOutFlw != null)
                            {
                                strStartDte = drOutFlw["Date"].ToString();
                            }
                        }

                    }
                }



                //objRepaymentStructure.FunPubCalculateIRR(txtOfferDate.Text, hdnPLR.Value, ddl_Frequency.SelectedItem.Value, strDateFormat, txtResidualAmt_Cashflow.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                //    , out dtRepaymentStructure, (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                //    , txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedItem.Value
                //    , strRate, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedItem.Value,
                //    ddl_Time_Value.SelectedItem.Text, ddlLob.SelectedItem.Text, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium);
                //if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT") && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Contains("ADHOC")))
                if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT") && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Contains("ADHOC")))
                {
                    objRepaymentStructure.FunPubCalculateIRRForTL(strStartDte, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualAmt_Cashflow.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                     , out dtRepaymentStructure, (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                     , txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                     , strRate, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                     ddl_Time_Value.SelectedValue, ddlLob.SelectedItem.Text, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium);
                }
                else if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && (ddl_Return_Pattern.SelectedValue == "6"))
                {
                    DataTable dtREpay = new DataTable();
                    if (!Convert.ToBoolean(intbtnclk))
                    {
                        dtREpay = (DataTable)ViewState["DtRepayGrid"];
                    }
                    else
                    {
                        if (ViewState["DtRepayGrid_TL"] != null)
                        {
                            dtREpay = (DataTable)ViewState["DtRepayGrid_TL"];
                        }
                        else
                        {
                            dtREpay = (DataTable)ViewState["DtRepayGrid"];
                        }
                    }


                    objRepaymentStructure.FunPubCalculateIRR(strStartDte, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualAmt_Cashflow.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                            , out dtRepaymentStructure, out dtRepayDetails
                        //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 start
                            , out dtRepayDetailsOthers
                        //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 end
                            , dtREpay, (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                            , txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                            , strRate, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                            ddl_Time_Value.SelectedValue, ddlLob.SelectedItem.Text, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, ddl_Interest_Levy.SelectedValue.ToString(), intDeffered, strStartDte);
                    //intSlNo = 0;
                    if (!Convert.ToBoolean(intbtnclk))
                    {
                        _SlNo = 0;
                        gvRepaymentDetails.DataSource = dtRepayDetails;
                        gvRepaymentDetails.DataBind();
                        if (ViewState["DtRepayGrid_TL"] == null)
                            ViewState["DtRepayGrid_TL"] = ((DataTable)ViewState["DtRepayGrid"]).Copy();
                        ViewState["DtRepayGrid"] = dtRepayDetails;
                    }
                }
                else
                {
                    objRepaymentStructure.FunPubCalculateIRR(txtOfferDate.Text, hdnPLR.Value, ddl_Frequency.SelectedItem.Value, strDateFormat, txtResidualAmt_Cashflow.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                                 , out dtRepaymentStructure
                        //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 start
                            , out dtRepayDetailsOthers
                        //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 end
                                 , (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                                 , txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedItem.Value
                                 , strRate, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedItem.Value,
                                 ddl_Time_Value.SelectedItem.Text, ddlLob.SelectedItem.Text, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, txtOfferDate.Text, null);
                }
                grvRepayStructure.Visible = true;
                grvRepayStructure.DataSource = dtRepaymentStructure;
                grvRepayStructure.DataBind();

                ViewState["RepaymentStructure"] = dtRepaymentStructure;

                //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 start
                if (dtRepayDetailsOthers != null)
                    ViewState["dtRepayDetailsOthers"] = dtRepayDetailsOthers;
                //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 end

                txtAccountIRR_Repay.Text = douAccountingIRR.ToString("0.0000");
                txtAccIRR.Text = douAccountingIRR.ToString("0.0000");

                txtBusinessIRR_Repay.Text = douBusinessIRR.ToString("0.0000");
                txtBusinessIRR.Text = douBusinessIRR.ToString("0.0000");

                txtCompanyIRR_Repay.Text = douCompanyIRR.ToString("0.0000");
                txtCompanyIRR.Text = douCompanyIRR.ToString("0.0000");





            }
            catch (Exception Ex1)
            {
                grvRepayStructure.DataSource = null;
                grvRepayStructure.DataBind();
                ViewState["RepaymentStructure"] = null;

                txtAccountIRR_Repay.Text = "";
                txtAccIRR.Text = "";
                txtBusinessIRR_Repay.Text = "";
                txtBusinessIRR.Text = "";
                txtCompanyIRR_Repay.Text = "";
                txtCompanyIRR.Text = "";
                Utility.FunShowAlertMsg(this, Ex1.Message);
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException(ex.Message);
        }
    }

    private void FunPriGetPricingDetails(int intPricingId)
    {
        try
        {

            //ObjPricingMgtServices = new PricingMgtServicesReference.PricingMgtServicesClient();
            //byte[] bytePricingDetails = ObjPricingMgtServices.FunPubGetPricingDetails(intPricingId, intCompany_Id);
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Pricing_ID", intPricingId.ToString());
            Procparam.Add("@COMPANY_ID", intCompany_Id.ToString());
            Procparam.Add("@Mode", strMode);
            DataSet ds_PricingDetails = Utility.GetDataset("S3G_ORG_GetPricingDetails", Procparam);
            // ViewState["checklist"] = ds_PricingDetails.Tables[17];
            if (ds_PricingDetails != null)
            {
                System.Web.UI.WebControls.ListItem lstItem;
                ddlSanctionNumber.Items.Clear();
                if (ds_PricingDetails.Tables[0].Rows[0]["Santion_Number"].ToString() != "" || ds_PricingDetails.Tables[0].Rows[0]["Santion_Number"].ToString() != string.Empty)
                {
                    lstItem = new System.Web.UI.WebControls.ListItem(ds_PricingDetails.Tables[0].Rows[0]["Santion_Number"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["Sanction_Number_Id"].ToString());
                    ddlSanctionNumber.Items.Add(lstItem);
                    txtFacilityAmt.ReadOnly = true;
                }
                else
                {
                    ddlSanctionNumber.Enabled = false;
                    txtFacilityAmt.ReadOnly = false;
                }
                if (ds_PricingDetails.Tables[0].Rows[0]["Sanction_Date"].ToString() != "" || ds_PricingDetails.Tables[0].Rows[0]["Sanction_Date"].ToString() != string.Empty)
                {
                    txtSanctionDate.Text = Convert.ToDateTime(ds_PricingDetails.Tables[0].Rows[0]["Sanction_Date"].ToString()).ToString(strDateFormat);
                }

                ddlEnquiryNumber.Items.Clear();
                if (ds_PricingDetails.Tables[0].Rows[0]["Enquiry_No"].ToString() != "" || ds_PricingDetails.Tables[0].Rows[0]["Enquiry_No"].ToString() != string.Empty)
                {
                    lstItem = new System.Web.UI.WebControls.ListItem(ds_PricingDetails.Tables[0].Rows[0]["Enquiry_No"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["Enquiry_Response_Id"].ToString());
                    ddlEnquiryNumber.Items.Add(lstItem);
                    txtEnquiry_Followup.Text = ddlEnquiryNumber.SelectedItem.Text;
                }
                else
                {
                    ddlEnquiryNumber.Enabled = false;
                }

                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Option", "22");
                ddlTenureType.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, false, new string[] { "ID", "Name" });
                if (ds_PricingDetails.Tables[0].Rows[0]["Status_ID"].ToString() != "44")
                {
                    strMode = "Q";
                    ddlTenureType.ClearDropDownList();
                }
                if (ds_PricingDetails.Tables[0].Rows[0]["Status_ID"].ToString() == "47")
                {
                    Label1.Visible = false;
                    chkDocwithRepaymentPrint.Visible = false;

                    lblTemp.Visible = false;
                    ddlTemp.Visible = false;
                    chkEmail.Visible = true;

                }
                else
                {
                    Label1.Visible = true;
                    chkDocwithRepaymentPrint.Visible = true;
                    lblTemp.Visible = true;
                    ddlTemp.Visible = true;
                    chkEmail.Visible = false;
                }

                if (ds_PricingDetails.Tables[0].Rows[0]["Status_ID"].ToString() == "120")
                {
                    Label1.Visible = false;
                    chkDocwithRepaymentPrint.Visible = false;

                    lblTemp.Visible = false;
                    ddlTemp.Visible = false;
                }
                #region MainPage Tab
                txtOfferNo.Text = ds_PricingDetails.Tables[0].Rows[0]["Business_Offer_Number"].ToString();
                if (strMode == "Q" || strMode == "M")
                {
                    txtOfferDate.Text = Convert.ToDateTime(ds_PricingDetails.Tables[0].Rows[0]["Offer_Date"].ToString()).ToString(strDateFormat);
                }
                else
                {
                    txtOfferDate.Text = DateTime.Parse(DateTime.Today.ToString(), CultureInfo.CurrentCulture).ToString(strDateFormat);
                }
                txtOfferValidTill.Text = Convert.ToDateTime(ds_PricingDetails.Tables[0].Rows[0]["Offer_Valid_Till"].ToString()).ToString(strDateFormat);
                txtFacilityAmt.Text = Convert.ToDecimal(ds_PricingDetails.Tables[0].Rows[0]["Facility_Amount"].ToString()).ToString();//5366
                txtTenure.Text = ds_PricingDetails.Tables[0].Rows[0]["Tenure"].ToString();
                ddlTenureType.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Tenure_Type"].ToString();
                if (strMode == "Q" || (strMode == "M" &&
                    (ddlEnquiryNumber.SelectedValue.ToString().Trim() != "" ||
                    ddlSanctionNumber.SelectedValue.ToString().Trim() != "")))
                    ddlTenureType.ClearDropDownList();


                lstItem = new System.Web.UI.WebControls.ListItem(ds_PricingDetails.Tables[0].Rows[0]["LOB"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["LOB_ID"].ToString());
                ddlLob.Items.Add(lstItem);

                lstItem = new System.Web.UI.WebControls.ListItem(ds_PricingDetails.Tables[0].Rows[0]["PRODUCT"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["PRODUCT_ID"].ToString());
                ddlProduct.Items.Add(lstItem);
                // Removed By Shibu 17-Sep-2013 Branch List
                ////lstItem = new System.Web.UI.WebControls.ListItem(ds_PricingDetails.Tables[0].Rows[0]["Branch"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["Branch_ID"].ToString());
                //lstItem = new System.Web.UI.WebControls.ListItem(ds_PricingDetails.Tables[0].Rows[0]["Location"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["Location_ID"].ToString());
                //ddlBranch.Items.Add(lstItem);


                // Added By Shibu 17-Sep-2013 Branch List(Auto Suggestion)
                ddlBranch.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Location_ID"].ToString();
                ddlBranch.SelectedText = ds_PricingDetails.Tables[0].Rows[0]["Location"].ToString();


                S3GCustomerCommAddress.SetCustomerDetails(ds_PricingDetails.Tables[0].Rows[0], true);
                //txtCustomerAddress.Text = ds_PricingDetails.Tables[0].Rows[0]["Customer_Address"].ToString();

                //cmbCustomerCode.Items.Clear();
                //lstItem = new System.Web.UI.WebControls.ListItem(ds_PricingDetails.Tables[0].Rows[0]["Customer"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["Customer_ID"].ToString());
                //cmbCustomerCode.Items.Add(lstItem);
                cmbCustomerCode.Text = ds_PricingDetails.Tables[0].Rows[0]["Customer"].ToString();// + ","+ ds_PricingDetails.Tables[0].Rows[0]["Customer_ID"].ToString();


                txtAccIRR.Text = ds_PricingDetails.Tables[0].Rows[0]["Accounting_IRR"].ToString();

                txtBusinessIRR.Text = ds_PricingDetails.Tables[0].Rows[0]["Business_IRR"].ToString();

                txtCompanyIRR.Text = ds_PricingDetails.Tables[0].Rows[0]["Company_IRR"].ToString();


                if (ds_PricingDetails.Tables[0].Rows[0]["Response_Date"].ToString() != "" || ds_PricingDetails.Tables[0].Rows[0]["Response_Date"].ToString() != string.Empty)
                {
                    txtEnquiryDate.Text = Convert.ToDateTime(ds_PricingDetails.Tables[0].Rows[0]["Response_Date"].ToString()).ToString(strDateFormat);
                    txtEnquiryDate_Followup.Text = Convert.ToDateTime(ds_PricingDetails.Tables[0].Rows[0]["Response_Date"].ToString()).ToString(strDateFormat);
                }
                lblRoundNo.Text = ds_PricingDetails.Tables[0].Rows[0]["Round_No"].ToString();
                #endregion

                #region Document Details Tab
                txtConstitutionCode.Text = ds_PricingDetails.Tables[0].Rows[0]["Consitution"].ToString();
                hdnCustID.Value = ds_PricingDetails.Tables[0].Rows[0]["Customer_ID"].ToString();
                if (ds_PricingDetails.Tables[13].Rows.Count > 0)
                {
                    grvConsDocuments.DataSource = ds_PricingDetails.Tables[13];
                    grvConsDocuments.DataBind();
                }
                if (ds_PricingDetails.Tables[14].Rows.Count > 0)
                {
                    Panel8.Visible = true;
                    gvPRDDT.DataSource = ds_PricingDetails.Tables[14];
                    gvPRDDT.DataBind();
                }

                #endregion

                #region OfferTerms Tab
                if (strMode == "M" &&
                    ddlEnquiryNumber.SelectedValue.ToString().Trim() == "" &&
                    ddlSanctionNumber.SelectedValue.ToString().Trim() == "")
                {
                    Procparam.Clear();
                    Procparam.Add("@Is_Active", "1");
                    Procparam.Add("@Rules_ID", ds_PricingDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString());
                    Procparam.Add("@Company_ID", intCompany_Id.ToString());
                    Procparam.Add("@LOB_ID", ds_PricingDetails.Tables[0].Rows[0]["LOB_ID"].ToString());
                    Procparam.Add("@Option", "7");
                    ddlROIRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, new string[] { "ROI_Rules_ID", "ROI_Rule_Number", "Model_Description" });
                    ddlROIRuleList.SelectedValue = ds_PricingDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString();
                }
                else
                {
                    if (strMode == "Q")
                    {
                        lstItem = new System.Web.UI.WebControls.ListItem(ds_PricingDetails.Tables[3].Rows[0]["ROI_Number"].ToString(), ds_PricingDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString());
                        ddlROIRuleList.Items.Add(lstItem);
                    }
                    else
                    {
                        Procparam.Clear();
                        Procparam.Add("@Is_Active", "1");
                        Procparam.Add("@Rules_ID", ds_PricingDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString());
                        Procparam.Add("@Company_ID", intCompany_Id.ToString());
                        Procparam.Add("@LOB_ID", ds_PricingDetails.Tables[0].Rows[0]["LOB_ID"].ToString());
                        Procparam.Add("@Option", "7");
                        ddlROIRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, new string[] { "ROI_Rules_ID", "ROI_Rule_Number", "Model_Description" });
                        ddlROIRuleList.SelectedValue = ds_PricingDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString();
                    }


                }
                ViewState["ROIRules"] = ds_PricingDetails.Tables[3];
                hdnROIRule.Value = ds_PricingDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString();

                if (ds_PricingDetails.Tables[4].Rows.Count > 0)
                {
                    if (ds_PricingDetails.Tables[4].Rows[0]["Payment_Rule_Number"].ToString() != "" || ds_PricingDetails.Tables[4].Rows[0]["Payment_Rule_Number"].ToString() != string.Empty)
                    {
                        if (strMode == "M" &&
                            ddlEnquiryNumber.SelectedValue.ToString().Trim() == "" &&
                            ddlSanctionNumber.SelectedValue.ToString().Trim() == "")
                        {
                            FunPriBindPaymentDDL(ds_PricingDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString());
                            ddlPaymentRuleList.SelectedValue = ds_PricingDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString();
                        }
                        else
                        {
                            if (strMode == "Q")
                            {
                                lstItem = new System.Web.UI.WebControls.ListItem(ds_PricingDetails.Tables[4].Rows[0]["Payment_Rule_Number"].ToString(), ds_PricingDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString());
                                ddlPaymentRuleList.Items.Add(lstItem);
                            }
                            else
                            {
                                FunPriBindPaymentDDL(ds_PricingDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString());
                                ddlPaymentRuleList.SelectedValue = ds_PricingDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString();
                            }

                        }
                        hdnPayment.Value = ds_PricingDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString();
                        FunPriLoad_PaymentRule();
                    }
                }
                FunPriFill_OfferTab(_Add);
                FunPriLoad_ROIRule(_Edit);


                if (ds_PricingDetails.Tables[1].Rows.Count > 0)
                {
                    gvInflow.DataSource = ds_PricingDetails.Tables[1];
                    gvInflow.DataBind();
                    ViewState["DtCashFlow"] = ds_PricingDetails.Tables[1];
                   
                    DataTable dtCloned = ds_PricingDetails.Tables[1].Clone();
                    dtCloned.Columns[4].DataType = typeof(decimal);
                    foreach (DataRow row in ds_PricingDetails.Tables[1].Rows)
                    {
                        dtCloned.ImportRow(row);
                    }
                    ViewState["DtCashFlow"] = dtCloned;

                    FunPriFill_CashInFlow(_Edit);
                }
                else
                {
                    FunPriFill_CashInFlow(_Add);
                }

                if (ds_PricingDetails.Tables[2].Rows.Count > 0)
                {
                    gvOutFlow.DataSource = ds_PricingDetails.Tables[2];
                    gvOutFlow.DataBind();
                    DataTable dtCloned = ds_PricingDetails.Tables[2].Clone();
                    dtCloned.Columns[4].DataType = typeof(decimal);
                    foreach (DataRow row in ds_PricingDetails.Tables[2].Rows)
                    {
                        dtCloned.ImportRow(row);
                    }
                    ViewState["DtCashFlowOut"] = dtCloned;
                    FunPriFill_CashOutFlow(_Edit);
                }
                else
                {
                    FunPriFill_CashOutFlow(_Add);
                }

                lblTotalOutFlowAmount.Text = ds_PricingDetails.Tables[9].Rows[0].ItemArray[0].ToString();


                txtResidualValue_Cashflow.Text = ds_PricingDetails.Tables[0].Rows[0]["Offer_Residual_Value"].ToString();
                txtResidualAmt_Cashflow.Text = ds_PricingDetails.Tables[0].Rows[0]["Offer_Residual_Value_Amount"].ToString();
                txtMarginMoneyPer_Cashflow.Text = ds_PricingDetails.Tables[0].Rows[0]["Offer_Margin"].ToString();
                txtMarginMoneyAmount_Cashflow.Text = ds_PricingDetails.Tables[0].Rows[0]["Offer_Margin_Amount"].ToString();


                #endregion

                div7.Visible = true;
                div8.Visible = true;

                #region Repayment Tab
                gvRepaymentDetails.DataSource = ds_PricingDetails.Tables[5];
                gvRepaymentDetails.DataBind();
                ViewState["DtRepayGrid"] = ds_PricingDetails.Tables[5];
                FunPriFill_Repayment_Tab(_Edit);
                FunPriShowRepaymentFooter();
                txtAccountIRR_Repay.Text = ds_PricingDetails.Tables[0].Rows[0]["Accounting_IRR"].ToString();
                if (strMode == "Q")
                {
                    txtBusinessIRR_Repay.Text = ds_PricingDetails.Tables[0].Rows[0]["Business_IRR"].ToString();
                }
                txtCompanyIRR_Repay.Text = ds_PricingDetails.Tables[0].Rows[0]["Company_IRR"].ToString();
                if (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddlLob.SelectedItem.Text.ToUpper().Split('-')[0].Trim() != "FT")
                {
                    FunPriCalculateSummary(ds_PricingDetails.Tables[5], "CashFlow", "TotalPeriodInstall");
                    FunPriShowRepaymetDetails((decimal)ds_PricingDetails.Tables[5].Compute("SUM(TotalPeriodInstall)", "CashFlow_Flag_ID =23"));
                }
                //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 start
                if (ds_PricingDetails.Tables[16].Rows.Count > 0)
                    ViewState["dtRepayDetailsOthers"] = ds_PricingDetails.Tables[16];
                //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 end

                #endregion

                #region RepaymentStructure
                if (ds_PricingDetails.Tables[15].Rows.Count > 0)
                {
                    grvRepayStructure.DataSource = ds_PricingDetails.Tables[15];
                    grvRepayStructure.DataBind();
                    ViewState["RepaymentStructure"] = ds_PricingDetails.Tables[15];
                }
                #endregion

                #region Alerts Tab
                if (ds_PricingDetails.Tables[6].Rows.Count > 0)
                {
                    gvAlert.DataSource = ds_PricingDetails.Tables[6];
                    gvAlert.DataBind();
                    ViewState["DtAlertDetails"] = ds_PricingDetails.Tables[6];
                    FunPriFill_Alert_Tab(_Edit);
                }
                else
                {
                    FunPriFill_Alert_Tab(_Add);
                }
                #endregion

                #region Followup Tab
                //txtEnquiry_Followup.Text = ds_PricingDetails.Tables[7].Rows[0]["Enquiry_Number"].ToString();
                txtOfferNo_Followup.Text = ds_PricingDetails.Tables[7].Rows[0]["Offer_Number"].ToString();
                txtApplication_Followup.Text = ds_PricingDetails.Tables[7].Rows[0]["Application_Number"].ToString();
                if (ds_PricingDetails.Tables[7].Rows[0]["Date"].ToString() != "" || ds_PricingDetails.Tables[7].Rows[0]["Date"].ToString() != string.Empty)
                    txtEnquiryDate_Followup.Text = Convert.ToDateTime(ds_PricingDetails.Tables[7].Rows[0]["Date"].ToString()).ToString(strDateFormat);
                txtCustNameAdd_Followup.Text = ds_PricingDetails.Tables[0].Rows[0]["Customer"].ToString() + System.Environment.NewLine + ds_PricingDetails.Tables[0].Rows[0]["Customer_Address"].ToString();
                //txtBranch_Followup.Text = ds_PricingDetails.Tables[0].Rows[0]["Branch"].ToString();
                txtBranch_Followup.Text = ds_PricingDetails.Tables[0].Rows[0]["Location"].ToString();
                txtLOB_Followup.Text = ds_PricingDetails.Tables[0].Rows[0]["LOB"].ToString();

                if (ds_PricingDetails.Tables[8].Rows.Count > 0)
                {
                    gvFollowUp.DataSource = ds_PricingDetails.Tables[8];
                    gvFollowUp.DataBind();
                    ViewState["DtFollowUp"] = ds_PricingDetails.Tables[8];
                    FunPriFillFollowUp_Tab(_Edit);
                }
                else
                {
                    FunPriFillFollowUp_Tab(_Add);
                }
                #endregion

                #region Asset Tab
                gvAssetDetails.Visible = true;
                //gvAssetDetails.DataSource = ds_PricingDetails.Tables[10];
                //gvAssetDetails.DataBind();
                if (strMode == "Q")
                {
                    btnAddNew.Enabled = false;
                }
                //ViewState["ObjDTAssetDetails"] = ds_PricingDetails.Tables[10];

                DataTable dtCloned_1 = ds_PricingDetails.Tables[10].Clone();
                dtCloned_1.Columns[5].DataType = typeof(decimal);
                dtCloned_1.Columns[6].DataType = typeof(decimal);
                dtCloned_1.Columns[7].DataType = typeof(decimal);
                dtCloned_1.Columns[8].DataType = typeof(decimal);

                foreach (DataRow row in ds_PricingDetails.Tables[10].Rows)
                {
                    dtCloned_1.ImportRow(row);
                }
                ViewState["ObjDTAssetDetails"] = dtCloned_1;
                if (ds_PricingDetails.Tables[10].Rows.Count > 0)
                {
                    FunProBindAssetGrid();
                }
                //FunPriFill_AssetTab(_Edit);
                #endregion

                //Ol Related changes on 28-07-2011.

                FunPriOLRelatedChanges();

                FunPriLOBBasedvalidations(ddlLob.SelectedItem.Text, ddlLob.SelectedItem.Value, _Query);

                //To get check list details
                //Start 
                Procparam = new Dictionary<string, string>();
                Procparam.Clear();
                Procparam.Add("@Pricing_ID", intPricingId.ToString());
                Procparam.Add("@COMPANY_ID", intCompany_Id.ToString());
                DataSet Dt_check_list = Utility.GetDataset("S3g_Org_Get_Checklist", Procparam);
                ViewState["checklist"] = Dt_check_list;
                //End

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in getting data from Pricing");
        }
    }

    private void FunPriBindPaymentDDL(string StrRuleID)
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            if (strMode.ToUpper().Trim() != "Q")
                Procparam.Add("@Is_Active", "1");

            if (strMode.ToUpper().Trim() == "M" && StrRuleID != "")
                Procparam.Add("@Rules_ID", StrRuleID);

            Procparam.Add("@Company_ID", intCompany_Id.ToString());
            Procparam.Add("@LOB_ID", ddlLob.SelectedItem.Value);
            Procparam.Add("@Product_ID", ddlProduct.SelectedItem.Value);
            Procparam.Add("@Option", "8");
            ddlPaymentRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, Procparam, new string[] { "Payment_RuleCard_ID", "Payment_Rule_Number" });
            hdnPayment.Value = "";
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable to Load Payment Rule");
        }
    }

    private void FunPriPricingControlStatus(int intModeID)
    {
        switch (intModeID)
        {
            case 0: // Create Mode
                lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Create);
                btnWithdraw.Visible = false;
                //btnCreateCustomer.Visible = true;
                cmbCustomerCode.ReadOnly = false;
                txtConstitutionCode.ReadOnly = true;
                txtMarginAmountAsset.ReadOnly = false;
                txtMarginPercentage.ReadOnly = false;
                txtUnitValue.ReadOnly = false;
                txtUnitCount.ReadOnly = false;
                txtFacilityAmt.ReadOnly = false;
                rdnlAssetType.Enabled = true;
                btnFetchROI.Visible = true;
                btnFetchPayment.Visible = true;
                txtResidualAmt_Cashflow.ReadOnly = true;
                txtResidualValue_Cashflow.ReadOnly = true;
                lblRoundNo.Visible = false;
                lblRoundNum.Visible = false;
                break;
            case 1://Modify
                lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Modify);
                ddlBranch.ReadOnly = true;
                //gvAssetDetails.Columns[15].Visible = false;
                btnClear.Enabled = false;
                btnWithdraw.Visible = true;
                btnCreateCustomer.Visible = false;
                cmbCustomerCode.ReadOnly = true;
                txtConstitutionCode.ReadOnly = true;
                //txtMarginAmountAsset.ReadOnly = false;
                //txtMarginPercentage.ReadOnly = false;
                //txtUnitValue.ReadOnly = true;
                //txtUnitCount.ReadOnly = true;
                //calExeOfferValidTill.Enabled = false;
                CalendarExtenderSD_RequiredFromDate.Enabled = false;
                rdnlAssetType.Enabled = false;
                // Commented By R. Manikandan
                //ddlAssetCodeList.Enabled = false;
                ddlLeaseAssetNo.Enabled = false;
                btnFetchROI.Visible = true;
                btnFetchPayment.Visible = true;
                txtResidualAmt_Cashflow.ReadOnly = true;
                txtResidualValue_Cashflow.ReadOnly = true;
                lblRoundNo.Visible = true;
                lblRoundNum.Visible = true;
                gvPRDDT.Enabled = true;
                if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT"))
                {
                    grvRepayStructure.Columns[5].Visible = false;
                    //grvRepayStructure.Columns[6].Visible = true;
                    //grvRepayStructure.Columns[7].Visible = true;
                }
                else
                {
                    grvRepayStructure.Columns[5].Visible = true;
                    grvRepayStructure.Columns[6].Visible = false;
                    grvRepayStructure.Columns[7].Visible = false;
                }

                if (ddlLob.SelectedItem.Text.ToUpper().Contains("WC") ||
                ddlLob.SelectedItem.Text.ToUpper().Contains("FT") ||
                ((ddlLob.SelectedItem.Text.ToUpper().StartsWith("TE") ||
                ddlLob.SelectedItem.Text.ToUpper().StartsWith("TL")) &&
                ddl_Repayment_Mode.SelectedItem.Text.ToUpper().StartsWith("PRO")))
                {
                    tcPricing.Tabs[3].Enabled = false;
                }
                //txtFacilityAmt.ReadOnly = true;
                break;
            case -1://Query  
                lblHeading.Text = FunPubGetPageTitles(enumPageTitle.View);
                ddlBranch.ReadOnly = true;
                btnClear.Enabled = false;
                btnSave.Enabled = false;
                btnWithdraw.Visible = false;
                txtFacilityAmt.ReadOnly = true;
                txtTenure.ReadOnly = true;
                //txtBusinessIRR.ReadOnly = true;
                btnCreateCustomer.Visible = false;
                cmbCustomerCode.ReadOnly = true;
                txtMarginMoneyAmount_Cashflow.ReadOnly = true;
                txtMarginMoneyPer_Cashflow.ReadOnly = true;
                txtMarginPercentage.ReadOnly = true;
                txtResidualAmt_Cashflow.ReadOnly = true;
                txtResidualValue_Cashflow.ReadOnly = true;
                txtMarginAmountAsset.ReadOnly = true;
                txtUnitCount.ReadOnly = true;
                txtUnitValue.ReadOnly = true;
                txtTotalAssetValue.ReadOnly = true;
                gvAlert.FooterRow.Visible = false;
                gvAlert.Columns[6].Visible = false;
                //txtasset.Enabled = false;
                //ddlAssetCodeList.Enabled = false;
                gvAssetDetails.FooterRow.Visible = false;
                gvAssetDetails.Columns[15].Visible = false;
                gvFollowUp.FooterRow.Visible = false;
                gvFollowUp.Columns[9].Visible = false;
                gvInflow.FooterRow.Visible = false;
                gvInflow.Columns[8].Visible = false;
                gvOutFlow.FooterRow.Visible = false;
                gvOutFlow.Columns[8].Visible = false;
                btnCalIRR.Enabled = false;
                btnReset.Enabled = false;
                gvRepaymentDetails.FooterRow.Visible = false;
                gvRepaymentDetails.Columns[8].Visible = false;
                // gvRepaymentDetails.Columns[10].Visible = false;
                txtConstitutionCode.ReadOnly = true;
                //grvConsDocuments.Enabled = false;
                //gvPRDDT.Enabled = false;
                txtOfferDate.ReadOnly = true;
                calExeOfferValidTill.Enabled = false;
                CalendarExtenderSD_RequiredFromDate.Enabled = false;
                rdnlAssetType.Enabled = false;
                btnFetchROI.Visible = false;
                btnFetchPayment.Visible = false;
                lblRoundNo.Visible = true;
                lblRoundNum.Visible = true;
                //chkDocumentEmail.Enabled = false;
                //chkDocumentPrint.Enabled = false;
                //chkDocwithRepaymentEmail.Enabled = false;
                //chkDocwithRepaymentPrint.Enabled = false;
                //chkRepaymentEmail.Enabled = false;
                //chkRepaymentPrint.Enabled = false;
                btnShowRepayment.Enabled = false;
                if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT"))
                {
                    grvRepayStructure.Columns[5].Visible = false;
                    //grvRepayStructure.Columns[6].Visible = true;
                    //grvRepayStructure.Columns[7].Visible = true;
                }
                else
                {
                    grvRepayStructure.Columns[5].Visible = true;
                    grvRepayStructure.Columns[6].Visible = false;
                    grvRepayStructure.Columns[7].Visible = false;
                }
                if (ddlLob.SelectedItem.Text.ToUpper().Contains("WC") ||
              ddlLob.SelectedItem.Text.ToUpper().Contains("FT") ||
              ((ddlLob.SelectedItem.Text.ToUpper().StartsWith("TE") ||
              ddlLob.SelectedItem.Text.ToUpper().StartsWith("TL")) &&
              ddl_Repayment_Mode.SelectedItem.Text.ToUpper().StartsWith("PRO")))
                {
                    tcPricing.Tabs[3].Enabled = false;
                }
                break;
        }
    }

    private void FunPriIRRReset()
    {
        txtAccIRR.Text = txtAccountIRR_Repay.Text = txtBusinessIRR.Text = txtBusinessIRR_Repay.Text =
        txtCompanyIRR.Text = txtCompanyIRR_Repay.Text = "";
        grvRepayStructure.ClearGrid();
        if (ViewState["DtCashFlow"] != null)
        {
            DataTable DtCashFlow = (DataTable)ViewState["DtCashFlow"];
            if (DtCashFlow.Rows.Count > 0)
            {
                DataRow[] drUMFC = null;
                if (DtCashFlow.Columns.Contains("CashFlow_ID"))
                {
                    drUMFC = DtCashFlow.Select("CashFlow_ID = 34");
                }
                else
                {
                    drUMFC = DtCashFlow.Select("CashFlow_Flag_ID = 34");
                }
                if (drUMFC.Length > 0)
                {
                    drUMFC[0].Delete();
                    DtCashFlow.AcceptChanges();
                    ViewState["DtCashFlow"] = DtCashFlow;
                    if (DtCashFlow.Rows.Count > 0)
                    {
                        FunPriFillCashInflow_ViewState();
                    }
                }

            }
        }

    }

    private void FunPriSetRateMaxLength()
    {

        if (ddl_Return_Pattern.SelectedIndex > 0)
        {
            if (ddl_Return_Pattern.SelectedValue == "1" || ddl_Return_Pattern.SelectedValue == "2")
            {
                txtRate.SetPercentagePrefixSuffix(2, 4, false, false, "Rate");
            }
            else
            {
                txtRate.SetDecimalPrefixSuffix(5, 4, false, false, "Rate");
            }
        }
        else
        {
            txtRate.SetPercentagePrefixSuffix(2, 4, false, false, "Rate");
        }
    }


    #region GetCustomerCode
    /// <summary>
    /// GetCompletionList
    /// </summary>
    /// <param name="prefixText">search text</param>
    /// <param name="count">no of matches to display</param>
    /// <returns>string[] of matching names</returns>
    [System.Web.Services.WebMethod]
    public static string[] GetCustomerList(String prefixText, int count)
    {
        DataTable dt1 = new DataTable();
        obj_PageValue.FunPriLoadCustomerCode();
        dt1 = (DataTable)System.Web.HttpContext.Current.Session["CustomerDT"];
        List<String> suggetions = GetSuggestions(prefixText, count, dt1);


        return suggetions.ToArray();
    }



    #endregion

    #region GetSuggestions
    /// <summary>
    /// GetSuggestions
    /// </summary>
    /// <param name="key">Country Names to search</param>
    /// <returns>Country Names Similar to key</returns>
    private static List<String> GetSuggestions(string key, int count, DataTable dt1)
    {
        List<String> suggestions = new List<string>();
        try
        {


            string filterExpression = "Customer_Name like '" + key + "%'";
            DataRow[] dtSuggestions = dt1.Select(filterExpression);

            foreach (DataRow dr in dtSuggestions)
            {
                string suggestion = dr["Customer_Name"].ToString() + " -- " + dr["Customer_Code"].ToString();
                suggestions.Add(suggestion);
            }

        }
        catch (Exception objException)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objException);
            return suggestions;

            //   lblErrorMessage.Text = Resources.LocalizationResources.CustomerTypeChangeError;
        }

        return suggestions;
    }
    #endregion

    private void FunPriLoadCustDetails(string custCode, string mode)
    
    {
        try
        {
            if (custCode != "")
            {
                if (ddlEnquiryNumber.SelectedValue != "0" || (hdnCustID.Value == "" || hdnCustID.Value == "0"))
                {
                }
                else
                {
                    ddlEnquiryNumber.Items.Clear();
                }
                ddlSanctionNumber.Items.Clear();

                //txtCustomerAddress.Text = "";
                S3GCustomerCommAddress.ClearCustomerDetails();
                txtEnquiryDate.Text = "";
                txtSanctionDate.Text = "";

                //DataTable dt = (DataTable)HttpContext.Current.Session["CustomerDT"];

                //if (dt.Rows.Count > 0)
                //{
                //    string filterExpression = "";
                //    if (mode == "1")
                //    {
                //        filterExpression = "Customer_Name = '" + custCode + "'";
                //    }
                //    else if (mode == "2")
                //    {
                //        filterExpression = "Customer_ID = '" + custCode + "'";
                //    }
                //    DataRow[] dtSuggestions = dt.Select(filterExpression);

                //    if (dtSuggestions.Length > 0)
                //    {

                //        strCustomer_Id = dtSuggestions[0]["Customer_ID"].ToString();
                //        hdnCustID.Value = dtSuggestions[0]["Customer_ID"].ToString();
                //        strCustomer_Value = dtSuggestions[0]["Customer_Code"].ToString();
                //        strCustomer_Name = dtSuggestions[0]["Customer_Name"].ToString();
                //        cmbCustomerCode.Text = dtSuggestions[0]["Customer_Name"].ToString() + " -- " + dtSuggestions[0]["Customer_Code"].ToString();
                //        Procparam = new Dictionary<string, string>();
                //        Procparam.Add("@Option", "20");
                //        Procparam.Add("@Company_ID", intCompany_Id.ToString());
                //        Procparam.Add("@Customer_ID", strCustomer_Id);
                //        DataTable dtPastOffer = Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, Procparam);
                //        grvPastOffers.DataSource = dtPastOffer;
                //        grvPastOffers.DataBind();
                //        hvPastoffers.Enabled = true;
                //        btnCreateCustomer.Enabled = false;
                //    }
                //    else
                //    {
                //        hvPastoffers.Enabled = false;
                //        Utility.FunShowAlertMsg(this, "Customer details not available in customer master");
                //        btnCreateCustomer.Enabled = true;
                //        FunPriLoadAllCombos("", "enq");
                //        FunPriLoadAllCombos("", "sanc");
                //        cmbCustomerCode.Text = "";
                //        return;
                //    }
                //}
                Procparam = new Dictionary<string, string>();
                Procparam.Add("@Option", "27");
                if (mode == "1")
                    Procparam.Add("@Customer_Code", Convert.ToString(custCode));
                else if (mode == "2")
                    Procparam.Add("@Customer_ID", Convert.ToString(custCode));
                Procparam.Add("@Company_ID", intCompany_Id.ToString());
                DataSet dtCustDtl = Utility.GetDataset("S3G_ORG_GetPricing_List", Procparam);

                if (dtCustDtl != null && dtCustDtl.Tables[0].Rows.Count > 0)
                {
                    strCustomer_Id = Convert.ToString(dtCustDtl.Tables[0].Rows[0]["Customer_ID"]);
                    hdnCustID.Value = Convert.ToString(dtCustDtl.Tables[0].Rows[0]["Customer_ID"]);
                    strCustomer_Value = Convert.ToString(dtCustDtl.Tables[0].Rows[0]["Customer_Code"]);
                    strCustomer_Name = Convert.ToString(dtCustDtl.Tables[0].Rows[0]["Customer_Name"]);
                    cmbCustomerCode.Text = Convert.ToString(dtCustDtl.Tables[0].Rows[0]["Customer"]);
                    grvPastOffers.DataSource = dtCustDtl.Tables[1];
                    grvPastOffers.DataBind();
                    grvConsDocuments.DataSource = dtCustDtl.Tables[2];
                    grvConsDocuments.DataBind();
                    grvConsDocuments.Visible = true;
                    hvPastoffers.Enabled = true;
                    btnCreateCustomer.Enabled = false;
                }
                else
                {
                    hvPastoffers.Enabled = false;
                    Utility.FunShowAlertMsg(this, "Customer details not available in customer master");
                    btnCreateCustomer.Enabled = true;
                    FunPriLoadAllCombos("", "enq");
                    FunPriLoadAllCombos("", "sanc");
                    return;
                }

                FunPriShowCustomerDetails();
            }

            else
            {
                //txtCustomerAddress.Text = "";
                hvPastoffers.Enabled = false;
                S3GCustomerCommAddress.ClearCustomerDetails();
                txtEnquiryDate.Text = "";
                txtSanctionDate.Text = "";
                FunPriLoadAllCombos("", "enq");
                FunPriLoadAllCombos("", "sanc");
                ddlEnquiryNumber.Enabled = true;
                ddlSanctionNumber.Enabled = true;
                ddlLob.Items.Clear();
                ddlBranch.Clear();
                btnCreateCustomer.Enabled = true;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in getting customer details");
        }
    }

    private void FunPriCheckPricingStart()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Option", "19");
            Procparam.Add("@Company_ID", intCompany_Id.ToString());
            DataTable dtGlobalStartPoint = Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, Procparam);
            if (dtGlobalStartPoint.Rows.Count > 0)
            {
                bool blnIsStartUp = Convert.ToBoolean(dtGlobalStartPoint.Rows[0]["Offer_Number"].ToString());
                if (blnIsStartUp)
                {
                    FunPriLoadCustomerCode();
                    btnCreateCustomer.Enabled = true;

                    cmbCustomerCode.Enabled = true;
                    cmbCustomerCode.Attributes.Remove("readonly");

                }
                else
                {
                    cmbCustomerCode.Attributes.Add("readonly", "readonly");
                    btnCreateCustomer.Enabled = false;
                    btnCreateCustomer.Visible = false;
                }
            }
            else
            {
                strAlert = strAlert.Replace("__ALERT__", "Define start up screen in GlobalParameter setup");
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
                return;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable to check start up screen from global parameter setup");
        }
    }

    private void FunPriResetValues()
    {
        cmbCustomerCode.Text = "";
        ddlLob.Items.Clear();
        //txtCustomerAddress.Text = "";
        S3GCustomerCommAddress.ClearCustomerDetails();
        ddlBranch.Clear();
        ddlProduct.Items.Clear();
        txtTenure.Text = "";
        ddlLob.Enabled = true;
        ddlBranch.Enabled = true;
        ddlProduct.Enabled = true;
        ddlROIRuleList.Items.Clear();
        ddlPaymentRuleList.Items.Clear();
        txtFacilityAmt.Text = "";
        txtSanctionDate.Text = "";
        txtEnquiryDate.Text = "";
        FunProPageLoad(_Add);
        if (ddlSanctionNumber.Items.Count > 0)
        {
            ddlSanctionNumber.SelectedIndex = 0;
        }
        //btnPrev.Enabled = false;
        //btnNext.Enabled = true;
        FunPriIRRReset();
        tcPricing.ActiveTab = tcPricing.Tabs[0];
        txtOfferValidTill.Text = "";
        ddlSanctionNumber.Enabled = true;

        ddlEnquiryNumber.Enabled = true;
        txtFacilityAmt.ReadOnly = false;
        grvPastOffers.ClearGrid();
        hvPastoffers.Enabled = false;
        btnFetchPayment.Visible = true;
        btnFetchROI.Visible = true;
        // programmaticModalPopup.Enabled = false;
        FunPriCheckPricingStart();
        FunPriResetAssetDetails();
        txtMarginMoneyPer_Cashflow.Text = "";
        txtResidualAmt_Cashflow.Text = "";
        txtResidualValue_Cashflow.Text = "";
        txtMarginMoneyAmount_Cashflow.Text = "";
    }

    private void FunPriLobReset()
    {
        div7.Visible = false;
        div8.Visible = false;
        ddlROIRuleList.SelectedIndex = 0;
        if (ddlPaymentRuleList.Items.Count > 0)
        {
            ddlPaymentRuleList.SelectedIndex = 0;
        }
        //To fill Asset tab
        FunPriFill_AssetTab(_Add);
        FunPriFill_CashInFlow(_Add);
        FunPriFill_CashOutFlow(_Add);
        FunPriFill_OfferTab(_Add);
        FunPriFill_Repayment_Tab(_Add);
        hdnROIRule.Value = "";
        FunPriIRRReset();

    }

    private void FunPriLANNumVisble(bool CanShow)
    {
        ddlLeaseAssetNo.SelectedIndex = -1;
        //ddlAssetCodeList.SelectedIndex = -1;
        lblLeaseAssetNo.Visible = CanShow;
        ddlLeaseAssetNo.Visible = CanShow;
        rfvLeastAssetCodeNo.Enabled = CanShow;

        //lblAssetCodeList.Visible = !CanShow;
        //ddlAssetCodeList.Visible = !CanShow;
        //rfvAssetCodeList.Enabled = !CanShow;

        rfvRequiredFromDate.Enabled = CanShow;

    }

    private void FunPriGetNextRepaydate()
    {

        DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];
        int intToInstall = 0;
        DateTime dtNextFromdate = DateTime.Now.Date;
        DataRow[] drRow = DtRepayGrid.Select("CashFlow_Flag_ID = 23", "ToInstall desc");
        if (drRow.Length > 0)
        {
            dtNextDate = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedItem.Value, Convert.ToDateTime(drRow[0]["ToDate"].ToString()));
            intNextInstall = Convert.ToInt32(drRow[0]["ToInstall"].ToString());
        }
        else
        {
            dtNextDate = dtNextFromdate;
            intNextInstall = 0;
        }
    }

    private void FunRepayClear(string StrErrorMsg)
    {
        grvRepayStructure.DataSource = null;
        grvRepayStructure.DataBind();
        ViewState["RepaymentStructure"] = null;

        txtAccountIRR_Repay.Text = "";
        txtAccIRR.Text = "";
        txtBusinessIRR_Repay.Text = "";
        txtBusinessIRR.Text = "";
        txtCompanyIRR_Repay.Text = "";
        txtCompanyIRR.Text = "";
        if (StrErrorMsg != "")
            Utility.FunShowAlertMsg(this, StrErrorMsg);
    }

    protected void FunPriGenerateRepayment(DateTime dtStartDate)
    {
        ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
        try
        {
            if (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddlLob.SelectedItem.Text.ToUpper().Split('-')[0].Trim() != "FT")
            {
                if (!ddlLob.SelectedItem.Text.ToUpper().StartsWith("OL"))
                {
                    DataRow[] drFinanAmtRow = ((DataTable)ViewState["DtCashFlowOut"]).Select("CashFlow_Flag_ID = 41");
                    if (drFinanAmtRow.Length > 0)
                    {
                        decimal decToatlFinanceAmt = (decimal)((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 41");

                        if (Convert.ToDecimal(txtFacilityAmt.Text) != decToatlFinanceAmt)
                        {
                            Utility.FunShowAlertMsg(this, "Total amount financed in Cashoutflow should be equal to amount financed");
                            FunRepayClear("");
                            return;
                        }
                    }
                }

                Dictionary<string, string> objMethodParameters = new Dictionary<string, string>();
                DataSet dsRepayGrid = new DataSet();
                DataTable dtMoratorium = null;
                objMethodParameters.Add("LOB", ddlLob.SelectedItem.Text);
                objMethodParameters.Add("Tenure", txtTenure.Text);
                objMethodParameters.Add("TenureType", ddlTenureType.SelectedItem.Text);
                objMethodParameters.Add("FinanceAmount", txtFacilityAmt.Text);
                objMethodParameters.Add("ReturnPattern", ddl_Return_Pattern.SelectedValue);
                objMethodParameters.Add("MarginPercentage", txtMarginMoneyPer_Cashflow.Text);
                objMethodParameters.Add("Rate", txtRate.Text);
                objMethodParameters.Add("TimeValue", ddl_Time_Value.SelectedValue);
                objMethodParameters.Add("RepaymentMode", ddl_Repayment_Mode.SelectedValue);
                objMethodParameters.Add("CompanyId", intCompany_Id.ToString());
                objMethodParameters.Add("LobId", ddlLob.SelectedValue);
                objMethodParameters.Add("DocumentDate", txtOfferDate.Text);
                objMethodParameters.Add("Frequency", ddl_Frequency.SelectedValue);
                objMethodParameters.Add("RecoveryYear1", txt_Recovery_Pattern_Year1.Text);
                objMethodParameters.Add("RecoveryYear2", txt_Recovery_Pattern_Year2.Text);
                objMethodParameters.Add("RecoveryYear3", txt_Recovery_Pattern_Year3.Text);
                objMethodParameters.Add("RecoveryYear4", txt_Recovery_Pattern_Rest.Text);
                //objMethodParameters.Add("Roundoff", hdnRoundOff.Value);

                if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
                {
                    objMethodParameters.Add("PrincipalMethod", "1");
                }
                else
                {
                    objMethodParameters.Add("PrincipalMethod", "0");
                }


                if (ViewState["hdnRoundOff"] != null)
                {
                    if (Convert.ToString(ViewState["hdnRoundOff"]) != "")
                        objMethodParameters.Add("Roundoff", ViewState["hdnRoundOff"].ToString());
                    else
                        objMethodParameters.Add("Roundoff", "2");
                }
                else
                {
                    objMethodParameters.Add("Roundoff", "2");
                }

                //Ol related  changes on 27-07-2011.
                if (ddlLob.SelectedItem.Text.ToUpper().StartsWith("OL"))
                {
                    DataTable dtoutflw = (DataTable)ViewState["DtCashFlowOut"];
                    dtoutflw.Rows.Clear();
                    if (dtoutflw.Rows.Count == 0)
                    {
                        DataRow drOutflow = dtoutflw.NewRow();
                        drOutflow["Date"] = Utility.StringToDate(txtOfferDate.Text);
                        drOutflow["CashOutFlow"] = "Fin amount";
                        drOutflow["EntityID"] = strCustomer_Id;
                        drOutflow["Entity"] = S3GCustomerCommAddress.CustomerName;
                        drOutflow["OutflowFromId"] = "144";
                        drOutflow["OutflowFrom"] = "Customer";
                        DataTable dtAssetdetails = new DataTable();
                        /*if (ViewState["ObjDTAssetDetails"] != null)
                            dtAssetdetails = (DataTable)ViewState["ObjDTAssetDetails"];
                        decimal sumassetvalue = 0;
                        if (dtAssetdetails.Rows.Count > 0)
                        {
                            sumassetvalue = (decimal)(dtAssetdetails.Compute("Sum(AssetValue)", "Noof_Units > 0"));
                        }*/

                        drOutflow["Amount"] = txtFacilityAmt.Text;
                        drOutflow["CashOutFlowID"] = "-1";
                        drOutflow["Accounting_IRR"] = true;
                        drOutflow["Business_IRR"] = true;
                        drOutflow["Company_IRR"] = true;
                        drOutflow["CashFlow_Flag_ID"] = "41";
                        dtoutflw.Rows.Add(drOutflow);
                    }
                    ViewState["DtCashFlowOut"] = dtoutflw;
                }
                //For TL
                ViewState["DtRepayGrid_TL"] = null;

                //Checking if other than normal payment , start date should be last payment date.
                if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
                {
                    DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
                    dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";
                    string strAcctType = dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper();

                    if (strAcctType == "PROJECT FINANCE" || strAcctType == "DEFERRED PAYMENT" || strAcctType == "DEFERRED STRUCTURED")
                    {
                        DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
                        if (DtCashFlowOut.Rows.Count > 0)
                        {
                            DataRow drOutFlw = DtCashFlowOut.Select("CashFlow_Flag_ID=41").Last();
                            if (drOutFlw != null)
                            {
                                objMethodParameters.Remove("DocumentDate");
                                objMethodParameters.Add("DocumentDate", drOutFlw["Date"].ToString());
                                dtStartDate = Utility.StringToDate(drOutFlw["Date"].ToString());
                            }
                        }

                    }
                }


                if (ddl_Return_Pattern.SelectedValue == "2")
                {
                    if (txtResidualAmt_Cashflow.Text.Trim() != "" && txtResidualAmt_Cashflow.Text.Trim() != "0")
                    {
                        objMethodParameters.Add("decResidualAmount", txtResidualAmt_Cashflow.Text);
                    }
                    if (txtResidualValue_Cashflow.Text.Trim() != "" && txtResidualValue_Cashflow.Text.Trim() != "0")
                    {
                        objMethodParameters.Add("decResidualValue", txtResidualValue_Cashflow.Text);
                    }
                    switch (ddl_IRR_Rest.SelectedValue)
                    {
                        case "1":
                            objMethodParameters.Add("strIRRrest", "daily");
                            break;
                        case "2":
                            objMethodParameters.Add("strIRRrest", "monthly");
                            break;
                        default:
                            objMethodParameters.Add("strIRRrest", "daily");
                            break;

                    }

                    objMethodParameters.Add("decLimit", "0.10");
                    decimal decRateOut = 0;
                    dsRepayGrid = objRepaymentStructure.FunPubGenerateRepaymentSchedule(dtStartDate, (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"], objMethodParameters, dtMoratorium, out decRateOut);
                    ViewState["decRate"] = Math.Round(Convert.ToDouble(decRateOut), 4);
                }
                else
                {
                    dsRepayGrid = objRepaymentStructure.FunPubGenerateRepaymentSchedule(dtStartDate, objMethodParameters, dtMoratorium);
                }
                if (dsRepayGrid != null)
                {
                    if (dsRepayGrid.Tables[0].Rows.Count > 0)
                    {
                        DataTable ObjTempRepayTable = ((DataTable)ViewState["DtRepayGrid"]);
                        if (ObjTempRepayTable != null)
                        {
                            DataRow[] ObjDRArrayInstall = ObjTempRepayTable.Select("CASHFLOW_FLAG_ID = 23");
                            if (ObjDRArrayInstall.Length > 0)
                            {
                                foreach (DataRow ObjRow in ObjDRArrayInstall)
                                {
                                    ObjRow.Delete();
                                    ObjTempRepayTable.AcceptChanges();
                                }

                                foreach (DataRow ObjRow in ObjTempRepayTable.Rows)
                                {
                                    dsRepayGrid.Tables[0].ImportRow(ObjRow);
                                    dsRepayGrid.Tables[0].AcceptChanges();
                                }

                            }
                        }

                        DataTable dtRepaymentDec = new DataTable();
                        foreach (DataRow dr in dsRepayGrid.Tables[0].Rows)
                        {
                            dr["PerInstall"] = dr["PerInstall"].ToString()+".000"; //Added By Sathish 0n 28-Apr-2017
                        }
                        gvRepaymentDetails.DataSource = dsRepayGrid.Tables[0];
                        gvRepaymentDetails.DataBind();

                        ViewState["DtRepayGrid"] = dsRepayGrid.Tables[0];
                        DtRepayGrid = dsRepayGrid.Tables[0];
                        //if (ddl_Rate_Type.SelectedItem.Value == "2")
                        //{
                        //    ((TextBox)gvRepaymentDetails.Rows[0].FindControl("txRepaymentFromDate")).Visible = true;
                        //    ((Label)gvRepaymentDetails.Rows[0].FindControl("lblfromdate_RepayTab")).Visible = false;
                        //}
                        //else
                        //{
                        ((TextBox)gvRepaymentDetails.Rows[0].FindControl("txRepaymentFromDate")).Visible = false;
                        ((Label)gvRepaymentDetails.Rows[0].FindControl("lblfromdate_RepayTab")).Visible = true;
                        //}
                        btnReset.Enabled = false;
                        FunPriCalculateSummary(dsRepayGrid.Tables[0], "CashFlow", "TotalPeriodInstall");
                        FunPriCalculateIRR(0);
                        ////FunPriShowRepaymetDetails((decimal)DtRepayGrid.Compute("SUM(TotalPeriodInstall)", "CashFlow_Flag_ID =23"));
                        DataTable dtRepayDetails = (DataTable)ViewState["DtRepayGrid"];
                        if (dtRepayDetails.Rows.Count > 0)
                        {
                            if (((ddlLob.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLob.SelectedItem.Text.ToUpper().Contains("TE"))) && (ddl_Return_Pattern.SelectedValue == "6"))
                            {
                                FunPriShowRepaymetDetails((decimal)dtRepayDetails.Compute("SUM(TotalPeriodInstall)", "1=1"));
                                FunPriCalculateSummary(dtRepayDetails, "CashFlow", "TotalPeriodInstall");
                            }
                            else
                            {
                                FunPriShowRepaymetDetails((decimal)dsRepayGrid.Tables[0].Compute("SUM(TotalPeriodInstall)", "CashFlow_Flag_ID =23"));
                            }
                        }
                        else
                        {
                            gvRepaymentDetails.FooterRow.Visible = true;
                            btnReset.Enabled = true;
                            decimal decFinAmount = objRepaymentStructure.FunPubGetAmountFinanced(txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text);
                            /* It Calculates and displays the Repayment Details for ST-ADHOC */
                            FunPriShowRepaymetDetails(decFinAmount + FunPriGetStructureAdhocInterestAmount());
                        }
                    }
                    else
                    {
                        gvRepaymentDetails.FooterRow.Visible = true;
                        btnReset.Enabled = true;
                        /* It Calculates and displays the Repayment Details for ST-ADHOC */
                        decimal decFinAmount = objRepaymentStructure.FunPubGetAmountFinanced(txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text);
                        FunPriShowRepaymetDetails(decFinAmount + FunPriGetStructureAdhocInterestAmount());
                    }
                }
                else
                {
                    gvRepaymentDetails.FooterRow.Visible = true;
                    btnReset.Enabled = true;
                    /* It Calculates and displays the Repayment Details for ST-ADHOC */
                    decimal decFinAmount = objRepaymentStructure.FunPubGetAmountFinanced(txtFacilityAmt.Text, txtMarginMoneyPer_Cashflow.Text);
                    FunPriShowRepaymetDetails(decFinAmount + FunPriGetStructureAdhocInterestAmount());
                }

                FunPriFillRepayment_ViewState();
                FunPriUpdateROIRule();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private void FunPriShowRepaymetDetails(decimal decAmountRepayble)
    {

        if (txtTenure.Text != "" || txtTenure.Text != string.Empty)
        {
            
            lblTotalAmount.Text = "Total Amount Repayable : " +Math.Round(decAmountRepayble,ObjS3GSession.ProGpsSuffixRW);//5366
            lblFrequency_Display.Text = "Tenure &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : " + txtTenure.Text + " " + ddlTenureType.SelectedItem.Text;
            if (txtRate.Text.Trim() != "")
            {
                if (ViewState["decRate"] != null)
                {
                    lblMarginResidual.Text = "Rate &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : " + ViewState["decRate"].ToString();
                }
                else
                {
                    lblMarginResidual.Text = "Rate &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : " + txtRate.Text;
                }
            }

        }
    }

    private void FunPriSetMaxLength_gvOutFlow()
    {
        if (gvOutFlow.FooterRow != null)
        {
            TextBox txtAmountOutflow = gvOutFlow.FooterRow.FindControl("txtAmount_Outflow") as TextBox;
            //txtAmountOutflow.CheckGPSLength(true, "Outflow Amount",1);
            txtAmountOutflow.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, "Outflow Amount");//5366

            Button btnAdd_OutFlow = gvOutFlow.FooterRow.FindControl("btnAddOut") as Button;
            btnAdd_OutFlow.Attributes.Add("onclick", "FunChkAllFooterValues(" + gvOutFlow.ClientID + ");");
        }
    }

    private void FunPriSetMaxLength_gvInflow()
    {
        if (gvInflow.FooterRow != null)
        {
            TextBox txtAmountInflow = gvInflow.FooterRow.FindControl("txtAmount_Inflow") as TextBox;
            txtAmountInflow.CheckGPSLength(false, "Inflow Amount");

            Button btnAdd_Inflow = gvInflow.FooterRow.FindControl("btnAdd") as Button;
            btnAdd_Inflow.Attributes.Add("onclick", "FunChkAllFooterValues(" + gvInflow.ClientID + ");");
        }
    }

    private void FunPriSetMaxLength_gvRepaymentDetails()
    {
        if (gvRepaymentDetails.FooterRow != null)
        {
            TextBox txtPerInstall = gvRepaymentDetails.FooterRow.FindControl("txtPerInstallmentAmount_RepayTab") as TextBox;
            //txtPerInstall.CheckGPSLength(false, "Per Installment Amount");
            txtPerInstall.SetDecimalPrefixSuffix(12, 3, false, false, "Per Installment Amount");

            TextBox txtBreakPer = gvRepaymentDetails.FooterRow.FindControl("txtBreakup_RepayTab") as TextBox;
            txtBreakPer.SetDecimalPrefixSuffix(2, 3, false, false, "Break up Percentage");
        }
    }

    private void FunPriSetMaxLength()
    {
        txtMarginMoneyPer_Cashflow.SetDecimalPrefixSuffix(2, 4, false, false, "Margin %");
        txtMarginMoneyAmount_Cashflow.CheckGPSLength(false, "Margin Amount");

        txtMarginPercentage.SetDecimalPrefixSuffix(2, 4, false, false, "Margin %");
        //txtMarginAmountAsset.CheckGPSLength(false, "Margin Amount");
        txtMarginAmountAsset.SetDecimalPrefixSuffix(10, 4, false, false, "Margin Amount %");
        txtRate.SetDecimalPrefixSuffix(5, 4, false, false, "Rate");

        txt_Margin_Percentage.SetDecimalPrefixSuffix(2, 4, false, false, "Margin %");

        txtResidualValue_Cashflow.SetDecimalPrefixSuffix(2, 3, false, false, "Residual Value");
        txtResidualAmt_Cashflow.SetDecimalPrefixSuffix(10, 3, false, "Residual Amount");

        //txtFacilityAmt.CheckGPSLength(true, "Facility Amount",1);//5366
        txtFacilityAmt.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, "Facility Amount");//5366
        txtUnitValue.SetDecimalPrefixSuffix(10, 3, true, "Unit Value");
        txtTotalAssetValue.SetDecimalPrefixSuffix(10, 3, false, "Total Asset Value");
        txtBookDepreciationPerc.SetDecimalPrefixSuffix(10, 3, false, "Book Depreciation %");
        txtBlockDepreciationPerc.SetDecimalPrefixSuffix(10, 3, false, "Block Depreciation %");
        if (ObjS3GSession.ProGpsSuffixRW < 2)
            HdnGPSDecimal.Value = ObjS3GSession.ProGpsSuffixRW.ToString();
        else
            HdnGPSDecimal.Value = "2";

        //HiddenField hidThrobber = (HiddenField)grvData.FindControl("hidThrobber");
        //HdnGPSDecimal

        //txtCompanyIRR.SetDecimalPrefixSuffix(10, 4, true);
        //txtCompanyIRR_Repay.SetDecimalPrefixSuffix(10, 4, true);

        //txtBusinessIRR.SetDecimalPrefixSuffix(10, 4, true);
        //txtBusinessIRR_Repay.SetDecimalPrefixSuffix(10, 4, true);

        //txtAccIRR.SetDecimalPrefixSuffix(10, 4, true);
        //txtAccountIRR_Repay.SetDecimalPrefixSuffix(10, 4, true);

        FunPriSetMaxLength_gvOutFlow();
        FunPriSetMaxLength_gvInflow();
        FunPriSetMaxLength_gvRepaymentDetails();
    }

    private void FunPriShowRepaymentFooter()
    {
        if (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddlLob.SelectedItem.Text.ToUpper().Split('-')[0].Trim() != "FT")
        {
            if (ddl_Rate_Type.SelectedItem.Value == "2" && Request.QueryString["qsMode"].ToString() != "Q")
            {
                ((TextBox)gvRepaymentDetails.Rows[0].FindControl("txRepaymentFromDate")).Visible = true;
                ((Label)gvRepaymentDetails.Rows[0].FindControl("lblfromdate_RepayTab")).Visible = false;
            }
            else
            {
                ((TextBox)gvRepaymentDetails.Rows[0].FindControl("txRepaymentFromDate")).Visible = false;
                ((Label)gvRepaymentDetails.Rows[0].FindControl("lblfromdate_RepayTab")).Visible = true;
            }
        }
    }

    private int FunPriGetNoofYearsFromTenure()
    {
        int intNoofYears = 0;
        if (txtTenure.Text != "")
        {
            switch (ddlTenureType.SelectedItem.Text.ToLower())
            {
                case "months":
                    intNoofYears = (int)Math.Ceiling(Convert.ToDecimal(Convert.ToInt32(txtTenure.Text) / 12.00));
                    break;
                case "weeks":
                    intNoofYears = (int)Math.Ceiling(Convert.ToDecimal(Convert.ToInt32(txtTenure.Text) / 52.00));
                    break;
                case "days":
                    intNoofYears = (int)Math.Ceiling(Convert.ToDecimal(Convert.ToInt32(txtTenure.Text) / 365.00));
                    break;
            }
        }
        return intNoofYears;
    }


    private void GetReportData()
    {
        string strLOB = "";
        if (Convert.ToInt32(ddlLob.SelectedValue) > 0)
            strLOB = ddlLob.SelectedItem.ToString();

        DataTable dt = new DataTable();

        dt.Columns.Add("CompanyName");
        dt.Columns.Add("OfferNo");
        dt.Columns.Add("OfferDate");
        dt.Columns.Add("CustomerCode");
        dt.Columns.Add("CustomerName");
        dt.Columns.Add("CustomerAddress");
        dt.Columns.Add("LOB");
        dt.Columns.Add("FinanceAmount");
        dt.Columns.Add("RateOfInterest");
        dt.Columns.Add("Tenure");
        dt.Columns.Add("Advance_Arrears");
        dt.Columns.Add("FinanceCharges");
        dt.Columns.Add("IRR");
        dt.Columns.Add("DealerCommission");
        dt.Columns.Add("Subvention");
        dt.Columns.Add("ProcessingFee");
        dt.Columns.Add("SecurityDeposit");
        dt.Columns.Add("AnyOtherCharges");


        DataTable dtReport = new DataTable();
        dtReport = FunPriGetChargeDetails();

        DataTable dtCheckList = new DataTable(); // 2 b edited
        dtCheckList = FunPriGetCheckListDetails(); // 2 b edited

        DataRow dRow = dt.NewRow();

        dRow["CompanyName"] = ObjUserInfo.ProCompanyNameRW;
        dRow["OfferNo"] = txtOfferNo.Text;
        dRow["OfferDate"] = txtOfferDate.Text;
        dRow["CustomerCode"] = S3GCustomerCommAddress.CustomerCode;
        dRow["CustomerName"] = S3GCustomerCommAddress.CustomerName;
        dRow["CustomerAddress"] = S3GCustomerCommAddress.CustomerAddress;
        dRow["LOB"] = strLOB;
        dRow["FinanceAmount"] = txtFacilityAmt.Text;
        dRow["RateOfInterest"] = txtRate.Text;
        dRow["Tenure"] = txtTenure.Text + ' ' + ddlTenureType.SelectedItem.Text;
        dRow["Advance_Arrears"] = ddl_Time_Value.SelectedItem.ToString();
        //dRow["FinanceCharges"] = FunPriGetInterestAmount().ToString();
        dRow["FinanceCharges"] = FunPriGetInterestAmount();
        dRow["IRR"] = txtBusinessIRR.Text;
        dRow["DealerCommission"] = 0;
        dRow["Subvention"] = 0;
        dRow["ProcessingFee"] = dtReport.Rows[0]["ProcessingFee_Dec"].ToString();
        dRow["SecurityDeposit"] = 0;
        dRow["AnyOtherCharges"] = dtReport.Rows[0]["AnyOtherCharges_Dec"].ToString();

        dt.Rows.Add(dRow);

        DataTable dtRepayment = new DataTable();
        dtRepayment = (DataTable)ViewState["RepaymentStructure"];

        Session["Report_Pricing"] = dt;
        Session["CheckList"] = dtCheckList;
        Session["Repayment_Structure"] = dtRepayment;

    }






    //private string GetHTMLText()
    //{
    //    StringBuilder strb = new StringBuilder();
    //    string strLOB = "";
    //    if (Convert.ToInt32(ddlLob.SelectedValue) > 0) strLOB = ddlLob.SelectedItem.ToString();

    //    strb.Append("<font size=\"2\"  color=\"black\" face=\"verdana\"> <table align=\"center\" width=\"100%\">");
    //    strb.Append("<tr> <td colspan=\"4\" align=\"center\" > <font size=\"2\"  color=\"Black\" face=\"verdana\"> <u> <b>" + ObjUserInfo.ProCompanyNameRW + "</b> </u> </font> </td> </tr>");
    //    strb.Append("<tr> <td colspan=\"4\" align=\"center\" > <font size=\"2\"  color=\"Black\" face=\"verdana\"> <b>PRICING OFFER</b> </font>  </td>  </tr>");
    //    strb.Append("<tr> <td colspan=\"4\" height=\"15px\"> </td> </tr>");
    //    strb.Append("<tr> <td colspan=\"2\" height=\"15px\"> </td> <td  align=\"left\"  valign=\"top\">Offer No: </td>  <td align=\"left\">" + txtOfferNo.Text + " </td> </tr>");
    //    strb.Append("<tr> <td colspan=\"2\" height=\"15px\"> </td> <td  align=\"left\"  valign=\"top\">Offer Date: </td>  <td align=\"left\">" + txtOfferDate.Text + " </td> </tr>");
    //    strb.Append("<tr> <td align=\"left\" valign=\"top\"> Customer Code:</td><td align=\"left\">" + S3GCustomerCommAddress.CustomerCode + " </td> <td colspan=\"2\" height=\"15px\"> </td> </tr>");
    //    strb.Append("<tr> <td align=\"left\" valign=\"top\"> Customer Name:</td><td align=\"left\">" + S3GCustomerCommAddress.CustomerName + " </td> <td colspan=\"2\" height=\"15px\"> </td> </tr>");
    //    strb.Append("<tr> <td align=\"left\" valign=\"top\"> Address:</td><td align=\"left\">" + S3GCustomerCommAddress.CustomerAddress + " </td> <td colspan=\"2\" height=\"15px\"> </td> </tr>");
    //    strb.Append("<tr> <td colspan=\"4\" align=\"left\" > <font size=\"2\"  color=\"Black\" face=\"verdana\">SUB : Business offer against your enquiry </font> </td> </tr>");
    //    strb.Append("<tr> <td colspan=\"4\" align=\"left\" > <font size=\"2\"  color=\"Black\" face=\"verdana\">Dear Sir / Madam </font> </td> </tr>");
    //    strb.Append("<tr> <td colspan=\"4\" align=\"left\" > <font size=\"2\"  color=\"Black\" face=\"verdana\">We thank for your enquiry and seeking finance for purchase of assets under " + strLOB + " .We are pleased to give our offer as under.</font> </td> </tr>");
    //    strb.Append("<tr> <td colspan=\"2\" height=\"15px\" align=\"left\" valign=\"top\"> DETAILS: </td><td colspan=\"2\" height=\"15px\" align=\"left\" valign=\"top\">OTHER CHARGES:</td></tr>");
    //    strb.Append("<tr> <td align=\"left\" valign=\"top\">Finance Amount:</td><td align=\"left\">" + txtFacilityAmt.Text + " </td><td  align=\"left\"  valign=\"top\"> Dealer commission:</td><td align=\"left\">" + 0 + " </td> </tr>");
    //    strb.Append("<tr> <td align=\"left\" valign=\"top\">Rate of Interest:</td><td align=\"left\">" + txtRate.Text + " </td><td  align=\"left\"  valign=\"top\"> Subvention:</td><td align=\"left\">" + 0 + " </td></tr>");
    //    strb.Append("<tr> <td align=\"left\" valign=\"top\">Tenure:</td><td align=\"left\">" + txtTenure.Text + "  " + ddlTenureType.SelectedItem.Text + " </td><td  align=\"left\"  valign=\"top\"> Processing fee:</td><td align=\"left\">" + 0 + " </td> </tr>");
    //    strb.Append("<tr> <td align=\"left\" valign=\"top\">Advance/Arrears:</td><td align=\"left\">" + ddl_Time_Value.SelectedItem.ToString() + " </td><td  align=\"left\"  valign=\"top\"> Security Deposit:</td> <td align=\"left\">" + 0 + " </td> </tr>");
    //    strb.Append("<tr> <td align=\"left\" valign=\"top\">Finance Charges:</td><td align=\"left\">" + FunPriGetInterestAmount().ToString() + " </td><td  align=\"left\"  valign=\"top\"> Any other charges:</td><td align=\"left\">" + 0 + " </td> </tr>");
    //    strb.Append("<tr> <td align=\"left\" valign=\"top\" >IRR:</td><td align=\"left\" >" + txtBusinessIRR.Text + " </td><td align=\"left\" > </td><td align=\"left\" > </td></tr>");
    //    //strb.Append("<tr> <td  align=\"left\"  valign=\"top\" colspan=\"4\"> E.M.I:</td></tr>" );
    //    strb.Append("<tr> <td colspan=\"4\" align=\"left\" > <font size=\"2\"  color=\"Black\" face=\"verdana\">We look forward to your confirmation to proceed further on this. </font> </td> </tr>");
    //    strb.Append("<tr> <td colspan=\"4\" align=\"left\" > <font size=\"2\"  color=\"Black\" face=\"verdana\">Yours truly <br> For  " + ObjUserInfo.ProCompanyNameRW + " </font> </td> </tr>");
    //    strb.Append("<tr> <td colspan=\"4\" align=\"left\" > <font size=\"2\"  color=\"Black\" face=\"verdana\">AUTHORIZED SIGNATORY </font> </td> </tr>");
    //    //   strb.Append("<tr> <td colspan=\"4\" align=\"left\" > <font size=\"2\"  color=\"Black\" face=\"verdana\">Note: the respective currency code should be suffixed before all amount fields.</font> </td> </tr>");
    //    strb.Append("</table></font>");

    //    return strb.ToString();
    //}

    private void FunPriLoadFileNameInPRDDT()
    {
        foreach (GridViewRow grvData in gvPRDDT.Rows)
        {
            Label myThrobber = (Label)grvData.FindControl("myThrobber");
            HiddenField hidThrobber = (HiddenField)grvData.FindControl("hidThrobber");

            if (hidThrobber.Value != "")
            {
                myThrobber.Text = hidThrobber.Value;
            }
        }

    }

    void AssignNewWorkFlowValues(int SelecteDocument, int SelectedProgramId, string SelectedDocumentNo, int BranchID, int LOBId, int ProductId, string LasDocumentNo, DataTable WFSequence)
    {
        WorkFlowSession WFValues = new WorkFlowSession(SelecteDocument, SelectedProgramId, SelectedDocumentNo, BranchID, LOBId, ProductId, LasDocumentNo, 2);
        WFValues.WorkFlowScreens = WFSequence;
    }



    private void FunPriUpdateROIRuleDecRate()//Added on 3/11/2011 by saran for UAT raised mail modify mode not allowing to save forr IRR to flat rate
    {
        DataTable ObjDTROI = new DataTable(); ;
        ObjDTROI = (DataTable)ViewState["ROIRules"];
        decimal decRate = 0;
        switch (ddl_Return_Pattern.SelectedValue)
        {

            case "1":
                decRate = Convert.ToDecimal(txtRate.Text);
                break;
            case "2":
                //ObjCommonBusLogic.FunPubCalculateFlatRate(dtRepaymentTab, dtCashInflow, dtCashOutflow, ddl_Frequency.SelectedItem.Text, Convert.ToInt32(txtTenure.Text), ddlTenureType.SelectedItem.Text, strDateFormat, Convert.ToDecimal(txtFacilityAmt.Text), Convert.ToDouble(9.6365), strIrrRest, "Empty", strTimeval, Convert.ToDecimal(0.10), IRRType.Accounting_IRR, out decRate, Convert.ToDecimal(10.05), decPLR);
                if (ViewState["decRate"] != null)
                {
                    decRate = Convert.ToDecimal(ViewState["decRate"].ToString());
                }//Hard Coded for testing IRR
                break;
        }
        ObjDTROI.Rows[0]["IRR_Rate"] = decRate;
        ObjDTROI.Rows[0].AcceptChanges();
        ViewState["ROIRules"] = ObjDTROI;
    }

    private string FunPriTempPriDetails(string str, DataTable dtDetails)
    {
        try
        {
            int j = 1;
            string[] q = Regex.Split(str, "</TR>");
            string strHeader = q[0] + "</TR>";
            string strDetails = q[1] + "</TR>";
            string strDontChange = q[1] + "</TR>";

            string Output = string.Empty;

            if (dtDetails.Rows.Count == 0)
            {
                Output = "<TR>";
                foreach (DataColumn dcolsub1 in dtDetails.Columns)
                {

                    string strColnamesub = string.Empty;
                    strColnamesub = "~" + dcolsub1.ColumnName + "~";
                    if (strColnamesub == strColnamesub.ToUpper())
                    {

                        strDetails = strDetails.ToUpper();
                    }
                    if (strDetails.Contains(strColnamesub))
                    {
                        strDetails = strDetails.Replace(strColnamesub, "NIL");
                        Output = strDetails;
                    }

                }
                Output += "</TR>";
                Output = strHeader + Output + "</TBODY></TABLE>";
                return Output;
            }


            foreach (DataRow drsub1 in dtDetails.Rows)
            {
                strDetails = strDontChange;
                foreach (DataColumn dcolsub1 in dtDetails.Columns)
                {
                    string strColnamesub = string.Empty;
                    strColnamesub = "~" + dcolsub1.ColumnName + "~";
                    if (strColnamesub == strColnamesub.ToUpper())
                    {

                        strDetails = strDetails.ToUpper();
                    }
                    if (strDetails.Contains(strColnamesub))
                    {


                        if (strColnamesub == ("~" + "SlNo" + "~"))
                        {
                            strDetails = strDetails.Replace(strColnamesub, j.ToString());
                            j++;
                        }
                        strDetails = strDetails.Replace(strColnamesub, drsub1[dcolsub1].ToString());
                    }

                }
                Output += strDetails;
            }
            Output = strHeader + Output + "</TBODY></TABLE>";
            return Output;
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    private string FunPriHeadPriDetails(string str, DataTable dtHeader, DataRow dr)
    {
        try
        {
            foreach (DataColumn dcol in dtHeader.Columns)
            {


                string ColName1 = string.Empty;
                ColName1 = "~" + dcol.ColumnName + "~";
                if (ColName1 == ColName1.ToUpper())
                {
                    str = str.ToUpper();
                }
                if (str.Contains(ColName1))
                    str = str.Replace(ColName1, dr[dcol].ToString());
            }

            return str;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void FunPriPricingDetails(int CompanyID, string LOB, string Template)
    {
        try
        {
            Dictionary<string, string> Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_Id", CompanyID.ToString());
            if (LOB != "")
                Procparam.Add("@Lob_Id", LOB);


            DataSet DS = new DataSet();

            DataTable dtHeader = new DataTable("Header");
            DataTable dtHeadDetails = new DataTable("Details");
            DataTable dtHeadSubDetails = new DataTable("Subdetails");


            DataTable dtDetails = new DataTable();



            string strHtml = string.Empty;
            string strHtml1 = string.Empty;
            string strHtml2 = string.Empty;
            DataSet dsTabs = new DataSet();
            DS = Utility.GetDataset("S3G_Sys_GetTmplPricingDetails", Procparam);
            if (DS != null)
            {
                if (DS.Tables[0].Rows.Count > 0)
                    dtHeader = DS.Tables[0];//.Copy();
                //if (DS.Tables[1].Rows.Count > 0)
                dtHeadDetails = DS.Tables[1].Copy();
                if (DS.Tables[2].Rows.Count > 0)
                    dtHeadSubDetails = DS.Tables[2];//.Copy();

                //dsTabs.Tables.Add(dtHeadDetails);
                //dsTabs.Tables.Add(dtHeadSubDetails);

            }

            if (dtHeader.Rows.Count == 0)
                return;

            strHtml = Template;
            string[] a = Regex.Split(strHtml, "<TBODY>");
            foreach (DataRow dr in dtHeader.Rows)
            {
                if (!strHtml.Contains("<TBODY>"))
                {
                    strHtml = FunPriHeadPriDetails(strHtml, dtHeader, dr);
                    FunPriGeneratePDF(strHtml, dr["Pricing_ID"].ToString());
                    return;
                }

                string strFinal = string.Empty;
                for (int i = 0; i < a.Length; i++)
                {
                    string str = a[i];
                    string strWithoutTable;
                    string strTable;

                    if (str.Contains("<TR>"))
                    {
                        string[] q = Regex.Split(str, "</TABLE>");
                        strTable = "<TBODY>" + q[0] + "</TABLE>";
                        strWithoutTable = q[1];
                        DataRow[] dtr = null;

                        string strWhichTable = FunPriCheckDatatable(strTable, DS);

                        if (strWhichTable == "Table2")
                        {

                            dtDetails = dtHeadSubDetails.Clone();
                            dtr = dtHeadSubDetails.Select("Pricing_ID=" + dr["Pricing_ID"]);

                        }
                        else if (strWhichTable == "Table1")
                        {
                            dtDetails = dtHeadDetails.Clone();
                            // dtDetails = dtHeadDetails.Copy();
                            dtr = dtHeadDetails.Select("Pricing_ID=" + dr["Pricing_ID"]);
                        }


                        if (dtr.Length > 0)
                        {
                            dtDetails = dtr.CopyToDataTable();
                        }
                        strTable = FunPriTempPriDetails(strTable, dtDetails);
                        strFinal += strTable + strWithoutTable;

                    }
                    else
                    {

                        strFinal += FunPriHeadPriDetails(str, dtHeader, dr);
                    }
                }

                FunPriGeneratePDF(strFinal, dr["Pricing_ID"].ToString());
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }



        //if (dtHeader.Rows.Count > 0)
        //{

        //    foreach (DataRow dr in dtHeader.Rows)
        //    {

        //        strHtml1 = FTBTemplate.Text;
        //        string[] a = Regex.Split(strHtml1, "</TBODY>");
        //        strHtml1 = a[0].ToString();

        //        if (!(a.Length > 1))
        //            if (!(a[0].Contains("<TABLE>")))
        //            {

        //                //if (!(a[1].Contains("</TABLE>")))
        //                //{
        //                foreach (DataColumn dcol in dtHeader.Columns)
        //                {
        //                    string ColName1 = string.Empty;
        //                    ColName1 = "~" + dcol.ColumnName + "~";
        //                    if (strHtml1.Contains(ColName1))
        //                        strHtml1 = strHtml1.Replace(ColName1, dr[dcol].ToString());
        //                }
        //                FunPriGeneratePDF(strHtml1, dr["Pricing_ID"].ToString());
        //                return;


        //            }
        //        foreach (DataColumn dcol in dtHeader.Columns)
        //        {
        //            string ColName1 = string.Empty;
        //            ColName1 = "~" + dcol.ColumnName + "~";
        //            if (strHtml1.Contains(ColName1))
        //                strHtml1 = strHtml1.Replace(ColName1, dr[dcol].ToString());
        //        }
        //        DataRow[] drCustDetails = dtHeadDetails.Select("Customer_ID = " + dr["Customer_ID"].ToString());
        //        if (drCustDetails != null)
        //        {
        //            if (drCustDetails.Length > 0)
        //            {
        //                dtDetails = drCustDetails.CopyToDataTable();
        //            }
        //        }

        //        //string[] stringSeparators = new string[] { "<TD>~" };

        //        //string[] strColumn = strNewHTML.Split(stringSeparators, StringSplitOptions.None);
        //        strHtml1 += "</TBODY>";
        //        int intstartindex = 0;
        //        int intEndindex = 0;

        //        int inttbodysize = 0;
        //        if (strHtml1.Contains("<TBODY>"))
        //            intstartindex = strHtml1.IndexOf("<TBODY>");
        //        if (strHtml1.Contains("</TBODY>"))
        //        {
        //            intEndindex = strHtml1.IndexOf("</TBODY>");
        //            inttbodysize = 8;
        //        }


        //        string strCutString = strHtml1.Substring(intstartindex, intEndindex - intstartindex + inttbodysize);
        //        string strCutStringTD = string.Empty;
        //        string[] stringSeparators1 = new string[] { "<TR>" };

        //        string[] strCutSplit = strCutString.Split(stringSeparators1, StringSplitOptions.None);

        //        if (strCutSplit.Length > 2)
        //        {
        //            int intEndindx = strCutSplit[2].IndexOf("</TR>");
        //            strCutStringTD = "<TR>" + strCutSplit[2].Substring(0, intEndindx) + "</TR>";
        //        }

        //        if (dtDetails.Rows.Count == 0)
        //        {
        //            int j = 0;
        //            string strColnamesub = string.Empty;
        //            string strSubHTml = "<TR>";
        //            foreach (DataColumn dcolsub1 in dtHeadDetails.Columns)
        //            {
        //                if (j != 0 && j != 1) {
        //                    strSubHTml += "<TD>Nil</TD>";
        //                }
        //                j++;
        //            }
        //            strSubHTml += "</TR>";
        //            if ((!string.IsNullOrEmpty(strCutStringTD)) && (!string.IsNullOrEmpty(strSubHTml)))
        //                strHtml1 = strHtml1.Replace(strCutStringTD, strSubHTml);
        //        }

        //        if (dtDetails.Rows.Count > 0)
        //        {
        //            int i = 1;
        //            int j = 1;
        //            string strSubHTml = string.Empty;
        //            foreach (DataRow drsub in dtDetails.Rows)
        //            {
        //                strSubHTml += strCutStringTD.Replace("~", i + "~");
        //                ++i;
        //            }



        //            foreach (DataRow drsub1 in dtDetails.Rows)
        //            {

        //                foreach (DataColumn dcolsub1 in dtDetails.Columns)
        //                {
        //                    string strColnamesub = string.Empty;
        //                    strColnamesub = j.ToString() + "~" + dcolsub1.ColumnName + j.ToString() + "~";
        //                    if (strSubHTml.Contains(strColnamesub))
        //                    {
        //                        if (strColnamesub == (j.ToString() + "~" + "SlNo" + j.ToString() + "~"))
        //                        {


        //                                strSubHTml = strSubHTml.Replace(strColnamesub, j.ToString());

        //                        }

        //                        strSubHTml = strSubHTml.Replace(strColnamesub, drsub1[dcolsub1].ToString());
        //                    }
        //                }
        //                j++;

        //            }
        //            if ((!string.IsNullOrEmpty(strCutStringTD)) && (!string.IsNullOrEmpty(strSubHTml)))
        //                strHtml1 = strHtml1.Replace(strCutStringTD, strSubHTml);
        //        }
        //        if (a[1].Contains("<TBODY>"))
        //        {
        //            strHtml2 = a[1].ToString();
        //            DataRow[] drCust = dtHeadSubDetails.Select("Pricing_ID =" + dr["Pricing_ID"].ToString());

        //            if (drCust != null)
        //            {
        //                if (drCust.Length > 0)
        //                {
        //                    dtSubDetails = drCust.CopyToDataTable();
        //                }
        //            }
        //            strHtml2 += "</TBODY>";


        //            //strHtml1 = a[1].ToString();
        //            //string q = strHtml1.Substring(intstartindex + intEndindex );
        //            int intstartindex1 = 0;
        //            int intEndindex1 = 0;

        //            int inttbodysize1 = 0;
        //            if (strHtml2.Contains("<TBODY>"))
        //                intstartindex1 = strHtml2.IndexOf("<TBODY>");
        //            if (strHtml2.Contains("</TBODY>"))
        //            {
        //                intEndindex1 = strHtml2.IndexOf("</TBODY>");
        //                inttbodysize = 8;
        //            }


        //            string strCutString1 = strHtml2.Substring(intstartindex1, intEndindex1 - intstartindex1 + inttbodysize);
        //            string strCutStringTD1 = string.Empty;
        //            string[] stringSeparators2 = new string[] { "<TR>" };

        //            string[] strCutSplit1 = strCutString1.Split(stringSeparators2, StringSplitOptions.None);

        //            if (strCutSplit1.Length > 2)
        //            {
        //                int intEndindx = strCutSplit1[2].IndexOf("</TR>");
        //                strCutStringTD1 = "<TR>" + strCutSplit1[2].Substring(0, intEndindx) + "</TR>";
        //            }
        //            if (dtSubDetails.Rows.Count > 0)
        //            {
        //                int i = 1;
        //                int j = 1;
        //                string strSubHTml = string.Empty;
        //                foreach (DataRow drsub in dtSubDetails.Rows)
        //                {
        //                    strSubHTml += strCutStringTD1.Replace("~", i + "~");
        //                    ++i;
        //                }



        //                foreach (DataRow drsub1 in dtSubDetails.Rows)
        //                {
        //                    foreach (DataColumn dcolsub1 in dtSubDetails.Columns)
        //                    {
        //                        string strColnamesub = string.Empty;
        //                        strColnamesub = j.ToString() + "~" + dcolsub1.ColumnName + j.ToString() + "~";
        //                        if (strSubHTml.Contains(strColnamesub))
        //                        {
        //                            strSubHTml = strSubHTml.Replace(strColnamesub, drsub1[dcolsub1].ToString());
        //                        }
        //                    }
        //                    j++;
        //                }

        //                strHtml1 += strHtml2;



        //                if ((!string.IsNullOrEmpty(strCutStringTD1)) && (!string.IsNullOrEmpty(strSubHTml)))
        //                    strHtml1 = strHtml1.Replace(strCutStringTD1, strSubHTml);
        //                strHtml1 += "</TABLE>";
        //            }
        //        }
        //        else
        //        {


        //            strHtml1 += "</TABLE>";
        //        }


        //        FunPriGeneratePDF(strHtml1, dr["Pricing_ID"].ToString());
        //    }

        //}

    }

    private string FunPriCheckDatatable(string strTable, DataSet ds)
    {
        string Table = string.Empty;

        DataTable dt;


        for (int i = 0; i < ds.Tables.Count; i++)
        {
            dt = ds.Tables[i].Copy();
            foreach (DataColumn dcol in dt.Columns)
            {
                string ColName1 = string.Empty;
                ColName1 = "~" + dcol.ColumnName + "~";
                if (ColName1 == ColName1.ToUpper())
                {
                    strTable = strTable.ToUpper();
                }
                if (ColName1 != "~SlNo~")
                {
                    if (strTable.Contains(ColName1))
                    {
                        return dt.TableName;
                    }

                }

            }
        }



        return Table;
    }

    private void FunPriGeneratePDF(string strNewHTML, string FileName)
    {
        if (strNewHTML.Contains("&NBSP;"))
        {
            strNewHTML = strNewHTML.Replace("&NBSP;", "<BR>");
        }
        if (strNewHTML.Contains("&nbsp;"))
        {
            strNewHTML = strNewHTML.Replace("&nbsp;", "<BR>");

        }
        String htmlText = strNewHTML.Replace("</P>", "</P></BR>");

        htmlText = htmlText.Replace("<HR>", "<HR width=\"100\">");
        string strnewFile = (Server.MapPath(".") + "\\PDF Files\\" + FileName + ".pdf");
        string strFileName = "/Origination/PDF Files/" + FileName + ".pdf";
        Document doc = new Document();
        PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(strnewFile, FileMode.Create));
        doc.AddCreator("Sundaram Infotech Solutions Limited");
        doc.AddTitle("Dunning Letter_" + FileName);
        doc.Open();
        List<IElement> htmlarraylist = iTextSharp.text.html.simpleparser.HTMLWorker.ParseToList(new StringReader(htmlText), null);
        for (int k = 0; k < htmlarraylist.Count; k++)
        { doc.Add((IElement)htmlarraylist[k]); }
        doc.AddAuthor("S3G Team");
        doc.Close();
        //System.Diagnostics.Process.Start(strnewFile);
        string strScipt = "window.open('../Common/S3GDownloadPage.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
        ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
    }

    private void FunPriGetTemplateNames()
    {
        Dictionary<string, string> dictparam = new Dictionary<string, string>();
        dictparam.Add("@Company_ID", intCompany_Id.ToString());
        dictparam.Add("@LOB_Id", ddlLob.SelectedValue);
        dictparam.Add("@Loc_ID", ddlBranch.SelectedValue);

        ddlTemp.BindDataTable("S3G_Org_GetPricingTemplName", dictparam, new string[] { "ID", "Name" });
    }
    #endregion
    //To print Check list
    protected void btnchklist_Click(object sender, EventArgs e)
    {
        DataSet datachklist = new DataSet();
        datachklist = (DataSet)ViewState["checklist"];
        if (datachklist.Tables[0].Rows.Count > 0)
        {
            if (Convert.ToInt32(datachklist.Tables[0].Rows[0]["doc_count"].ToString()) <= 0)
            {
                Utility.FunShowAlertMsg(this.Page, "Predisbursement Documents Not Available for this pricing Number");
            }
            else
            {
                FunCrstalReportGeneration();
            }
        }
    }
    private void FunCrstalReportGeneration()
    {
        try
        {
            Guid objGuid;
            objGuid = Guid.NewGuid();
            DataSet datachklist = new DataSet();
            datachklist = (DataSet)ViewState["checklist"];
            rpd.Load(Server.MapPath("Check_list.rpt"));
            rpd.SetDataSource(datachklist.Tables[0]);
            rpd.Subreports["dealer.rpt"].SetDataSource(datachklist.Tables[1]);
            string strFileName = Server.MapPath(".") + "\\PDF Files\\" + txtOfferNo.Text.Replace("/", "") + objGuid.ToString() + ".pdf";
            string strFolder = Server.MapPath(".") + "\\PDF Files";
            if (!(System.IO.Directory.Exists(strFolder)))
            {
                DirectoryInfo di = Directory.CreateDirectory(strFolder);
            }
            string strScipt = "";
            rpd.ExportToDisk(ExportFormatType.PortableDocFormat, strFileName);
            strScipt = "window.open('../Common/S3GDownloadPage.aspx?qsFileName=/Origination/PDF Files/" + txtOfferNo.Text.Replace("/", "") + objGuid.ToString() + ".pdf', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
        }
        catch (System.IO.IOException ex)
        {
            Utility.FunShowAlertMsg(this.Page, "Error: Unable to Generate Check List");
        }
        catch (Exception objException)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(objException, strPageName);
        }
    }
    #region Properties
    protected DateTime dtNextDate { get; set; }
    protected int intNextInstall { get; set; }
    #endregion

    //Start to provide Entity Details with Asset

    protected void ddlPayTo_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlPayTo.SelectedItem.ToString().ToLower() == "entity")
        {
            FunToggleEntityControls(true);
        }
        else if (ddlPayTo.SelectedItem.ToString().ToLower() == "customer")
        {
            FunToggleEntityControls(false);
        }
        else
        {
            txtCustomerName.Text = "";

        }
        ddlPayTo.Focus();
    }
    protected void FunToggleEntityControls(bool CanShow)
    {
        txtCustomerName.Text = "";
        if (S3GCustomerCommAddress.CustomerName != null)
        {
            // txtCustomerName.Text = Session["AssetCustomer"].ToString().Substring(Session["AssetCustomer"].ToString().IndexOf(";") + 1);
            txtCustomerName.Text = S3GCustomerCommAddress.CustomerName;

        }

        ddlEntityNameList.Visible = ddlEntityNameList.IsMandatory = CanShow;
        lblEntityNameList.Visible = CanShow;

        txtCustomerName.Visible = !CanShow;
        lblCustomerName.Visible = !CanShow;
        rfvCustomerName.Enabled = CanShow;

    }


    //End to provide Entity Details with Asset
}
