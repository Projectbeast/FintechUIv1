#region PageHeader
/// © 2010 SUNDARAM INFOTECH SOLUTIONS P LTD . All rights reserved
/// 
/// <Program Summary>
/// Module Name               : Collection 
/// Screen Name               : Follow up Instructions
/// Created By                : VijayaKumar
/// Created Date              : 21-Feb-2011
/// Purpose                   : 
/// Last Updated By           : 
/// Last Updated Date         : 
/// Reason                    :

/// <Program Summary>
#endregion

#region Namespaces

using System;
using System.Web;
using System.Data;
using System.Text;
using S3GBusEntity.Collection;
using S3GBusEntity;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using System.Web.Security;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Xml;
using System.Xml.Linq;
using System.Linq;
using System.ServiceModel;
using AjaxControlToolkit;

#endregion

public partial class Origination_S3GOrgCRM : ApplyThemeForProject
{
    #region Common Variable declaration
    int intCompanyID, intUserID = 0;
    Dictionary<string, string> ObjDictionary = null;
    int intErrCode = 0;
    int intFollowUpId = 0;
    UserInfo ObjUserInfo = new UserInfo();
    SerializationMode ObjSerMode = SerializationMode.Binary;
    string strDateFormat = string.Empty;
    //string strMode = string.Empty;
    static string strPageName = "Follow Up Instructions";
    static string strSuffix = "";
    FormsAuthenticationTicket Ticket;
    static int intTicketNo = 1;
    //int intTicket = 0;

    ClnDataMgtServicesReference.ClnDataMgtServicesClient objFollowUp_Client;
    S3GBusEntity.Collection.ClnDataMgtServices.S3G_CLN_CRM_HdrDataTable objS3G_CLN_FollowUpDataTable = null;
    S3GBusEntity.Collection.ClnDataMgtServices.S3G_CLN_CRM_HdrRow objS3G_CLN_FollowUpRow = null;

    string strKey = "Insert";
    string strAlert = "alert('__ALERT__');";
    string strRedirectPage = "~/Origination/S3GOrgCRM.aspx?qsMode=C";
    string strRedirectPageAdd = "window.location.href='../Origination/S3GOrgCRM.aspx?qsMode=C'";
    string strRedirectPageView = "window.location.href='../Origination/S3GOrgCRM_View.aspx?Code=CRM';";
    string strErrorMessagePrefix = @"Correct the following validation(s): </br></br>   ";

    string strNewWinPricingIFrm = "S3GOrgPricing_Add.aspx?qsMode=C&qsCRMID=";
    //string strNewWinPricingIFrm = "S3GOrgPricing_Add.aspx?Popup=Yes&qsMode=C&qsCRMID=";
    //string strNewWinApplicationIFrm = "S3G_ORG_ApplicationProcessing.aspx?Popup=Yes&qsMode=C&qsCRMID=";
    string strNewWinApplicationIFrm = "S3G_ORG_ApplicationProcessing.aspx?qsMode=C&qsCRMID=";

    string strNewWinPricing = " window.open('../Origination/S3GOrgPricing_Add.aspx?Popup=Yes&qsMode=C&qsCRMID=";
    //string strNewWinPricing = " window.showModalDialog('../Origination/S3GOrgPricing_Add.aspx?Popup=Yes&qsMode=C&qsCRMID=";
    string strNewWinApplication = " window.open('../Origination/S3G_ORG_ApplicationProcessing.aspx?Popup=Yes&qsMode=C&qsCRMID=";
    //string strNewWinAttributes = "', 'CRM', 'toolbar:no;menubar:no;statusbar:no;dialogwidth:950px;dialogHeight:850px;');";
    string strNewWinAttributes = "', 'newwindow','center= yes;toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,directories=no;modal=no;')";

    bool bCreate = false;
    bool bClearList = false;
    bool bModify = false;
    bool bQuery = false;
    bool bDelete = false;
    bool bMakerChecker = false;
    S3GSession ObjS3GSession = new S3GSession();
    int strDecMaxLength = 0;
    int strPrefixLength = 0;
    string strDueflah = string.Empty;
    string strduedate = string.Empty;
    string straccno = string.Empty;
    #endregion

    #region Events
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            FunPriPageLoad();
            //if (!Page.IsPostBack)
            //{
            //TextBox txtUserName = ((TextBox)ucPopUp.FindControl("txtName"));
            //txtUserName.Attributes.Add("onblur", "fnLoadCustomer();");
            //(ucPopUp.FindControl("pnlLoadLOV") as Panel).Visible = false;
            //txtUserName.AutoPostBack = true;
            //txtUserName.ToolTip = txtUserName.Text;
            //Button btnGetLOV = ((Button)ucPopUp.FindControl("btnGetLOV"));
            //btnGetLOV.Attributes.Add("onClick", "if(fnSearchFocus()){if(document.getElementById('ctl00_ContentPlaceHolder1_ucPopUp_hdnShow'))document.getElementById('ctl00_ContentPlaceHolder1_ucPopUp_hdnShow').value='1';}");
            //}
            strSuffix = Utility.SetSuffix();
            txtNotifyDt.Attributes.Add("ReadOnly", "true");
            txtName.Attributes.Add("ReadOnly", "true");
            txtRate.SetPercentagePrefixSuffix(2, 4, false, true, "Rate");
            flUpload.Attributes.Add("onchange", "fnAssignPath('" + flUpload.ClientID + "','" + hdnSelectedPath.ClientID + "'); fnLoadPath('" + btnBrowse.ClientID + "');");
            btnDlg.OnClientClick = "fnLoadPath('" + flUpload.ClientID + "');";
            strPrefixLength = ObjS3GSession.ProGpsPrefixRW;
            strDecMaxLength = ObjS3GSession.ProGpsSuffixRW;
            //FunPubClearPopUp();

            //if (txtTicketNo.Text.Trim() != "")
            //{
            //    ModalPopupExtender ucMPE = ((ModalPopupExtender)ucPopUp.FindControl("ucMPE"));
            //    if (ucMPE != null) ucMPE.Dispose();
            //    ucPopUp._ucShow = 0;
            //}


            //if (ViewState["pnlIndex"] != null)
            //{
            //    grvFollowUp.DataSource = (DataTable)ViewState["Followup"];
            //    grvFollowUp.DataBind();
            //}
            //if (grvFollowUp.Rows.Count > 0)
            //    FunProAddDynamicRow(grvFollowUp.Rows[0]);

            //if (Session["InitiateNumber"] != null)
            //{
            //    string strInitiateNumber = Utility.Load("InitiateNumber", "").ToString();
            //    if (strInitiateNumber != "")
            //    {
            //        ddlType.SelectedValue = ucPopUp.SelectedValue = Convert.ToString(Session["ddlType"]);

            //        if (ddlType.SelectedValue == "8")
            //        {
            //            ucPopUp.SelectedText = ucPopUp.SelectedValue = Convert.ToString(Session["InitiateNumber"]);
            //        }
            //        else
            //        {
            //            ucPopUp.SelectedText = ucPopUp.SelectedValue = Convert.ToString(Session["ucPopUpValue"]);
            //        }
            //        btnLoadCustomer_OnClick(null, null);
            //        Session["InitiateNumber"] = Session["ddlType"] = Session["ucPopUpValue"] = null;
            //    }
            //}
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void btnLeadSource_OnClick(object sender, EventArgs e)
    {
        txtLeadSource.Text = ucLead.SelectedText;
    }

    protected void btnLoadCustomer_OnClick(object sender, EventArgs e)
    {
        try
        {
            funGridClear(grvMain);
            funGridClear(grvAssetDetails);
            ucdCustomer.ClearCustomerDetails();
            funGridClear(grvAccountDetails);
            funGridClear(grvFollowUp);
            pnlFollowUp.Visible = true;
            pnlAddFollow.Visible = false;
            FunPubClearPopUp();
            FunProProspectClear();
            FunProClearLead();
            ViewState["NewFollowup"] = ViewState["dtFollow"] = ViewState["dtFollowAll"] = null;
            FunProClearAllTabs();

            for (int i = 1; i <= ddlDocumentType.Items.Count - 1; i++)
            {
                ViewState.Remove(ddlDocumentType.Items[i].Text);
            }

            tcCRM.ActiveTabIndex = 0;

            if (ObjDictionary != null)
                ObjDictionary.Clear();
            else
                ObjDictionary = new Dictionary<string, string>();

            if (ucPopUp.SelectedText.Trim() != "" && ddlType.SelectedValue != "0")
            {
                txtName.Text = ucPopUp.SelectedText;
                ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
                ObjDictionary.Add("@Type", ddlType.SelectedValue.ToString());
                if (ddlType.SelectedValue == "8")
                {
                    ObjDictionary.Add("@SearchValue", ucPopUp.SelectedValue);
                }
                else
                {
                    if (ddlType.SelectedValue == "1" || ddlType.SelectedValue == "2" || ddlType.SelectedValue == "3")
                    {
                        ObjDictionary.Add("@SearchValue", ucPopUp.SelectedValue);
                    }
                    else
                    {
                        if (ddlType.SelectedValue == "1" || ddlType.SelectedValue == "2" || ddlType.SelectedValue == "3")
                        {
                            ObjDictionary.Add("@SearchValue", ucPopUp.SelectedValue);
                        }
                        else
                        {
                            ObjDictionary.Add("@SearchValue", ucPopUp.SelectedText);
                        }
                    }
                }
                ObjDictionary.Add("@UserId", intUserID.ToString());
                if (ddlType.SelectedValue == "1" || ddlType.SelectedValue == "2" || ddlType.SelectedValue == "3")
                    ObjDictionary.Add("@SearchType", "Customer");
                else
                    ObjDictionary.Add("@SearchType", "Account");

                DataSet dsFollow;
                if (ddlType.SelectedValue == "8")
                {
                    dsFollow = Utility.GetDataset("S3G_CLN_GetCRMProspectList", ObjDictionary);
                    if (dsFollow.Tables[5].Rows.Count > 0)
                    {
                        ViewState["CRM_ID"] = dsFollow.Tables[5].Rows[0]["CRM_ID"].ToString();
                    }
                }
                else
                {
                    dsFollow = Utility.GetDataset("S3G_CLN_GetCRMFollowUpList", ObjDictionary);
                }
                if (dsFollow.Tables[0] != null && dsFollow.Tables[0].Rows.Count > 0)
                {

                    grvMain.DataSource = dsFollow.Tables[0];
                    grvMain.DataBind();

                }

                if (dsFollow.Tables[1] != null && dsFollow.Tables[1].Rows.Count > 0)
                {
                    txtName.Text = dsFollow.Tables[1].Rows[0]["Customer_Name"].ToString();
                    ucdCustomer.SetCustomerDetails(dsFollow.Tables[1].Rows[0], true);
                    hidCustomerId.Text = dsFollow.Tables[1].Rows[0]["Customer_ID"].ToString();
                    hidCustomerId.Text = dsFollow.Tables[1].Rows[0]["Customer_ID"].ToString();
                    FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(hidCustomerId.Text, false, 0);
                    btnUp.Attributes.Add("OnClick", "if(funUpValidate()){ window.open('../Origination/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes&qsCustomerId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q', 'null','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');return false;}");
                }

                if (dsFollow.Tables[4] != null && dsFollow.Tables[4].Rows.Count > 0)
                {
                    ddlTitle.SelectedValue = dsFollow.Tables[4].Rows[0]["Prospect_Title"].ToString();
                    if (ddlType.SelectedValue == "8")
                    {
                        ucPopUp.SelectedText = txtName.Text = dsFollow.Tables[4].Rows[0]["Prospect_Name"].ToString();
                    }
                    txtProspectName.Text = dsFollow.Tables[4].Rows[0]["Prospect_Name"].ToString();
                    txtComAddress1.Text = dsFollow.Tables[4].Rows[0]["Address1"].ToString();
                    txtCOmAddress2.Text = dsFollow.Tables[4].Rows[0]["Address2"].ToString();
                    TextBox _txtCity = (TextBox)txtComCity.FindControl("TextBox");
                    TextBox _txtState = (TextBox)txtComState.FindControl("TextBox");                    
                    TextBox _txtCountry = (TextBox)txtComCountry.FindControl("TextBox");
                    _txtCity.Text = dsFollow.Tables[4].Rows[0]["City"].ToString();
                    _txtState.Text = dsFollow.Tables[4].Rows[0]["State"].ToString();
                    _txtCountry.Text = dsFollow.Tables[4].Rows[0]["Country"].ToString();
                    txtComCity.SelectedItem.Text = dsFollow.Tables[4].Rows[0]["City"].ToString();
                    txtComState.SelectedItem.Text = dsFollow.Tables[4].Rows[0]["State"].ToString();
                    txtComCountry.SelectedItem.Text = dsFollow.Tables[4].Rows[0]["Country"].ToString();
                    txtComPincode.Text = dsFollow.Tables[4].Rows[0]["Pincode"].ToString();
                    txtComTelephone.Text = dsFollow.Tables[4].Rows[0]["Telephone"].ToString();
                    txtComMobile.Text = dsFollow.Tables[4].Rows[0]["Mobile"].ToString();
                    txtComEmail.Text = dsFollow.Tables[4].Rows[0]["EMail"].ToString();
                    txtComWebsite.Text = dsFollow.Tables[4].Rows[0]["Website"].ToString();
                    ddlRefType.SelectedValue = dsFollow.Tables[4].Rows[0]["Reference_Type"].ToString();
                    if (ddlType.SelectedValue == "8")
                    {
                        //ddlRefType_SelectedIndexChanged(null, null);
                        //ddlRefNumber.SelectedValue = dsFollow.Tables[4].Rows[0]["Reference_Num"].ToString();

                        if (ddlRefType.SelectedValue == "0")
                        {
                            //btnMoveEnquiry.Visible = true;
                            tdInitiate.Visible = true;
                        }
                        else
                        {
                            //btnMoveEnquiry.Visible = false;
                            tdInitiate.Visible = false;
                        }

                    }

                    txtBranchSearch.Text = dsFollow.Tables[4].Rows[0]["Location"].ToString();
                    hdnBranchID.Value = dsFollow.Tables[4].Rows[0]["Location_Id"].ToString();
                    if (dsFollow.Tables[4].Rows[0]["Account_Stat"].ToString() != string.Empty)
                    {
                        ddlAccountStatus.SelectedValue = dsFollow.Tables[4].Rows[0]["Account_Stat"].ToString();
                    }
                    if (dsFollow.Tables[4].Rows[0]["Customer_Stat"].ToString() != string.Empty)
                    {
                        ddlCustomerStatus.SelectedValue = dsFollow.Tables[4].Rows[0]["Customer_Stat"].ToString();
                    }
                }

                if (dsFollow.Tables[5] != null && dsFollow.Tables[5].Rows.Count > 0)
                {
                    ddlFinanceMode.SelectedValue = dsFollow.Tables[5].Rows[0]["FinanceMode"].ToString();
                    ddlLOB.SelectedValue = dsFollow.Tables[5].Rows[0]["LOB_ID"].ToString();
                    ddlLeadSourceType.SelectedValue = dsFollow.Tables[5].Rows[0]["Lead_Source_Type"].ToString();
                    ddlLeadStatus.SelectedValue = dsFollow.Tables[5].Rows[0]["Lead_Status"].ToString();
                    ucLead.SelectedText = txtLeadSource.Text = dsFollow.Tables[5].Rows[0]["Source"].ToString();
                    ucLead.SelectedValue = dsFollow.Tables[5].Rows[0]["Lead_Source"].ToString();

                    txtLeadInformation.Text = dsFollow.Tables[5].Rows[0]["Remarks"].ToString();
                    txtFinanceAmountM.Text = dsFollow.Tables[5].Rows[0]["FINANCE_AMOUNT"].ToString();

                    if (!string.IsNullOrEmpty(dsFollow.Tables[5].Rows[0]["Constitution_ID"].ToString()))
                    {
                        ddlConstitutionName.SelectedValue = dsFollow.Tables[5].Rows[0]["Constitution_ID"].ToString();
                    }
                    txtTenure.Text = dsFollow.Tables[5].Rows[0]["Tenure"].ToString();
                    txtRate.Text = dsFollow.Tables[5].Rows[0]["Rate"].ToString();
                }

                if (dsFollow.Tables[6] != null)
                {
                    ViewState["Assets"] = dsFollow.Tables[6];
                    if (dsFollow.Tables[6].Rows.Count == 0)
                    {
                        FunProInitializeAssetRow();
                    }
                    else
                    {
                        grvAssets.DataSource = dsFollow.Tables[6];
                        grvAssets.DataBind();
                    }
                }

                if (dsFollow.Tables[7] != null && dsFollow.Tables[7].Rows.Count > 0)
                {
                    hidCustomerId.Text = dsFollow.Tables[7].Rows[0]["Customer_ID"].ToString();
                    if (hidCustomerId.Text != "0")
                    {
                        FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(hidCustomerId.Text, false, 0);
                        btnUp.Attributes.Add("OnClick", "if(funUpValidate()){ window.open('../Origination/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes&qsCustomerId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q', 'null','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');return false;}");
                    }
                    ucPopUp.SelectedValue = dsFollow.Tables[7].Rows[0]["CRM_ID"].ToString();
                }

                pnlFollowUp.Visible = true;
                DataTable dtFromDB = dsFollow.Tables[3];
                DataTable dtExists = new DataTable();
                ViewState["dtFollow"] = ViewState["dtFollowAll"] = dsFollow.Tables[3];
                if (ViewState["NewFollowup"] == null)
                {
                    ViewState["NewFollowup"] = dsFollow.Tables[3].Clone();
                    dtExists = dtFromDB;
                }
                else
                {
                    dtExists = ((DataTable)ViewState["NewFollowup"]).Copy();
                    dtExists.Merge(dtFromDB);
                }
                if (dtExists != null && dtExists.Rows.Count > 0)
                {
                    pnlFollowUp.Visible = true;
                    grvFollowUp.DataSource = dtExists;
                    grvFollowUp.DataBind();
                    grvFollowUp.Rows[0].Visible = true;
                }
                else
                {
                    grvFollowUp.DataSource = funAddRow();
                    grvFollowUp.DataBind();
                    grvFollowUp.Rows[0].Visible = false;
                }

                ViewState["dtFollow"] = ViewState["dtFollowAll"] = dtExists;
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void ddlType_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            //(ucPopUp.FindControl("hdnText") as HiddenField).Value = txtName.Text = "";
            //(ucPopUp.FindControl("hdnID") as HiddenField).Value = "";
            //(ucPopUp.FindControl("pnlLoadLOV") as Panel).Visible = false;
            ucPopUp.Clear();
            funAssignPopupValue();
            txtName.Text = "";
            ddlSearch.Items.Clear();
            funGridClear(grvMain);
            funGridClear(grvAssetDetails);
            ucdCustomer.ClearCustomerDetails();
            pnlAccount.Visible = pnlFollowUp.Visible = pnlAccountInformation.Visible = false;
            funGridClear(grvFollowUp);
            ViewState["Followup"] = null;
            funGridClear(grvAccountDetails);
            hidCustomerId.Text = "";
            FunProClearAllTabs();
            FunProProspectClear();
            FunProClearLead();

            if (ddlType.SelectedValue == "0")
            {
                Session.Remove("FU_TYPE");
            }
            else
            {
                Session["FU_TYPE"] = ddlType.SelectedValue;
            }

            if (ddlType.SelectedValue == "8")
            {
                imgCustomer.Visible = false;
                imgProspect.Visible = true;
            }
            else
            {
                imgCustomer.Visible = true;
                imgProspect.Visible = false;
            }

            //if (ObjDictionary != null)
            //    ObjDictionary.Clear();
            //else
            //    ObjDictionary = new Dictionary<string, string>();

            //ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            //ObjDictionary.Add("@Type", ddlType.SelectedValue.ToString());
            //ObjDictionary.Add("@UserId", Convert.ToString(intUserID));
            //ddlSearch.BindDataTable("S3G_CLN_GetFollowUpType", ObjDictionary, true, "-- Select --", new string[] { "Searchvalue", "Searchvalue" });
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void ddlSearch_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            funGridClear(grvMain);
            funGridClear(grvAssetDetails);
            ucdCustomer.ClearCustomerDetails();
            funGridClear(grvAccountDetails);
            funGridClear(grvFollowUp);
            ViewState["Followup"] = null;
            pnlFollowUp.Visible = true;

            if (ObjDictionary != null)
                ObjDictionary.Clear();
            else
                ObjDictionary = new Dictionary<string, string>();

            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            ObjDictionary.Add("@Type", ddlType.SelectedValue.ToString());
            ObjDictionary.Add("@SearchValue", ddlSearch.SelectedValue.ToString());
            ObjDictionary.Add("@UserId", intUserID.ToString());

            DataSet dsFollow = Utility.GetDataset("S3G_CLN_GetFollowUpList", ObjDictionary);
            if (dsFollow.Tables[0] != null && dsFollow.Tables[0].Rows.Count > 0)
            {
                grvMain.DataSource = dsFollow.Tables[0];
                grvMain.DataBind();
                pnlAccount.Visible = true;
            }

            if (dsFollow.Tables[1] != null && dsFollow.Tables[1].Rows.Count > 0)
            {
                ucdCustomer.SetCustomerDetails(dsFollow.Tables[1].Rows[0], true);
                hidCustomerId.Text = dsFollow.Tables[1].Rows[0]["Customer_ID"].ToString();
                FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(hidCustomerId.Text, false, 0);
                btnUp.Attributes.Add("OnClick", "if(funUpValidate()){ window.open('../Origination/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes&qsCustomerId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q', 'null','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');return false;}");
            }

            if (dsFollow.Tables[2] != null && dsFollow.Tables[2].Rows.Count > 0)
            {
                grvAssetDetails.DataSource = dsFollow.Tables[2];
                grvAssetDetails.DataBind();
            }

            ViewState["dtFollow"] = ViewState["dtFollowAll"] = dsFollow.Tables[3];
            ViewState["Followup"] = dsFollow.Tables[3];
            if (dsFollow.Tables[3] != null && dsFollow.Tables[3].Rows.Count > 0)
            {
                grvFollowUp.DataSource = dsFollow.Tables[3];
                grvFollowUp.DataBind();
            }
            else
            {
                grvFollowUp.DataSource = funAddRow();
                grvFollowUp.DataBind();
                grvFollowUp.Rows[0].Visible = false;
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void btnDown_Click(object sender, EventArgs e)
    {
        try
        {
            if (hidCustomerId.Text.Trim() == "")
            {
                cvFollowUp.ErrorMessage = strErrorMessagePrefix + " Select the search description";
                cvFollowUp.IsValid = false;
                return;
            }
            funGridClear(grvAccountDetails);
            //chkSelect_CheckedChanged(null, null);
            bool IsCheck = false;
            int intCount = 0;
            string strPANUM = "";
            List<StringBuilder> objList = FunFormXml(out IsCheck, out intCount, out strPANUM);

            if (ObjDictionary != null)
                ObjDictionary.Clear();
            else
                ObjDictionary = new Dictionary<string, string>();

            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            if (IsCheck) ObjDictionary.Add("@StrXml", objList[0].ToString());// strGrvXML.ToString());
            else ObjDictionary.Add("@StrXml", objList[1].ToString());// strAllXML.ToString());

            grvAccountDetails.DataSource = Utility.GetDefaultData("S3G_CLN_GetFollowUp_AccountDetails", ObjDictionary);
            grvAccountDetails.DataBind();

            if (grvAccountDetails.Rows.Count == 0)
            {
                Utility.FunShowAlertMsg(this, "Account Information does not exists");
                return;
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }
    protected void btndcDown_Click(object sender, EventArgs e)//Added by Sathish R FOR CR 6 DC DAIRY
    {
        try
        {
            if (hidCustomerId.Text.Trim() == "")
            {
                cvFollowUp.ErrorMessage = strErrorMessagePrefix + " Select the search description";
                cvFollowUp.IsValid = false;
                return;
            }
            funGridClear(grvDcDairyAccountDetails);
            bool IsCheck = false;
            int intCount = 0;
            string strPANUM = "";
            if (ViewState["DCDAIRYMAIN"] != null)
            {
                ViewState["DCDAIRYMAIN"] = null;
            }
            if (ViewState["DCDAIRYMAIN_OLD"] != null)
            {
                ViewState["DCDAIRYMAIN_OLD"] = null;
            }
            List<StringBuilder> objList = FunFormXml(out IsCheck, out intCount, out strPANUM);
            if (ObjDictionary != null)
                ObjDictionary.Clear();
            else
                ObjDictionary = new Dictionary<string, string>();
            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            if (IsCheck) ObjDictionary.Add("@StrXml", objList[0].ToString());// strGrvXML.ToString());
            else ObjDictionary.Add("@StrXml", objList[1].ToString());// strAllXML.ToString());
            grvDcDairyAccountDetails.DataSource = Utility.GetDefaultData("CN_GET_FLW_DCDAIRY_AC_DTL", ObjDictionary);

            grvDcDairyAccountDetails.DataBind();
            if (grvDcDairyAccountDetails.Rows.Count == 0)
            {
                Utility.FunShowAlertMsg(this, "Account Information does not exists");
                return;
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    private List<StringBuilder> FunFormXml(out bool IsCheck, out int intCount, out string strPANUM)
    {
        List<StringBuilder> objList = new List<StringBuilder>();
        StringBuilder strGrvXML = new StringBuilder();
        StringBuilder strAllXML = new StringBuilder();
        strGrvXML.Append("<Root>");
        strAllXML.Append("<Root>");
        IsCheck = false;
        intCount = 0;
        strPANUM = "";

        foreach (GridViewRow gvRow in grvMain.Rows)
        {
            CheckBox chkSelect = (CheckBox)gvRow.FindControl("chkSelect");
            Label txtPrimeAccountNo = (Label)gvRow.FindControl("txtPrimeAccountNo");
            Label txtSubAccountNo = (Label)gvRow.FindControl("txtSubAccountNo");

            if (chkSelect.Checked)
            {
                IsCheck = true;
                intCount = intCount + 1;
                strPANUM = txtPrimeAccountNo.Text;
                strGrvXML.Append("<Details  PANum='" + txtPrimeAccountNo.Text.Trim() + "' SANum ='" + txtSubAccountNo.Text.Trim() + "' /> ");
            }
            strAllXML.Append("<Details  PANum='" + txtPrimeAccountNo.Text.Trim() + "' SANum ='" + txtSubAccountNo.Text.Trim() + "' /> ");
        }
        strGrvXML.Append("</Root>");
        strAllXML.Append("</Root>");
        objList.Add(strGrvXML);
        objList.Add(strAllXML);
        return objList;
    }

    protected void grvFollowUp_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                LinkButton btnRemove = (LinkButton)e.Row.FindControl("btnRemove");
                Label txtTicketNo = (Label)e.Row.FindControl("txtTicketNo");
                LinkButton btnView = (LinkButton)e.Row.FindControl("btnView");
                Label txtQuery = (Label)e.Row.FindControl("txtQuery");
                LinkButton lnkQuery = (LinkButton)e.Row.FindControl("lnkQuery");
                HiddenField hidQueryType = (HiddenField)e.Row.FindControl("hidQueryType");
                HiddenField hidVersionNo = (HiddenField)e.Row.FindControl("hidVersionNo");
                HiddenField hidStatus = (HiddenField)e.Row.FindControl("hidStatus");
                HiddenField IsMax = (HiddenField)e.Row.FindControl("IsMax");
                Label txtDescription = (Label)e.Row.FindControl("txtDescription");


                //txtDescription.Text = txtDescription.Text.Replace("~Remarks:~", "<font  color='blue;' Weight='bold;'>Remarks:</font>");

                if (txtTicketNo.Text.Trim() == "-1")
                    e.Row.Visible = false;

                if (txtTicketNo.Text.Trim() == "0" || txtTicketNo.Text.Trim() == "-1")
                {
                    txtTicketNo.Text = "";
                    btnRemove.Enabled = btnView.Enabled = false;
                }

                if (hidVersionNo.Value.Trim() == "" || hidVersionNo.Value.Trim() == "0")
                {
                    btnRemove.Enabled = btnView.Enabled = lnkQuery.Visible = false;
                }
                else
                {
                    txtQuery.Visible = false;
                }

                if (IsMax.Value.Trim().ToUpper() == "TRUE" && txtTicketNo.Text != "")
                {
                    lnkQuery.Visible = btnRemove.Enabled = btnView.Enabled = true;
                    txtQuery.Visible = false;
                }
                else
                {
                    lnkQuery.Visible = btnRemove.Enabled = btnView.Enabled = false;
                    txtQuery.Visible = true;
                }
                if (hidQueryType.Value == "2" || hidQueryType.Value == "4")
                {
                    lnkQuery.Visible = false;
                    txtQuery.Visible = true;
                }

                //if (e.Row.RowIndex == 0)
                //    e.Row.Cells[0].RowSpan = 5;// ((DataTable)grvFollowUp.DataSource).Columns.Count;

                if (hidStatus.Value == "3")
                {
                    lnkQuery.Visible = btnRemove.Enabled = btnView.Enabled = false;
                    txtQuery.Visible = true;
                }


                //if (e.Row.RowIndex == 0)
                //    FunProAddDynamicRow(e.Row);
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void ddlFrom_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            TextBox txtName = ucFrom.FindControl("txtName") as TextBox;
            HiddenField hdnID = ucFrom.FindControl("hdnID") as HiddenField;
            txtName.Text = hdnID.Value = string.Empty;
            //            MPE.Show();
            funAssignUser(ddlFrom, ucFrom);
            FunPubClearPopUp();
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void ddlTo_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            TextBox txtName = ucTo.FindControl("txtName") as TextBox;
            HiddenField hdnID = ucTo.FindControl("hdnID") as HiddenField;
            txtName.Text = hdnID.Value = string.Empty;
            funAssignUser(ddlTo, ucTo);

        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void ddlQuery_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            if (hdnView.Value != "")
            {
                if (ddlQuery.SelectedValue == "5")
                    ddlStatus.SelectedValue = "2";
                if (ddlQuery.SelectedValue == "2" || ddlQuery.SelectedValue == "4")
                    ddlStatus.SelectedValue = "3";
            }
            else
            {
                if (ddlQuery.SelectedValue != "1" && ddlQuery.SelectedValue != "3")
                    txtTicketNo.Text = "";
                else
                    txtTicketNo.Text = hdnTicketNo.Value;
            }
            if (ddlQuery.SelectedValue == "1" || ddlQuery.SelectedValue == "3")
                ceNotifyDt.Enabled = true;
            else
                ceNotifyDt.Enabled = false;

            if (ddlQuery.SelectedValue == "5")
            {
                rfvddlQuery.Enabled = false;
            }
            else
            {
                rfvddlQuery.Enabled = true;
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void btnDcSelectChanged(object sender, EventArgs e)
    {
        btndcAddOld.Enabled = true;
        btndcAdd.Enabled = true;
        FunPubClearPopUp();
        funShowPopUpDCDairy(sender, e, "Billed Amount");
    }
    protected void btnView_Click(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            ddlQuery.Items.Clear();
            DataSet dsLookUp = ViewState["FollowUpLookUp"] as DataSet;
            ddlQuery.DataSource = dsLookUp.Tables[3];
            ddlQuery.DataValueField = "Lookup_Code";
            ddlQuery.DataTextField = "Lookup_Description";
            ddlQuery.DataBind();
            ddlQuery.Items.Insert(0, new ListItem("--Select--", "0"));
            ddlQuery.Items.RemoveAt(6);

            funClearPopUp();
            //            MPE.Show();

            pnlAddFollow.Visible = true;

            LinkButton btnView = (LinkButton)sender;
            GridViewRow gvRow = (GridViewRow)btnView.Parent.Parent;
            DataTable dtFollowUp = (DataTable)ViewState["dtFollow"];
            Label txtTicket = (Label)gvRow.FindControl("txtTicketNo");
            HiddenField hidQueryType = (HiddenField)gvRow.FindControl("hidQueryType");
            hdnView.Value = gvRow.RowIndex.ToString();

            DataRow[] drlist = dtFollowUp.Select("TicketNo= " + Convert.ToInt32(txtTicket.Text.Trim()) + " and QueryType='" + hidQueryType.Value + "'  ");
            DataRow[] drlist1 = dtFollowUp.Select("TicketNo= " + Convert.ToInt32(txtTicket.Text.Trim()) + " and QueryType <> '" + hidQueryType.Value + "'  ");
            DataRow[] drStatus = dtFollowUp.Select("TicketNo= " + Convert.ToInt32(txtTicket.Text.Trim()) + " ");

            if (drlist.Length > 0)
            {
                txtTicketNo.Text = hdnTicketNo.Value = drlist[0]["TicketNo"].ToString();
                txtDate.Text = FormatDate(drlist[0]["Date"].ToString());
                //txtDescription.Text = drlist[0]["Description"].ToString();
                txtNotifyDt.Text = FormatDate(drlist[0]["NotifyDate"].ToString());
                ddlFrom.SelectedValue = drlist[0]["To_Type"].ToString();
                ddlTo.SelectedValue = drlist[0]["From_Type"].ToString();
                if (btnView.Text.ToUpper() == "EDIT")
                {
                    ddlQuery.SelectedValue = drlist[0]["QueryType"].ToString();
                    ddlQuery.ClearDropDownList();
                }
                ddlMode.SelectedValue = drlist[0]["Mode"].ToString();
                if (ddlQuery.SelectedValue == "1" || ddlQuery.SelectedValue == "3")
                    ceNotifyDt.Enabled = true;
                else
                    ceNotifyDt.Enabled = false;

                TextBox txtFromName = ucFrom.FindControl("txtName") as TextBox;
                HiddenField hdnIDFrom = ucFrom.FindControl("hdnID") as HiddenField;
                TextBox txtToName = ucTo.FindControl("txtName") as TextBox;
                HiddenField hdnIDTo = ucTo.FindControl("hdnID") as HiddenField;
                txtFromName.Text = drlist[0]["To_UserName"].ToString();
                txtToName.Text = drlist[0]["From_UserName"].ToString();
                hdnIDFrom.Value = drlist[0]["To"].ToString();
                hdnIDTo.Value = drlist[0]["From"].ToString();
                ddlStatus.SelectedValue = drStatus[0]["Status_Code"].ToString();
                funAssignUser(ddlFrom, ucFrom);
                funAssignUser(ddlTo, ucTo);

                switch (drlist[0]["QueryType"].ToString())
                {
                    case "1":
                        ddlStatus.SelectedValue = "1";
                        break;
                    case "2":
                        ddlStatus.SelectedValue = "3";
                        break;
                    case "4":
                        ddlStatus.SelectedValue = "3";
                        break;
                    case "3":
                        ddlStatus.SelectedValue = "1";
                        break;
                    case "5":
                        ddlStatus.SelectedValue = "2";
                        break;
                }
            }

            if (btnView.Text.ToUpper() != "EDIT")
            {
                hdnView.Value = "-1";
                if (drlist.Length > 0)
                {
                    switch (drlist[0]["QueryType"].ToString())
                    {
                        case "1":
                            ddlQuery.Items.RemoveAt(4);
                            ddlQuery.Items.RemoveAt(3);
                            ddlQuery.Items.RemoveAt(1);
                            ddlStatus.SelectedValue = "1";
                            break;
                        case "2":
                            ddlQuery.Items.RemoveAt(4);
                            ddlQuery.Items.RemoveAt(3);
                            ddlQuery.Items.RemoveAt(1);
                            ddlStatus.SelectedValue = "3";
                            break;
                        case "4":
                            ddlQuery.Items.RemoveAt(2);
                            ddlQuery.Items.RemoveAt(3);
                            ddlQuery.Items.RemoveAt(1);
                            ddlStatus.SelectedValue = "3";
                            break;
                        case "3":
                            ddlQuery.Items.RemoveAt(3);
                            ddlQuery.Items.RemoveAt(2);
                            ddlQuery.Items.RemoveAt(1);
                            ddlStatus.SelectedValue = "1";
                            break;
                        case "5":
                            ddlStatus.SelectedValue = "2";
                            if (drlist1.Length > 0)
                            {
                                if (drlist1[0]["QueryType"].ToString() == "1" || drlist1[0]["QueryType"].ToString() == "3")
                                {
                                    ddlQuery.Items.RemoveAt(4);
                                    ddlQuery.Items.RemoveAt(3);
                                    ddlQuery.Items.RemoveAt(1);
                                }
                            }
                            else
                            {
                                ddlQuery.Items.RemoveAt(3);
                                ddlQuery.Items.RemoveAt(1);
                            }
                            break;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void btnOK_Click(object sender, EventArgs e)
    {
        FunPubClearPopUp();
        try
        {
            if (((TextBox)ucFrom.FindControl("txtName")).Text.Trim() == "")
            {
                cvOK.ErrorMessage = strErrorMessagePrefix + "From cannot be empty";
                cvOK.IsValid = false;
                //                MPE.Show();
                return;
            }
            if (ddlFrom.SelectedValue == ddlTo.SelectedValue)
            {
                if (ddlFrom.SelectedValue != "1")
                {
                    cvOK.ErrorMessage = strErrorMessagePrefix + "From Type and To Type cannot be same";
                    cvOK.IsValid = false;
                    //                    MPE.Show();
                    return;
                }
                if (((HiddenField)ucFrom.FindControl("hdnID")).Value.Trim() == ((HiddenField)ucTo.FindControl("hdnID")).Value.Trim())
                {
                    cvOK.ErrorMessage = strErrorMessagePrefix + "From and To cannot be same";
                    cvOK.IsValid = false;
                    //                    MPE.Show();
                    return;
                }
            }
            if (ddlTo.SelectedValue == "1")
            {
                if (((HiddenField)ucTo.FindControl("hdnID")).Value.Trim() == intUserID.ToString())
                {
                    cvOK.ErrorMessage = strErrorMessagePrefix + "To cannot be same to as Logged in user";
                    cvOK.IsValid = false;
                    //                    MPE.Show();
                    return;
                }
            }

            //            MPE.Hide();
            pnlAddFollow.Visible = false;
            DataTable dtFollow = new DataTable();
            DataTable dt = ViewState["dtFollow"] as DataTable;
            DataTable dtNewFollowup = ViewState["NewFollowup"] as DataTable;
            dtFollow = dt.Clone();
            DataTable dtCurrData = dtNewFollowup.Clone();
            DataRow drFollow;

            if (hdnView.Value == "" || hdnView.Value == "-1")
            {
                /* Newly add*/
                DataRow[] drList = dt.Select(" TicketNo = " + Convert.ToInt32(hdnTicketNo.Value) + " ");
                foreach (DataRow dr in drList)
                {
                    dr.BeginEdit();
                    dr["isMax"] = false;
                    if (dr["Version_No"].ToString() == "1")
                    {
                        dr["Status"] = ddlStatus.SelectedValue == "0" ? "" : ddlStatus.SelectedItem.Text.Trim();
                        dr["Status_Code"] = ddlStatus.SelectedValue;
                    }
                    else
                    {
                        dr["Status"] = "";
                        dr["Status_Code"] = "0";
                    }
                    dr.AcceptChanges();
                }

                drFollow = dtFollow.NewRow();
                drFollow = funAssignDataRow(drFollow);
                if (drList.Length > 0)
                    drFollow["Version_No"] = (Convert.ToInt32(drList[0]["Version_No"]) + 1).ToString();
                else
                    drFollow["Version_No"] = "1";

                drFollow["isMax"] = true;

                //Comment By Vijay
                #region
                //Delete the ticket value For Query Type Follow Up

                if (hdnView.Value == "" && ddlQuery.SelectedValue == "5")
                {
                    drFollow["Status"] = "";
                    drFollow["Status_Code"] = "0";
                    drFollow["TicketNo"] = "0";
                }
                #endregion

                if (hdnView.Value == "-1")
                {
                    drFollow["Status"] = "";
                    drFollow["Status_Code"] = "0";
                }
                //drFollow["Followup_Detail_ID"] = 0;

                drFollow["Status"] = ddlStatus.SelectedValue == "0" ? "" : ddlStatus.SelectedItem.Text.Trim();
                drFollow["Status_Code"] = ddlStatus.SelectedValue;

                dtFollow.Rows.Add(drFollow);
            }
            dtCurrData = dtFollow.Copy();
            dtCurrData.Merge(dtNewFollowup);

            dtFollow.Merge(dt);

            ViewState["NewFollowup"] = dtCurrData;

            if (hdnView.Value != "" && hdnView.Value != "-1")
            {
                int intRowIndex = Convert.ToInt32(hdnView.Value);
                drFollow = dtFollow.Rows[intRowIndex];
                drFollow.BeginEdit();
                drFollow = funAssignDataRow(drFollow);
                dtFollow.AcceptChanges();
            }

            grvFollowUp.DataSource = dtFollow;
            grvFollowUp.DataBind();
            ViewState["dtFollow"] = dtFollow;
            funClearPopUp();
            //            MPE.Hide();

            ViewState["Followup"] = dtFollow;
            txtSDate.Text = txtSTicketNo.Text = string.Empty;
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void btnRemove_Click(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            DataTable dtFollowUp = (DataTable)ViewState["dtFollow"];
            LinkButton btnRemove = (LinkButton)sender;
            GridViewRow gvRow = (GridViewRow)btnRemove.Parent.Parent;
            Label txtTicketNo = (Label)gvRow.FindControl("txtTicketNo");
            HiddenField hidVersionNo = (HiddenField)gvRow.FindControl("hidVersionNo");

            dtFollowUp.Rows.RemoveAt(gvRow.RowIndex);
            DataRow[] drList = dtFollowUp.Select(" TicketNo > " + Convert.ToInt32(txtTicketNo.Text) + " ");
            DataRow[] drList1 = dtFollowUp.Select(" TicketNo = " + Convert.ToInt32(txtTicketNo.Text) + " and Version_No = '" + (Convert.ToInt32(hidVersionNo.Value) - 1) + "' ");
            DataRow[] drQry = dtFollowUp.Select(" TicketNo = " + Convert.ToInt32(txtTicketNo.Text) + " ");
            if (drQry.Length > 0)
            {
                string strQryType = drQry[drQry.Length - 1]["QueryType"].ToString();
                drQry[0].BeginEdit();
                if (strQryType == "1" || strQryType == "3")
                {
                    drQry[0]["Status"] = "Open";
                    drQry[0]["Status_Code"] = "1";
                }
                else if (strQryType == "5")
                {
                    drQry[0]["Status"] = "Process";
                    drQry[0]["Status_Code"] = "2";
                }
                else
                {
                    drQry[0]["Status"] = "Closed";
                    drQry[0]["Status_Code"] = "3";
                }
                drQry[0].AcceptChanges();
            }
            foreach (DataRow dr in drList)
            {
                if (drList1.Length == 0)
                {
                    dr.BeginEdit();
                    dr["TicketNo"] = Convert.ToInt32(dr["TicketNo"]) - 1;
                    dr.AcceptChanges();
                }
            }
            if (drList1.Length == 1)
            {
                drList1[0].BeginEdit();
                drList1[0]["isMax"] = true;
                drList1[0].AcceptChanges();
            }

            grvFollowUp.DataSource = dtFollowUp;
            grvFollowUp.DataBind();

            ViewState["Followup"] = dtFollowUp;
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void btnAdd_Click(object sender, EventArgs e)
    {
        try
        {
            //PopulateType();
            if (ObjDictionary != null)
                ObjDictionary.Clear();
            else
                ObjDictionary = new Dictionary<string, string>();

            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            if (ddlType.SelectedValue == "8")
            {
                ObjDictionary.Add("@Type", "2");
                ObjDictionary.Add("@Customer_ID", (ucPopUp.FindControl("hdnID") as HiddenField).Value);
            }
            else
            {
                ObjDictionary.Add("@Type", "1");
                ObjDictionary.Add("@Customer_ID", hidCustomerId.Text.Trim());
            }

            DataTable dtTicket = Utility.GetDefaultData("S3G_CLN_GetCRM_TicketNo", ObjDictionary);
            int dcTicketNo = 0;
            if (dtTicket != null && dtTicket.Rows.Count > 0)
            {
                dcTicketNo = Convert.ToInt32(dtTicket.Rows[0]["TicketNo"].ToString()) + 1;
            }

            FunPubClearPopUp();
            funClearPopUp();
            hdnView.Value = "";

            DataSet dsLookUp = ViewState["FollowUpLookUp"] as DataSet;
            ddlQuery.Items.Clear();
            ddlQuery.DataSource = dsLookUp.Tables[3];
            ddlQuery.DataValueField = "Lookup_Code";
            ddlQuery.DataTextField = "Lookup_Description";
            ddlQuery.DataBind();
            ddlQuery.Items.Insert(0, new ListItem("--Select--", "0"));
            ddlQuery.Items.RemoveAt(6);
            ddlQuery.Items.RemoveAt(4);
            ddlQuery.Items.RemoveAt(2);

            ddlStatus.SelectedValue = "1";
            ddlFrom.SelectedValue = "1";
            TextBox txtFrom = ucFrom.FindControl("txtName") as TextBox;
            HiddenField hdnFrom = ucFrom.FindControl("hdnID") as HiddenField;
            txtFrom.Text = ObjUserInfo.ProUserNameRW;
            hdnFrom.Value = intUserID.ToString();
            funAssignUser(ddlFrom, ucFrom);

            TextBox txtTo = ucTo.FindControl("txtName") as TextBox;
            HiddenField hdnTo = ucTo.FindControl("hdnID") as HiddenField;

            if (ddlType.SelectedValue == "8")
            {
                ddlTo.SelectedValue = "10";
                txtTo.Text = txtName.Text;
                hdnTo.Value = (ucPopUp.FindControl("hdnID") as HiddenField).Value;
            }
            else
            {
                ddlTo.SelectedValue = "2";
                txtTo.Text = (ucdCustomer.FindControl("txtCustomerName") as TextBox).Text.Trim();
                hdnTo.Value = hidCustomerId.Text.Trim();
            }

            funAssignUser(ddlTo, ucTo);

            //MPE.Show();

            DataTable dtFollowAll = ViewState["dtFollowAll"] as DataTable;
            DataRow[] drListAll = dtFollowAll.Select(" TicketNo >  0 ");
            int intTicketNoAll = 0;
            if (drListAll.Length > 0)
                intTicketNoAll = Convert.ToInt32(drListAll[drListAll.Length - 1]["TicketNo"].ToString());

            DataTable dtFollow = ViewState["NewFollowup"] as DataTable;
            DataRow[] drList = dtFollow.Select(" TicketNo >  0 ");
            int intTicket = 0;
            if (drList.Length > 0)
                intTicket = Convert.ToInt32(drList[drList.Length - 1]["TicketNo"].ToString());

            if (intTicket > intTicketNoAll)
                intTicketNo = 1 + intTicket;// Convert.ToInt32(drList[drList.Length - 1]["TicketNo"].ToString());
            else
                intTicketNo = 1 + intTicketNoAll;

            txtDate.Text = txtNotifyDt.Text = DateTime.Now.ToString(strDateFormat);
            if (intTicketNo > dcTicketNo)
                txtTicketNo.Text = hdnTicketNo.Value = Convert.ToString(intTicketNo);
            else
                txtTicketNo.Text = hdnTicketNo.Value = Convert.ToString(dcTicketNo);

            if (ddlQuery.SelectedValue == "1" || ddlQuery.SelectedValue == "3")
                ceNotifyDt.Enabled = true;
            else
                ceNotifyDt.Enabled = false;

            ViewState["pnlIndex"] = 0;

            pnlAddFollow.Visible = true;
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void btnSave_Click(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            //if (hidCustomerId.Text.Trim() == "")
            //{
            //    cvFollowUp.ErrorMessage = strErrorMessagePrefix + " Select the search description";
            //    cvFollowUp.IsValid = false;
            //    return;
            //}

            DataTable dtFollow = ViewState["dtFollow"] as DataTable;
            //DataRow[] drFollow = dtFollow.Select(" TicketNo<>0 and QueryType<>6  and TicketNo<>-1");
            //DataRow[] drFollow = dtFollow.Select(" QueryType<>6  and TicketNo<>-1");
            //if (drFollow.Length == 0)
            //{
            //    Utility.FunShowAlertMsg(this, "Add atleast one Follow up details");
            //    return;
            //}
            FunPriSaveRecord(0);
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void btnClear_Click(object sender, EventArgs e)
    {
        try
        {
            //FunPubClearPopUp();
            //ddlType.SelectedIndex = 0;
            //ddlSearch.Items.Clear();
            //ddlSearch.Text = "";
            //(ucPopUp.FindControl("hdnID") as HiddenField).Value = "";
            //(ucPopUp.FindControl("hdnText") as HiddenField).Value = "";
            //ucdCustomer.ClearCustomerDetails();
            //funGridClear(grvMain);
            //funGridClear(grvAccountDetails);
            //funGridClear(grvAssetDetails);
            //funGridClear(grvFollowUp);
            //ViewState["Followup"] = null;
            //pnlAccount.Visible =
            //    pnlFollowUp.Visible = pnlAccountInformation.Visible = false;
            //Session.Remove("FU_TYPE");
            //FunProProspectClear();
            //txtName.Text = "";

            Response.Redirect(strRedirectPage, false);
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    #region  Cancel Methods

    protected void btnCancel_Click(object sender, EventArgs e)
    {
        FunProClearCachedFiles();
        ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strRedirectPageView, true);
        //Response.Redirect(strRedirectPage);
    }

    #endregion

    protected void btnCan_Click(object sender, EventArgs e)
    {
        try
        {
            funClearPopUp();
            FunPubClearPopUp();
            pnlAddFollow.Visible = false;
            //            MPE.Hide();
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void grvDCDairyPopUp_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {

            if (e.Row.RowType == DataControlRowType.Footer)
            {
                string strTotalDue;
                string strTotalCollectionSum;
                string strTotalBalSum;
                DataTable dt = (DataTable)ViewState["DC_DAIRY_SUM"];
                strTotalDue = dt.Compute("Sum(DUE_AMOUNT_TOT)", "").ToString();
                strTotalCollectionSum = dt.Compute("Sum(COLLECTION_TOT)", "").ToString();
                strTotalBalSum = dt.Compute("Sum(BALANCE_TOT)", "").ToString();

                TextBox txtDueSum = e.Row.FindControl("txtDueSum") as TextBox;
                TextBox txtTotalCollection = e.Row.FindControl("txtTotalCollection") as TextBox;
                TextBox txtTotalbalSum = e.Row.FindControl("txtTotalbalSum") as TextBox;
                txtDueSum.SetDecimalPrefixSuffix(14, 3, true, "Due Aount");
                txtTotalCollection.SetDecimalPrefixSuffix(14, 3, true, "Due Aount");
                txtTotalbalSum.SetDecimalPrefixSuffix(14, 3, true, "Due Aount");
                txtDueSum.Text = Math.Round(Convert.ToDecimal(strTotalDue), 3).ToString("0.000"); // Output: 1c
                txtTotalCollection.Text = Math.Round(Convert.ToDecimal(strTotalCollectionSum), 3).ToString("0.000"); // Output: 1c
                txtTotalbalSum.Text = Math.Round(Convert.ToDecimal(strTotalBalSum), 3).ToString("0.000"); // Output: 1c
                txtDueSum.Enabled = false;
                txtTotalCollection.Enabled = false;
                txtTotalbalSum.Enabled = false;


            }
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                AjaxControlToolkit.CalendarExtender CEPTPDate = e.Row.FindControl("CEPTPDate") as AjaxControlToolkit.CalendarExtender;
                CEPTPDate.Format = strDateFormat;
                DropDownList ddldcstatus = e.Row.FindControl("ddlStatus") as DropDownList;
                Label lblDcStatus = e.Row.FindControl("lblDcStatus") as Label;
                TextBox txtPTPdate = e.Row.FindControl("txtPTPdate") as TextBox;
                TextBox txtValue = e.Row.FindControl("txtValue") as TextBox;
                TextBox txtRemarks = e.Row.FindControl("txtRemarks") as TextBox;
                Dictionary<string, string> ProParm = new Dictionary<string, string>();
                ProParm.Add("@COMPANYID", intCompanyID.ToString());
                ddldcstatus.BindDataTable("CN_GET_DC_DIRSTUS", ProParm, new string[] { "ID", "Name" });
                txtValue.SetDecimalPrefixSuffix(10, 3, true, "Value");



                if (lblDcStatus.Text == "2")
                {
                    txtPTPdate.ReadOnly = txtValue.ReadOnly = txtRemarks.ReadOnly = true;
                    CEPTPDate.Enabled = false;
                    if (lblDcStatus.Text != "3")
                    {
                        ddldcstatus.SelectedValue = lblDcStatus.Text;
                        ddldcstatus.ClearDropDownList();
                    }
                }
                if (lblDcStatus.Text != "3")
                {
                    ddldcstatus.SelectedValue = lblDcStatus.Text;
                }
                txtPTPdate.Text = DateTime.Parse(txtPTPdate.Text, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);


            }

        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }
    protected void grvDCDairyPopUp_RowDataBound_Old(object sender, GridViewRowEventArgs e)
    {
        try
        {

            if (e.Row.RowType == DataControlRowType.Footer)
            {
                string strTotalDue;
                string strTotalCollectionSum;
                string strTotalBalSum;
                DataTable dt = (DataTable)ViewState["DC_DAIRY_SUM_OLD"];
                strTotalDue = dt.Compute("Sum(DUE_AMOUNT_TOT)", "").ToString();
                strTotalCollectionSum = dt.Compute("Sum(COLLECTION_TOT)", "").ToString();
                strTotalBalSum = dt.Compute("Sum(BALANCE_TOT)", "").ToString();

                TextBox txtDueSum = e.Row.FindControl("txtDueSum") as TextBox;
                TextBox txtTotalCollection = e.Row.FindControl("txtTotalCollection") as TextBox;
                TextBox txtTotalbalSum = e.Row.FindControl("txtTotalbalSum") as TextBox;
                txtDueSum.SetDecimalPrefixSuffix(14, 3, true, "Due Aount");
                txtTotalCollection.SetDecimalPrefixSuffix(14, 3, true, "Due Aount");
                txtTotalbalSum.SetDecimalPrefixSuffix(14, 3, true, "Due Aount");
                txtDueSum.Text = Math.Round(Convert.ToDecimal(strTotalDue), 3).ToString("0.000"); ; // Output: 1c
                txtTotalCollection.Text = Math.Round(Convert.ToDecimal(strTotalCollectionSum), 3).ToString("0.000"); // Output: 1c
                txtTotalbalSum.Text = Math.Round(Convert.ToDecimal(strTotalBalSum), 3).ToString("0.000"); // Output: 1c
                txtDueSum.Enabled = false;
                txtTotalCollection.Enabled = false;
                txtTotalbalSum.Enabled = false;

            }
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                AjaxControlToolkit.CalendarExtender CEPTPDate = e.Row.FindControl("CEPTPDate") as AjaxControlToolkit.CalendarExtender;
                CEPTPDate.Format = strDateFormat;
                DropDownList ddldcstatus = e.Row.FindControl("ddlStatus") as DropDownList;
                Label lblDcStatus = e.Row.FindControl("lblDcStatus") as Label;
                TextBox txtPTPdate = e.Row.FindControl("txtPTPdate") as TextBox;
                TextBox txtValue = e.Row.FindControl("txtValue") as TextBox;
                TextBox txtRemarks = e.Row.FindControl("txtRemarks") as TextBox;
                Dictionary<string, string> ProParm = new Dictionary<string, string>();
                ProParm.Add("@COMPANYID", intCompanyID.ToString());
                ddldcstatus.BindDataTable("CN_GET_DC_DIRSTUS", ProParm, new string[] { "ID", "Name" });
                Label lblPANUM = e.Row.FindControl("lblPANUM") as Label;
                Label lblCASHFLOW = e.Row.FindControl("lblCASHFLOW") as Label;
                Label lblDueDate = e.Row.FindControl("lblDueDate") as Label;

                if (lblDcStatus.Text == "2")
                {
                    txtPTPdate.ReadOnly = txtValue.ReadOnly = txtRemarks.ReadOnly = true;
                    ddldcstatus.SelectedValue = lblDcStatus.Text;
                    ddldcstatus.ClearDropDownList();
                }
                else
                {
                    ddldcstatus.SelectedValue = lblDcStatus.Text;
                }
                txtValue.SetDecimalPrefixSuffix(10, 3, true, "Value");
                txtPTPdate.Text = DateTime.Parse(txtPTPdate.Text, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);



            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }
    protected void grvPopUp_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < e.Row.Cells.Count; i++)
                {
                    switch (((System.Data.DataRowView)(e.Row.DataItem)).Row.ItemArray[i].GetType().ToString())
                    {
                        case "System.Decimal":
                            e.Row.Cells[i].HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Right;
                            e.Row.Cells[i].Text = Convert.ToDecimal(e.Row.Cells[i].Text).ToString(strSuffix);
                            break;
                        case "System.Int32":
                            e.Row.Cells[i].HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                            break;
                        case "System.DateTime":
                            {
                                e.Row.Cells[i].HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
                                e.Row.Cells[i].Text = FormatDate(e.Row.Cells[i].Text);
                                break;
                            }
                        case "System.String":
                            e.Row.Cells[i].HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
                            break;
                    }
                    if (grvPopUp.Rows.Count > 0 && (grvPopUp.Rows[0].Cells[0].Text.Trim() == "&nbsp;" || grvPopUp.Rows[0].Cells[0].Text.Trim() == ""))
                    {
                        if (i != 2 && i != 6)
                            grvPopUp.Rows[0].Cells[i].Text = "";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void grvAccountDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Label txtNOD = e.Row.FindControl("txtNOD") as Label;
                LinkButton lnkNOD = e.Row.FindControl("lnkNOD") as LinkButton;
                if (txtNOD.Text.Trim() == "0")
                    lnkNOD.Visible = false;
                else
                    txtNOD.Visible = false;
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }
    protected void grvDCDairyAccounts_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Label txtNOD = e.Row.FindControl("txtNOD") as Label;
                LinkButton lnkNOD = e.Row.FindControl("lnkNOD") as LinkButton;
                if (txtNOD.Text.Trim() == "0")
                    lnkNOD.Visible = false;
                else
                    txtNOD.Visible = false;
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void lnkNOD_Click(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            funShowPopUp(sender, e, "NOD");
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void txtBilledAmount_Click(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            funShowPopUp(sender, e, "Billed Amount");
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void txtCollectedAmount_Click(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            funShowPopUp(sender, e, "Collected Amount");
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void grvMain_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            //if (e.Row.RowType == DataControlRowType.DataRow)
            //{
            //    HiddenField hidIsColor = (HiddenField)e.Row.FindControl("hidIsColor");
            //    if (hidIsColor.Value != "True")
            //        e.Row.CssClass = "gridRowBG";
            //    else
            //        e.Row.CssClass = "gridRowBGClose";
            //    //e.Row.BackColor = System.Drawing.Color.LightGray;
            //}
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void lnkJE_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            LinkButton lnkJE = (sender) as LinkButton;
            //foreach (GridViewRow gvRow in grvAccountDetails.Rows)
            //{
            //    LinkButton lnkJE1 = gvRow.FindControl("lnkJE") as LinkButton;
            //    if (lnkJE1.ClientID != lnkJE.ClientID)
            //        rdoJE1.Checked = false;
            //}
            //LinkButton lnkNOD = (LinkButton)rdoJE.Parent.Parent.FindControl("lnkNOD");
            funShowPopUp(lnkJE, e, "Ledger Entry");
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void Button3_OnClick(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            moeNOD.Hide();
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }
    protected void btnDcDairy_OnClick(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            MoedcdairyDetails.Hide();
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }
    protected void btndcAdd_OnClick(object sender, EventArgs e)//Added By Sathish
    {
        try
        {
            if (ViewState["DCDAIRY"] != null)
            {
                ViewState["DCDAIRY"] = null;
            }
            DataTable dtDcDairy = new DataTable();
            dtDcDairy.Columns.Add("S_No");
            dtDcDairy.Columns.Add("PANUM");
            dtDcDairy.Columns.Add("DUE_FLAG");
            dtDcDairy.Columns.Add("DUE_DATE");
            dtDcDairy.Columns.Add("DUE_AMOUNT");
            dtDcDairy.Columns.Add("CASHFLOWDESCRIPTION");
            dtDcDairy.Columns.Add("COLLECTION");
            dtDcDairy.Columns.Add("BALANCE");
            dtDcDairy.Columns.Add("PTP_DATE");
            dtDcDairy.Columns.Add("VALUE_AMNT");
            dtDcDairy.Columns.Add("REMARKS");
            dtDcDairy.Columns.Add("STATUS_ID");
            dtDcDairy.Columns.Add("DC_NAME");
            dtDcDairy.Columns.Add("User_Id");
            dtDcDairy.Columns.Add("User_Name");
            dtDcDairy.Columns.Add("MODStatus");
            foreach (GridViewRow grv in grvDCDairyPopUp.Rows)
            {
                Label lblSlNo = grv.FindControl("lblSlNo") as Label;
                Label lblPANUM = grv.FindControl("lblPANUM") as Label;
                Label lblCASHFLOW = grv.FindControl("lblCASHFLOW") as Label;
                Label lblCASHFLOW_DESC = grv.FindControl("lblCASHFLOW_DESC") as Label;
                Label lblDueDate = grv.FindControl("lblDueDate") as Label;
                Label lblDueAmount = grv.FindControl("lblDueAmount") as Label;
                Label lblCollection = grv.FindControl("lblCollection") as Label;
                Label lblCurrentInstallmentDue = grv.FindControl("lblCurrentInstallmentDue") as Label;
                Label lblArrearInstallmentDue = grv.FindControl("lblArrearInstallmentDue") as Label;
                Label lblCurrentInstallmentCollection = grv.FindControl("lblCurrentInstallmentCollection") as Label;
                Label lblArrearInstallmentCollection = grv.FindControl("lblArrearInstallmentCollection") as Label;
                Label lblRecordedby = grv.FindControl("lblRecordedby") as Label;
                Label lblBalance = grv.FindControl("lblBalance") as Label;
                TextBox txtPTPdate = grv.FindControl("txtPTPdate") as TextBox;
                TextBox txtValue = grv.FindControl("txtValue") as TextBox;
                TextBox txtRemarks = grv.FindControl("txtRemarks") as TextBox;
                DropDownList ddlStatus = grv.FindControl("ddlStatus") as DropDownList;
                Label lblDCName = grv.FindControl("lblDCName") as Label;
                Label lblUserId = grv.FindControl("lblUserId") as Label;
                Label lblUpdateStatus = grv.FindControl("lblUpdateStatus") as Label;




                if (ViewState["DCDAIRYMAIN"] != null)
                {
                    DataRow[] dr1 = ((DataTable)ViewState["DCDAIRYMAIN"]).Select("PANUM='" + lblPANUM.Text + "' AND S_No='" + lblSlNo.Text + "' ");
                    if (dr1.Count() > 0)
                    {
                        foreach (DataRow drr in dr1)
                        {
                            drr.Delete();
                        }
                    }
                }
                DataRow dr = dtDcDairy.NewRow();
                dr["S_No"] = lblSlNo.Text;
                dr["PANUM"] = lblPANUM.Text;
                dr["DUE_FLAG"] = lblCASHFLOW.Text;
                dr["CASHFLOWDESCRIPTION"] = lblCASHFLOW_DESC.Text;
                dr["COLLECTION"] = lblCollection.Text;
                if (lblDueDate.Text != string.Empty)
                    dr["DUE_DATE"] = Utility.StringToDate(lblDueDate.Text);
                else
                    dr["DUE_DATE"] = "";
                dr["DUE_AMOUNT"] = lblDueAmount.Text;
                dr["BALANCE"] = lblBalance.Text;
                if (txtPTPdate.Text != string.Empty)
                    dr["PTP_DATE"] = Utility.StringToDate(txtPTPdate.Text);
                else
                    dr["PTP_DATE"] = "";
                dr["VALUE_AMNT"] = txtValue.Text;
                dr["REMARKS"] = txtRemarks.Text;
                dr["STATUS_ID"] = ddlStatus.SelectedValue;
                dr["DC_NAME"] = lblDCName.Text;
                dr["User_Id"] = lblUserId.Text;
                dr["User_Name"] = lblRecordedby.Text;
                dr["MODStatus"] = lblUpdateStatus.Text;
                dtDcDairy.Rows.Add(dr);
                if (ViewState["DCDAIRY"] != null)
                {
                    DataTable dt = (DataTable)ViewState["DCDAIRY"];
                    dt.Merge(dtDcDairy);
                    ViewState["DCDAIRY"] = dt;
                }
                else
                    ViewState["DCDAIRY"] = dtDcDairy;
            }
            if (ViewState["DCDAIRYMAIN"] != null)
            {
                DataTable dtt = (DataTable)ViewState["DCDAIRYMAIN"];
                dtt.Merge(dtDcDairy);
                ViewState["DCDAIRYMAIN"] = dtt;
            }
            else
                ViewState["DCDAIRYMAIN"] = ViewState["DCDAIRY"];

            //if (ViewState["DCDAIRYMAIN"] != null)
            //{
            //    grvDCDairyPopUpOld.DataSource = (DataTable)ViewState["DCDAIRYMAIN"];
            //    grvDCDairyPopUpOld.DataBind();
            //}
            btndcAdd.Enabled = false;
            btndcAddOld_OnClick(sender, e);
        }

        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }


    protected void txtPTPdateOnTextChanged(object sender, EventArgs e)//Added By Sathish
    {

        string strFieldAtt = ((TextBox)sender).ClientID;
        int gRowIndex = Utility.FunPubGetGridRowID("grvDCDairyPopUp", strFieldAtt);
        Label lblUpdateStatus = grvDCDairyPopUp.Rows[gRowIndex].FindControl("lblUpdateStatus") as Label;
        lblUpdateStatus.Text = "1";
        btndcAdd.Enabled = true;


    }
    protected void txtValueOnTextChanged(object sender, EventArgs e)//Added By Sathish
    {
        string strFieldAtt = ((TextBox)sender).ClientID;
        int gRowIndex = Utility.FunPubGetGridRowID("grvDCDairyPopUp", strFieldAtt);
        Label lblUpdateStatus = grvDCDairyPopUp.Rows[gRowIndex].FindControl("lblUpdateStatus") as Label;
        lblUpdateStatus.Text = "1";
        btndcAdd.Enabled = true;
    }
    protected void txtRemarksTextChanged(object sender, EventArgs e)//Added By Sathish
    {
        string strFieldAtt = ((TextBox)sender).ClientID;
        int gRowIndex = Utility.FunPubGetGridRowID("grvDCDairyPopUp", strFieldAtt);
        Label lblUpdateStatus = grvDCDairyPopUp.Rows[gRowIndex].FindControl("lblUpdateStatus") as Label;
        lblUpdateStatus.Text = "1";
        btndcAdd.Enabled = true;
    }
    protected void ddlStatusChanged(object sender, EventArgs e)//Added By Sathish
    {
        string strFieldAtt = ((DropDownList)sender).ClientID;
        int gRowIndex = Utility.FunPubGetGridRowID("grvDCDairyPopUp", strFieldAtt);
        Label lblUpdateStatus = grvDCDairyPopUp.Rows[gRowIndex].FindControl("lblUpdateStatus") as Label;
        lblUpdateStatus.Text = "1";
        btndcAdd.Enabled = true;
    }
    //
    protected void txtPTPdateOnTextChanged_old(object sender, EventArgs e)//Added By Sathish
    {
        string strFieldAtt = ((TextBox)sender).ClientID;
        int gRowIndex = Utility.FunPubGetGridRowID("grvDCDairyPopUpOld", strFieldAtt);
        Label lblUpdateStatus = grvDCDairyPopUpOld.Rows[gRowIndex].FindControl("lblUpdateStatus") as Label;
        lblUpdateStatus.Text = "1";
        btndcAdd.Enabled = true;
    }
    protected void txtValueOnTextChanged_old(object sender, EventArgs e)//Added By Sathish
    {
        string strFieldAtt = ((TextBox)sender).ClientID;
        int gRowIndex = Utility.FunPubGetGridRowID("grvDCDairyPopUpOld", strFieldAtt);
        Label lblUpdateStatus = grvDCDairyPopUpOld.Rows[gRowIndex].FindControl("lblUpdateStatus") as Label;
        lblUpdateStatus.Text = "1";
        btndcAdd.Enabled = true;
        btndcAdd.Enabled = true;
    }
    protected void txtRemarksTextChanged_old(object sender, EventArgs e)//Added By Sathish
    {
        string strFieldAtt = ((TextBox)sender).ClientID;
        int gRowIndex = Utility.FunPubGetGridRowID("grvDCDairyPopUpOld", strFieldAtt);
        Label lblUpdateStatus = grvDCDairyPopUpOld.Rows[gRowIndex].FindControl("lblUpdateStatus") as Label;
        lblUpdateStatus.Text = "1";
        btndcAdd.Enabled = true;
    }
    protected void ddlStatusChanged_old(object sender, EventArgs e)//Added By Sathish
    {
        string strFieldAtt = ((DropDownList)sender).ClientID;
        int gRowIndex = Utility.FunPubGetGridRowID("grvDCDairyPopUpOld", strFieldAtt);
        Label lblUpdateStatus = grvDCDairyPopUpOld.Rows[gRowIndex].FindControl("lblUpdateStatus") as Label;
        lblUpdateStatus.Text = "1";
        btndcAdd.Enabled = true;
    }

    protected void btndcAddOld_OnClick(object sender, EventArgs e)//Added By Sathish
    {
        try
        {
            if (ViewState["DCDAIRY_OLD"] != null)
            {
                ViewState["DCDAIRY_OLD"] = null;
            }
            DataTable dtDcDairy = new DataTable();
            dtDcDairy.Columns.Add("S_No");
            dtDcDairy.Columns.Add("PANUM");
            dtDcDairy.Columns.Add("DUE_FLAG");
            dtDcDairy.Columns.Add("DUE_DATE");
            dtDcDairy.Columns.Add("DUE_AMOUNT");
            dtDcDairy.Columns.Add("CASHFLOWDESCRIPTION");
            dtDcDairy.Columns.Add("COLLECTION");
            dtDcDairy.Columns.Add("BALANCE");
            dtDcDairy.Columns.Add("PTP_DATE");
            dtDcDairy.Columns.Add("VALUE_AMNT");
            dtDcDairy.Columns.Add("REMARKS");
            dtDcDairy.Columns.Add("STATUS_ID");
            dtDcDairy.Columns.Add("DC_NAME");
            dtDcDairy.Columns.Add("User_Id");
            dtDcDairy.Columns.Add("User_Name");

            dtDcDairy.Columns.Add("MODStatus");
            foreach (GridViewRow grv in grvDCDairyPopUpOld.Rows)
            {
                Label lblSlNo = grv.FindControl("lblSlNo") as Label;
                Label lblPANUM = grv.FindControl("lblPANUM") as Label;
                Label lblCASHFLOW = grv.FindControl("lblCASHFLOW") as Label;
                Label lblCASHFLOW_DESC = grv.FindControl("lblCASHFLOW_DESC") as Label;
                Label lblDueDate = grv.FindControl("lblDueDate") as Label;
                Label lblDueAmount = grv.FindControl("lblDueAmount") as Label;
                Label lblCollection = grv.FindControl("lblCollection") as Label;
                Label lblCurrentInstallmentDue = grv.FindControl("lblCurrentInstallmentDue") as Label;
                Label lblArrearInstallmentDue = grv.FindControl("lblArrearInstallmentDue") as Label;
                Label lblCurrentInstallmentCollection = grv.FindControl("lblCurrentInstallmentCollection") as Label;
                Label lblArrearInstallmentCollection = grv.FindControl("lblArrearInstallmentCollection") as Label;
                Label lblBalance = grv.FindControl("lblBalance") as Label;
                TextBox txtPTPdate = grv.FindControl("txtPTPdate") as TextBox;
                TextBox txtValue = grv.FindControl("txtValue") as TextBox;
                TextBox txtRemarks = grv.FindControl("txtRemarks") as TextBox;
                DropDownList ddlStatus = grv.FindControl("ddlStatus") as DropDownList;
                Label lblDCName = grv.FindControl("lblDCName") as Label;
                Label lblUserId = grv.FindControl("lblUserId") as Label;
                Label lblRecordedby = grv.FindControl("lblRecordedby") as Label;
                Label lblUpdateStatus = grv.FindControl("lblUpdateStatus") as Label;
                if (ViewState["DCDAIRYMAIN_OLD"] != null)
                {
                    DataRow[] dr1 = ((DataTable)ViewState["DCDAIRYMAIN_OLD"]).Select("PANUM='" + lblPANUM.Text + "' AND S_No='" + lblSlNo.Text + "' ");
                    if (dr1.Count() > 0)
                    {
                        foreach (DataRow drr in dr1)
                        {
                            drr.Delete();
                        }
                    }
                }
                DataRow dr = dtDcDairy.NewRow();
                dr["S_No"] = lblSlNo.Text;
                dr["PANUM"] = lblPANUM.Text;
                dr["DUE_FLAG"] = lblCASHFLOW.Text;
                dr["CASHFLOWDESCRIPTION"] = lblCASHFLOW_DESC.Text;
                dr["COLLECTION"] = lblCollection.Text;
                if (lblDueDate.Text != string.Empty)
                    dr["DUE_DATE"] = Utility.StringToDate(lblDueDate.Text);
                else
                    dr["DUE_DATE"] = "";
                dr["DUE_AMOUNT"] = lblDueAmount.Text;
                dr["BALANCE"] = lblBalance.Text;
                if (txtPTPdate.Text != string.Empty)
                    dr["PTP_DATE"] = Utility.StringToDate(txtPTPdate.Text);
                else
                    dr["PTP_DATE"] = "";
                dr["VALUE_AMNT"] = txtValue.Text;
                dr["REMARKS"] = txtRemarks.Text;
                dr["STATUS_ID"] = ddlStatus.SelectedValue;
                dr["DC_NAME"] = lblDCName.Text;
                dr["User_Id"] = lblUserId.Text;
                dr["MODStatus"] = lblUpdateStatus.Text;
                dr["User_Name"] = lblRecordedby.Text;
                dtDcDairy.Rows.Add(dr);
                if (ViewState["DCDAIRY_OLD"] != null)
                {
                    DataTable dt = (DataTable)ViewState["DCDAIRY_OLD"];
                    dt.Merge(dtDcDairy);
                    ViewState["DCDAIRY_OLD"] = dt;
                }
                else
                    ViewState["DCDAIRY_OLD"] = dtDcDairy;
            }
            if (ViewState["DCDAIRYMAIN_OLD"] != null)
            {
                DataTable dtt = (DataTable)ViewState["DCDAIRYMAIN_OLD"];
                dtt.Merge(dtDcDairy);
                ViewState["DCDAIRYMAIN_OLD"] = dtt;
            }
            else
                ViewState["DCDAIRYMAIN_OLD"] = ViewState["DCDAIRY_OLD"];
            btndcAddOld.Enabled = false;

        }

        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    protected void chkSelect_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            FunPubClearPopUp();
            /*DataTable dt = ViewState["dtFollowAll"] as DataTable;// ViewState["dtFollow"] as DataTable;        
            string txtPrimeAccountNo = "", txtSubAccountNo = "", SubAccountNo = "";

            foreach (GridViewRow gvRow in grvMain.Rows)
            {
                if (((CheckBox)gvRow.FindControl("chkSelect")).Checked)
                {
                    if (txtPrimeAccountNo == "") txtPrimeAccountNo = "'" + (gvRow.FindControl("txtPrimeAccountNo") as Label).Text.Trim() + "'";
                    else txtPrimeAccountNo = txtPrimeAccountNo + "," + "'" + (gvRow.FindControl("txtPrimeAccountNo") as Label).Text.Trim() + "'";

                    SubAccountNo = (gvRow.FindControl("txtSubAccountNo") as Label).Text.Trim();
                    if (SubAccountNo == "") SubAccountNo = (gvRow.FindControl("txtPrimeAccountNo") as Label).Text.Trim() + "DUMMY";

                    if (txtSubAccountNo == "") txtSubAccountNo = "'" + SubAccountNo + "'";
                    else txtSubAccountNo = txtSubAccountNo + "," + "'" + SubAccountNo + "'";
                }
            }

            if (txtPrimeAccountNo != "" && txtSubAccountNo != "")
            {
                if (dt.Select("Panum in (" + txtPrimeAccountNo + ")and sanum  in (" + txtSubAccountNo + ") ").Length > 0)
                {
                    dt = dt.Select("Panum in (" + txtPrimeAccountNo + ")and sanum  in (" + txtSubAccountNo + ") ").CopyToDataTable();
                    grvFollowUp.DataSource = ViewState["dtFollow"] = dt;
                    grvFollowUp.DataBind();
                }
                else
                {
                    ViewState["dtFollow"] = (ViewState["dtFollowAll"] as DataTable).Clone();
                    dt = funAddRow();
                    grvFollowUp.DataSource = ViewState["dtFollow"] = dt;
                    grvFollowUp.DataBind();
                    grvFollowUp.Rows[0].Visible = false;
                }
            }
            else
            {
                grvFollowUp.DataSource = ViewState["dtFollow"] = ViewState["dtFollowAll"] as DataTable;
                grvFollowUp.DataBind();
            }*/

            bool IsCheck = false;
            int intCount = 0;
            string strPANUM = "";
            List<StringBuilder> objList = FunFormXml(out IsCheck, out intCount, out strPANUM);

            if (ObjDictionary != null)
                ObjDictionary.Clear();
            else
                ObjDictionary = new Dictionary<string, string>();

            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            if (IsCheck) ObjDictionary.Add("@StrXml", objList[0].ToString());// strGrvXML.ToString());
            //else ObjDictionary.Add("@StrXml", objList[1].ToString());// strAllXML.ToString());
            ObjDictionary.Add("@Customer_ID", hidCustomerId.Text.ToString());
            ObjDictionary.Add("@User_ID", intUserID.ToString());
            DataTable dsAccountFollow = Utility.GetDefaultData("S3G_CLN_GetFollowUp_AccountWise", ObjDictionary);

            ViewState["dtFollow"] = ViewState["dtFollowAll"] = dsAccountFollow;
            ViewState["Followup"] = dsAccountFollow;
            if (dsAccountFollow != null && dsAccountFollow.Rows.Count > 0)
            {
                pnlFollowUp.Visible = true;
                grvFollowUp.DataSource = dsAccountFollow;
                grvFollowUp.DataBind();
            }
            else
            {
                grvFollowUp.DataSource = funAddRow();
                grvFollowUp.DataBind();
                grvFollowUp.Rows[0].Visible = false;
            }
        }
        catch (Exception ex)
        {
            cvFollowUp.ErrorMessage = ex.Message;
            cvFollowUp.IsValid = false;
        }
    }

    #endregion

    #region Methods

    private void funAssignUser(DropDownList ddl, UserControls_LOBMasterView uc)
    {
        try
        {
            switch (ddl.SelectedValue)
            {
                case "1":
                    uc.strLOV_Code = "USM";
                    break;
                case "2":
                    uc.strLOV_Code = "CMD";
                    break;
                case "3":
                    uc.strLOV_Code = "UTPA";
                    break;
                case "4":
                    uc.strLOV_Code = "DCE";
                    break;
                case "5":
                    uc.strLOV_Code = "DCT";
                    break;
                case "6":
                    uc.strLOV_Code = "ENT";
                    break;
                case "10":
                    uc.strLOV_Code = "PROS";
                    break;
                default:
                    uc.strLOV_Code = "USM";
                    break;
            }
            uc.strControlID = uc.ClientID;
            HiddenField hdnLovCode = uc.FindControl("hdnLovCode") as HiddenField;
            HiddenField hdnCtrlId = uc.FindControl("hdnCtrlId") as HiddenField;
            hdnCtrlId.Value = uc.ClientID;
            hdnLovCode.Value = uc.strLOV_Code;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private string FunLoadXml()
    {
        StringBuilder strBuilder = new StringBuilder();
        try
        {
            strBuilder.Append("<Root>");

            int intRowCount = ((DataTable)ViewState["NewFollowup"]).Rows.Count;

            foreach (GridViewRow gvRow in grvFollowUp.Rows)
            {
                if (intRowCount > gvRow.RowIndex)
                {
                    HiddenField hidFromID = (HiddenField)gvRow.FindControl("hidFromID");
                    HiddenField hidFromType = (HiddenField)gvRow.FindControl("hidFromType");
                    HiddenField hidToID = (HiddenField)gvRow.FindControl("hidToID");
                    HiddenField hidToType = (HiddenField)gvRow.FindControl("hidToType");
                    HiddenField hidQueryType = (HiddenField)gvRow.FindControl("hidQueryType");
                    HiddenField hidMode = (HiddenField)gvRow.FindControl("hidMode");
                    HiddenField hidVersionNo = (HiddenField)gvRow.FindControl("hidVersionNo");
                    HiddenField IsMax = (HiddenField)gvRow.FindControl("IsMax");
                    HiddenField hidStatus = (HiddenField)gvRow.FindControl("hidStatus");
                    HiddenField hidFollowup_Detail_ID = (HiddenField)gvRow.FindControl("hidFollowup_Detail_ID");

                    Label txtDate = (Label)gvRow.FindControl("txtDate");
                    Label txtDescription = (Label)gvRow.FindControl("txtDescription");
                    Label txtNotifyDate = (Label)gvRow.FindControl("txtNotifyDate");
                    Label txtTicketNo = (Label)gvRow.FindControl("txtTicketNo");
                    string strTktNo = txtTicketNo.Text.Trim();
                    if (txtTicketNo.Text == "") strTktNo = "0";

                    if (hidMode.Value.Trim() != "6" && hidMode.Value.Trim() != "")
                    {
                        strBuilder.Append("<Details Ticket_No='" + strTktNo + "' Date ='" + Utility.StringToDate(txtDate.Text.Trim()) + "'  ");
                        strBuilder.Append("User_FromType='" + hidFromType.Value + "'  User_From='" + hidFromID.Value + "'  ");
                        strBuilder.Append("User_ToType='" + hidToType.Value + "'  User_To='" + hidToID.Value + "'  ");
                        strBuilder.Append("QueryType_Code='70'  Query_Code='" + hidQueryType.Value + "'  ");
                        strBuilder.Append("Description='" + txtDescription.Text.Trim() + "'  Notify_Date='" + Utility.StringToDate(txtNotifyDate.Text.Trim()) + "'  ");
                        strBuilder.Append("ModeType_Code='69'  Mode_Code='" + hidMode.Value + "'  ");
                        strBuilder.Append("StatusType_Code='71'  Status_Code='" + hidStatus.Value + "'  Version_No='" + hidVersionNo.Value + "' IsMax='" + IsMax.Value + "' DocRef_No='' Followup_Detail_ID= '" + hidFollowup_Detail_ID.Value + "' ");
                        strBuilder.Append("/>");
                    }
                }
            }
            strBuilder.Append("</Root>");
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
        return strBuilder.ToString();
    }

    private void FunPriPageLoad()
    {
        S3GSession ObjS3GSession = null;
        try
        {
            this.Page.Title = FunPubGetPageTitles(enumPageTitle.PageTitle);

            //Date Format
            ObjS3GSession = new S3GSession();
            strDateFormat = ObjS3GSession.ProDateFormatRW;

            //End
            //User Authorization
            bCreate = ObjUserInfo.ProCreateRW;
            bModify = ObjUserInfo.ProModifyRW;
            bQuery = ObjUserInfo.ProViewRW;
            //Code end

            if (intCompanyID == 0)
                intCompanyID = ObjUserInfo.ProCompanyIdRW;
            if (intUserID == 0)
                intUserID = ObjUserInfo.ProUserIdRW;

            if (Request.QueryString["qsViewId"] != null)
            {
                FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString["qsViewId"]);
                intFollowUpId = Convert.ToInt32(fromTicket.Name);
            }

            Button btnGetLOVTo = ucTo.FindControl("btnGetLOV") as Button;
            Button btnGetLOVFrom = ucFrom.FindControl("btnGetLOV") as Button;
            TextBox txtFrom = ucTo.FindControl("txtName") as TextBox;
            TextBox txtTo = ucFrom.FindControl("txtName") as TextBox;
            txtTo.Width = txtFrom.Width = Unit.Pixel(100);
            //btnGetLOVTo.Attributes.Add("OnClick", "$find('ctl00_ContentPlaceHolder1_ucPopUp_ucMPE').hide();");
            //txtTo.Attributes.Add("onfocus", "$find('ctl00_ContentPlaceHolder1_ucPopUp_ucMPE').hide();");
            //txtFrom.Attributes.Add("onfocus", "$find('ctl00_ContentPlaceHolder1_ucPopUp_ucMPE').hide();");            
            //btnGetLOVFrom.Attributes.Add("OnClick", "$find('ctl00_ContentPlaceHolder1_ucPopUp_ucMPE').hide();");
            //pnlAddFollow.Attributes.Add("OnMouseMove", "$find('ctl00_ContentPlaceHolder1_ucPopUp_ucMPE').hide();");
            //pnlAddFollow.Attributes.Add("OnMouseOver", "$find('ctl00_ContentPlaceHolder1_ucPopUp_ucMPE').hide();");
            //pnlAddFollow.Attributes.Add("OnMouseOut", "$find('ctl00_ContentPlaceHolder1_ucPopUp_ucMPE').hide();");
            ////pnlAddFollow.Attributes.Add("OnFocusOut", "$find('ctl00_ContentPlaceHolder1_ucPopUp_ucMPE').hide();");
            //pnlAddFollow.Attributes.Add("OnBlur", "$find('ctl00_ContentPlaceHolder1_ucPopUp_ucMPE').hide();");
            //txtFrom.Focus();

            System.Web.HttpContext.Current.Session["AutoSuggestCompanyID"] = intCompanyID.ToString();
            System.Web.HttpContext.Current.Session["AutoSuggestUserID"] = intUserID.ToString();
            if (ddlLOB.SelectedValue != string.Empty && ddlLOB.SelectedValue != "0")
            {
                System.Web.HttpContext.Current.Session["LOBAutoSuggestValue"] = ddlLOB.SelectedValue;
            }
            else
            {
                System.Web.HttpContext.Current.Session["LOBAutoSuggestValue"] = null;
            }
            if (hdnBranchID.Value != string.Empty && hdnBranchID.Value != "0")
            {
                System.Web.HttpContext.Current.Session["BranchAutoSuggestValue"] = hdnBranchID.Value;
            }
            else
            {
                System.Web.HttpContext.Current.Session["BranchAutoSuggestValue"] = null;
            }

            FunSetComboBoxAttributes(txtComCity, "City", "30");
            FunSetComboBoxAttributes(txtComState, "State", "60");
            FunSetComboBoxAttributes(txtComCountry, "Country", "60");

            if (!IsPostBack)
            {
                //ifrmCRM.Attributes.Add("src", "S3GOrgPricing_Add.aspx?Popup=Yes&qsMode=C");
                txtFinanceAmountM.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, "Finance Amount");
                ceNotifyDt.Format = cetxtCollectedDate.Format = cetxtscannedDate.Format = strDateFormat;
                calStartDate.Format = strDateFormat;
                TextBox txtFromName = ucFrom.FindControl("txtName") as TextBox;
                TextBox txtToName = ucTo.FindControl("txtName") as TextBox;
                //txtFromName.Width = txtToName.Width = txtTicketNo.Width = txtDate.Width = Unit.Pixel(120);
                //ddlFrom.Width = ddlTo.Width = ddlQuery.Width = ddlStatus.Width = ddlMode.Width = Unit.Pixel(120);
                PopulateType();
                funAssignPopupValue();
                FunProLoadLeadDetails();
                FunProInitializeAssetRow();
                FunProLoadAddressCombos();
                btnUp.Attributes.Add("OnClick", "return funUpValidate()");
                txtFromName.Attributes.Add("readOnly", "true");
                txtToName.Attributes.Add("readOnly", "true");
                //txtSDate.Attributes.Add("readOnly", "true");
                txtSDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtSDate.ClientID + "','" + strDateFormat + "',false,  false);");

                txtProspectName.Attributes.Add("onkeyup", "fnSetProspectName('" + txtProspectName.ClientID + "', '" + txtName.ClientID + "');");
                txtProspectName.Attributes.Add("onfocusout", "fnSetProspectName('" + txtProspectName.ClientID + "', '" + txtName.ClientID + "');");
                //txtName.Attributes.Add("onkeyup", "fnSetProspectName('" + txtName.ClientID + "', '" + txtProspectName.ClientID + "');");

                Session.Remove("FU_TYPE");

                bClearList = Convert.ToBoolean(ConfigurationManager.AppSettings.Get("ClearListValues"));
                if (Request.QueryString["qsMode"] == "Q")
                {
                    FunFollowProcessForModification(intFollowUpId);
                    rfvddlType.Enabled = RequiredFieldValidator1.Enabled = false;
                    FunPriDisableControls(-1);
                }
                else if (Request.QueryString["qsMode"] == "M")
                {
                    FunFollowProcessForModification(intFollowUpId);
                    FunPriDisableControls(1);
                    rfvddlType.Enabled = RequiredFieldValidator1.Enabled = false;
                }
                else
                {
                    FunPriDisableControls(0);
                }

                if (Request.QueryString["qsCustomer"] != null)
                {
                    FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString["qsCustomer"]);
                    ddlType.SelectedValue = "2";
                    ucPopUp.SelectedValue = fromTicket.Name;
                    ucPopUp.SelectedText = "CRM";
                    btnLoadCustomer_OnClick(null, null);
                }
                else
                {
                    ddlType.SelectedValue = "8";
                    ddlType_SelectedIndexChanged(null, null);
                }

                //ScriptManager.RegisterStartupScript(this, this.GetType(), "This", "javascript:window_onload();", true);

                FunProClearCachedFiles();
            }


        }
        catch (Exception ex)
        {
            ObjS3GSession = null;
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
        finally
        {
            ObjS3GSession = null;
        }
    }

    private void FunFollowProcessForModification(int intFollowUpId)
    {
        pnlFollowUp.Visible = true;
        trHead.Visible = false;
        try
        {
            if (ObjDictionary != null)
                ObjDictionary.Clear();
            else
                ObjDictionary = new Dictionary<string, string>();

            ObjDictionary.Add("@Company_ID", Convert.ToString(intCompanyID));
            ObjDictionary.Add("@FollowUp_ID", intFollowUpId.ToString());
            ObjDictionary.Add("@UserId", intUserID.ToString());

            DataSet dsFollow = Utility.GetDataset("S3G_CLN_GetFollowUp", ObjDictionary);

            if (dsFollow.Tables[0] != null && dsFollow.Tables[0].Rows.Count > 0)
            {
                grvMain.DataSource = dsFollow.Tables[0];
                grvMain.DataBind();
                pnlAccount.Visible = true;
            }

            if (dsFollow.Tables[1] != null && dsFollow.Tables[1].Rows.Count > 0)
            {
                ucdCustomer.SetCustomerDetails(dsFollow.Tables[1].Rows[0], true);
                hidCustomerId.Text = dsFollow.Tables[1].Rows[0]["Customer_ID"].ToString();
                FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(hidCustomerId.Text, false, 0);
                btnUp.Attributes.Add("OnClick", "if(funUpValidate()){ window.open('../Origination/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes&qsCustomerId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q', 'null','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');return false;}");
            }

            if (dsFollow.Tables[2] != null && dsFollow.Tables[2].Rows.Count > 0)
            {
                grvAssetDetails.DataSource = dsFollow.Tables[2];
                grvAssetDetails.DataBind();
            }

            ViewState["dtFollow"] = ViewState["dtFollowAll"] = dsFollow.Tables[3];
            ViewState["Followup"] = dsFollow.Tables[3];
            if (dsFollow.Tables[3] != null && dsFollow.Tables[3].Rows.Count > 0)
            {
                grvFollowUp.DataSource = dsFollow.Tables[3];
                grvFollowUp.DataBind();
                if (dsFollow.Tables[3].Select(" FollowUp_ID = " + intFollowUpId + " ").Length > 0)
                    txtFollowUpNo.Text = dsFollow.Tables[3].Select(" FollowUp_ID = " + intFollowUpId + " ").CopyToDataTable().Rows[0]["FollowUp_No"].ToString();
            }
            else
            {
                grvFollowUp.DataSource = funAddRow();
                grvFollowUp.DataBind();
                grvFollowUp.Rows[0].Visible = false;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    #region "User Authorization"
    //This is used to implement User Authorization
    private void FunPriDisableControls(int intModeID)
    {
        try
        {
            switch (intModeID)
            {
                case 0: // Create Mode

                    lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Create);
                    if (!bCreate)
                    {
                        //btnListing.Enabled = false;
                    }
                    break;
                case 1: // Modify Mode

                    lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Modify);
                    if (!bModify)
                    {

                    }
                    btnClear.Enabled = false;
                    foreach (GridViewRow gvRow in grvMain.Rows)
                    {
                        (gvRow.FindControl("chkSelect") as CheckBox).Enabled = false;
                    }
                    break;

                case -1:// Query Mode
                    lblHeading.Text = FunPubGetPageTitles(enumPageTitle.View);

                    if (!bQuery)
                    {
                        Response.Redirect(strRedirectPage, false);
                    }
                    btnClear.Enabled = btnSave.Enabled = false;
                    if (grvFollowUp.HeaderRow != null) (grvFollowUp.HeaderRow.FindControl("btnAdd") as Button).Enabled = false;

                    foreach (GridViewRow gvRow in grvFollowUp.Rows)
                    {
                        LinkButton btnView = gvRow.FindControl("btnView") as LinkButton;
                        LinkButton btnRemove = gvRow.FindControl("btnRemove") as LinkButton;
                        LinkButton lnkQuery = gvRow.FindControl("lnkQuery") as LinkButton;
                        btnView.Enabled = btnRemove.Enabled = lnkQuery.Enabled = false;
                    }
                    foreach (GridViewRow gvRow in grvMain.Rows)
                    {
                        CheckBox chkSelect = gvRow.FindControl("chkSelect") as CheckBox;
                        chkSelect.Enabled = false;
                    }

                    txtSDate.Attributes.Remove("onblur");
                    txtSDate.ReadOnly = true;

                    break;
            }
        }

        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }
    //Code end
    #endregion

    private void PopulateType()
    {
        try
        {
            if (ObjDictionary != null)
                ObjDictionary.Clear();
            else
                ObjDictionary = new Dictionary<string, string>();

            ObjDictionary.Add("@Company_ID", Convert.ToString(intCompanyID));
            DataSet dsLookUp = Utility.GetDataset("S3G_CLN_GetFollowUp_LookUp", ObjDictionary);

            ViewState["FollowUpLookUp"] = dsLookUp;
            ddlType.DataSource = dsLookUp.Tables[0];
            ddlType.DataValueField = "Lookup_Code";
            ddlType.DataTextField = "Lookup_Description";
            ddlType.DataBind();
            ddlType.Items.Insert(0, new ListItem("--Select--", "0"));

            ddlFrom.DataSource = dsLookUp.Tables[1];
            ddlFrom.DataValueField = "Lookup_Code";
            ddlFrom.DataTextField = "Lookup_Description";
            ddlFrom.DataBind();
            ddlFrom.Items.Insert(0, new ListItem("--Select--", "0"));

            ddlTo.DataSource = dsLookUp.Tables[1];
            ddlTo.DataValueField = "Lookup_Code";
            ddlTo.DataTextField = "Lookup_Description";
            ddlTo.DataBind();
            ddlTo.Items.Insert(0, new ListItem("--Select--", "0"));

            ddlMode.DataSource = dsLookUp.Tables[2];
            ddlMode.DataValueField = "Lookup_Code";
            ddlMode.DataTextField = "Lookup_Description";
            ddlMode.DataBind();
            ddlMode.Items.Insert(0, new ListItem("--Select--", "0"));

            ddlQuery.DataSource = dsLookUp.Tables[3];
            ddlQuery.DataValueField = "Lookup_Code";
            ddlQuery.DataTextField = "Lookup_Description";
            ddlQuery.DataBind();
            ddlQuery.Items.Insert(0, new ListItem("--Select--", "0"));
            ddlQuery.Items.RemoveAt(6);

            ddlStatus.DataSource = dsLookUp.Tables[4];
            ddlStatus.DataValueField = "Lookup_Code";
            ddlStatus.DataTextField = "Lookup_Description";
            ddlStatus.DataBind();
            ddlStatus.Items.Insert(0, new ListItem("--Select--", "0"));

            ddlLeadStatus.DataSource = dsLookUp.Tables[5];
            ddlLeadStatus.DataValueField = "Lookup_Code";
            ddlLeadStatus.DataTextField = "Lookup_Description";
            ddlLeadStatus.DataBind();
            ddlLeadStatus.Items.Insert(0, new ListItem("--Select--", "0"));


            ObjDictionary = new Dictionary<string, string>();
            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            ObjDictionary.Add("@LookupType_Code", "108");
            ddlDocumentType.BindDataTable("S3G_LOANAD_GetLookupTypeDescription", ObjDictionary, new string[] { "Lookup_Code", "Lookup_Description" });
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private DataTable funAddRow()
    {
        DataTable dtFollow = new DataTable();
        try
        {
            if (ViewState["dtFollow"] != null)
            {
                dtFollow = ViewState["dtFollow"] as DataTable;
            }
            DataRow drFollow = dtFollow.NewRow();
            drFollow["TicketNo"] = -1;
            drFollow["Date"] = DateTime.Now.ToString();
            drFollow["From"] = "0";
            drFollow["From_Type"] = "0";
            drFollow["From_UserName"] = "";
            drFollow["To"] = "0";
            drFollow["To_Type"] = "0";
            drFollow["To_UserName"] = "";
            drFollow["QueryType"] = "0";
            drFollow["Description"] = "";
            drFollow["NotifyDate"] = DateTime.Now.ToString();
            drFollow["Mode"] = "0";
            drFollow["Status"] = "Open";
            drFollow["QueryTxt"] = "";
            drFollow["ModeTxt"] = "";
            drFollow["isMax"] = false;
            dtFollow.Rows.Add(drFollow);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
        }
        return dtFollow;
    }

    private DataRow funAssignDataRow(DataRow drFollow)
    {
        try
        {
            TextBox txtFromName = ucFrom.FindControl("txtName") as TextBox;
            HiddenField hdnIDFrom = ucFrom.FindControl("hdnID") as HiddenField;
            TextBox txtToName = ucTo.FindControl("txtName") as TextBox;
            HiddenField hdnIDTo = ucTo.FindControl("hdnID") as HiddenField;

            drFollow["TicketNo"] = Convert.ToInt32(hdnTicketNo.Value);
            drFollow["Date"] = DateTime.Today;
            drFollow["From"] = hdnIDFrom.Value;
            drFollow["From_Type"] = ddlFrom.SelectedValue;
            drFollow["From_UserName"] = txtFromName.Text.Trim();
            drFollow["To"] = hdnIDTo.Value;
            drFollow["To_Type"] = ddlTo.SelectedValue;
            drFollow["To_UserName"] = txtToName.Text.Trim();
            drFollow["QueryType"] = ddlQuery.SelectedValue;
            drFollow["Description"] = txtDescription.Text.Trim();
            drFollow["NotifyDate"] = Utility.StringToDate(txtNotifyDt.Text.Trim());
            drFollow["Mode"] = ddlMode.SelectedValue;
            drFollow["ModeTxt"] = ddlMode.SelectedValue == "0" ? "" : ddlMode.SelectedItem.Text.Trim();
            drFollow["QueryTxt"] = ddlQuery.SelectedValue == "0" ? "" : ddlQuery.SelectedItem.Text.Trim();
            drFollow["Status"] = "Open";
            drFollow["Status_Code"] = "1";
            drFollow["Followup_Detail_ID"] = 0;
            string strMailId = "";
            if (hdnIDTo.Value != "" && ddlMode.SelectedValue == "2")
            {
                try
                {
                    if (ObjDictionary != null)
                        ObjDictionary.Clear();
                    else
                        ObjDictionary = new Dictionary<string, string>();

                    ObjDictionary.Add("@Company_ID", Convert.ToString(intCompanyID));
                    ObjDictionary.Add("@ToType", ddlTo.SelectedValue);
                    ObjDictionary.Add("@User_To", hdnIDTo.Value);

                    DataTable dtMail = Utility.GetDefaultData("S3G_CLN_GetFollowUp_ToMail", ObjDictionary);
                    if (dtMail != null && dtMail.Rows.Count > 0)
                        strMailId = dtMail.Rows[0]["ToMailId"].ToString();
                }
                catch (Exception ex)
                {
                    cvFollowUp.ErrorMessage = ex.Message;
                    cvFollowUp.IsValid = false;
                }
            }
            drFollow["ToMailId"] = strMailId;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
        return drFollow;
    }

    #region Save

    protected void FunProUploadFiles(DataTable dtDocs, string strDocType, string strPath)
    {
        try
        {
            for (int i = 0; i <= dtDocs.Rows.Count - 1; i++)
            {
                string strDocument = dtDocs.Rows[i]["Doc_Cat_ID"].ToString();
                string strCacheFile = "Docs_" + strDocType + "_File_" + strDocument;
                if (Cache[strCacheFile] != null)
                {
                    HttpPostedFile hpf = (HttpPostedFile)Cache[strCacheFile];

                    string strFolderName = @"\COMPANY" + intCompanyID.ToString();
                    string strFilePath = strPath + strFolderName;

                    if (!Directory.Exists(strFilePath))
                    {
                        Directory.CreateDirectory(strFilePath);
                    }
                    strFilePath += @"\" + System.IO.Path.GetFileName(hpf.FileName).Split('.')[0].ToString() + DateTime.Now.ToLocalTime().ToString().Replace(" ", "").Replace("/", "").Replace(":", "") + "." + System.IO.Path.GetFileName(hpf.FileName).Split('.')[1].ToString();
                    hpf.SaveAs(strFilePath);

                    dtDocs.Rows[i]["Document_Path"] = strFilePath;
                    dtDocs.AcceptChanges();
                }
                else
                {
                    dtDocs.Rows[i]["Document_Path"] = "";
                }
            }

            ViewState["Docs" + strDocType] = dtDocs;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    protected void FunProClearCachedFiles()
    {
        try
        {
            for (int i = 1; i <= ddlDocumentType.Items.Count - 1; i++)
            {
                string strDocType = ddlDocumentType.Items[i].Value;
                if (ViewState["Docs" + strDocType] != null)
                {
                    for (int j = 0; j <= ((DataTable)ViewState["Docs" + strDocType]).Rows.Count - 1; j++)
                    {
                        string strCacheFile = "Docs_" + strDocType + "_File_" + j.ToString();
                        if (Cache[strCacheFile] != null)
                        {
                            Cache.Remove(strCacheFile);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private void FunPriSaveRecord(int intMoveEnquiry)
    {
        //FunPubSentMail();       
        string strPANum = string.Empty;
        string strSANum = string.Empty;
        int chkCount = 0;

        if (ddlType.SelectedValue == "8" && string.IsNullOrEmpty(txtProspectName.Text.Trim()))
        {
            cvEnquiry.IsValid = false;
            cvEnquiry.ErrorMessage = "Enter Prospect name to proceed.";
            return;
        }
        else if (ddlType.SelectedValue != "8" && string.IsNullOrEmpty(ucPopUp.SelectedValue))
        {
            cvEnquiry.IsValid = false;
            cvEnquiry.ErrorMessage = "Select " + ddlType.SelectedItem.Text + " to proceed.";
            return;
        }

        if (ddlLeadSourceType.SelectedIndex == 0)
        {
            Utility.FunShowAlertMsg(this, "Select the Lead Source Type");
            return;
        }
        if (((ddlLeadSourceType.SelectedValue == "0") || (ddlLeadSourceType.SelectedValue == "14") || (ddlLeadSourceType.SelectedValue == "15")
            || (ddlLeadSourceType.SelectedValue) == "16" || (ddlLeadSourceType.SelectedValue == "17"))
            )
        {
        }
        else
        {
            if (txtLeadSource.Text == string.Empty)
            {
                Utility.FunShowAlertMsg(this, "Select the Lead Source");
                return;
            }
        }
       
        foreach (GridViewRow gvRow in grvMain.Rows)
        {
            CheckBox chkSelect = gvRow.FindControl("chkSelect") as CheckBox;
            if (chkSelect.Checked)
            {
                if (chkCount == 0)
                {
                    strPANum = (gvRow.FindControl("txtPrimeAccountNo") as Label).Text.Trim();
                    strSANum = (gvRow.FindControl("txtSubAccountNo") as Label).Text.Trim();
                    if (strSANum == "") strSANum = strPANum + "DUMMY";
                }
                chkCount++;
                if (chkCount > 1)
                {
                    strPANum = strSANum = "";
                    break;
                }
            }
        }
        //Requirement for Finance Amount greater than Zero Through Enquiry initiate on 21/02/2014 by Palani Kumar.A
        if (ddlPrograms.SelectedValue == "1")
        {
            decimal dcFinanceAmount = 0;
            DataTable dt = (DataTable)ViewState["Assets"];
            foreach (DataRow dtrow in dt.Rows)
            {
                if (string.IsNullOrEmpty(dtrow["FinanceAmount"].ToString()))//For FinanceAmount -- ItemArray[4]
                {
                    Utility.FunShowAlertMsg(this, "Finance Amount should not be Empty and greater than Zero (0)");
                    return;
                }
                if (!string.IsNullOrEmpty(dtrow["FinanceAmount"].ToString()))
                {
                    if (Convert.ToDecimal(dtrow["FinanceAmount"].ToString()) <= dcFinanceAmount)
                    {
                        Utility.FunShowAlertMsg(this, "Finance Amount should be greater than Zero (0) ");
                        return;
                    }
                }
            }
        }
        //-------------- End
        int intFollowId, intCustomerID = 0;
        string strDocNo = string.Empty;
        objFollowUp_Client = new ClnDataMgtServicesReference.ClnDataMgtServicesClient();
        try
        {
            if (Page.IsValid)
            {
                objS3G_CLN_FollowUpDataTable = new ClnDataMgtServices.S3G_CLN_CRM_HdrDataTable();
                objS3G_CLN_FollowUpRow = objS3G_CLN_FollowUpDataTable.NewS3G_CLN_CRM_HdrRow();

                //(ucPopUp.FindControl("hdnID") as HiddenField).Value

                //if (ddlType.SelectedValue == "8")
                //{
                //    if (!string.IsNullOrEmpty((ucPopUp.FindControl("hdnID") as HiddenField).Value))
                //    {
                //        objS3G_CLN_FollowUpRow.CRM_ID = Convert.ToInt32((ucPopUp.FindControl("hdnID") as HiddenField).Value);
                //    }
                //    else
                //    {
                //        objS3G_CLN_FollowUpRow.CRM_ID = 0;
                //    }
                //}
                //else
                //{
                if (!string.IsNullOrEmpty(ucPopUp.SelectedValue))
                {
                    objS3G_CLN_FollowUpRow.CRM_ID = Convert.ToInt32(ucPopUp.SelectedValue);
                }
                else
                {
                    objS3G_CLN_FollowUpRow.CRM_ID = 0;
                }
                //}
                objS3G_CLN_FollowUpRow.Company_ID = intCompanyID;
                objS3G_CLN_FollowUpRow.Group_ID = 0;
                if (!string.IsNullOrEmpty(hidCustomerId.Text))
                {
                    objS3G_CLN_FollowUpRow.Customer_ID = Convert.ToInt32(hidCustomerId.Text);
                }
                else
                {
                    objS3G_CLN_FollowUpRow.Customer_ID = 0;
                }
                objS3G_CLN_FollowUpRow.Location_Code = hdnBranchID.Value;
                objS3G_CLN_FollowUpRow.Enquiry_Number = "";
                objS3G_CLN_FollowUpRow.Offer_Number = "";
                objS3G_CLN_FollowUpRow.Application_Number = "";
                objS3G_CLN_FollowUpRow.PANUM = "";
                objS3G_CLN_FollowUpRow.SANUM = "";
                if (ddlRefType.SelectedValue == "1")
                {
                    objS3G_CLN_FollowUpRow.Enquiry_Number = ddlRefNumber.SelectedValue;
                }
                else if (ddlRefType.SelectedValue == "2")
                {
                    objS3G_CLN_FollowUpRow.Offer_Number = ddlRefNumber.SelectedValue;
                }
                else if (ddlRefType.SelectedValue == "3")
                {
                    objS3G_CLN_FollowUpRow.Application_Number = ddlRefNumber.SelectedValue;
                }
                else if (ddlRefType.SelectedValue == "4")
                {
                    objS3G_CLN_FollowUpRow.SANUM = ddlRefNumber.SelectedValue;
                }
                objS3G_CLN_FollowUpRow.Prospect_Title = Convert.ToInt32(ddlTitle.SelectedValue);
                objS3G_CLN_FollowUpRow.Prospect_Name = txtProspectName.Text;
                objS3G_CLN_FollowUpRow.Address1 = txtComAddress1.Text;
                objS3G_CLN_FollowUpRow.Address2 = txtCOmAddress2.Text;

                TextBox _txtState = (TextBox)txtComState.FindControl("TextBox");
                TextBox _txtCity = (TextBox)txtComCity.FindControl("TextBox");
                TextBox _txtCountry = (TextBox)txtComCountry.FindControl("TextBox");
                objS3G_CLN_FollowUpRow.City = Convert.ToString(_txtCity.Text);
                objS3G_CLN_FollowUpRow.State = Convert.ToString(_txtState.Text);
                objS3G_CLN_FollowUpRow.Country = Convert.ToString(_txtCountry.Text);
                //objS3G_CLN_FollowUpRow.City = txtComCity.Text;
                //objS3G_CLN_FollowUpRow.State = txtComState.Text;
                //objS3G_CLN_FollowUpRow.Country = txtComCountry.Text;
                objS3G_CLN_FollowUpRow.Pincode = txtComPincode.Text;
                objS3G_CLN_FollowUpRow.Mobile = txtComMobile.Text;
                objS3G_CLN_FollowUpRow.Telephone = txtComTelephone.Text;
                objS3G_CLN_FollowUpRow.EMail = txtComEmail.Text;
                objS3G_CLN_FollowUpRow.Website = txtComWebsite.Text;
                objS3G_CLN_FollowUpRow.SE_Ref = "";
                objS3G_CLN_FollowUpRow.Account_Stat_Type = 109;
                objS3G_CLN_FollowUpRow.Account_Stat = Convert.ToInt32(ddlAccountStatus.SelectedValue);
                objS3G_CLN_FollowUpRow.Customer_Stat_Type = 110;
                objS3G_CLN_FollowUpRow.Customer_Stat = Convert.ToInt32(ddlCustomerStatus.SelectedValue);
                objS3G_CLN_FollowUpRow.Created_By = intUserID;
                objS3G_CLN_FollowUpRow.Created_On = DateTime.Now;
                objS3G_CLN_FollowUpRow.Finance_Mode = Convert.ToInt32(ddlFinanceMode.SelectedValue);
                objS3G_CLN_FollowUpRow.LOB = Convert.ToInt32(ddlLOB.SelectedValue);
                if (txtFinanceAmountM.Text != string.Empty)
                    objS3G_CLN_FollowUpRow.Finance_Amount = Convert.ToDecimal(txtFinanceAmountM.Text);
                else
                    objS3G_CLN_FollowUpRow.Finance_Amount = 0;
                objS3G_CLN_FollowUpRow.LeadSourceType = Convert.ToInt32(ddlLeadSourceType.SelectedValue);

                if (ViewState["Assets"] != null)
                {
                    if (((DataTable)ViewState["Assets"]).Rows.Count > 0)
                    {
                        if (Convert.ToDecimal(((DataTable)ViewState["Assets"]).Compute("Sum(FinanceAmount_Dec)", "").ToString()) != Convert.ToDecimal(txtFinanceAmountM.Text))
                        {
                            Utility.FunShowAlertMsg(this, "Finance Amount in Asset details Should be equal to Finance Amount in Lead Information");
                            return;
                        }
                    }
                }


                if (!string.IsNullOrEmpty(txtTenure.Text))
                {
                    objS3G_CLN_FollowUpRow.Tenure = Convert.ToInt32(txtTenure.Text);
                }

                if (!string.IsNullOrEmpty(txtRate.Text))
                {
                    objS3G_CLN_FollowUpRow.Rate = Convert.ToDecimal(txtRate.Text);
                }

                objS3G_CLN_FollowUpRow.Constitution_ID = Convert.ToInt32(ddlConstitutionName.SelectedValue);
                objS3G_CLN_FollowUpRow.Is_MoveEnquiry = intMoveEnquiry;

                if (ucLead.SelectedValue == "")
                {
                    objS3G_CLN_FollowUpRow.LeadSource = 0;
                }
                else
                {
                    objS3G_CLN_FollowUpRow.LeadSource = Convert.ToInt32(ucLead.SelectedValue);
                }
                objS3G_CLN_FollowUpRow.Product_ID = 0; // Convert.ToInt32(ddlLeadSourceType.SelectedValue);
                objS3G_CLN_FollowUpRow.Lead_Status = Convert.ToInt32(ddlLeadStatus.SelectedValue);
                objS3G_CLN_FollowUpRow.Lead_Information = txtLeadInformation.Text;

                ObjDictionary = new Dictionary<string, string>();
                ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
                if (ddlLOB.SelectedValue != "0")
                    ObjDictionary.Add("@LOB_ID", ddlLOB.SelectedValue);
                ObjDictionary.Add("@Program_ID", "241");
                DataTable dtPath = Utility.GetDefaultData("S3G_LOANAD_GetDocPath", ObjDictionary);
                string strFilePath = "";

                for (int i = 1; i <= ddlDocumentType.Items.Count - 1; i++)
                {
                    string strDocType = ddlDocumentType.Items[i].Value;
                    if (ViewState["Docs" + strDocType] != null)
                    {
                        if (dtPath != null && dtPath.Rows.Count > 0)
                        {
                            strFilePath = dtPath.Rows[0]["DOCUMENT_PATH"].ToString();
                        }
                        else
                        {
                            Utility.FunShowAlertMsg(this, "Define Scan Image Path in Document path setup for CRM");
                            return;
                        }

                        FunProUploadFiles((DataTable)ViewState["Docs" + strDocType], strDocType, strFilePath);
                    }
                }

                if (ViewState["NewFollowup"] != null)
                {
                    objS3G_CLN_FollowUpRow.XML_Followup = ((DataTable)ViewState["NewFollowup"]).FunPubFormXml();
                    //objS3G_CLN_FollowUpRow.XML_Followup = FunLoadXml();
                }
                if (ViewState["Assets"] != null)
                {
                    objS3G_CLN_FollowUpRow.XML_Lead_Asset = ((DataTable)ViewState["Assets"]).FunPubFormXml();
                }

                if (ViewState["Docs2"] != null)
                {
                    objS3G_CLN_FollowUpRow.XML_POD_Docs = ((DataTable)ViewState["Docs2"]).FunPubFormXml();
                }
                else
                {
                    objS3G_CLN_FollowUpRow.XML_POD_Docs = "<Root></Root>";
                }
                if (ViewState["Docs1"] != null)
                {
                    objS3G_CLN_FollowUpRow.XML_PRD_Docs = ((DataTable)ViewState["Docs1"]).FunPubFormXml();
                }
                else
                {
                    objS3G_CLN_FollowUpRow.XML_PRD_Docs = "<Root></Root>";
                }

                if (ViewState["Docs4"] != null)
                {
                    objS3G_CLN_FollowUpRow.XML_FIR_Docs = ((DataTable)ViewState["Docs4"]).FunPubFormXml();
                }
                else
                {
                    objS3G_CLN_FollowUpRow.XML_FIR_Docs = "<Root></Root>";
                }

                if (ViewState["Docs3"] != null)
                {
                    objS3G_CLN_FollowUpRow.XML_Cons_Docs = ((DataTable)ViewState["Docs3"]).FunPubFormXml();
                }
                else
                {
                    objS3G_CLN_FollowUpRow.XML_Cons_Docs = "<Root></Root>";
                }
                if (ViewState["DCDAIRYMAIN"] != null)
                {
                    objS3G_CLN_FollowUpRow.XML_DC_DAIRYDETAILS = ((DataTable)ViewState["DCDAIRYMAIN"]).FunPubFormXml();
                }
                if (ViewState["DCDAIRYMAIN_OLD"] != null)
                {
                    objS3G_CLN_FollowUpRow.XML_DC_DAIRYDETAILS_OLD = ((DataTable)ViewState["DCDAIRYMAIN_OLD"]).FunPubFormXml();
                }
                objS3G_CLN_FollowUpDataTable.AddS3G_CLN_CRM_HdrRow(objS3G_CLN_FollowUpRow);

                intErrCode = objFollowUp_Client.FunPubCreateCRM(out intFollowId, out strDocNo, out intCustomerID, ObjSerMode, ClsPubSerialize.Serialize(objS3G_CLN_FollowUpDataTable, ObjSerMode));
                switch (intErrCode)
                {
                    case 0:
                        {
                            FunProClearCachedFiles();

                            string strMessage = "";
                            int intMail = 0;
                            hidCustomerId.Text = intCustomerID.ToString();
                            foreach (GridViewRow gvRow in grvFollowUp.Rows)
                            {
                                //Mail:
                                HiddenField hidMode = (HiddenField)gvRow.FindControl("hidMode");
                                HiddenField hidFollowup_Detail_ID = (HiddenField)gvRow.FindControl("hidFollowup_Detail_ID");
                                Label txtDescription = (Label)gvRow.FindControl("txtDescription");
                                Label txtTicketNo = (Label)gvRow.FindControl("txtTicketNo");
                                TextBox hidToMailId = (TextBox)gvRow.FindControl("hidToMailId");
                                Label txtNotifyDate = (Label)gvRow.FindControl("txtNotifyDate");
                                Label hidToUserName = (Label)gvRow.FindControl("hidToUserName");
                                Label hidFromUserName = (Label)gvRow.FindControl("hidFromUserName");
                                Label txtQuery = (Label)gvRow.FindControl("txtQuery");

                                string strTktNo = txtTicketNo.Text.Trim();
                                if (txtTicketNo.Text == "") strTktNo = "0";

                                if (hidFollowup_Detail_ID.Value == "0" && strTktNo != "0" && hidMode.Value == "2")
                                {
                                    try
                                    {
                                        //FunPubSentMail(txtDescription.Text.Trim(), strTktNo, hidToMailId.Text.Trim(), txtNotifyDate.Text.Trim(), hidToUserName.Text.Trim(), txtQuery.Text.Trim(), hidFromUserName.Text.Trim());
                                        Dictionary<string, string> dictMail = new Dictionary<string, string>();
                                        dictMail.Add("FromMail", "s3g@sundaraminfotech.in");
                                        dictMail.Add("ToMail", hidToMailId.Text.Trim());
                                        dictMail.Add("Subject", "Follow up");
                                        //dictMail.Add("ToCC", "");
                                        //dictMail.Add("ToBCC", "");
                                        ArrayList arrMailAttachement = new ArrayList();
                                        StringBuilder strBody = new StringBuilder();
                                        strBody = GetHTMLText(txtDescription.Text.Trim(), strTktNo, txtNotifyDate.Text.Trim(), hidToUserName.Text.Trim(), txtQuery.Text.Trim(), hidFromUserName.Text.Trim());

                                        Utility.FunPubSentMail(dictMail, arrMailAttachement, strBody);
                                    }
                                    catch (Exception exMail)
                                    {
                                        if (intMail == 0)
                                            strMessage = "Invalid EMail ID. Mail not sent to the Ticket No ( " + strTktNo;
                                        else
                                            strMessage = strMessage + "," + strTktNo;

                                        intMail++;
                                        //Utility.FunShowAlertMsg(this, strMessage);
                                    }
                                }
                            }

                            if (strMessage != "") strMessage = "\\n\\n " + strMessage + ")";

                            else if (intFollowUpId == 0)
                            {
                                //To avoid double save click
                                btnSave.Enabled = false;
                                //End here
                                if (intMoveEnquiry == 0)
                                {
                                    strAlert = "CRM " + Resources.ValidationMsgs.S3G_ValMsg_Save;
                                }
                                else
                                {
                                    if (intMoveEnquiry == 1)
                                    {
                                        strAlert = "Prospect mapped successfully with " + ddlPrograms.SelectedItem.Text + " number " + strDocNo;
                                        //strAlert = "Enquiry Updation " + strDocNo + " Created Successfully";
                                    }
                                    else
                                    {
                                        FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(strDocNo, false, 0);
                                        ifrmCRM.Visible = true;
                                        if (intMoveEnquiry == 2)
                                        {
                                            Response.Redirect(strNewWinPricingIFrm + FormsAuthentication.Encrypt(Ticket));
                                            //ifrmCRM.Attributes.Add("src", strNewWinPricingIFrm + FormsAuthentication.Encrypt(Ticket));
                                            //ScriptManager.RegisterStartupScript(this, this.GetType(), "Popup", strNewWinPricing + FormsAuthentication.Encrypt(Ticket) + strNewWinAttributes, true);
                                        }
                                        else if (intMoveEnquiry == 3)
                                        {
                                            Response.Redirect(strNewWinApplicationIFrm + FormsAuthentication.Encrypt(Ticket));
                                            //ifrmCRM.Attributes.Add("src", strNewWinApplicationIFrm + FormsAuthentication.Encrypt(Ticket));
                                            //ScriptManager.RegisterStartupScript(this, this.GetType(), "Popup", strNewWinApplication + FormsAuthentication.Encrypt(Ticket) + strNewWinAttributes, true);
                                        }
                                        Session["ddlType"] = ddlType.SelectedValue;
                                        Session["ucPopUpValue"] = hidCustomerId.Text;
                                        return;
                                    }
                                }
                                strAlert += strMessage;
                                strAlert += " \\n \\n Would you like to add more details?";  //Resources.ValidationMsgs.S3G_ValMsg_FollowUp_Confirm;// "\\n\\n Would you like to add one more Follow Up details?";
                                strAlert = "if(confirm('" + strAlert + "')){" + strRedirectPageAdd + "}else {" + strRedirectPageView + "}";
                                strRedirectPageView = "";
                                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert, true);
                            }
                            else
                            {
                                //To avoid double save click
                                btnSave.Enabled = false;
                                //End here

                                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, "alert(' CRM " + Resources.ValidationMsgs.S3G_ValMsg_Update + strMessage + "');" + strRedirectPageView, true);   //Details Updated succesfully
                            }

                            break;
                        }
                    case -1:
                        {
                            Utility.FunShowAlertMsg(this.Page, "Document Number control not defined for Customer Master");
                            break;
                        }
                    case -2:
                        {
                            Utility.FunShowAlertMsg(this.Page, "Document Number control exceeded for Customer Master");
                            break;
                        }
                    case -3:
                        {
                            Utility.FunShowAlertMsg(this.Page, "Customer Document Number exceeding 12 charecters");
                            break;
                        }
                    case -4:
                        {
                            Utility.FunShowAlertMsg(this.Page, "Document Number control not defined for Enquiry Updation");
                            break;
                        }
                    case -5:
                        {
                            Utility.FunShowAlertMsg(this.Page, "Document Number control exceeded for Enquiry Updation");
                            break;
                        }
                    case 50:
                        {
                            Utility.FunShowAlertMsg(this.Page, "Error in saving details");
                            break;
                        }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
        finally
        {
            if (objFollowUp_Client != null)
                objFollowUp_Client.Close();
        }
    }
    #endregion

    #region  DateFormat
    public string FormatDate(string strDate)
    {
        try
        {
            if (strDate != "")
                return DateTime.Parse(strDate, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
            //return Utility.StringToDate(strDate).ToString(strDateFormat);
            else
                return "";
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }
    #endregion

    private void funClearPopUp()
    {
        try
        {
            TextBox txtFromName = ucFrom.FindControl("txtName") as TextBox;
            HiddenField hdnIDFrom = ucFrom.FindControl("hdnID") as HiddenField;
            TextBox txtToName = ucTo.FindControl("txtName") as TextBox;
            HiddenField hdnIDTo = ucTo.FindControl("hdnID") as HiddenField;

            txtDescription.Text = txtTicketNo.Text = hdnTicketNo.Value = txtDate.Text = txtNotifyDt.Text = "";
            txtToName.Text = txtFromName.Text = hdnIDFrom.Value = hdnIDTo.Value = "";
            ddlQuery.SelectedIndex = ddlFrom.SelectedIndex = ddlTo.SelectedIndex = ddlMode.SelectedIndex = 0;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private void funShowPopUp(object sender, EventArgs e, string strType)
    {
        try
        {
            if (ObjDictionary != null)
                ObjDictionary.Clear();
            else
                ObjDictionary = new Dictionary<string, string>();

            LinkButton lnkNOD = (LinkButton)sender;
            GridViewRow gvRow = lnkNOD.Parent.Parent as GridViewRow;
            HiddenField hidLOB = gvRow.FindControl("hidLOB") as HiddenField;
            HiddenField hidBranch = gvRow.FindControl("hidBranch") as HiddenField;
            Label txtPANum = gvRow.FindControl("txtPANum") as Label;
            Label txtSANum = gvRow.FindControl("txtSANum") as Label;

            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            ObjDictionary.Add("@LOB_ID", hidLOB.Value);
            ObjDictionary.Add("@Location_ID", hidBranch.Value);
            ObjDictionary.Add("@PANum", txtPANum.Text.Trim());
            ObjDictionary.Add("@SANum", txtSANum.Text.Trim());
            ObjDictionary.Add("@Customer_ID", hidCustomerId.Text.Trim());
            ObjDictionary.Add("@Type", strType);
            if (strType == "Ledger Entry")
            {
                DataSet dsJnEntry = Utility.GetDataset("S3G_CLN_GetFollowUp_PopUp", ObjDictionary);
                if (dsJnEntry.Tables[1].Rows.Count > 0)
                {
                    DataTable dtJnEntry = dsJnEntry.Tables[0];
                    dtJnEntry.Merge(dsJnEntry.Tables[1]);
                    grvPopUp.DataSource = dtJnEntry;// dsJnEntry.Tables[0].Merge(dsJnEntry.Tables[1]); ;
                    grvPopUp.DataBind();
                }
            }
            else
            {
                grvPopUp.DataSource = Utility.GetDefaultData("S3G_CLN_GetFollowUp_PopUp", ObjDictionary);
                grvPopUp.DataBind();

            }
            moeNOD.Show();
            lblNodHead.Text = strType;
            if (grvPopUp.Rows.Count == 0 && strType == "Ledger Entry")
            {
                Utility.FunShowAlertMsg(this, "Ledger Entry does not exists ");
                moeNOD.Hide();
                return;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private void funShowPopUpDCDairy(object sender, EventArgs e, string strType)//Added by Sathish
    {
        try
        {
            if (ObjDictionary != null)
                ObjDictionary.Clear();
            else
                ObjDictionary = new Dictionary<string, string>();

            Button lnkNOD = (Button)sender;
            GridViewRow gvRow = lnkNOD.Parent.Parent as GridViewRow;
            HiddenField hidLOB = gvRow.FindControl("hidLOB") as HiddenField;
            HiddenField hidBranch = gvRow.FindControl("hidBranch") as HiddenField;
            Label txtPANum = gvRow.FindControl("txtPANum") as Label;
            Label txtSANum = gvRow.FindControl("txtSANum") as Label;
            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            ObjDictionary.Add("@User_Id", intUserID.ToString());
            ObjDictionary.Add("@PANUM", txtPANum.Text.Trim());

            DataSet dsJnEntry = Utility.GetDataset("CN_GET_FLWDC_DIRY_POPUP", ObjDictionary);
            if (dsJnEntry.Tables[0].Rows.Count > 0)
            {
                btndcAdd.Enabled = true;
                if (ViewState["DCDAIRYMAIN"] != null)
                {
                    DataTable dt1 = ((DataTable)ViewState["DCDAIRYMAIN"]).Select("PANUM='" + txtPANum.Text.Trim() + "'").CopyToDataTable();
                    grvDCDairyPopUp.DataSource = dt1;
                    grvDCDairyPopUp.DataBind();
                }
                else
                {
                    ViewState["DC_DAIRY_SUM"] = dsJnEntry.Tables[0];
                    ViewState["DC_DAIRY_SUM_OLD"] = dsJnEntry.Tables[0];
                    grvDCDairyPopUp.DataSource = dsJnEntry.Tables[0];
                    grvDCDairyPopUp.DataBind();
                }
                MoedcdairyDetails.Show();
            }
            else
            {
                grvDCDairyPopUp.DataSource = null;
                grvDCDairyPopUp.DataBind();
                btndcAdd.Enabled = false;
            }
            if (dsJnEntry.Tables[1].Rows.Count > 0)
            {
                btndcAdd.Enabled = true;
                if (ViewState["DCDAIRYMAIN_OLD"] != null)
                {
                    DataTable dt1 = ((DataTable)ViewState["DCDAIRYMAIN_OLD"]).Select("PANUM='" + txtPANum.Text.Trim() + "'").CopyToDataTable();
                    grvDCDairyPopUpOld.DataSource = dt1;
                    grvDCDairyPopUpOld.DataBind();
                }
                else
                {

                    ViewState["DC_DAIRY_SUM_OLD"] = dsJnEntry.Tables[1];
                    grvDCDairyPopUpOld.DataSource = dsJnEntry.Tables[1];
                    grvDCDairyPopUpOld.DataBind();
                }
            }
            else
            {
                grvDCDairyPopUpOld.DataSource = null;
                grvDCDairyPopUpOld.DataBind();
            }
            MoedcdairyDetails.Show();
            lblNodHead.Text = strType;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
        }
    }

    private void funGridClear(GridView gv)
    {
        try
        {
            gv.DataSource = null;
            gv.DataBind();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private StringBuilder GetHTMLText(string strDesc, string strTktNo, string strNotifyDt, string strUserName, string strQueryType, string strFrom)
    {
        StringBuilder strBody = new StringBuilder();
        try
        {
            strBody.Append(
               "<font size=\"1\"  color=\"black\" face=\"Times New Roman\">" +

              " <table width=\"100%\">" +

           "<tr >" +
               "<td  align=\"Left\" >" +
                   "<font size=\"1\"  color=\"Black\" face=\"Times New Roman\" >" + "Dear " + strUserName + ",</font> " + "</b>" +
                   "</br>" +
               "</td>" +
          " </tr>" +

           "<tr >" +
               "<td  align=\"Left\" >" +
                   "<font size=\"1\"  color=\"Black\" face=\"Times New Roman\" >" + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ticket No was generated sucessfully .  </font> " +
               "</td>" +
          " </tr>" +

           "<tr >" +
               "<td  align=\"Left\" >" +
                   "<font size=\"1\"  color=\"Black\" face=\"Times New Roman\" >" + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ticket No : " + strTktNo + "</font> " +
               "</td>" +
          " </tr>" +

            "<tr >" +
               "<td  align=\"Left\" >" +
                   "<font size=\"1\"  color=\"Black\" face=\"Times New Roman\" >" + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query Type  : " + strQueryType + "</font> " +
                    "</br>" +
               "</td>" +
          " </tr>" +

          "<tr >" +
               "<td  align=\"Left\" >" +
                   "<font size=\"1\"  color=\"Black\" face=\"Times New Roman\" >" + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Notify Date : " + strNotifyDt + "</font> " +
               "</td>" +
          " </tr>" +

            "<tr >" +
               "<td  align=\"Left\" >" +
                   "<font size=\"1\"  color=\"Black\" face=\"Times New Roman\" >" + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description : " + strDesc + "</font> " +
                    "</br>" +
               "</td>" +
          " </tr>" +

             "<tr >" +
               "<td  align=\"Left\" >" +
                   "<font size=\"1\"  color=\"Black\" face=\"Times New Roman\" >" + " Yours Truly," + "</font> " +
               "</td>" +
          " </tr>" +


             "<tr >" +
               "<td  align=\"Left\" >" +
                   "<font size=\"1\"  color=\"Black\" face=\"Times New Roman\" >" + strFrom + "</font> " +
               "</td>" +
          " </tr>" +

       "</table>" + "</font>");
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
        return strBody;
    }

    private void FunPubClearPopUp()
    {
        try
        {
            ModalPopupExtender ucMPE = ((ModalPopupExtender)ucPopUp.FindControl("ucMPE"));
            if (ucMPE != null) ucMPE.Hide();
            GridView gvList = ((GridView)ucPopUp.FindControl("gvList"));
            gvList.ClearGrid();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private void funAssignPopupValue()
    {
        try
        {
            switch (ddlType.SelectedValue)
            {
                case "1":
                    {
                        ucPopUp.LOVCode = "FWUPD";
                        ucPopUp.gvDisplay = "Customer_Code";
                        break;
                    }
                case "2":
                    {
                        ucPopUp.LOVCode = "FWUPD";
                        ucPopUp.gvDisplay = "Customer_Name";
                        break;
                    }
                case "3":
                    {
                        ucPopUp.LOVCode = "FWUPD";
                        ucPopUp.gvDisplay = "Mobile_Number";
                        break;
                    }
                case "4":
                    {
                        ucPopUp.LOVCode = "FWUPD";
                        ucPopUp.gvDisplay = "Prime_Account_No";
                        break;
                    }
                case "5":
                    {
                        ucPopUp.LOVCode = "FWUPD";
                        ucPopUp.gvDisplay = "Sub_Account_No";
                        break;
                    }
                case "6":
                    {
                        ucPopUp.LOVCode = "FWUPD";
                        ucPopUp.gvDisplay = "SERIAL_NUMBER";
                        break;
                    }
                case "7":
                    {
                        ucPopUp.LOVCode = "FWUPD";
                        ucPopUp.gvDisplay = "REGN_NUMBER";
                        break;
                    }
                case "8":
                    {
                        ucPopUp.LOVCode = "PROS";
                        ucPopUp.gvDisplay = "Prospect_Name";
                        break;
                    }
                case "0":
                    {
                        ucPopUp.LOVCode = "";
                        ucPopUp.gvDisplay = "";
                        break;
                    }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private void FunPubSentMail(string strDesc, string strTktNo, string MailId, string strNotifyDate, string strUserName, string strQueryType, string strFrom)
    {


        /*if (MailId.Trim() != "")
        {
            CommonMailServiceReference.CommonMailClient ObjCommonMail = new CommonMailServiceReference.CommonMailClient();
            try
            {
                string body = "";
                body = GetHTMLText(strDesc, strTktNo, strNotifyDate, strUserName, strQueryType, strFrom);
                ClsPubCOM_Mail ObjCom_Mail = new ClsPubCOM_Mail();
                ObjCom_Mail.ProFromRW = "s3g@sundaraminfotech.in";
                ObjCom_Mail.ProTORW = MailId; // (ucdCustomer.FindControl("txtEmail") as TextBox).Text.Trim();
                ObjCom_Mail.ProSubjectRW = "Follow up";
                ObjCom_Mail.ProMessageRW = strBody.ToString();
                ObjCommonMail.FunSendMail(ObjCom_Mail);
            }
            catch (FaultException<CommonMailServiceReference.ClsPubFaultException> ex)
            {
                if (ObjCommonMail != null)
                    ObjCommonMail.Close();
                  ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                if (ObjCommonMail != null)
                    ObjCommonMail.Close();
                  ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
                throw ex;
            }
            finally
            {
                if (ObjCommonMail != null)
                    ObjCommonMail.Close();
            }
        }*/
    }

    protected void btnGo_Click(object sender, EventArgs e)
    {
        if (ViewState["Followup"] != null)
        {
            DataTable dtFollowup = (DataTable)ViewState["Followup"];
            DataTable dtFilteredFU = dtFollowup.Clone();

            string filterCondition = "";

            filterCondition = " 1 = 1 ";

            if (!string.IsNullOrEmpty(txtSTicketNo.Text))
            {
                filterCondition = filterCondition + " AND TicketNo = '" + txtSTicketNo.Text + "'";
            }
            if (!string.IsNullOrEmpty(txtSDate.Text))
            {
                filterCondition = filterCondition + " AND DATE = #" + Utility.StringToDate(txtSDate.Text.ToString()) + "#";
            }

            DataRow[] drFileterdFU = dtFollowup.Select(filterCondition);

            drFileterdFU.CopyToDataTable<DataRow>(dtFilteredFU, LoadOption.OverwriteChanges);

            grvFollowUp.DataSource = dtFilteredFU;
            grvFollowUp.DataBind();

        }
    }

    protected void btnSClear_Click(object sender, EventArgs e)
    {
        grvFollowUp.DataSource = (DataTable)ViewState["Followup"];
        grvFollowUp.DataBind();
    }

    #endregion


    protected void btnAccordion_Click(object sender, EventArgs e)
    {

        //ScriptManager.RegisterStartupScript(this, this.GetType(), "Txt", "javascript: document.getElementById('<%= " + Button2.ClientID + ".ClientID %>').click();", true);

        //if (Accordion1.SelectedIndex == 0)
        //    Accordion1.SelectedIndex = -1;
        //else
        //    Accordion1.SelectedIndex = 0;
        //Accordion1.SelectedIndex = 0;
    }

    [System.Web.Services.WebMethod]
    public static string[] GetBranchList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        Procparam.Clear();
        Procparam.Add("@Company_ID", System.Web.HttpContext.Current.Session["AutoSuggestCompanyID"].ToString());
        Procparam.Add("@User_ID", System.Web.HttpContext.Current.Session["AutoSuggestUserID"].ToString());
        Procparam.Add("@Program_Id", "241");
        Procparam.Add("@Is_Active", "1");
        Procparam.Add("@PrefixText", prefixText);
        if (System.Web.HttpContext.Current.Session["LOBAutoSuggestValue"] != null)
        {
            if (System.Web.HttpContext.Current.Session["LOBAutoSuggestValue"].ToString() != "0")
                Procparam.Add("@LOB_ID", System.Web.HttpContext.Current.Session["LOBAutoSuggestValue"].ToString());
            else
                Procparam.Add("@LOB_ID", "0");
        }
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_SYSAD_GET_BRANCHLIST_AGT", Procparam));
        return suggetions.ToArray();
    }

    protected void FunProLoadLeadDetails()
    {


        ObjDictionary.Clear();
        ObjDictionary.Add("@Is_Active", "1");
        ObjDictionary.Add("@User_Id", intUserID.ToString());
        ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
        ObjDictionary.Add("@program_ID", "241");
        ddlLOB.BindDataTable(SPNames.LOBMaster, ObjDictionary, new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });

        ObjDictionary.Clear();
        ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
        ObjDictionary.Add("@LookupType_Code", "106");
        ddlFinanceMode.BindDataTable("S3G_LOANAD_GetLookupTypeDescription", ObjDictionary, new string[] { "Lookup_Code", "Lookup_Description" });

        ObjDictionary.Clear();
        ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
        ObjDictionary.Add("@LookupType_Code", "107");
        ddlLeadSourceType.BindDataTable("S3G_LOANAD_GetLookupTypeDescription", ObjDictionary, new string[] { "Lookup_Code", "Lookup_Description" });

        ObjDictionary.Clear();
        ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
        ObjDictionary.Add("@LookupType_Code", "7");
        ddlRefType.BindDataTable("S3G_LOANAD_GetLookupTypeDescription", ObjDictionary, new string[] { "Lookup_Code", "Lookup_Description" });

        ObjDictionary.Clear();
        ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
        ObjDictionary.Add("@LookupType_Code", "109");
        ddlAccountStatus.BindDataTable("S3G_LOANAD_GetLookupTypeDescription", ObjDictionary, new string[] { "Lookup_Code", "Lookup_Description" });

        ObjDictionary.Clear();
        ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
        ObjDictionary.Add("@LookupType_Code", "110");
        ddlCustomerStatus.BindDataTable("S3G_LOANAD_GetLookupTypeDescription", ObjDictionary, new string[] { "Lookup_Code", "Lookup_Description" });

        ObjDictionary.Clear();
        ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
        ddlPrograms.BindDataTable("S3G_ORG_GetCRMPrograms", ObjDictionary, new string[] { "ID", "Caption" });

    }

    protected void btnLeadOk_OnClick(object sender, EventArgs e)
    {
        pnlLeadView.Visible = false;
    }

    protected void btnLeadView_OnClick(object sender, EventArgs e)
    {
        pnlLeadView.Visible = false;
        //ObjDictionary.Clear();
        //ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
        //ObjDictionary.Add("@Type", ddlType.SelectedValue.ToString());
        //if (ddlType.SelectedValue == "8")
        //{
        //    ObjDictionary.Add("@SearchValue", (ucPopUp.FindControl("hdnID") as HiddenField).Value.Trim());
        //}
        //else
        //{
        //    ObjDictionary.Add("@SearchValue", (ucPopUp.FindControl("hdnText") as HiddenField).Value.Trim());
        //}
        //ObjDictionary.Add("@UserId", intUserID.ToString());
        //if (ddlType.SelectedValue == "1" || ddlType.SelectedValue == "2" || ddlType.SelectedValue == "3")
        //    ObjDictionary.Add("@SearchType", "Customer");
        //else
        //    ObjDictionary.Add("@SearchType", "Account");

        //DataSet dsFollow;
        //if (ddlType.SelectedValue == "8")
        //{
        //    dsFollow = Utility.GetDataset("S3G_CLN_GetCRMProspectList", ObjDictionary);
        //}
        //else
        //{
        //    dsFollow = Utility.GetDataset("S3G_CLN_GetCRMFollowUpList", ObjDictionary);
        //}

        //if (ViewState["NewFollowup"] != null)
        //{
        //    grvFollowUp.DataSource = (DataTable)ViewState["NewFollowup"];
        //    grvFollowUp.DataBind();
        //}

        //else
        //{
        //    grvFollowUp.DataSource = funAddRow();
        //    grvFollowUp.DataBind();
        //    grvFollowUp.Rows[0].Visible = false;
        //}

        //ViewState["dtFollow"] = ViewState["dtFollowAll"] = dsFollow.Tables[3];
    }

    protected void imgProspect_OnClick(object sender, EventArgs e)
    {
        if (pnlProspectView.Visible)
        {
            pnlProspectView.Visible = false;
        }
        else
        {
            pnlProspectView.Visible = true;
        }
    }

    protected void btnProspectView_Click(object sender, EventArgs e)
    {
        pnlProspectView.Visible = false;
        tcCRM.ActiveTabIndex = 0;
        pnlFollowUp.Visible = true;
        (ucPopUp.FindControl("hdnText") as HiddenField).Value = txtName.Text;
        tcCRM_ActiveTabChanged(null, null);
    }

    protected void FunProInitializeAssetRow()
    {
        DataTable dtAsset = new DataTable();
        dtAsset.Columns.Add("Asset_ID");
        dtAsset.Columns.Add("Asset_Description");
        dtAsset.Columns.Add("Asset_Cost");
        dtAsset.Columns.Add("FinanceAmount");
        dtAsset.Columns.Add("FinanceAmount_dec", System.Type.GetType("System.Decimal"));

        DataRow dRow = dtAsset.NewRow();
        dtAsset.Rows.Add(dRow);

        grvAssets.DataSource = dtAsset;
        grvAssets.DataBind();
        grvAssets.Rows[0].Visible = false;

        dtAsset.Rows[0].Delete();

        ViewState["Assets"] = dtAsset;
    }

    protected void grvAssets_DeleteClick(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DataTable dtAsset = (DataTable)ViewState["Assets"];
            dtAsset.Rows[e.RowIndex].Delete();
            dtAsset.AcceptChanges();

            if (dtAsset.Rows.Count == 0)
            {
                FunProInitializeAssetRow();
            }
            else
            {
                grvAssets.DataSource = dtAsset;
                grvAssets.DataBind();
                txtFinanceAmountM.Text = dtAsset.Compute("Sum(FinanceAmount)", "").ToString();

                ViewState["Assets"] = dtAsset;
            }
        }
        catch (Exception ex)
        {

        }
    }

    protected void btnAssetAdd_Click(object sender, EventArgs e)
    {
        DataTable dtAsset = (DataTable)ViewState["Assets"];
        DataRow dRow = dtAsset.NewRow();

        DropDownList ddlLeadAsset = (DropDownList)grvAssets.FooterRow.FindControl("ddlLeadAsset");
        TextBox txtAssetCost = (TextBox)grvAssets.FooterRow.FindControl("txtAssetCost");
        TextBox txtFinanceAmount = (TextBox)grvAssets.FooterRow.FindControl("txtFinanceAmount");

        if (ddlLeadAsset.Items.Count > 0 && ddlLeadAsset.SelectedValue != "0")
        {
            dRow["Asset_ID"] = ddlLeadAsset.SelectedValue;
            dRow["Asset_Description"] = ddlLeadAsset.SelectedItem.Text;
        }
        dRow["Asset_Cost"] = txtAssetCost.Text;

        //dRow["Asset_Description"] = ddlLeadAsset.SelectedItem.Text;
        //dRow["Asset_Cost"] = txtAssetCost.Text;
        //dRow["FinanceAmount"] = txtFinanceAmount.Text;

        decimal dcFinanceAmount = 0;

        //Requirement for Finance Amount greater than Zero Through Enquiry initiate on 21/02/2014 by Palani Kumar.A
        if (ddlPrograms.SelectedValue == "1")
        {
            if (string.IsNullOrEmpty(txtFinanceAmount.Text.ToString()))
            {
                Utility.FunShowAlertMsg(this, "Enter Finance Amount");
                return;
            }
            if (!string.IsNullOrEmpty(txtFinanceAmount.Text.ToString()))
            {
                if (Convert.ToDecimal(txtFinanceAmount.Text) <= dcFinanceAmount)
                {
                    Utility.FunShowAlertMsg(this, "Finance Amount should be greater than Zero (0) ");
                    return;
                }
            }
        }
        //------------------End   
        dRow["FinanceAmount"] = txtFinanceAmount.Text;
        dRow["FinanceAmount_dec"] = Convert.ToDecimal(txtFinanceAmount.Text);

        dtAsset.Rows.Add(dRow);

        //txtFinanceAmountM.Text = dtAsset.Compute("Sum(FinanceAmount)", "").ToString();
        //int sum = Convert.ToInt32(dtAsset.Compute("SUM(Convert([FinanceAmount], 'System.Int32'))", ""));
        //  int sum = Convert.ToInt32(dtAsset.Compute("sum([ Sum(FinanceAmount) ])", ""));
        object sum;
        sum = dtAsset.Compute("Sum(FinanceAmount_dec)", "");




        txtFinanceAmountM.Text = sum.ToString();


        grvAssets.DataSource = dtAsset;
        grvAssets.DataBind();

        ViewState["Assets"] = dtAsset;
    }

    protected void grvAssets_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            DropDownList ddlLeadAsset = (DropDownList)e.Row.FindControl("ddlLeadAsset");
            ObjDictionary = new Dictionary<string, string>();
            ObjDictionary.Add("@COMPANY_ID", intCompanyID.ToString());
            ddlLeadAsset.BindDataTable("S3G_CLN_GetAssets", ObjDictionary, new string[] { "Asset_ID", "Asset_Description" });

            ddlLeadAsset.Focus();
            //Added By Palani Kumar.A on 04/04/2014 for CLient Issue
            TextBox txtFinanceAmount = (TextBox)e.Row.FindControl("txtFinanceAmount");
            txtFinanceAmount.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, "Finance Amount");

            //End
        }
    }

    protected void ddlLOB_SelectedIndexChanged(object sender, EventArgs e)
    {
        hdnBranchID.Value = "";
        txtBranchSearch.Text = "";
    }

    protected void FunSetComboBoxAttributes(AjaxControlToolkit.ComboBox cmb, string Type, string maxLength)
    {
        TextBox textBox = cmb.FindControl("TextBox") as TextBox;

        if (textBox != null)
        {
            textBox.Attributes.Add("onkeyup", "maxlengthfortxt('" + maxLength + "');");
            textBox.Attributes.Add("onblur", "funCheckFirstLetterisNumeric(this, '" + Type + "');");
            textBox.Attributes.Add("onpaste", "return false");
        }
    }

    protected void FunProLoadAddressCombos()
    {
        try
        {
            Dictionary<string, string> Procparam = new Dictionary<string, string>();
            if (intCompanyID > 0)
            {
                Procparam.Add("@Company_ID", Convert.ToString(intCompanyID));
            }
            DataTable dtAddr = Utility.GetDefaultData("S3G_SYSAD_GetAddressLoodup", Procparam);

            DataTable dtSource = new DataTable();
            if (dtAddr.Select("Category = 1").Length > 0)
            {
                dtSource = dtAddr.Select("Category = 1").CopyToDataTable();
            }
            else
            {
                dtSource = FunProAddAddrColumns(dtSource);
            }
            txtComCity.FillDataTable(dtSource, "Name", "Name", false);

            dtSource = new DataTable();
            if (dtAddr.Select("Category = 2").Length > 0)
            {
                dtSource = dtAddr.Select("Category = 2").CopyToDataTable();
            }
            else
            {
                dtSource = FunProAddAddrColumns(dtSource);
            }
            txtComState.FillDataTable(dtSource, "Name", "Name", false);

            dtSource = new DataTable();
            if (dtAddr.Select("Category = 3").Length > 0)
            {
                dtSource = dtAddr.Select("Category = 3").CopyToDataTable();
            }
            else
            {
                dtSource = FunProAddAddrColumns(dtSource);
            }
            txtComCountry.FillDataTable(dtSource, "Name", "Name", false);

            OrgMasterMgtServicesReference.OrgMasterMgtServicesClient objCustomerMasterClient = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

            ObjStatus.Option = 1;
            ObjStatus.Param1 = "TITLE";
            Utility.FillDLL(ddlTitle, objCustomerMasterClient.FunPub_GetS3GStatusLookUp(ObjStatus));

            ObjStatus.Option = 2;
            ObjStatus.Param1 = intCompanyID.ToString();
            Utility.FillDLL(ddlConstitutionName, objCustomerMasterClient.FunPub_GetS3GStatusLookUp(ObjStatus));

            objCustomerMasterClient.Close();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
        }
    }

    protected DataTable FunProAddAddrColumns(DataTable dt)
    {
        dt.Columns.Add("ID");
        dt.Columns.Add("Name");
        dt.Columns.Add("Category");

        return dt;
    }

    protected void gvPRDDT_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                Label lblCanView = (Label)e.Row.FindControl("lblCanView");
                Label lblCollectedDate = (Label)e.Row.FindControl("lblCollectedDate");
                Label lblScannedDate = (Label)e.Row.FindControl("lblScannedDate");
                Label lblCollectedBy = (Label)e.Row.FindControl("lblCollectedBy");
                ImageButton hyplnkView = (ImageButton)e.Row.FindControl("hyplnkView");
                CheckBox CbxCheck = (CheckBox)e.Row.FindControl("CbxCheck");
                Label lblDocPath = (Label)e.Row.FindControl("lblDocPath");

                hyplnkView.CssClass = "styleGridEdit";

                if (lblCollectedDate.Text != "")
                {
                    lblCollectedDate.Text = Convert.ToDateTime(lblCollectedDate.Text).ToString(strDateFormat);
                }
                if (lblScannedDate.Text != "")
                {
                    lblScannedDate.Text = Convert.ToDateTime(lblScannedDate.Text).ToString(strDateFormat);
                }

                if (lblCanView.Text == "0" || hyplnkView.CommandArgument.Trim().ToUpper() == lblDocPath.Text.ToUpper())
                {
                    hyplnkView.Visible = false;
                }

                if (lblCollectedBy.Text != "" && lblCollectedBy.Text != "-1")
                {
                    CbxCheck.Checked = true;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, lblHeading.Text);
        }
    }

    protected void ddlCollectedBy_SelectedIndexChanged(object sender, EventArgs e)
    {
        DropDownList ddlCollectedBy = sender as DropDownList;
        if (ddlCollectedBy.SelectedIndex > 0)
        {
            int intCurrentRow = ((GridViewRow)ddlCollectedBy.Parent.Parent).RowIndex;
            Label lblCollectedBy = (Label)gvPRDDT.Rows[intCurrentRow].FindControl("lblCollectedBy");
            lblCollectedBy.Text = ddlCollectedBy.SelectedValue;
        }

    }

    protected void ddlScannedBy_SelectedIndexChanged(object sender, EventArgs e)
    {
        DropDownList ddlScannedBy = sender as DropDownList;
        if (ddlScannedBy.SelectedIndex > 0)
        {
            int intCurrentRow = ((GridViewRow)ddlScannedBy.Parent.Parent).RowIndex;
            Label lblScannedBy = (Label)gvPRDDT.Rows[intCurrentRow].FindControl("lblScannedBy");
            lblScannedBy.Text = ddlScannedBy.SelectedValue;
        }
    }

    protected void hyplnkView_Click(object sender, EventArgs e)
    {
        try
        {
            string strFieldAtt = ((ImageButton)sender).ClientID;
            int gRowIndex = Utility.FunPubGetGridRowID("gvPRDDT", strFieldAtt);
            Label lblDocPath = (Label)gvPRDDT.Rows[gRowIndex].FindControl("lblDocPath");
            if (((ImageButton)sender).CommandArgument.Trim().ToUpper() != lblDocPath.Text.ToUpper())
            {

                string strFileName = ((ImageButton)sender).CommandArgument.Replace("\\", "/").Trim();
                string strScipt = "window.open('../Common/S3GViewFile.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
            }
            else
            {
                Utility.FunShowAlertMsg(this, "File not to be scanned yet");
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, lblHeading.Text);
        }
    }

    protected void ddlRefType_SelectedIndexChanged(object sender, EventArgs e)
    {
        ddlRefNumber.Items.Clear();
        if (ddlRefType.SelectedValue != "0")
        {
            ObjDictionary = new Dictionary<string, string>();
            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            ObjDictionary.Add("@Option", ddlRefType.SelectedValue);
            if (ddlType.SelectedValue == "8")
            {
                ObjDictionary.Add("@CRM_ID", ucPopUp.SelectedValue);
            }
            ddlRefNumber.BindDataTable("S3G_CLN_Get_CRMReferences", ObjDictionary, new string[] { "RefDoc_ID", "RefDoc_No" });
        }

    }

    protected void btnGetLOV_Click(object sender, EventArgs e)
    {
        funAssignPopupValue();
        ucPopUp.Show();
        funProCloseAllPops();
        //ucPopUp.btnGetLOV_Click(sender, e);
    }

    protected void funProCloseAllPops()
    {
        pnlLeadView.Visible = pnlProspectView.Visible = false;
    }

    protected void btnGetSource_Click(object sender, EventArgs e)
    {
        (ucLead.FindControl("pnlLoadLOV") as Panel).Style.Add("min-width", "75%");

        switch (ddlLeadSourceType.SelectedValue)
        {
            case "1":
                {
                    ucLead.LOVCode = "CRMCM";
                    ucLead.gvDisplay = "Customer_Name";
                }
                break;
            case "10":
                {
                    ucLead.LOVCode = "CRMUSR";
                    ucLead.gvDisplay = "User_Name";
                }
                break;
            default:
                {
                    ucLead.LOVCode = "CRMENT";
                    ucLead.gvDisplay = "Entity_Name";
                    ucLead.ucProcparam = new Dictionary<string, string>();
                    ucLead.ucProcparam.Add("@Location_ID", ddlLeadSourceType.SelectedValue);
                }
                break;
        }

        ucLead.Show();

        (ucLead.FindControl("lblHeader") as Label).Text = ddlLeadSourceType.SelectedItem.Text;
    }

    protected void tcCRM_ActiveTabChanged(object sender, EventArgs e)
    {

        grvDcDairyAccountDetails.DataSource = null;
        grvDcDairyAccountDetails.DataBind();
        FunProClearAllTabs();

        int intTabIndex = tcCRM.ActiveTabIndex;
        lblCRMDetail.Text = tcCRM.Tabs[intTabIndex].HeaderText;

        if (ObjDictionary != null)
            ObjDictionary.Clear();
        else
            ObjDictionary = new Dictionary<string, string>();

        DataSet dsFollow = null;

        if ((ucPopUp.FindControl("hdnText") as HiddenField).Value.Trim() != "" && ddlType.SelectedValue != "0")
        {
            dsFollow = new DataSet();
            //txtName.Text = (ucPopUp.FindControl("hdnText") as HiddenField).Value;
            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            ObjDictionary.Add("@Type", ddlType.SelectedValue.ToString());
            if (ddlType.SelectedValue == "8")
            {
                ObjDictionary.Add("@SearchValue", ucPopUp.SelectedValue);
            }
            else
            {
                if (ddlType.SelectedValue == "1" || ddlType.SelectedValue == "2" || ddlType.SelectedValue == "3")
                {
                    ObjDictionary.Add("@SearchValue", hidCustomerId.Text);
                }
                else
                {
                    ObjDictionary.Add("@SearchValue", ucPopUp.SelectedText);
                }
            }
            ObjDictionary.Add("@UserId", intUserID.ToString());
            if (ddlType.SelectedValue == "1" || ddlType.SelectedValue == "2" || ddlType.SelectedValue == "3")
                ObjDictionary.Add("@SearchType", "Customer");
            else
                ObjDictionary.Add("@SearchType", "Account");

            if (ddlType.SelectedValue == "8")
            {
                dsFollow = Utility.GetDataset("S3G_CLN_GetCRMProspectList", ObjDictionary);
            }
            else
            {
                dsFollow = Utility.GetDataset("S3G_CLN_GetCRMFollowUpList", ObjDictionary);
            }
        }

        if (dsFollow != null)
        {
            switch (intTabIndex)
            {
                case 0:
                    {
                        pnlFollowUp.Visible = true;

                        DataTable dtFromDB = dsFollow.Tables[3];
                        DataTable dtExists = new DataTable();

                        ViewState["dtFollow"] = ViewState["dtFollowAll"] = dsFollow.Tables[3];

                        if (ViewState["NewFollowup"] == null)
                        {
                            ViewState["NewFollowup"] = dsFollow.Tables[3].Clone();
                            dtExists = dtFromDB;
                        }
                        else
                        {
                            dtExists = ((DataTable)ViewState["NewFollowup"]).Copy();
                            dtExists.Merge(dtFromDB);
                        }
                        if (dtExists != null && dtExists.Rows.Count > 0)
                        {
                            pnlFollowUp.Visible = true;
                            grvFollowUp.DataSource = dtExists;
                            grvFollowUp.DataBind();
                            grvFollowUp.Rows[0].Visible = true;
                        }
                        else
                        {
                            grvFollowUp.DataSource = funAddRow();
                            grvFollowUp.DataBind();
                            grvFollowUp.Rows[0].Visible = false;
                        }

                        ViewState["dtFollow"] = ViewState["dtFollowAll"] = dtExists;
                    }
                    break;
                case 1:
                    {
                        FunProLoadusers();
                        if (ddlType.SelectedValue == "8")
                        {
                            DataSet dSet = FunProGetDocs(string.Empty);
                        }
                        //gvPRDDT.DataSource = dsFollow.Tables[4];
                        //gvPRDDT.DataBind();
                        pnlDocuments.Visible = true;
                    }
                    break;
                case 2:
                    {
                        if (dsFollow.Tables[2] != null && dsFollow.Tables[2].Rows.Count > 0)
                        {
                            grvAssetDetails.DataSource = dsFollow.Tables[2];
                            grvAssetDetails.DataBind();
                            pnlStatus.Visible = true;
                        }
                    }
                    break;
                case 3:
                    {
                        if (dsFollow.Tables[0] != null && dsFollow.Tables[0].Rows.Count > 0)
                        {
                            grvMain.DataSource = dsFollow.Tables[0];
                            grvMain.DataBind();
                            pnlAccount.Visible = true;
                        }
                        pnlAccount.Visible = true;
                    }
                    break;
                case 5:
                    {
                        pnlLeadView.Visible = true;
                        ucLead.Hide();
                    }
                    break;
            }
        }

        if (intTabIndex == 5)
        {
            pnlLeadView.Visible = true;
            ucLead.Hide();
        }
    }

    protected void FunProClearAllTabs()
    {
        funGridClear(grvFollowUp);
        funGridClear(gvPRDDT);
        funGridClear(grvAssetDetails);
        //funGridClear(grvMain);
        funGridClear(grvAccountDetails);

        pnlFollowUp.Visible = pnlDocuments.Visible = pnlStatus.Visible =
            pnlAccount.Visible = pnlLeadView.Visible = false;

        btnSave.Enabled = true;
        ifrmCRM.Attributes.Remove("src");
        ifrmCRM.Visible = false;
    }

    protected void btnBrowse_OnClick(object sender, EventArgs e)
    {
        if (ddlDocumentType.SelectedValue != "0")
        {
            DataTable dtDocs = (DataTable)ViewState["Docs" + ddlDocumentType.SelectedValue];

            HttpFileCollection hfc = Request.Files;

            if (string.IsNullOrEmpty(lblActualPath.Text))
            {
                Utility.FunShowAlertMsg(this, "Document path not available to Upload");
                return;
            }

            if (hfc.Count > 0)
            {
                HttpPostedFile hpf = hfc[0];
                if (hpf.ContentLength > 0)
                {
                    chkSelect.Enabled = true;
                    chkSelect.Checked = true;
                    chkSelect.ToolTip = flUpload.ToolTip = hdnSelectedPath.Value;
                    lblCurrentPath.Text = hpf.FileName;

                    Cache["Docs_" + ddlDocumentType.SelectedValue + "_File_" + ddlDocument.SelectedValue] = hpf;
                }
            }
        }
        else
        {
            Utility.FunShowAlertMsg(this, "Select Document type");
        }
    }

    protected void FunProLoadusers()
    {
        OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

            ObjStatus.Option = 35;
            ObjStatus.Param1 = intCompanyID.ToString();
            DataTable dtUsers = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

            Utility.FillDLL(ddlCollectedBy, dtUsers);
            Utility.FillDLL(ddlScannedBy, dtUsers);
        }
        catch (Exception ex)
        {
        }
        finally
        {
            ObjCustomerService.Close();
        }
    }

    protected void ddlDocumentType_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlDocumentType.SelectedValue != "0")
        {
            bool IsCheck = false;
            int intCount = 0;
            string strPANUM = "";
            List<StringBuilder> objList = FunFormXml(out IsCheck, out intCount, out strPANUM);

            if (!string.IsNullOrEmpty(hidCustomerId.Text) && hidCustomerId.Text != "0")
            {
                if (ddlDocumentType.SelectedValue != "3")
                {
                    if (grvMain.Rows.Count > 0 && intCount == 0)
                    {
                        Utility.FunShowAlertMsg(this, "No account is mapped to collect documents");
                        ddlDocument.Items.Clear();
                        return;
                    }
                    else if (intCount > 1)
                    {
                        Utility.FunShowAlertMsg(this, "More than one accounts are mapped to collect documents");
                        ddlDocument.Items.Clear();
                        return;
                    }
                }
            }

            DataSet dSet = FunProGetDocs(strPANUM);
            if (ViewState["Docs" + ddlDocumentType.SelectedValue] == null)
                ViewState["Docs" + ddlDocumentType.SelectedValue] = dSet.Tables[0].Clone();

            ddlDocument.FillDLL(dSet.Tables[1]);
            ddlDocument.AddItemToolTip();
        }
    }

    protected DataSet FunProGetDocs(string strPANUM)
    {
        DataTable dtDocs = new DataTable();
        DataTable dtView = new DataTable();
        DataSet dSet = new DataSet();
        try
        {


            ObjDictionary = new Dictionary<string, string>();
            ObjDictionary.Add("@Customer_ID", hidCustomerId.Text);
            ObjDictionary.Add("@Company_ID", intCompanyID.ToString());
            if (ddlLOB.SelectedValue != "0")
            {
                ObjDictionary.Add("@LOB_ID", ddlLOB.SelectedValue);
            }
            ObjDictionary.Add("@PROGRAM_ID", "25");

            ObjDictionary.Add("@PANUM", strPANUM);
            if (ddlType.SelectedValue == "8")
            {
                if (ViewState["CRM_ID"] != null)
                {
                    ObjDictionary.Add("@CRM_ID", ViewState["CRM_ID"].ToString());
                }
            }
            if (ddlDocumentType.SelectedValue == "1")
                dSet = Utility.GetDataset("S3G_CLN_GetCRM_PRDDDocDetails", ObjDictionary);
            else if (ddlDocumentType.SelectedValue == "2")
                dSet = Utility.GetDataset("S3G_CLN_GetCRM_PODDDocDetails", ObjDictionary);
            else if (ddlDocumentType.SelectedValue == "3")
                dSet = Utility.GetDataset("S3G_CLN_GetCRM_ConstDocDetails", ObjDictionary);
            else if (ddlDocumentType.SelectedValue == "4")
                dSet = Utility.GetDataset("S3G_CLN_GetCRM_FIRDocDetails", ObjDictionary);
            else//Added by Sathish for Bug on 8-Oct-2014
            {
                dSet = Utility.GetDataset("S3G_CLN_GetCRM_ConstDocDetails", ObjDictionary);
                ddlDocumentType.SelectedValue = "3";
                DataSet dSetDoc = FunProGetDocs(strPANUM);
                if (ViewState["Docs" + ddlDocumentType.SelectedValue] == null)
                    ViewState["Docs" + ddlDocumentType.SelectedValue] = dSetDoc.Tables[0].Clone();
                ddlDocument.FillDLL(dSet.Tables[1]);
                dtDocs = dSet.Tables[0];
            }

            dtDocs = dSet.Tables[0].Copy();

            if (ViewState["Docs" + ddlDocumentType.SelectedValue] != null)
            {
                dtView = ((DataTable)ViewState["Docs" + ddlDocumentType.SelectedValue]).Copy();
                dtView.Merge(dtDocs);
                dtDocs = dtView.Copy();
            }
            if (dtDocs.Rows.Count == 0)
            {
                DataRow dRow = dtDocs.NewRow();
                dtDocs.Rows.Add(dRow);
            }

            gvPRDDT.DataSource = dtDocs;
            gvPRDDT.DataBind();

            if (dSet.Tables[0].Rows.Count == 0 && dtView.Rows.Count == 0)
            {
                gvPRDDT.Rows[0].Visible = false;
            }

            if (dSet != null && dSet.Tables[2].Rows.Count > 0)
            {
                lblActualPath.Text = dSet.Tables[2].Rows[0]["DOCUMENT_PATH"].ToString();
            }
            else
            {
                lblActualPath.Text = "";
            }


        }
        catch (Exception Ex)
        {

        }
        finally
        {

        }
        return dSet;
    }

    protected void btnDocAdd_Click(object sender, EventArgs e)
    {
        try
        {
            DataTable dtDocs = (DataTable)ViewState["Docs" + ddlDocumentType.SelectedValue];
            if (chkSelect.Checked == false && chkIsCollected.Checked == false)
            {
                Utility.FunShowAlertMsg(this, "No document is Collected / Scanned");
                return;
            }

            if (chkSelect.Checked && (ddlScannedBy.SelectedValue == "0" || ddlScannedBy.SelectedValue == "-1"))
            {
                Utility.FunShowAlertMsg(this, "Select Scanned user name");
                ddlScannedBy.Focus();
                return;
            }

            if (chkIsCollected.Checked && (ddlCollectedBy.SelectedValue == "0" || ddlCollectedBy.SelectedValue == "-1"))
            {
                Utility.FunShowAlertMsg(this, "Select Collected user name");
                ddlCollectedBy.Focus();
                return;
            }
            if (ddlDocumentType.SelectedValue == "3" && txtValue.Text == string.Empty)
            {
                Utility.FunShowAlertMsg(this, "Please Enter the Value");
                return;
            }

            if (dtDocs != null)
            {
                DataRow dRow = dtDocs.NewRow();

                dRow["Documents_ID"] = "0";
                dRow["Doc_Tran_ID"] = "0";
                dRow["Company_ID"] = intCompanyID.ToString(); ;
                dRow["Doc_Cat_ID"] = ddlDocument.SelectedValue;
                dRow["Doc_Description"] = ddlDocument.SelectedItem.Text;

                if (!string.IsNullOrEmpty(txtCollectedDate.Text))
                    dRow["Collected_Date"] = Utility.StringToDate(txtCollectedDate.Text); //DateTime.Parse(txtCollectedDate.Text, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);

                if (!string.IsNullOrEmpty(txtscannedDate.Text))
                    dRow["Scanned_Date"] = Utility.StringToDate(txtscannedDate.Text); //DateTime.Parse(txtscannedDate.Text, CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                dRow["Trans"] = chkSelect.Checked; ;
                if (chkSelect.Checked)
                {
                    dRow["Scanned_Ref_No"] = hdnSelectedPath.Value;
                    dRow["ViewDoc"] = "1";
                }
                else
                {
                    dRow["ViewDoc"] = "0";
                }

                if (ddlCollectedBy.SelectedValue != "-1")
                {
                    dRow["Collected_By"] = ddlCollectedBy.SelectedValue;
                    dRow["Collected_By_Name"] = ddlCollectedBy.SelectedItem.Text;
                }
                if (ddlScannedBy.SelectedValue != "-1")
                {
                    dRow["Scanned_By"] = ddlScannedBy.SelectedValue;
                    dRow["Scanned_By_Name"] = ddlScannedBy.SelectedItem.Text;
                }
                dRow["Document_Path"] = lblActualPath.Text;
                dRow["Remarks"] = txtDocRemarks.Text;
                dRow["CR_VALUE"] = txtValue.Text;
                dtDocs.Rows.InsertAt(dRow, 0);
            }

            FunProClearDocumentControls();
            ViewState["Docs" + ddlDocumentType.SelectedValue] = dtDocs;

            bool IsCheck = false;
            int intCount = 0;
            string strPANUM = "";
            List<StringBuilder> objList = FunFormXml(out IsCheck, out intCount, out strPANUM);

            FunProGetDocs(strPANUM);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void FunProClearDocumentControls()
    {
        Cache.Remove("File");
        ddlDocument.SelectedValue = ddlCollectedBy.SelectedValue = ddlScannedBy.SelectedValue = "-1";
        txtCollectedDate.Text = txtscannedDate.Text = hdnSelectedPath.Value = lblCurrentPath.Text = txtDocRemarks.Text = "";
        chkSelect.Checked = chkIsCollected.Checked = false;
        chkSelect.Enabled = false;
        txtValue.Text = string.Empty;
    }

    protected void btnDocClear_Click(object sender, EventArgs e)
    {
        FunProClearDocumentControls();
    }

    protected void FunProToggleProspectControls(bool blEnable)
    {
        txtProspectName.ReadOnly = txtComAddress1.ReadOnly = txtCOmAddress2.ReadOnly =
            txtComPincode.ReadOnly = txtComTelephone.ReadOnly = txtComMobile.ReadOnly = txtComEmail.ReadOnly = txtComWebsite.ReadOnly = !blEnable;
        txtComCity.Enabled = txtComState.Enabled = txtComCountry.Enabled = blEnable;
    }

    protected void FunProProspectClear()
    {
        ddlTitle.SelectedValue = "-1";
        ddlRefType.SelectedValue = "0";
        txtComAddress1.Text = txtCOmAddress2.Text = txtComPincode.Text =
            txtComTelephone.Text = txtComMobile.Text = txtComEmail.Text = txtComWebsite.Text = "";

        ddlRefNumber.Items.Clear();
    }

    protected void FunProClearLead()
    {
        ddlFinanceMode.SelectedValue = "0";
        ddlLOB.SelectedValue = ddlLeadSourceType.SelectedValue = ddlAccountStatus.SelectedValue = ddlCustomerStatus.SelectedValue =
        ddlLeadStatus.SelectedValue = "0";
        ucLead.Clear();
        txtLeadInformation.Text = txtLeadSource.Text = txtRate.Text = txtTenure.Text = "";

        FunProInitializeAssetRow();
    }

    protected void ddlLeadSourceType_SelectedIndexChanged(object sender, EventArgs e)
    {
        ucLead.Clear();
        txtLeadSource.Text = "";
        btnGetSource.Enabled = true;

        switch (ddlLeadSourceType.SelectedValue)
        {
            case "0":
            case "14"://Media
            case "15"://Company website
            case "16"://Others
            case "17"://Direct Lead
                {
                    btnGetSource.Enabled = false;
                }
                break;
        }
    }

    protected void btnMoveEnquiry_Click(object sender, EventArgs e)
    {

        //FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket("204", false, 0);
        ////btnHdnMove.Attributes.Add("onclick", strNewWinPricing + FormsAuthentication.Encrypt(Ticket) + strNewWinAttributes);
        ////ScriptManager.RegisterStartupScript(this, this.GetType(), "Popup", "document.getElementById('ctl00_ContentPlaceHolder1_btnHdnMove').click()", true);
        //ScriptManager.RegisterStartupScript(this, this.GetType(), "Popup", strNewWinPricing + FormsAuthentication.Encrypt(Ticket) + strNewWinAttributes, true);
        ////ScriptManager.RegisterStartupScript(this, this.GetType(), "Popup", "window.open('../Origination/S3GOrgPricing_Add.aspx?Popup=Yes&qsMode=C&qsCRMID=" + FormsAuthentication.Encrypt(Ticket) + "', 'null','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50')", true);
        //return;
        if (ddlPrograms.SelectedValue != "1" && (hidCustomerId.Text.Trim() == "" || hidCustomerId.Text.Trim() == "0"))
        {
            cvEnquiry.IsValid = false;
            cvEnquiry.ErrorMessage = "Customer information not reported for this Prospects";
            return;
        }

        if (ddlLeadStatus.SelectedValue != "3")
        {
            Utility.FunShowAlertMsg(this, "Enquiry can be initiated only if Lead Status is Approved");
            return;
        }

        string strErrorMsg = cvEnquiry.ErrorMessage = string.Empty;

        if (ddlType.SelectedValue == "8")
        {
            if (ddlTitle.SelectedValue == "-1")
            {
                strErrorMsg = rfvTitle.ErrorMessage + "<br/>";
            }
            if (txtComAddress1.Text.Trim() == string.Empty)
            {
                strErrorMsg = strErrorMsg + rfvComAddress1.ErrorMessage + "<br/>";
            }
            if (txtComCity.Text.Trim() == string.Empty || txtComCity.SelectedItem.Text.Trim() == string.Empty)
            {
                strErrorMsg = strErrorMsg + rfvComCity.ErrorMessage + "<br/>";
            }
            if (txtComState.Text.Trim() == string.Empty || txtComState.SelectedItem.Text.Trim() == string.Empty)
            {
                strErrorMsg = strErrorMsg + rfvComState.ErrorMessage + "<br/>";
            }
            if (txtComCountry.Text.Trim() == string.Empty || txtComCountry.SelectedItem.Text.Trim() == string.Empty)
            {
                strErrorMsg = strErrorMsg + rfvComCountry.ErrorMessage + "<br/>";
            }
            if (txtComPincode.Text.Trim() == string.Empty)
            {
                strErrorMsg = strErrorMsg + rfvComPincode.ErrorMessage + "<br/>";
            }
            if (txtComTelephone.Text.Trim() == string.Empty)
            {
                strErrorMsg = strErrorMsg + rfvComTelephone.ErrorMessage + "<br/>";
            }
        }
        if (ddlLOB.SelectedValue == "0")
        {
            strErrorMsg = strErrorMsg + rfvddlLOB.ErrorMessage + "<br/>";
        }
        if (txtTenure.Text.Trim() == string.Empty || (txtTenure.Text.Trim() != string.Empty && Convert.ToInt32(txtTenure.Text.Trim()) == 0))
        {
            strErrorMsg = strErrorMsg + rfvtxtTenure.ErrorMessage + "<br/>";
        }
        if (txtRate.Text.Trim() == string.Empty || (txtRate.Text.Trim() != string.Empty && Convert.ToDecimal(txtRate.Text.Trim()) == 0))
        {
            strErrorMsg = strErrorMsg + rfvtxtRate.ErrorMessage + "<br/>";
        }
        if (ddlConstitutionName.SelectedValue == "-1")
        {
            strErrorMsg = strErrorMsg + rfvddlConstitutionName.ErrorMessage + "<br/>";
        }
        if (ddlLOB.SelectedValue != "0" && (ddlLOB.SelectedItem.Text.StartsWith("HP") || ddlLOB.SelectedItem.Text.StartsWith("FL") || ddlLOB.SelectedItem.Text.StartsWith("OL")))
        {
            if (((DataTable)ViewState["Assets"]).Rows.Count == 0)
            {
                strErrorMsg = strErrorMsg + "Add minimum one asset information";
            }
        }

        if (!string.IsNullOrEmpty(strErrorMsg))
        {
            cvEnquiry.IsValid = false;
            cvEnquiry.ErrorMessage = strErrorMsg;
            return;
        }

        FunPriSaveRecord(Convert.ToInt32(ddlPrograms.SelectedValue));
    }

    protected void btnFrameCancel_Click(object sender, EventArgs e)
    {
        ifrmCRM.Visible = false;
    }
}

