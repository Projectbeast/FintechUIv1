/// Module Name     :   Origination
/// Screen Name     :   Application Processing
/// Created By      :   Sathish R-008181
/// Created Date    :   10-June-2018



#region NameSpaces
using System;
using System.Data;
using S3GBusEntity;
using System.Web.UI;
using System.ServiceModel;
using System.Globalization;
using System.Web.Security;
using System.Web.UI.WebControls;
using System.Collections.Generic;
using S3GBusEntity.Origination;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Web;
using System.Data.Common;
using System.Diagnostics;
using System.Drawing;
using System.Text;
using Microsoft.VisualBasic;
using System.Globalization;


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Data;
using Microsoft.VisualBasic;
using System.Globalization;
using Microsoft.Office;
using System.IO;
using System.Xml;
using System.Data.Common;
using System.Collections;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using System.Web.UI.HtmlControls;
using S3GBusEntity.LoanAdmin;
using Resources;


#endregion

public partial class Origination_S3G_ORG_ApplicationProcessing : ApplyThemeForProject
{

    #region Variable declaration
    static string strMode;
    double dcmTotalamount = 0;
    string strXMLCommon = string.Empty;
    string strAddMode = "1", strEditMode = "2", strDocumentDate = "";
    int intCompanyId = 0, intUserId = 0, intSlNo = 0, intProgramID = 38, intApplicationProcessId = 0, intResult;
    public string strDateFormat;
    public static string strDateFormat_Static;
    string strRRBDate = "";
    int intEnqNewCustomerId = 0;
    DataTable dtAstChk = new DataTable();
    bool blnIsPaintBG = true;
    Dictionary<string, string> objProcedureParameter;
    DataTable DtAlertDetails = new DataTable();
    DataTable DtFollowUp = new DataTable();
    DataTable DtCashFlow = new DataTable();
    DataTable DtCashFlowOut = new DataTable();
    DataTable DtRepayGrid = new DataTable();
    DataTable DtRepaySummary = new DataTable();
    DataTable dtInvoiceDetails = new DataTable();
    DataTable dtloanassetdetails = new DataTable();
    Dictionary<string, string> Procparm = new Dictionary<string, string>();
    static string strPageName = "Application Processing";
    public string strCustomerId = string.Empty;
    public string strCustomerValue = string.Empty;
    public string strCustomerName = string.Empty;
    string strErrorMessagePrefix = @"Correct the following validation(s): </br></br>   ";
    UserInfo ObjUserInfo = new UserInfo();
    S3GSession ObjS3GSession = new S3GSession();
    ApplicationMgtServicesReference.ApplicationMgtServicesClient ObjAProcessSave;
    //ApplicationMgtServicesReference.ApplicationMgtServicesClient ObjAProcessSave = new ApplicationMgtServicesReference.ApplicationMgtServicesClient();
    OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService;
    Dictionary<string, string> Procparam;
    string strRedirectPage = "~/Credit Admin/S3GORGTransLander.aspx?Code=APPP&Create=1&Modify=1";

    string strKey = "Insert";
    string strAlert = "alert('__ALERT__');";

    string strRedirectPageAdd = "window.location.href='../Credit Admin/S3G_ORG_ApplicationProcessing.aspx?qsMode=C';";
    string strRedirectPageView = "window.location.href='../Credit Admin/S3GORGTransLander.aspx?Code=APPP&Create=1&Modify=1';";
    //User Authorization

    //string strNewWin1 = "window.showModalDialog('../Origination/S3G_ORG_Application_Asset_Homeloan.aspx";
    //string strNewWin = "window.showModalDialog('../Origination/S3GOrgApplicationAssetDetails.aspx";

    string strNewWin1 = "window.open('../Credit Admin/S3G_ORG_Application_Asset_Homeloan.aspx";
    string strNewWin = "window.open('../Credit Admin/S3GOrgApplicationAssetDetails.aspx";

    string NewWinAttributes = "', 'null', 'toolbar:no;menubar:no;statusbar:no;dialogwidth:1200px;dialogHeight:600px;');";



    LoanAdminMgtServicesReference.LoanAdminMgtServicesClient ObjNOCEmailClient;
    LoanAdminMgtServices.S3G_LAD_EmailDataTable ObjS3G_LOANAD_NOCEmailDataTable = null;

    bool bCreate = false;
    bool bClearList = false;
    bool bModify = false;
    bool bQuery = false;
    bool bDelete = false;
    bool bMakerChecker = false;
    public static Origination_S3G_ORG_ApplicationProcessing obj_Page;
    string strVaue = "VALUE";
    string strDisplay = "NAME";


    int strDecMaxLength = 0;
    int strPrefixLength = 0;
    DataTable dtCustSubLimit = null;
    DataTable dtGetDealTransfer = new DataTable();
    string strProgramName = string.Empty;
    string strFooterNote = string.Empty;
    int IntInstallmentRoundofPosition;
    int intErrCode = 0;
    double decPrePayDenominator = 1.875;
    string strDeviationValMsg = string.Empty;
    //Code end
    #endregion

    #region  Methods

    #region Local Methods

    #region Asset

    private void FunPriRemoveAsset(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            LinkButton lnkSelect = (LinkButton)((GridView)sender).Rows[e.RowIndex].FindControl("lnkAssetSerialNo");
            DataTable dtAssetDetails = (DataTable)Session["PricingAssetDetails"];
            if (dtAssetDetails != null)
            {
                DataRow[] drAsset = dtAssetDetails.Select("SlNo = " + lnkSelect.Text);
                drAsset[0].Delete();
                dtAssetDetails.AcceptChanges();
                DataRow[] drSerialAsset = dtAssetDetails.Select("SlNo > " + lnkSelect.Text);
                foreach (DataRow dr in drSerialAsset)
                {
                    dr["SlNo"] = Convert.ToInt32(dr["SlNo"]) - 1;
                    dr.AcceptChanges();
                }
                Session["PricingAssetDetails"] = dtAssetDetails;
                gvAssetDetails.DataSource = (DataTable)Session["PricingAssetDetails"];
                gvAssetDetails.DataBind();
                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();

                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
                if (dtAssetDetails.Rows.Count > 0)
                {
                    //funPriCalTotalAssetMargin(dtAssetDetails);
                    //funPriCalTotalFinanceAmount(dtAssetDetails);
                    //funPriCalTotalTradeIn(dtAssetDetails);
                    decimal dcmMarginAmount = (decimal)(dtAssetDetails.Compute("Sum(Margin_Amount_1)", "Noof_Units > 0"));
                    txtMarginAmount.Text = Utility.funPubChangeCurrencyFormat((dcmMarginAmount == 0) ? "" : dcmMarginAmount.ToString(Funsetsuffix()));
                    decimal dcmAssetFinAmount2 = (decimal)(dtAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                    txtFinanceAmount.Text = (dcmAssetFinAmount2 == 0) ? "" : dcmAssetFinAmount2.ToString(Funsetsuffix());
                    txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(txtFinanceAmount.Text);
                    decimal dcmAssetTradeIn = (decimal)(dtAssetDetails.Compute("Sum(Trade_In_1)", "Noof_Units > 0"));
                    txtdiscount.Text = (dcmAssetTradeIn == 0) ? "" : dcmAssetTradeIn.ToString(Funsetsuffix());
                    txtdiscount.funPubChangeCurrencyFormat();

                    decimal decUNITVALUE1 = (decimal)(dtAssetDetails.Compute("Sum(UNIT_VALUE_1)", "Noof_Units > 0"));
                    txtTotalAssetCost.Text = decUNITVALUE1.ToString(Funsetsuffix());
                    txtTotalAssetCost.funPubChangeCurrencyFormat();

                    decimal deTotalFin = (decimal)(dtAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                    txtTotalFinanceAmount.Text = deTotalFin.ToString(Funsetsuffix());
                    txtTotalFinanceAmount.funPubChangeCurrencyFormat();
                    if (ViewState["StartDelayRate"] != null)
                    {
                        txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                        txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix()));
                    }
                }
                else
                {
                    txtMarginAmount.Text = "";
                    txtFinanceAmount.Text = "";
                    txtdiscount.Text = "";
                    txtTotalAssetCost.Text = "0.000";
                    txtTotalFinanceAmount.Text = "0.000";
                }

                txtBusinessIRR_Repay.Text = string.Empty;
                funPriResetOutFlow();

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw ex;
        }
    }
    private void funPriCalTotalAssetMargin(DataTable dt)
    {
        decimal decTotalMargin = 0;

        foreach (DataRow dr in dt.Rows)
        {
            decTotalMargin = Convert.ToDecimal(decTotalMargin) + Convert.ToDecimal(dr["Margin_Amount"].ToString());
        }
        txtMarginAmount.Text = Utility.funPubChangeCurrencyFormat(decTotalMargin.ToString());
    }
    private void funPriCalTotalFinanceAmount(DataTable dt)
    {
        decimal decTotalFiannaceAmount = 0;

        foreach (DataRow dr in dt.Rows)
        {
            decTotalFiannaceAmount = Convert.ToDecimal(decTotalFiannaceAmount) + Convert.ToDecimal(dr["Finance_Amount"].ToString());
        }
        txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(decTotalFiannaceAmount.ToString());
        if (ViewState["StartDelayRate"] != null)
        {
            txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

            txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix()));
        }

    }
    private void funPriCalTotalTradeIn(DataTable dt)
    {
        decimal decTotalTradeIn = 0;

        foreach (DataRow dr in dt.Rows)
        {
            decTotalTradeIn = Convert.ToDecimal(decTotalTradeIn) + Convert.ToDecimal(dr["Trade_in"].ToString());
        }
        txtdiscount.Text = decTotalTradeIn.ToString(Funsetsuffix());
        txtdiscount.funPubChangeCurrencyFormat();
    }


    private void FunPriRemoveDeleteloanAsset(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            LinkButton lnkSelect = (LinkButton)((GridView)sender).Rows[e.RowIndex].FindControl("lnkAssetSerialNo");
            DataTable dtAssetDetails = (DataTable)Session["PricingloanAssetDetails"];
            DataRow[] drAsset = dtAssetDetails.Select("SlNo = " + lnkSelect.Text);
            drAsset[0].Delete();
            dtAssetDetails.AcceptChanges();
            DataRow[] drSerialAsset = dtAssetDetails.Select("SlNo > " + lnkSelect.Text);
            foreach (DataRow dr in drSerialAsset)
            {
                dr["SlNo"] = Convert.ToInt32(dr["SlNo"]) - 1;
                dr.AcceptChanges();
            }
            Session["PricingloanAssetDetails"] = dtAssetDetails;
            //grvloanasset.DataSource = (DataTable)Session["PricingloanAssetDetails"];
            //grvloanasset.DataBind();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw ex;
        }
    }


    private void FunPriBindAssetDetails(GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                LinkButton LnkSelect = (LinkButton)e.Row.FindControl("lnkAssetSerialNo");
                LinkButton lnRemove = (LinkButton)e.Row.FindControl("lnRemove");

                Label txtTOTALASSETVALUE = (Label)e.Row.FindControl("txtTOTALASSETVALUE");
                Label txtFinanceAmount = (Label)e.Row.FindControl("txtFinanceAmount");

                txtTOTALASSETVALUE.funPubChangeCurrencyFormat();
                txtFinanceAmount.funPubChangeCurrencyFormat();


                string strNewPurchase = "";
                if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("OPERAT"))
                {
                    strNewPurchase = "Yes";
                }
                else
                {
                    strNewPurchase = "No";
                }
                if (intApplicationProcessId > 0)
                {
                    if (ddlApplicationNo.SelectedValue == "0" || ddlApplicationNo.SelectedValue == string.Empty)
                    {
                        //Condition added to validate pagemode - Bug_ID - 6387 - Kuppusamy.B - May-30-2012
                        if (strMode == "Q")
                        {
                            if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                            {

                                LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + strMode + NewWinAttributes);
                            }
                            else
                            {
                                LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + strMode + NewWinAttributes);
                            }
                            lnRemove.Enabled = false;
                            lnRemove.OnClientClick = null;
                            lnRemove.CssClass = "grid_btn_delete_disabled";
                        }
                        else
                        {
                            if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                            {

                                LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + NewWinAttributes);
                            }
                            else
                            {
                                if (chkDataEntryStage.Checked)
                                {
                                    LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + "Q" + NewWinAttributes);
                                }
                                else
                                {

                                    LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + NewWinAttributes);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                        {

                            LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + strMode + NewWinAttributes);
                        }
                        else
                        {
                            //LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + strMode + NewWinAttributes);
                            LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + strMode + NewWinAttributes);
                            lnRemove.Enabled = false;
                            lnRemove.OnClientClick = null;
                            lnRemove.CssClass = "grid_btn_delete_disabled";
                            //btnAddAsset.Enabled = false;
                            //btnAddAsset.CssClass = "btn btn-success";
                            btnAddAsset.Enabled_False();
                        }
                    }
                }
                else
                {
                    if (ddlApplicationNo.SelectedValue == "0" || ddlApplicationNo.SelectedValue == string.Empty)
                    {
                        if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                        {
                            LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + NewWinAttributes);
                        }
                        else
                        {
                            LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + NewWinAttributes);
                        }
                    }
                    else
                    {
                        if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                        {

                            LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&FromPricing=Yes" + NewWinAttributes);
                        }
                        else
                        {
                            btnAddAsset.Enabled_False();
                            LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&FromPricing=Yes" + NewWinAttributes);
                            //LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + "Q" + NewWinAttributes);
                            //lnRemove.Enabled = false;
                            //lnRemove.OnClientClick = null;
                            //lnRemove.CssClass = "grid_btn_delete_disabled";
                            //btnAddAsset.Enabled = false;
                            //btnAddAsset.CssClass = "btn btn-success";
                        }
                    }
                }
                //if (!string.IsNullOrEmpty(e.Row.Cells[5].Text) && e.Row.Cells[5].Text != "&nbsp;")
                //    e.Row.Cells[5].Text = DateTime.Parse(e.Row.Cells[5].Text, CultureInfo.CurrentCulture).ToString(strDateFormat);
                //LinkButton lnkView = (LinkButton)e.Row.FindControl("lnkView");
                //Label lblProformaId = e.Row.FindControl("lblProformaId") as Label;
                //if (lnkView != null && lblProformaId != null)
                //{
                //    if (!string.IsNullOrEmpty(lblProformaId.Text))
                //    {
                //        lnkView.Enabled = true;
                //        FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(lblProformaId.Text, false, 0);
                //        lnkView.Attributes.Add("onclick", "window.open('../Origination/S3GOrgProforma_Add.aspx?qsViewId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q&IsFromAccount=Yes', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');return false;");
                //    }
                //    else
                //    {
                //        lnkView.Enabled = false;
                //    }
                //}
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw ex;
        }
    }
    protected void btnLoadCustomerCopyProfile_OnClick(object sender, EventArgs e)
    {
        try
        {
            //HiddenField hdnCID = (HiddenField)ucCopyProfileLov.FindControl("hdnID");
            //if (hdnCID != null && hdnCID.Value != "")
            //{
            //    // intPricingId = Convert.ToInt32(hdnCID.Value);
            //    FunPriLoadPage();

            //}
            //ddlContType.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    [System.Web.Services.WebMethod]
    public static string[] GetVendorsSalesPerson(String prefixText, int count)
    {

        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();
        Procparam.Add("@COMPANYID", HttpContext.Current.Session["Company_Id"].ToString());
        Procparam.Add("@USERID", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        Procparam.Add("@PREFIX", prefixText);
        Procparam.Add("@OPTION", "10");
        if (HttpContext.Current.Session["DealerId"] != null)
            Procparam.Add("@DEALERID", HttpContext.Current.Session["DealerId"].ToString());
        Procparam.Add("@PROGRAMID", "38");
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", Procparam));
        return suggetions.ToArray();



    }
    [System.Web.Services.WebMethod]
    public static string[] GetVendorsInsurar(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();
        Procparam.Add("@Company_ID", HttpContext.Current.Session["Company_Id"].ToString());
        Procparam.Add("@USERID", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        Procparam.Add("@Entity_Type", "LIP");//Life Insurance
        Procparam.Add("@PrefixText", prefixText);
        Procparam.Add("@Program_Id", "38");
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_GET_ENTYMAST_Agt", Procparam));
        return suggetions.ToArray();

    }
    [System.Web.Services.WebMethod]
    public static string[] GetEmployerBankName(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();
        Procparam.Add("@Company_ID", HttpContext.Current.Session["Company_Id"].ToString());
        Procparam.Add("@PrefixText", prefixText);
        Procparam.Add("@Program_Id", "38");
        Procparam.Add("@USERID", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        if (HttpContext.Current.Session["EmployerBankName"].ToString() == "7")//Employer Under Taking
        {
            Procparam.Add("@Entity_Type", "EMR");//

        }
        else if (HttpContext.Current.Session["EmployerBankName"].ToString() == "2" || HttpContext.Current.Session["EmployerBankName"].ToString() == "8")//Bank Transfer, Standing Instructions
        {
            Procparam.Add("@Entity_Type", "EMP_BANK");//
        }
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_GET_ENTYMAST_Agt", Procparam));
        return suggetions.ToArray();

    }
    protected void ddlContType_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            HttpContext.Current.Session["CONTRACT_TYPE"] = ddlContType.SelectedValue;
            txtSellerCode.Text = string.Empty;
            txtSellerName.Text = string.Empty;
            ddlExistenceofFirstCharge.SelectedValue = "0";
            ddlExistenceofsecondcharge.SelectedValue = "0";
            if (ddlContType.SelectedValue == "2" || ddlContType.SelectedValue == "3")
            {

                lblSellerName.CssClass = "styleReqFieldLabel";
                lblSellerCode.CssClass = "styleReqFieldLabel";
                rfvSellerName.Enabled = true;
                rfvSellerCode.Enabled = true;
                txtSellerName.Enabled = true;
                txtSellerCode.Enabled = true;
                ddlExistenceofFirstCharge.Enabled = true;
                ddlExistenceofsecondcharge.Enabled = true;
            }
            else
            {
                lblSellerName.CssClass = "styleDisplayLabel";
                lblSellerCode.CssClass = "styleDisplayLabel";
                rfvSellerName.Enabled = false;
                rfvSellerCode.Enabled = false;
                txtSellerName.Enabled = false;
                txtSellerCode.Enabled = false;
                ddlExistenceofFirstCharge.Enabled = false;
                ddlExistenceofsecondcharge.Enabled = false;
            }
            //ddlSalePersonCodeList.SetFocus();
            HttpContext.Current.Session["ddlContType"] = ddlContType.SelectedValue;

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    //protected void txtTentativeAccDate_TextChanged(object sender, EventArgs e)
    //{
    //    if (txtTentativeAccDate.Text != "")
    //    {
    //        if (Utility.StringToDate(txtTentativeAccDate.Text) >= Utility.StringToDate(txtApplicationDateDate.Text))
    //        {
    //            txtFirstInstallDate.Text = string.Empty;
    //            txtFirstInstallDate.ReadOnly = false;
    //            try
    //            {
    //                DtCashFlow = (DataTable)ViewState["DtCashFlow"];
    //                if (DtCashFlow.Rows.Count > 0)
    //                {
    //                    txtAccountIRR_Repay.Text = txtBusinessIRR.Text = txtBusinessIRR_Repay.Text =
    //                    txtCompanyIRR.Text = txtCompanyIRR_Repay.Text = "";
    //                    grvRepayStructure.ClearGrid();
    //                    for (int i = 0; i <= DtCashFlow.Rows.Count; i++)
    //                    {
    //                        DtCashFlow.Rows.RemoveAt(i);
    //                    }
    //                    ViewState["DtCashFlow"] = DtCashFlow;
    //                    if (DtCashFlow.Rows.Count == 0)
    //                    {
    //                        FunPriFillOutflowDLL(strAddMode);
    //                    }
    //                    else
    //                    {
    //                        gvInflow.DataSource = DtCashFlow;
    //                        gvInflow.DataBind();
    //                        FunPriFillOutflowDLL(strAddMode);
    //                    }
    //                }
    //                FunPriSetMaxLength_gvInflow();
    //            }
    //            catch (Exception ex)
    //            {
    //                ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
    //                cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Error in deleting Inflow details";
    //                cvApplicationProcessing.IsValid = false;
    //            }

    //            try
    //            {
    //                DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
    //                if (DtCashFlowOut.Rows.Count > 0)
    //                {
    //                    for (int i = 0; i <= DtCashFlow.Rows.Count; i++)
    //                    {
    //                        DtCashFlowOut.Rows.RemoveAt(i);
    //                    }
    //                    ViewState["DtCashFlowOut"] = DtCashFlowOut;
    //                    if (DtCashFlowOut.Rows.Count == 0)
    //                    {
    //                        FunPriFillOutflowDLL(strAddMode);
    //                        lblTotalOutFlowAmount.Text = "0";
    //                        FunPriIRRReset();
    //                    }
    //                    else
    //                    {

    //                        FunProBindCashFlow();
    //                    }
    //                }
    //                FunPriSetMaxLength_gvOutFlow();
    //            }
    //            catch (Exception ex)
    //            {
    //                ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
    //                cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Error in deleting Outflow details";
    //                cvApplicationProcessing.IsValid = false;
    //            }
    //            TextBox TxtInFlowDate = (gvInflow).FooterRow.FindControl("txtDate_GridInflow") as TextBox;
    //            TextBox TxtOutFlowDate = (gvOutFlow).FooterRow.FindControl("txtDate_GridOutflow") as TextBox;
    //            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_InflowDate = (gvInflow).FooterRow.FindControl("CalendarExtenderSD_InflowDate") as AjaxControlToolkit.CalendarExtender;
    //            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_OutflowDate = (gvOutFlow).FooterRow.FindControl("CalendarExtenderSD_OutflowDate") as AjaxControlToolkit.CalendarExtender;
    //            TxtInFlowDate.Text = TxtOutFlowDate.Text = txtTentativeAccDate.Text;
    //            TxtInFlowDate.Attributes.Add("readonly", "readonly");
    //            TxtOutFlowDate.Attributes.Add("readonly", "readonly");
    //            CalendarExtenderSD_InflowDate.Enabled = CalendarExtenderSD_OutflowDate.Enabled = false;
    //        }
    //        else
    //        {
    //            Utility.FunShowAlertMsg(this, "Tentative Account date should be greater than or equal to Application Date");
    //            txtTentativeAccDate.Text = string.Empty;
    //            return;
    //        }
    //    }

    //}

    private void FunPriBindLoanAssetDetails(GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                LinkButton LnkSelect = (LinkButton)e.Row.FindControl("lnkAssetSerialNo");
                string strNewPurchase = "";
                if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("OPERAT"))
                {
                    strNewPurchase = "Yes";
                }
                else
                {
                    strNewPurchase = "No";
                }
                if (intApplicationProcessId > 0)
                {
                    if (ddlBusinessOfferNoList.SelectedValue == "-1")
                        //Condition added to validate pagemode - Bug_ID - 6387 - Kuppusamy.B - May-30-2012
                        if (strMode == "Q")
                        {
                            if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                            {

                                LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + strMode + NewWinAttributes);
                            }
                            else
                            {
                                LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + strMode + NewWinAttributes);
                            }
                        }
                        else
                        {
                            if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                            {

                                LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + NewWinAttributes);
                            }
                            else
                            {
                                LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + NewWinAttributes);
                            }
                        }
                    else
                    {
                        if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                        {

                            LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + strMode + NewWinAttributes);
                        }
                        else
                        {
                            LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&qsMode=" + strMode + NewWinAttributes);
                        }
                    }
                }
                else
                {
                    if (ddlBusinessOfferNoList.SelectedIndex == 0)
                    {
                        if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                        {
                            LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + NewWinAttributes);
                        }
                        else
                        {
                            LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + NewWinAttributes);
                        }
                    }
                    else
                    {
                        if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                        {

                            LnkSelect.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&FromPricing=Yes" + NewWinAttributes);
                        }
                        else
                        {
                            LnkSelect.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + "&qsRowID=" + LnkSelect.Text + "&FromPricing=Yes" + NewWinAttributes);
                        }
                    }
                }


            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw ex;
        }
    }


    #endregion

    #region ROI - Payment Rule

    private void FunPriFetchPaymentDetails()
    {
        try
        {
            //div8.Visible = true;
            hdnPayment.Value = ddlPaymentRuleList.SelectedValue;
            FunPriLoadPaymentRuleDetails();
            if (ddlPaymentRuleList.SelectedItem.Text != "--Select--")
                //txtPaymentCardMLA.Text = ddlPaymentRuleList.SelectedItem.Text;
                if (hdnPayment.Value != "")
                {
                    FunPriFillRepaymentDLL(strAddMode);
                    FunPriFillOutflowDLL(strAddMode);
                    lblTotalOutFlowAmount.Text = "0";
                    FunPriIRRReset();
                    ViewState["RepaymentStructure"] = null;
                    grvRepayStructure.DataSource = null;
                    grvRepayStructure.DataBind();
                    gvRepaymentSummary.ClearGrid();
                }
        }
        catch (Exception ex)
        {
            //div8.Visible = false;
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw new ApplicationException("Unable to load Payment Rule Details");
        }
    }
    private decimal FunPriGetInterestAmount()
    {
        decimal decUMFC = 0;
        try
        {

            decimal decFinAmount = FunPriGetAmountFinanced();

            if (!string.IsNullOrEmpty(lblTotalAmountData.Text))
            {
                //string strTotalAmount = (lblTotalAmountData.Text.Split(':').Length > 1) ? lblTotalAmountData.Text.Split(':')[1].Trim() : "";
                string strTotalAmount = lblTotalAmountData.Text;
                if (strTotalAmount != "")
                {
                    if (string.IsNullOrEmpty(txtInsuranceCustomerTaxAmount.Text))
                        txtInsuranceCustomerTaxAmount.Text = "0";

                    decimal decTotalRepayable = Convert.ToDecimal(strTotalAmount);
                    decUMFC = decTotalRepayable - decFinAmount - (Convert.ToDecimal(txtInsuranceCustomerTaxAmount.Text));
                    if (decUMFC < 0)
                    {
                        decUMFC = 0;
                    }
                }
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

        return decUMFC;

    }

    private decimal FunPriGetStructureAdhocInterestAmount()
    {
        decimal decFinAmount = FunPriGetAmountFinanced();
        decimal decRate = 0;
        try
        {


            decRate = Convert.ToDecimal(hdnRate.Value);
            switch (ddl_Return_Pattern.SelectedValue)
            {
                case "1":
                    decRate = Convert.ToDecimal(hdnRate.Value);
                    break;
                case "2":
                    if (ViewState["decRate"] != null)
                    {
                        decRate = Convert.ToDecimal(ViewState["decRate"].ToString());
                    }
                    break;
                case "3": //RepaymentType.PMPT:
                    return Math.Round(((decFinAmount / 1000) * decRate *
                        int.Parse(txtTenure.Text)) - decFinAmount, 0);
                    break;
                case "4": //RepaymentType.PMPL:
                    return Math.Round(((decFinAmount / 100000) * decRate *
                        int.Parse(txtTenure.Text)) - decFinAmount, 0);
                    break;
                case "5": //RepaymentType.PMPM:
                    return Math.Round(((decFinAmount / 1000000) * decRate *
                        int.Parse(txtTenure.Text)) - decFinAmount, 0);
                    break;
                default:
                    decRate = Convert.ToDecimal(hdnRate.Value);
                    break;
            }
            //string strLOB = ddlLOB.SelectedItem.Text.Split('-')[0].ToString().Trim().ToLower();
            string strLOB = ddlLOB_SelectedItem_Text.Value.Trim().ToLower();
            switch (strLOB)
            {
                case "tl":
                case "te":
                    if (ddl_Repayment_Mode.SelectedValue == "5")
                    {
                        decRate = 0;
                    }
                    break;
                case "ft":
                case "wc":
                    decRate = 0;
                    break;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        if (ddlLifeInsurance.SelectedValue == "2")
        {
            return Math.Round(FunPubInterestAmountInner(ddlTenureType.SelectedItem.Text.ToLower(), decFinAmount, decRate, int.Parse(txtTenure.Text)) + Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text), 3);
        }
        else
        {
            return Math.Round(FunPubInterestAmountInner(ddlTenureType.SelectedItem.Text.ToLower(), decFinAmount, decRate, int.Parse(txtTenure.Text)), 3);
        }
    }

    public decimal FunPubInterestAmountInner(string strTenureType, decimal decPrincipleAmount, decimal decRateofInt, int intTenure)
    {
        decimal decInterestAmount = 0;
        switch (strTenureType.ToLower())
        {
            case "monthly":
                decInterestAmount = Math.Round(decPrincipleAmount * decRateofInt * intTenure / 1200, 3);
                break;
            case "weeks":
                decInterestAmount = Math.Round(decPrincipleAmount * decRateofInt * intTenure / 5200, 4);
                break;
            case "days":
                decInterestAmount = Math.Round(decPrincipleAmount * decRateofInt * intTenure / 36500, 4);
                break;
        }
        return decInterestAmount;
    }
    protected void btnFetchPayment_Click(object sender, EventArgs e)
    {
        try
        {

            if (ViewState["OnloadChecklist"] == null)
            {
                if (ddlPaymentRuleList.SelectedValue == "0")
                {
                    Utility.FunShowAlertMsg(this, "Select a Payment rule from the list");
                    return;
                }
            }

            if (ddlPaymentRuleList.SelectedIndex > 0)
            {
                FunPriFetchPaymentDetails();
                if (ViewState["vendor"].ToString().ToUpper() == "VENDOR")
                {
                    DataTable objAssetDetails = (DataTable)Session["PricingAssetDetails"];
                    if (objAssetDetails != null)
                    {
                        if (objAssetDetails.Rows.Count > 0)
                        {
                            DataRow[] drCustomerAsset = objAssetDetails.Select("Pay_To_ID = 138");
                            if (drCustomerAsset.Length > 0)
                            {
                                //Utility.FunShowAlertMsg(this, "Asset(s) should be mapped with Entity only");
                                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege66));
                                TabContainerAP.ActiveTabIndex = 0;
                                TabContainerMainTab.ActiveTabIndex = 1;
                                return;
                            }
                        }
                    }
                }
                ddlPaymentRuleList.Focus();
            }

            funPerAutoLoadoutflowfromChecklist(false);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriFetchROIDetails()
    {
        try
        {

            if (ddlROIRuleList.SelectedValue == "0")
            {
                Utility.FunShowAlertMsg(this, "Select a ROI rule from the list");
                //div7.Visible = false;
                return;
            }

            if (ddlROIRuleList.SelectedIndex > 0)
            {
                div7.Visible = true;
                hdnROIRule.Value = ddlROIRuleList.SelectedValue;
                FunPriFillROIDLL(strAddMode);
                FunPriLoadROIRuleDetails(strAddMode);

                FunPriSetRateLength();
                //txtROIMLA.Text = ddlROIRuleList.SelectedItem.Text;
                if (hdnROIRule.Value != "" || div7.Visible == false)
                {

                    FunPriFillInflowDLL(strAddMode);
                    FunPriFillOutflowDLL(strAddMode); 
                    if (ddlLOB_SelectedItem_Text.Value.ToUpper() == "HP" || ddlLOB_SelectedItem_Text.Value.ToUpper() == "TL")
                    {
                        FunPriBindProductCharges(ddlProductCodeList.SelectedValue, ddlLOB.SelectedValue);
                        FunPriBindMarginMoneyInflow();
                        //FunPriBindMarginMoneyOutflow(); // Magesh A 23-08-2021
                    }
                    //FunPriFillOutflowDLL(strAddMode);
                    FunPriFillRepaymentDLL(strAddMode);
                    FunPriFillAlertDLL(strAddMode);
                    FunPriFillFollowupDLL(strAddMode);
                    if (ViewState["dtGuarantorGrid"] != null)
                    {
                        if (((DataTable)ViewState["dtGuarantorGrid"]).Rows.Count == 0)
                        {
                            FunPriFillGuarantorDLL();
                        }
                    }
                    FunPriFillMoratoriumDLL();
                    FunPriIRRReset();
                    ViewState["RepaymentStructure"] = null;
                    grvRepayStructure.DataSource = null;
                    grvRepayStructure.DataBind();
                    ViewState["decRate"] = null;
                    gvRepaymentSummary.ClearGrid();
                }

                //added by saranya
                if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC") ||
                    ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT") ||
                    ((ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TE") ||
                    ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL")) &&
                    ddl_Repayment_Mode.SelectedItem.Text.ToUpper().StartsWith("PRO")))
                {
                    Button btnAdd = gvInflow.FooterRow.FindControl("btnAdd") as Button;
                    btnAdd.Enabled = false;
                    //ddl_Time_Value.Visible = false;
                    //lblTime_Value.Visible = false;
                    //ddl_Frequency.Visible = false;
                    //Label2.Visible = false;
                    //ddl_Repayment_Mode.Visible = false;
                    //lblRepayment_Mode.Visible = false;
                    //rfvTimeValue.Enabled = false;
                    //rfvFrequency.Enabled = false;
                    //RequiredFieldValidator8.Enabled = false;

                    //ddl_IRR_Rest.Visible = false;
                    //lblIRR_Rest.Visible = false;

                    //txt_Recovery_Pattern_Year1.Visible = false;
                    //txt_Recovery_Pattern_Year1.Visible = false;
                    //txt_Recovery_Pattern_Year1.Visible = false;
                    //txt_Recovery_Pattern_Rest.Visible = false;

                    //lblRecovery_Pattern_Year1.Visible = false;
                    //lblRecovery_Pattern_Year2.Visible = false;
                    //lblRecovery_Pattern_Year3.Visible = false;
                    //lblRecovery_Pattern_Rest.Visible = false;

                    // TabContainerAP.Tabs[2].Enabled = false;

                }


                if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC") || ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT"))
                {
                    //Button btnAdd = gvInflow.FooterRow.FindControl("btnAdd") as Button;
                    //btnAdd.Enabled = false;
                    funPriDisableFactoringWCControls(false);
                }
                if (ddl_Repayment_Mode.SelectedValue == "2")//SAP
                {
                    btnReset.Visible = true;
                }
                else
                {
                    btnReset.Visible = false;
                }

                //end
            }
            else
            {
                if (intApplicationProcessId == 0)
                {
                    txt_ROI_Rule_Number.Text = "";
                    FunPriFillROIDLL(strAddMode);
                    txt_Model_Description.Text = "";
                    txtRate.Text = "";
                    txtRate.Enabled = false;
                    hdnRate.Value = string.Empty;
                    txt_Recovery_Pattern_Year1.Text = "";
                    txt_Recovery_Pattern_Year2.Text = "";
                    txt_Recovery_Pattern_Year3.Text = "";
                    txt_Recovery_Pattern_Rest.Text = "";
                    //txtCollateralTypeRate.Text = "";
                    //txtIRRRate.Text = "";
                    hdnROIRule.Value = "";

                    if (ddlApplicationNo.SelectedValue != "0")
                    {
                        funPriArriveFlatRateRate();
                    }
                }
            }

            txt_Recovery_Pattern_Year1.Enabled = false;
            txt_Recovery_Pattern_Year2.Enabled = false;
            txt_Recovery_Pattern_Year3.Enabled = false;
            txt_Recovery_Pattern_Rest.Enabled = false;

            funPriArriveFlatRateRate();
        }
        catch (Exception ex)
        {
            div7.Visible = false;
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);

        }
    }
    private void funPriArriveFlatRateRate()
    {
        decimal dTotalSb = 0;
        decimal dInterest = 0;
        decimal TDivder = 0;
        decimal drate = 0;
        decimal decLIP = 0;
        decimal DCurrentAmount = 0;
        try
        {
            if (txtLifeInsuranceCustomerPremiumAmount.Text != string.Empty)
            {
                decLIP = Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text);
            }
            DataTable dtPDC = (DataTable)ViewState["PDC"];
            if (dtPDC != null)
            {
                foreach (DataRow dr in dtPDC.Rows)
                {
                    DCurrentAmount = ((Convert.ToDecimal(dr["Ins_End"].ToString()) - Convert.ToDecimal(dr["Ins_Start"].ToString()) + 1) * Convert.ToDecimal(dr["Total_Amount"].ToString()));
                    dTotalSb = dTotalSb + DCurrentAmount;
                }
                dInterest = dTotalSb - Convert.ToDecimal(txtFinanceAmount.Text) - decLIP;
                TDivder = Convert.ToDecimal(txtTenure.Text) / 12;
                if (TDivder == 0)
                {
                    TDivder = 1;
                }
                drate = (dInterest / (Convert.ToDecimal(txtFinanceAmount.Text))) / TDivder * 100 / 100;
                drate = drate * 100;
                hdnRate.Value = drate.ToString();
                txtRate.Text = drate.ToString("0.000");

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }
    }
    private void funPerAutoLoadoutflowfromChecklist(bool IsLoadFiananceGain)
    {

        try
        {

            if (IsLoadFiananceGain == false && ddlPaymentRuleList.SelectedItem.Text.ToUpper().Contains("DEFERRED PAYMENT"))
            {
                return;
            }

            if (ViewState["DtCashFlowOut"] != null)
            {
                DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
                TextBox txtDate_GridOutflow = gvOutFlow.FooterRow.FindControl("txtDate_GridOutflow") as TextBox;
                DropDownList ddlOutflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
                DropDownList ddlPaymentto_OutFlow = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
                UserControls_S3GAutoSuggest ddlEntityName_OutFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as UserControls_S3GAutoSuggest;
                TextBox txtAmount_Outflow = gvOutFlow.FooterRow.FindControl("txtAmount_Outflow") as TextBox;

                DataRow dr;

                DataTable dt = ((DataSet)ViewState["OutflowDDL"]).Tables[2];
                DataRow[] dr2 = dt.Select("CASHFLOW_FLAG_ID=41");

                if (ddlLOB_SelectedItem_Text.Value.ToString().ToUpper() == "HP")
                {
                    if (dr2.Length > 0)
                    {
                        DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                        DataTable dtLoopEntity = new DataTable();
                        dtLoopEntity = dsAssetDetails.DefaultView.ToTable(true, "Entity_ID", "Entity_Code");

                        DataRow[] dr5 = DtCashFlowOut.Select("CASHFLOW_FLAG_ID=41");
                        if (dr5.Length > 0)
                        {
                            foreach (DataRow dr6 in dr5)
                            {
                                dr6.Delete();
                            }
                        }
                        DtCashFlowOut.AcceptChanges();
                        string[] strArrayIds = dr2.CopyToDataTable().Rows[0]["CASHFLOW_ID"].ToString().Split(',');
                        foreach (DataRow dr3 in dtLoopEntity.Rows)
                        {
                            TextBox txtName2 = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                            HiddenField hdnCID2 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");

                            string strFinanceAmountE = dsAssetDetails.Compute("sum(Finance_Amount_1)", "Entity_ID='" + dr3["Entity_ID"].ToString() + "' and Finance_Amount_1>0 and Pay_To_Id=138").ToString();
                            if (strFinanceAmountE != string.Empty)
                            {
                                if (Convert.ToDecimal(strFinanceAmountE) > 0)
                                {
                                    string[] strCashFlowId = dr2.CopyToDataTable().Rows[0]["CashFlow_ID"].ToString().Split(',');
                                    dr = DtCashFlowOut.NewRow();
                                    dr["CashOutFlowID"] = strCashFlowId[0];
                                    dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                                    dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                                    dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                                    dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                                    dr["CashFlow_Flag_ID"] = dr2.CopyToDataTable().Rows[0]["CASHFLOW_FLAG_ID"];
                                    dr["CashOutFlow"] = dr2.CopyToDataTable().Rows[0]["CashFlow_Description"];
                                    dr["OutflowFrom"] = "CUSTOMER";
                                    dr["OutflowFromId"] = "144";//Customer
                                    dr["EntityID"] = hdnCID2.Value;
                                    dr["Entity"] = txtName2.Text;
                                    //if (txtMarginMoneyAmount_Cashflow.Text != string.Empty)
                                    //    dr["Amount"] = (Convert.ToDecimal(strFinanceAmount) - Convert.ToDecimal(txtMarginMoneyAmount_Cashflow.Text)).ToString(Funsetsuffix());
                                    //else
                                    if (ddlDealTransfer.SelectedValue == "1")
                                    {
                                        dr["Amount"] = Convert.ToDecimal(txtFinanceAmount.Text).ToString(Funsetsuffix());
                                    }
                                    else
                                    {
                                        dr["Amount"] = Convert.ToDecimal(strFinanceAmountE).ToString(Funsetsuffix());
                                    }
                                    DtCashFlowOut.Rows.Add(dr);
                                    DtCashFlowOut.AcceptChanges();

                                    gvOutFlow.DataSource = DtCashFlowOut;
                                    gvOutFlow.DataBind();
                                    ViewState["DtCashFlowOut"] = DtCashFlowOut;
                                    FunPriGenerateNewOutflow();
                                    FunPriIRRReset();
                                }

                            }
                            //Customer
                            string strFinanceAmountC = dsAssetDetails.Compute("sum(Finance_Amount_1)", "Entity_ID='" + dr3["Entity_ID"].ToString() + "' and Finance_Amount_1>0 and Pay_To_Id=137").ToString();
                            if (strFinanceAmountC != string.Empty)
                            {
                                if (Convert.ToDecimal(strFinanceAmountC) > 0)
                                {

                                    string[] strCashFlowId = dr2.CopyToDataTable().Rows[0]["CashFlow_ID"].ToString().Split(',');
                                    dr = DtCashFlowOut.NewRow();
                                    dr["CashOutFlowID"] = strCashFlowId[0];
                                    dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                                    dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                                    dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                                    dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                                    dr["CashFlow_Flag_ID"] = dr2.CopyToDataTable().Rows[0]["CASHFLOW_FLAG_ID"];
                                    dr["CashOutFlow"] = dr2.CopyToDataTable().Rows[0]["CashFlow_Description"];
                                    dr["OutflowFrom"] = "ENTITY";
                                    dr["OutflowFromId"] = "145";
                                    dr["EntityID"] = dr3["Entity_ID"].ToString();
                                    dr["Entity"] = dr3["Entity_Code"].ToString();
                                    //if (txtMarginMoneyAmount_Cashflow.Text != string.Empty)
                                    //    dr["Amount"] = (Convert.ToDecimal(strFinanceAmount) - Convert.ToDecimal(txtMarginMoneyAmount_Cashflow.Text)).ToString(Funsetsuffix());
                                    //else
                                    if (ddlDealTransfer.SelectedValue == "1")
                                    {
                                        dr["Amount"] = txtFinanceAmount.Text = Convert.ToDecimal(txtFinanceAmount.Text).ToString(Funsetsuffix());
                                    }
                                    else
                                    {
                                        dr["Amount"] = Convert.ToDecimal(strFinanceAmountC).ToString(Funsetsuffix());
                                    }
                                    DtCashFlowOut.Rows.Add(dr);
                                    DtCashFlowOut.AcceptChanges();

                                    gvOutFlow.DataSource = DtCashFlowOut;
                                    gvOutFlow.DataBind();
                                    ViewState["DtCashFlowOut"] = DtCashFlowOut;
                                    FunPriGenerateNewOutflow();
                                    FunPriIRRReset();
                                }

                            }
                        }

                    }
                    else
                    {
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege32));
                        return;
                    }
                }

                else if (ddlLOB_SelectedItem_Text.Value.ToString().ToUpper() == "TL")
                {


                    DataRow[] dr5 = DtCashFlowOut.Select("CASHFLOW_FLAG_ID=41");
                    if (dr5.Length > 0)
                    {
                        foreach (DataRow dr6 in dr5)
                        {
                            dr6.Delete();
                        }
                    }
                    DtCashFlowOut.AcceptChanges();
                    string[] strArrayIds = dr2.CopyToDataTable().Rows[0]["CASHFLOW_ID"].ToString().Split(',');



                    if (txtFinanceAmount.Text != string.Empty)
                    {
                        if (Convert.ToDecimal(txtFinanceAmount.Text) > 0)
                        {
                            TextBox txtName2 = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                            HiddenField hdnCID2 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                            string[] strCashFlowId = dr2.CopyToDataTable().Rows[0]["CashFlow_ID"].ToString().Split(',');
                            dr = DtCashFlowOut.NewRow();
                            dr["CashOutFlowID"] = strCashFlowId[0];
                            dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                            dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                            dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                            dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                            dr["CashFlow_Flag_ID"] = dr2.CopyToDataTable().Rows[0]["CASHFLOW_FLAG_ID"];
                            dr["CashOutFlow"] = dr2.CopyToDataTable().Rows[0]["CashFlow_Description"];
                            dr["OutflowFrom"] = "CUSTOMER";
                            dr["OutflowFromId"] = "144";
                            dr["EntityID"] = hdnCID2.Value;
                            dr["Entity"] = txtName2.Text;
                            //if (txtMarginMoneyAmount_Cashflow.Text != string.Empty)
                            //    dr["Amount"] = (Convert.ToDecimal(txtFinanceAmount.Text) - Convert.ToDecimal(txtMarginMoneyAmount_Cashflow.Text)).ToString(Funsetsuffix());
                            //else
                            dr["Amount"] = Convert.ToDecimal(txtFinanceAmount.Text).ToString(Funsetsuffix());
                            DtCashFlowOut.Rows.Add(dr);
                            ViewState["DtCashFlowOut"] = DtCashFlowOut;
                            gvOutFlow.DataSource = DtCashFlowOut;
                            gvOutFlow.DataBind();
                            FunPriGenerateNewOutflow();
                            FunPriIRRReset();
                        }

                    }

                }
                funPriLoadAlert();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void funPriSendAlertMail()
    {

        try
        {
            SerializationMode SerMode = SerializationMode.Binary;
            ObjNOCEmailClient = new LoanAdminMgtServicesReference.LoanAdminMgtServicesClient();

            System.Data.DataTable dtmaiisetup = new System.Data.DataTable();
            Dictionary<string, string> Procparammail;
            Procparammail = new Dictionary<string, string>();
            Procparammail.Add("@Company_Id", intCompanyId.ToString());
            Procparammail.Add("@USER_ID", intUserId.ToString());
            Procparammail.Add("@PROGRAM_ID", intProgramID.ToString());
            Procparammail.Add("@Template_Type_Code", "104");
            dtmaiisetup = Utility.GetDefaultData("CMN_GET_MAILDETAILS", Procparammail);
            if (dtmaiisetup == null || dtmaiisetup.Rows.Count == 0)
            {
                //Utility.FunShowAlertMsg(this, "Mail Setup not defined");
                //return;

                throw new Exception("Mail Setup not defined");
            }


            //string FileName = PDFPageSetup.FunPubGetFileName(intApplicationProcessId.ToString() + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss"));

            //string FilePath = Server.MapPath(".") + "\\PDF Files\\";

            //string DownFile = FilePath + FileName + ".pdf";

            //SaveDocument(strHTML, intNOCID, FilePath, FileName, "0", "0");
            //filepaths.Add(DownFile);




            System.Data.DataTable dt = new System.Data.DataTable();
            Dictionary<string, string> Procparam;
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_Id", intCompanyId.ToString());
            Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
            Procparam.Add("@Location_ID", ddlBranchList.SelectedValue);
            Procparam.Add("@language", "1");
            Procparam.Add("@Template_Type_Code", "104");
            dt = Utility.GetDefaultData("S3G_Get_TemplateCont", Procparam);
            if (dt == null)
            {
                //Utility.FunShowAlertMsg(this, "Template not defined in Template Master");//16
                //return;
                throw new Exception("Template not defined in Template Master");
            }
            else
            {
                if (dt.Rows.Count == 0)
                {
                    //Utility.FunShowAlertMsg(this, "Template not defined in Template Master");//16
                    //return;
                    throw new Exception("Template not defined in Template Master for Sent Alert mail");
                }
            }


            String strMAILHTML = string.Empty;
            string strTemplateLanguage = dt.Rows[0]["TEMPLATE_LANGUAGE"].ToString();
            strMAILHTML = dt.Rows[0]["Template_Content"].ToString();
            DataTable dtHeader = new DataTable();
            dtHeader = (DataTable)Session["HeaderDetails"];
            //strMAILHTML = strMAILHTML.Replace("");
            string strImagePath = String.Empty;
            if (strMAILHTML.Contains("~CompanyLogo~"))
            {
                strImagePath = Server.MapPath("../Images/TemplateImages/CompanyLogo.png");
                strMAILHTML = PDFPageSetup.FunPubBindImages("~CompanyLogo~", strImagePath, strMAILHTML);
            }




            DataTable DtAlertDetails = (DataTable)ViewState["DtAlertDetails"];
            foreach (DataRow dr in DtAlertDetails.Rows)
            {

                if (dr["EMail"].ToString().ToUpper() == "TRUE")
                {

                    DataTable dtUsermailAddress;
                    Dictionary<string, string> Procparammail2;
                    Procparammail2 = new Dictionary<string, string>();
                    Procparammail2.Add("@Company_Id", intCompanyId.ToString());
                    Procparammail2.Add("@USER_ID", intUserId.ToString());
                    Procparammail2.Add("@PROGRAM_ID", intProgramID.ToString());
                    Procparammail2.Add("@USER_TYPE_ID", dr["User_Type_Id"].ToString());
                    Procparammail2.Add("@ALERTS_USERCONTACT", dr["UserContactID"].ToString());
                    Procparammail2.Add("@Template_Type_Code", "104");
                    dtUsermailAddress = Utility.GetDefaultData("CMN_GET_USER_MAILADDRESS", Procparammail2);




                    string strFrom_User = dtmaiisetup.Rows[0]["FROM_MAIL"].ToString();
                    string strTo_User_From_SetupTable = dtmaiisetup.Rows[0]["TO_MAIL"].ToString();
                    string strCC_User = dtmaiisetup.Rows[0]["CC_MAIL"].ToString();
                    string strBCC_User = dtmaiisetup.Rows[0]["BCC_MAIL"].ToString();
                    string strSubject = dtmaiisetup.Rows[0]["SUBJECT"].ToString();
                    string strDisplayName = dtmaiisetup.Rows[0]["DISPLAY_NAME"].ToString();
                    string strSchedueType = dtmaiisetup.Rows[0]["SCHEDULE_TYPE"].ToString();
                    string strConfigType = dtmaiisetup.Rows[0]["CONFIG_TYPE"].ToString();
                    string strTo_User = "";

                    string strACCOUNT_INS_DETAILS_ID = intApplicationProcessId.ToString();


                    strTo_User = dtUsermailAddress.Rows[0]["USER_MAIL"].ToString();

                    strMAILHTML = PDFPageSetup.FunPubBindCommonVariables(strMAILHTML, dtUsermailAddress);
                    strMAILHTML = strMAILHTML.Replace("~Proposal~", txtProposalNumber.Text);


                    //string strAttachment_Path = FilePath.ToString();
                    //string strREMAINDER_OUTPUT = FileName.ToString() + ".pdf";
                    //string strCUST_EMAIL = hdnCustomerMailId.Value;
                    //string strPathwithFile = strAttachment_Path + "\\" + strREMAINDER_OUTPUT;
                    //if (strConfigType == "1") // 1 - Actual
                    //{
                    //    strTo_User = strCUST_EMAIL.ToString() + "," + strTo_User_From_SetupTable;
                    //}
                    //else
                    //{
                    //    strTo_User = strTo_User_From_SetupTable.ToString();
                    //}

                    ObjS3G_LOANAD_NOCEmailDataTable = new LoanAdminMgtServices.S3G_LAD_EmailDataTable();
                    LoanAdminMgtServices.S3G_LAD_EmailRow ObjNOCEmailRow;
                    ObjNOCEmailRow = ObjS3G_LOANAD_NOCEmailDataTable.NewS3G_LAD_EmailRow();

                    try
                    {
                        ObjNOCEmailRow.Company_ID = intCompanyId;
                        ObjNOCEmailRow.Created_By = intUserId.ToString();
                        ObjNOCEmailRow.UserId = intUserId.ToString();
                        ObjNOCEmailRow.Mail_ID = 0;
                        ObjNOCEmailRow.Program_ID = intProgramID;
                        ObjNOCEmailRow.Doc_ID = intApplicationProcessId;
                        ObjNOCEmailRow.From_User = strFrom_User.ToString();
                        ObjNOCEmailRow.To_User = strTo_User;
                        ObjNOCEmailRow.CC_User = strCC_User;
                        ObjNOCEmailRow.BCC_User = strBCC_User;
                        ObjNOCEmailRow.Subject = strSubject;
                        //ObjNOCEmailRow.Body = strMAILHTML.ToString();
                        if (strTo_User != "")
                        {
                            ObjNOCEmailRow.Status = 2;
                        }
                        else
                        {
                            ObjNOCEmailRow.Status = 1;
                        }
                        ObjNOCEmailRow.MessageType = "1";
                        ObjNOCEmailRow.Scheduled_Date = "";
                        DateTime now = DateTime.Now;
                        ObjNOCEmailRow.Mail_Send_Date = now.ToString(strDateFormat);
                        ObjNOCEmailRow.Mail_Language = "1";
                        if (strTo_User != "")
                        {
                            ObjNOCEmailRow.Status_Message = "1";
                        }
                        else
                        {
                            ObjNOCEmailRow.Status_Message = "Mail not sent due to mail Id not available";
                        }
                        ObjNOCEmailRow.Schedule_Type = strSchedueType;
                        ObjNOCEmailRow.Attachment_Path = " ";
                        ObjNOCEmailRow.Attachment_FileName = " ";
                        //strBody.Append(strMAILHTML);
                        ObjNOCEmailRow.LOB_ID = Convert.ToInt32(ddlLOB.SelectedValue);
                        ObjNOCEmailRow.Branch_ID = Convert.ToInt32(ddlBranchList.SelectedValue);
                        ObjNOCEmailRow.Customer_ID = 1;
                        ObjNOCEmailRow.PANum = "";
                        ObjNOCEmailRow.Created_On = DateTime.Now.ToShortDateString();


                        ObjS3G_LOANAD_NOCEmailDataTable.AddS3G_LAD_EmailRow(ObjNOCEmailRow);
                        byte[] objbyteInsuranceMailTable = ClsPubSerialize.Serialize(ObjS3G_LOANAD_NOCEmailDataTable, SerMode);
                        ObjNOCEmailClient = new LoanAdminMgtServicesReference.LoanAdminMgtServicesClient();

                        intErrCode = ObjNOCEmailClient.FunPubInsMailDetails(SerMode, objbyteInsuranceMailTable);

                    }
                    catch (Exception ex)
                    {
                        ClsPubCommErrorLogDB.CustomErrorRoutine(ex, "Application Process", "Insert Send Mail");
                        throw ex;
                    }
                    if (strSchedueType.ToString() == "1" && strTo_User != "" && strTo_User != string.Empty) //  1 - Immediate; 
                    {
                        try
                        {

                            StringBuilder strBody = new StringBuilder();
                            Dictionary<string, string> dictMail = new Dictionary<string, string>();
                            dictMail.Add("FromMail", strFrom_User.ToString());
                            dictMail.Add("ToMail", strTo_User);
                            dictMail.Add("ToCC", strCC_User);
                            dictMail.Add("ToBCC", strBCC_User);
                            dictMail.Add("Subject", strSubject.ToString());
                            dictMail.Add("DisplayName", strDisplayName.ToString());
                            strBody.Append(strMAILHTML);
                            ArrayList arrMailAttachement = new ArrayList();
                            Utility.FunPubSentMail(dictMail, arrMailAttachement, strBody);
                            string strModAlert = "Alert Sent Successfully";
                            strAlert = strAlert.Replace("__ALERT__", strModAlert);
                        }
                        catch (Exception ex)
                        {
                            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, "S3G_Application_Process", "Sent Mail Error");
                        }
                    }
                    //ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
                }
                if (dr["SMS"].ToString().ToUpper() == "TRUE")
                {
                    DataTable dtUsermailAddress;
                    Dictionary<string, string> Procparammail2;
                    Procparammail2 = new Dictionary<string, string>();
                    Procparammail2.Add("@Company_Id", intCompanyId.ToString());
                    Procparammail2.Add("@USER_ID", intUserId.ToString());
                    Procparammail2.Add("@PROGRAM_ID", intProgramID.ToString());
                    Procparammail2.Add("@USER_TYPE_ID", dr["User_Type_Id"].ToString());
                    Procparammail2.Add("@ALERTS_USERCONTACT", dr["UserContactID"].ToString());
                    Procparammail2.Add("@Template_Type_Code", "104");
                    dtUsermailAddress = Utility.GetDefaultData("CMN_GET_USER_MAILADDRESS", Procparammail2);
                    if (dtUsermailAddress.Rows.Count > 0)
                    {
                        CRMMobile.Server.Infrastructure.Services.SMSNotificationService objSMSServic = new CRMMobile.Server.Infrastructure.Services.SMSNotificationService();
                        List<string> strMpbile = new System.Collections.Generic.List<string>();
                        strMpbile.Add(dtUsermailAddress.Rows[0]["MOB_PHONE_NO"].ToString());
                        objSMSServic.SendSMS(strMpbile, strMAILHTML);

                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, "Application Process", "Send Mail Exception");
        }
    }

    private void funPriLoadAlert()
    {
        try
        {
            DataTable dtAlert = (DataTable)ViewState["DtAlertDetails"];
            if (ViewState["DtAlertDetails"] != null)
            {
                foreach (DataRow dr in dtAlert.Rows)
                {
                    dr.Delete();
                }
                dtAlert.AcceptChanges();


                if (ViewState["DtCashFlowOut"] != null)
                {
                    DataTable DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
                    DataTable dtLoopEntity = DtCashFlowOut.DefaultView.ToTable(true, "EntityId", "Entity", "OutflowFromId");

                    if (dtLoopEntity.Rows.Count > 0)
                    {
                        foreach (DataRow drLoop in dtLoopEntity.Rows)
                        {

                            DropDownList ddlAlert_Type = gvAlert.FooterRow.FindControl("ddlAlert_Type") as DropDownList;
                            UserControls_S3GAutoSuggest ddlContact_AlertTab = gvAlert.FooterRow.FindControl("ddlContact_AlertTab") as UserControls_S3GAutoSuggest;
                            CheckBox ChkAlertEmail = gvAlert.FooterRow.FindControl("ChkEmail") as CheckBox;
                            CheckBox ChkAlertSMS = gvAlert.FooterRow.FindControl("ChkSMS") as CheckBox;


                            DataRow dr = dtAlert.NewRow();

                            dr["Type"] = "ALL";
                            dr["TypeID"] = "141";
                            dr["UserContact"] = drLoop["Entity"].ToString();
                            dr["UserContactID"] = drLoop["EntityId"].ToString();
                            dr["EMail"] = "True";
                            dr["SMS"] = "True";
                            if (drLoop["OutflowFromId"].ToString() == "145")
                            {
                                dr["User_Type"] = "Employee";
                                dr["User_Type_Id"] = 2;
                            }
                            else
                            {
                                dr["User_Type"] = "Customer";
                                dr["User_Type_Id"] = 1;
                            }


                            dtAlert.Rows.Add(dr);
                        }
                        dtAlert.AcceptChanges();
                        gvAlert.DataSource = dtAlert;
                        gvAlert.DataBind();
                        ViewState["DtAlertDetails"] = dtAlert;
                    }
                }
            }


        }
        catch (Exception ex)
        {

        }
    }


    private void funPriDisableFactoringWCControls(bool bdisable)
    {
        ddl_Time_Value.Enabled = bdisable;
        ddl_Frequency.Enabled = bdisable;
        ddl_Repayment_Mode.Enabled = bdisable;
        ddl_IRR_Rest.Enabled = bdisable;


        rfvTimeValue.Enabled = bdisable;
        rfvFrequency.Enabled = bdisable;
        RequiredFieldValidator8.Enabled = bdisable;
        RequiredFieldValidator9.Enabled = false;

        txt_Recovery_Pattern_Year1.Enabled = bdisable;
        txt_Recovery_Pattern_Year1.Enabled = bdisable;
        txt_Recovery_Pattern_Year1.Enabled = bdisable;
        txt_Recovery_Pattern_Rest.Enabled = bdisable;
        //chk_lblMargin.Enabled = bdisable;
        txt_Margin_Percentage.Enabled = bdisable;

        chk_lblMargin.Enabled = false;


        if (chk_lblMargin.Checked)
        {
            txt_Margin_Percentage.Enabled = true;
        }
        else
        {
            txt_Margin_Percentage.Enabled = false;
        }


    }

    private void FunPriSetRateLength()
    {
        try
        {

            if (ddl_Return_Pattern.SelectedValue == "3" || ddl_Return_Pattern.SelectedValue == "4" || ddl_Return_Pattern.SelectedValue == "5")
            {
                txtRate.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, 10, false, false, "Rate");
            }
            else
            {
                txtRate.SetPercentagePrefixSuffix(ObjS3GSession.ProGpsPrefixRW, 10, false, false, "Rate");
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    private void FunPriFillROIDLL(string Mode)
    {
        try
        {
            if (Mode == strAddMode)
            {
                Dictionary<string, string> objParameters = new Dictionary<string, string>();
                DataSet dsROILov = Utility.GetDataset("S3G_OR_Get_LoadROILov", objParameters);
                ddl_Rate_Type.BindDataTable(dsROILov.Tables[0]);
                ddl_Return_Pattern.BindDataTable(dsROILov.Tables[1]);
                ddl_Time_Value.BindDataTable(dsROILov.Tables[2]);
                ddl_Frequency.BindDataTable(dsROILov.Tables[3]);
                ddl_Repayment_Mode.BindDataTable(dsROILov.Tables[4]);
                ddl_IRR_Rest.BindDataTable(dsROILov.Tables[5]);
                ddl_Interest_Calculation.BindDataTable(dsROILov.Tables[3]);
                ddl_Interest_Levy.BindDataTable(dsROILov.Tables[3]);
                ddl_Insurance.BindDataTable(dsROILov.Tables[6]);
                ViewState["MLAROIDetails"] = dsROILov;

                //Arear and Advance FBD Removed for MFC Version Start
                ddl_Time_Value.Items.Remove(ddl_Time_Value.Items.FindByValue("3"));
                ddl_Time_Value.Items.Remove(ddl_Time_Value.Items.FindByValue("4"));
                //Arear and Advance FBD Removed for MFC Version End
            }
        }
        catch (Exception ex)
        {
            //ObjCustomerService.Close();
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw new ApplicationException("Unable to Fill DLL for ROI Rule");
        }
        //finally
        //{
        //    if (ObjCustomerService != null)
        //        ObjCustomerService.Close();
        //}

    }

    private void FunPriLoadROIRuleDetails(string Mode)
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {
            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            DataTable ObjDTROI = new DataTable();
            if (Mode == strAddMode)
            {
                ObjStatus.Option = 40;
                ObjStatus.Param1 = ddlROIRuleList.SelectedValue;
                //ObjStatus.Param2 = ddlProductCodeList.SelectedValue;
                //ObjStatus.Param3 = hdnConstitutionId.Value;
                ObjDTROI = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                ViewState["ROIRules"] = ObjDTROI;
            }
            if (Mode == strEditMode)
            {
                ObjDTROI = (DataTable)ViewState["ROIRules"];

            }

            string strRoirValue;
            if (hdnROIRule.Value != "")
            {
                strRoirValue = hdnROIRule.Value;
            }
            else
            {
                strRoirValue = "0";
            }

            switch (ObjDTROI.Rows[0]["Repayment_Mode"].ToString())
            {
                case "3":
                    Dictionary<int, decimal> dictRecovery = new Dictionary<int, decimal>();
                    if (Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year1"].ToString()) != 0)
                        dictRecovery.Add(1, Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year1"].ToString()));

                    if (Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year2"].ToString()) != 0)
                        dictRecovery.Add(2, Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year2"].ToString()));

                    if (Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year3"].ToString()) != 0)
                        dictRecovery.Add(3, Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Year3"].ToString()));

                    if (Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Rest"].ToString()) != 0)
                        dictRecovery.Add(4, Convert.ToDecimal(ObjDTROI.Rows[0]["Recovery_Pattern_Rest"].ToString()));

                    int inMax = dictRecovery.Keys.Max();
                    ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                    int intNoofYears = objRepaymentStructure.FunPubGetNoofYearsFromTenure(ddlTenureType.SelectedItem.Text, txtTenure.Text);
                    if (inMax != 4)
                    {
                        if (inMax != intNoofYears)
                        {
                            //Utility.FunShowAlertMsg(this, "Tenure and Recovery Pattern are not matching");
                            Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege1));
                            div7.Visible = false;
                            ddlROIRuleList.SelectedValue = strRoirValue;
                            hdnROIRule.Value = "";
                            return;
                        }

                    }
                    else
                    {
                        if (intNoofYears < 4)
                        {
                            //Utility.FunShowAlertMsg(this, "Tenure and Recovery Pattern are not matching");
                            Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege1));
                            div7.Visible = false;
                            ddlROIRuleList.SelectedValue = strRoirValue;
                            hdnROIRule.Value = "";
                            return;
                        }
                    }
                    break;

            }
            if (strMode.Trim() != "Q")
            {
                if (Convert.ToInt32(ObjDTROI.Rows[0]["Return_Pattern"].ToString()) > 2)
                {
                    if (ddlTenureType.SelectedItem.Text.Trim().ToUpper() != "MONTHLY")
                    {
                        //Utility.FunShowAlertMsg(this, "Tenure type should be months for PTF/PLF/PMF");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege2));
                        div7.Visible = false;
                        ddlROIRuleList.SelectedValue = strRoirValue;
                        hdnROIRule.Value = "";
                        return;
                    }
                }
            }


            //Dec rate 
            if (!string.IsNullOrEmpty(ObjDTROI.Rows[0]["IRR_Rate"].ToString()))
            {
                ViewState["decRate"] = ObjDTROI.Rows[0]["IRR_Rate"].ToString();

            }


            if (ObjDTROI.Rows.Count > 0)
            {
                txt_Model_Description.Text = ObjDTROI.Rows[0]["Model_Description"].ToString();
                txt_ROI_Rule_Number.Text = ObjDTROI.Rows[0]["ROI_Rule_Number"].ToString();
                txt_Recovery_Pattern_Year1.Text = ObjDTROI.Rows[0]["Recovery_Pattern_Year1"].ToString();
                txt_Recovery_Pattern_Year2.Text = ObjDTROI.Rows[0]["Recovery_Pattern_Year2"].ToString();
                txt_Recovery_Pattern_Year3.Text = ObjDTROI.Rows[0]["Recovery_Pattern_Year3"].ToString();
                txt_Recovery_Pattern_Rest.Text = ObjDTROI.Rows[0]["Recovery_Pattern_Rest"].ToString();

                FunPriShowROIControls(ObjDTROI.Rows[0]["Rate_Type"], ddl_Rate_Type);
                FunPriShowROIControls(ObjDTROI.Rows[0]["Return_Pattern"], ddl_Return_Pattern);
                if (ObjDTROI.Rows[0]["Time_Value"].ToString() == "-1")
                {
                    rfvTimeValue.Enabled = false;
                }
                else
                {
                    if (ddlLOB_SelectedItem_Text.Value.Contains("HP") || ddlLOB_SelectedItem_Text.Value.Contains("TL"))//Vehicle//Non Vehicle//Home Plan/Term Loan
                    {
                        rfvTimeValue.Enabled = true;
                    }
                }
                FunPriShowROIControls(ObjDTROI.Rows[0]["Time_Value"], ddl_Time_Value);
                if (intApplicationProcessId == 0)
                {
                    txtFBDate.Text = "";
                }
                if (ObjDTROI.Rows[0]["Time_Value"].ToString() == "3" || ObjDTROI.Rows[0]["Time_Value"].ToString() == "4")
                {
                    //rfvFBDate.Enabled = true;
                    txtFBDate.Enabled = true;
                    //rngFBDate.Enabled = true;


                }
                else
                {
                    txtFBDate.Enabled = false;
                    //rfvFBDate.Enabled = false;
                    //rngFBDate.Enabled = false;
                }
                if (ObjDTROI.Rows[0]["Frequency"].ToString() == "-1")
                {

                    rfvFrequency.Enabled = false;
                }
                else
                {
                    if (ddlLOB_SelectedItem_Text.Value.Contains("HP") || ddlLOB_SelectedItem_Text.Value.Contains("TL"))//Vehicle//Non Vehicle//Home Plan/Term Loan
                    {
                        rfvFrequency.Enabled = true;
                    }
                }
                FunPriShowROIControls(ObjDTROI.Rows[0]["Frequency"], ddl_Frequency);
                FunPriShowROIControls(ObjDTROI.Rows[0]["Repayment_Mode"], ddl_Repayment_Mode);
                FunPriShowROIControls(ObjDTROI.Rows[0]["Rate"], txtRate);
                if (txtRate.Text != string.Empty)
                {
                    hdnRate.Value = ObjDTROI.Rows[0]["Rate"].ToString();
                    txtRate.Text = Convert.ToDecimal(txtRate.Text).ToString("0.000");
                }
                FunPriShowROIControls(ObjDTROI.Rows[0]["IRR_Rest"], ddl_IRR_Rest);
                FunPriShowROIControls(ObjDTROI.Rows[0]["Interest_Calculation"], ddl_Interest_Calculation);
                FunPriShowROIControls(ObjDTROI.Rows[0]["Interest_Levy"], ddl_Interest_Levy);
                FunPriShowROIControls(ObjDTROI.Rows[0]["Insurance"], ddl_Insurance);

                //Chandru K On 19-Sep-2013 For ISFC
                //txtCollateralTypeRate.Text = ObjDTROI.Rows[0]["Collateral_Type_Rate"].ToString();
                //FunPriShowROIControls(ObjDTROI.Rows[0]["IRR_Rate"], tr_lblCollateralTypeRate, txtRate);

                //if (txtCollateralTypeRate.Text != "" && txtIRRRate.Text != "")
                //    txtRate.Text = Convert.ToString(Convert.ToDecimal(txtIRRRate.Text) + Convert.ToDecimal(txtCollateralTypeRate.Text));

                if (ObjDTROI.Rows[0]["Residual_Value"].ToString() == "0")
                {
                    //tr_lblResidual_Value.Visible = false;
                }
                else
                {
                    //FunPriShowROIControls(ObjDTROI.Rows[0]["Residual_Value"], tr_lblResidual_Value, chk_lblResidual_Value);
                }
                if (ObjDTROI.Rows[0]["Margin"].ToString() == "0")
                {
                    //tr_lblMargin.Visible = false;
                }
                else
                {
                    FunPriShowROIControls(ObjDTROI.Rows[0]["Margin"], chk_lblMargin);

                    if (ObjDTROI.Rows[0]["Margin_Percentage"].ToString() == "")
                    {
                        //tr_lblMargin_Percentage.Visible = false;
                    }
                    else
                    {
                        FunPriShowROIControls(ObjDTROI.Rows[0]["Margin_Percentage"], txt_Margin_Percentage);
                    }
                }
                if (ObjDTROI.Rows[0]["Margin"].ToString() == "1")
                {
                    FunPriShowROIControls(ObjDTROI.Rows[0]["Margin_Percentage"], txt_Margin_Percentage);
                    txtMarginMoneyPer_Cashflow.Text = ObjDTROI.Rows[0]["Margin_Percentage"].ToString();
                    txtMarginMoneyAmount_Cashflow.Text = FunPriGetMarginAmout().ToString("0.000");
                    txtMarginMoneyPer_Cashflow.ReadOnly = true;
                    txtMarginMoneyAmount_Cashflow.ReadOnly = true;
                    rfvMarginPercent.Enabled = true;

                }
                else
                {
                    txt_Margin_Percentage.Text = "";
                    txtMarginMoneyPer_Cashflow.Text = "";
                    txtMarginMoneyAmount_Cashflow.Text = "";
                    txtMarginMoneyPer_Cashflow.ReadOnly = true;
                    txtMarginMoneyAmount_Cashflow.ReadOnly = true;
                    rfvMarginPercent.Enabled = false;
                }

                if (ObjDTROI.Rows[0]["Residual_Value"].ToString() == "1" && txtResidualValue.Text.Trim() == "")
                {
                    rfvResidualValue.Enabled = true;
                    txtResidualAmt_Cashflow.ReadOnly = false;
                    txtResidualValue_Cashflow.ReadOnly = false;
                }
                else if (ObjDTROI.Rows[0]["Residual_Value"].ToString() == "1" && txtResidualValue.Text.Trim() != "")
                {
                    rfvResidualValue.Enabled = false;
                    txtResidualAmt_Cashflow.ReadOnly = false;
                    txtResidualValue_Cashflow.ReadOnly = false;
                    txtResidualAmt_Cashflow.Text = txtResidualValue.Text;
                }
                else
                {
                    txtResidualAmt_Cashflow.Text = "";
                    txtResidualValue_Cashflow.Text = "";
                    txtResidualValue.Text = "";
                    rfvResidualValue.Enabled = false;
                    txtResidualAmt_Cashflow.ReadOnly = true;
                    txtResidualValue_Cashflow.ReadOnly = true;
                }
                FunPriLoadROIMLA();
                //hide the IRR panel visibility for WC,FT,TLE(Product) method as per Malolan raised on 23-feb-2012 start by saran

                FunPriDisableIRRPanel();
                //hide the IRR panel visibility for WC,FT,TLE(Product) method as per Malolan raised on 23-feb-2012 end by saran

            }

        }
        catch (Exception ex)
        {
            //ObjCustomerService.Close();
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw new ApplicationException("Unable to Load the ROI Rule");
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }
    }
    //hide the IRR panel visibility for WC,FT,TLE(Product) method as per Malolan raised on 23-feb-2012 start by saran

    private void FunPriDisableIRRPanel()
    {
        try
        {

            if (ddl_Repayment_Mode.SelectedIndex > 0)
            {
                if (Convert.ToInt32(ddl_Repayment_Mode.SelectedValue) > 0)
                {
                    if (Convert.ToInt32(ddl_Repayment_Mode.SelectedValue) >= 4)
                    {
                        // pnlIRRDetails.Visible = false;
                    }
                }

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    //hide the IRR panel visibility for WC,FT,TLE(Product) method as per Malolan raised on 23-feb-2012 end by saran

    private void FunPriToggleResidualAmountBased()
    {
        try
        {
            if (txtResidualAmt_Cashflow.Text != "")
            {
                rfvResidualValue.Enabled = false;
                txtResidualAmt_Cashflow.ReadOnly = false;
                txtResidualValue_Cashflow.ReadOnly = true;

            }
            else
            {
                rfvResidualValue.Enabled = true;
                txtResidualValue_Cashflow.ReadOnly = false;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Toggle Residual Amount Related Details");
        }
    }

    private void FunPriToggleResidualPercentageBased()
    {
        try
        {
            if (txtResidualValue_Cashflow.Text != "")
            {
                rfvResidualValue.Enabled = false;
                txtResidualAmt_Cashflow.ReadOnly = true;
                txtResidualValue.Text = "";
            }
            else
            {
                rfvResidualValue.Enabled = true;
                txtResidualAmt_Cashflow.ReadOnly = false;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Toggle Residual % Related Details");
        }
    }

    private void FunPriLoadPaymentRuleDetails()
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {
            DataTable ObjDTPayment = new DataTable();

            objProcedureParameter = new Dictionary<string, string>();
            objProcedureParameter.Add("@Is_Active", "1");
            objProcedureParameter.Add("@Rules_ID", ddlPaymentRuleList.SelectedItem.Value);
            objProcedureParameter.Add("@Option", "10");
            ObjDTPayment = Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, objProcedureParameter);
            string vendor = Convert.ToString(ObjDTPayment.Rows[0]["Entity_Type"]).ToLower(); //ObjDTPayment.Rows[0]["Entity_Type"].ToString().ToLower();

            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

            ObjStatus.Option = 1;
            ObjStatus.Param1 = S3G_Statu_Lookup.CASH_FLOW_FROM.ToString();
            DataTable dtCashFlowFrom = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
            switch (vendor)
            {
                case "vendor":
                    dtCashFlowFrom.Rows.RemoveAt(0);
                    break;
                case "customer":
                    dtCashFlowFrom.Rows.RemoveAt(1);
                    break;
            }
            ViewState["vendor"] = vendor;
            if (intApplicationProcessId == 0)
            {
                DropDownList ddlEntityName_InFlowFrom = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
                ((DataSet)ViewState["OutflowDDL"]).Merge(dtCashFlowFrom);
                Utility.FillDLL(ddlEntityName_InFlowFrom, dtCashFlowFrom, true);
            }
            FunPriBindPaymentRule(ObjDTPayment);

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Load the Payment Rule");
        }
        finally
        {
            ObjCustomerService.Close();
        }
    }
    private void FunPriBindPaymentRule(DataTable ObjDTPayment)
    {
        DataTable ObjDTPaymentGen = new DataTable();
        DataColumn dc1 = new DataColumn("FieldName");
        DataColumn dc2 = new DataColumn("FieldValue");
        ObjDTPaymentGen.Columns.Add(dc1);
        ObjDTPaymentGen.Columns.Add(dc2);
        try
        {
            ViewState["PaymentRules"] = ObjDTPaymentGen;
            for (int i = 0; i < ObjDTPayment.Columns.Count; i++)
            {
                if (ObjDTPayment.Rows[0][i].ToString() != string.Empty)
                {
                    DataRow dr = ObjDTPaymentGen.NewRow();
                    dr[0] = ObjDTPayment.Columns[i].ColumnName.Replace("_", " ");
                    if (ObjDTPayment.Rows.Count > 0) dr[1] = ObjDTPayment.Rows[0][i].ToString();
                    else dr[1] = string.Empty;
                    ObjDTPaymentGen.Rows.Add(dr);
                }
            }
            gvPaymentRuleDetails.DataSource = ObjDTPaymentGen;
            gvPaymentRuleDetails.DataBind();
            if (TabContainerAP.Tabs[6].Visible)
            {
                //gv_MLARepayRuleCard.DataSource = ObjDTPaymentGen;
                //gv_MLARepayRuleCard.DataBind();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Load Payment Rule Details");
        }
    }
    private void FunPriLoadROIMLA()
    {
        try
        {
            DataTable ObjDTROI = (DataTable)ViewState["ROIRules"];


            DataTable ObjDTPaymentGen = new DataTable();
            DataColumn dc1 = new DataColumn("FieldName");
            DataColumn dc2 = new DataColumn("FieldValue");
            ObjDTPaymentGen.Columns.Add(dc1);
            ObjDTPaymentGen.Columns.Add(dc2);
            DataSet dsROILov = ViewState["MLAROIDetails"] as DataSet;
            for (int i = 0; i < ObjDTROI.Columns.Count; i++)
            {
                if (ObjDTROI.Rows[0][i].ToString() != string.Empty)
                {
                    if (!ObjDTROI.Columns[i].ColumnName.Contains("Serial") && !ObjDTROI.Columns[i].ColumnName.Contains("ID"))
                    {
                        DataRow dr = ObjDTPaymentGen.NewRow();
                        dr[0] = ObjDTROI.Columns[i].ColumnName.Replace("_", " ");
                        if (dsROILov.Tables.Count > 0)
                        {
                            if (ObjDTROI.Rows.Count > 0)
                            {
                                if (dr[0].ToString() == "Rate Type")
                                {
                                    DataRow[] drRate = dsROILov.Tables[0].Select("Value = " + ObjDTROI.Rows[0][i].ToString());
                                    if (drRate.Length > 0)
                                        dr[1] = drRate[0]["Name"];
                                }
                                else if (dr[0].ToString() == "Return Pattern")
                                {
                                    DataRow[] drRate = dsROILov.Tables[1].Select("Value = " + ObjDTROI.Rows[0][i].ToString());
                                    if (drRate.Length > 0)
                                        dr[1] = drRate[0]["Name"];
                                }
                                else if (dr[0].ToString() == "Time Value")
                                {
                                    DataRow[] drRate = dsROILov.Tables[2].Select("Value = " + ObjDTROI.Rows[0][i].ToString());
                                    if (drRate.Length > 0)
                                        dr[1] = drRate[0]["Name"];
                                }
                                else if (dr[0].ToString() == "Frequency" || dr[0].ToString() == "Interest Calculation" || dr[0].ToString() == "Interest Levy")
                                {
                                    DataRow[] drRate = dsROILov.Tables[3].Select("Value = " + ObjDTROI.Rows[0][i].ToString());
                                    if (drRate.Length > 0)
                                        dr[1] = drRate[0]["Name"];
                                }
                                else if (dr[0].ToString() == "Repayment Mode")
                                {
                                    DataRow[] drRate = dsROILov.Tables[4].Select("Value = " + ObjDTROI.Rows[0][i].ToString());
                                    if (drRate.Length > 0)
                                        dr[1] = drRate[0]["Name"];
                                }
                                else if (dr[0].ToString() == "IRR Rest")
                                {
                                    DataRow[] drRate = dsROILov.Tables[5].Select("Value = " + ObjDTROI.Rows[0][i].ToString());
                                    if (drRate.Length > 0)
                                        dr[1] = drRate[0]["Name"];
                                }
                                else if (dr[0].ToString() == "Insurance")
                                {
                                    DataRow[] drRate = dsROILov.Tables[6].Select("Value = " + ObjDTROI.Rows[0][i].ToString());
                                    if (drRate.Length > 0)
                                        dr[1] = drRate[0]["Name"];
                                }
                                else if (dr[0].ToString() == "Residual Value")
                                {
                                    if (ObjDTROI.Rows[0][i].ToString() == "0")
                                        dr[1] = "Not Applicable";
                                    else
                                        dr[1] = "Applicable";
                                }
                                else
                                {
                                    dr[1] = ObjDTROI.Rows[0][i].ToString();
                                }
                            }
                            else
                            {
                                dr[1] = string.Empty;
                            }

                        }
                        ObjDTPaymentGen.Rows.Add(dr);
                    }
                }
            }
            if (TabContainerAP.Tabs[6].Visible)
            {
                //gv_MLAROI.DataSource = ObjDTPaymentGen;
                //gv_MLAROI.DataBind();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Load the ROI Rule in Prime/Sub Account Details");
        }

    }

    private void FunPriUpdateROIRule()
    {
        DataTable ObjDTROI;
        try
        {
            ObjDTROI = (DataTable)ViewState["ROIRules"];
            ObjDTROI.Rows[0]["Model_Description"] = txt_Model_Description.Text;
            ObjDTROI.Rows[0]["Rate_Type"] = ddl_Rate_Type.SelectedValue;
            ObjDTROI.Rows[0]["ROI_Rule_Number"] = txt_ROI_Rule_Number.Text;
            ObjDTROI.Rows[0]["Return_Pattern"] = ddl_Return_Pattern.SelectedValue;
            ObjDTROI.Rows[0]["Time_Value"] = ddl_Time_Value.SelectedValue;
            ObjDTROI.Rows[0]["Frequency"] = ddl_Frequency.SelectedValue;
            ObjDTROI.Rows[0]["Repayment_Mode"] = ddl_Repayment_Mode.SelectedValue;
            //ObjDTROI.Rows[0]["Rate"] = txtRate.Text;
            ObjDTROI.Rows[0]["Rate"] = hdnRate.Value;
            //ObjDTROI.Rows[0]["Collateral_Type_Rate"] = txtCollateralTypeRate.Text;
            ObjDTROI.Rows[0]["IRR_Rest"] = ddl_IRR_Rest.SelectedValue;
            ObjDTROI.Rows[0]["Interest_Calculation"] = ddl_Interest_Calculation.SelectedValue;
            ObjDTROI.Rows[0]["Interest_Levy"] = ddl_Interest_Levy.SelectedValue;
            ObjDTROI.Rows[0]["Recovery_Pattern_Year1"] = txt_Recovery_Pattern_Year1.Text;
            ObjDTROI.Rows[0]["Recovery_Pattern_Year2"] = txt_Recovery_Pattern_Year2.Text;
            ObjDTROI.Rows[0]["Recovery_Pattern_Year3"] = txt_Recovery_Pattern_Year3.Text;
            ObjDTROI.Rows[0]["Recovery_Pattern_Rest"] = txt_Recovery_Pattern_Rest.Text;
            ObjDTROI.Rows[0]["Insurance"] = ddl_Insurance.SelectedValue;
            ObjDTROI.Rows[0]["Residual_Value"] = chk_lblResidual_Value.Checked;
            ObjDTROI.Rows[0]["Margin"] = chk_lblMargin.Checked;
            ObjDTROI.Rows[0]["Margin_Percentage"] = txt_Margin_Percentage.Text == "" ? 0 : Convert.ToDecimal(txt_Margin_Percentage.Text);
            ObjDTROI.Rows[0].AcceptChanges();
            ViewState["ROIRules"] = ObjDTROI;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw ex;
        }
    }

    private void FunPriShowROIControls(Object Data, Object ObjCtl)
    {
        try
        {

            if (!string.IsNullOrEmpty(Convert.ToString(Data)))
            {
                //rRow.Visible = true;

                if (ObjCtl.GetType().Name == "TextBox")
                {
                    ((TextBox)ObjCtl).Text = Convert.ToString(Data);
                }
                if (ObjCtl.GetType().Name == "DropDownList")
                {
                    DropDownList DDL = new DropDownList();
                    DDL = ((DropDownList)ObjCtl);
                    if (DDL.Items.Count > 0)
                        DDL.SelectedValue = Convert.ToString(Data);
                    if (Convert.ToString(Data) == "0" || Convert.ToString(Data) == "-1")
                    {
                        //rRow.Visible = false;
                    }
                }
                if (ObjCtl.GetType().Name == "CheckBox")
                {
                    ((CheckBox)ObjCtl).Checked = Convert.ToBoolean(Data);
                }

                if (ddlROIRuleList.SelectedItem.Text.ToUpper().Contains("RRA"))//ROI Rule number selected in drop down
                {
                    ((WebControl)ObjCtl).Enabled = false;



                }
                else
                {
                    if (ObjCtl != null)
                    {
                        if (!((WebControl)ObjCtl).ID.Contains("ddl_Time_Value") && !((WebControl)ObjCtl).ID.Contains("ddl_Frequency") && !((WebControl)ObjCtl).ID.Contains("txtRate") && !((WebControl)ObjCtl).ID.Contains("ddl_Insurance") && !((WebControl)ObjCtl).ID.Contains("txt_Margin_Percentage"))
                        {
                            ((WebControl)ObjCtl).Enabled = false;

                        }
                        else
                        {

                        }
                        txt_Margin_Percentage.Enabled = false;
                    }
                }

            }
            //else
            //    rRow.Visible = false;

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
    }
    #endregion

    #region Cash In Flows

    private void FunPriFillInflowDLL(string Mode)
    {

        try
        {

            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

            Dictionary<string, string> objParameters = new Dictionary<string, string>();
            objParameters.Add("@CompanyId", intCompanyId.ToString());
            if (ddlLOB.SelectedValue != "0")
            {
                objParameters.Add("@LobId", ddlLOB.SelectedValue);
            }
            DataSet dsInflow = Utility.GetDataset("s3g_org_loadInflowLov", objParameters);
            ViewState["InflowDDL"] = dsInflow;
            if (Mode == strAddMode)
            {
                if (txtFinanceAmount.Text != "")
                {
                    UserControl CustomerDetails1 = (UserControl)ucCustomerCodeLov.FindControl("S3GCustomerAddress1");
                    TextBox txtCustomerName = (TextBox)CustomerDetails1.FindControl("txtCustomerName");
                    objParameters.Add("@Finance_Amount", Convert.ToDecimal(txtFinanceAmount.Text).ToString());
                    objParameters.Add("@Product_Id", ddlProductCodeList.SelectedValue);
                    objParameters.Add("@EntityID", hdnCustID.Value);
                    objParameters.Add("@Entity", txtCustomerName.Text);
                    DataTable dtAutoCashFlow = new DataTable();
                    DataTable dtAutoCashFlowtemp = new DataTable();
                    dtAutoCashFlow = Utility.GetDefaultData("S3G_ORG_LoadInflow", objParameters);
                    ViewState["dtAutoCashFlow"] = dtAutoCashFlow;

                    if (dtAutoCashFlow != null)
                    {
                        if (dtAutoCashFlow.Columns["CashFlow_Flag_ID"].DataType.Name == "Decimal")
                        {
                            dtAutoCashFlowtemp = dtAutoCashFlow.Clone();
                            dtAutoCashFlowtemp.Columns["CashFlow_Flag_ID"].DataType = typeof(int);

                            DataRow drAutoCashFlowtemp = dtAutoCashFlowtemp.NewRow();
                            foreach (DataRow drdtAutoCashFlow in dtAutoCashFlow.Rows)
                            {
                                foreach (DataColumn dc in dtAutoCashFlow.Columns)
                                {
                                    if (dc.ColumnName == "Amount")
                                        drAutoCashFlowtemp[dc.ColumnName] = Convert.ToDecimal(drdtAutoCashFlow[dc.ColumnName].ToString());
                                    else if (dc.ColumnName == "CashFlow_Flag_ID")
                                        drAutoCashFlowtemp[dc.ColumnName] = Convert.ToInt16(drdtAutoCashFlow[dc.ColumnName].ToString());
                                    else
                                        drAutoCashFlowtemp[dc.ColumnName] = drdtAutoCashFlow[dc.ColumnName].ToString();
                                }
                            }
                            ViewState["dtAutoCashFlow"] = dtAutoCashFlowtemp;
                        }
                    }
                }
                gvInflow.DataSource = null;
                gvInflow.DataBind();

                DtCashFlow = new DataTable();
                DtCashFlow.Columns.Add("Date");
                DtCashFlow.Columns.Add("CashInFlowID");
                DtCashFlow.Columns.Add("CashInFlow");
                DtCashFlow.Columns.Add("EntityID");
                DtCashFlow.Columns.Add("Entity");
                DtCashFlow.Columns.Add("InflowFromId");
                DtCashFlow.Columns.Add("InflowFrom");
                DtCashFlow.Columns.Add("Amount", typeof(decimal));
                DtCashFlow.Columns.Add("Accounting_IRR");
                DtCashFlow.Columns.Add("Business_IRR");
                DtCashFlow.Columns.Add("Company_IRR");
                DtCashFlow.Columns.Add("CashFlow_Flag_ID", typeof(int));

                DataRow dr = DtCashFlow.NewRow();
                dr["Date"] = "01/01/1900";
                dr["CashInFlowID"] = "";
                dr["CashInFlow"] = "";
                dr["EntityID"] = "";
                dr["Entity"] = "";
                dr["InflowFromId"] = "";
                dr["InflowFrom"] = "";
                dr["Amount"] = 0;
                dr["Accounting_IRR"] = "";
                dr["Business_IRR"] = "";
                dr["Company_IRR"] = "";
                dr["CashFlow_Flag_ID"] = 0;
                DtCashFlow.Rows.Add(dr);

            }
            if (Mode == strEditMode)
            {
                if ((DataTable)ViewState["DtCashFlow"] != null)
                    DtCashFlow = (DataTable)ViewState["DtCashFlow"];

            }

            gvInflow.DataSource = DtCashFlow;
            gvInflow.DataBind();
            if (Mode == strAddMode)
            {
                DtCashFlow.Rows.Clear();
                ViewState["DtCashFlow"] = DtCashFlow;
                DtCashFlow.Dispose();
                gvInflow.Rows[0].Cells.Clear();
                gvInflow.Rows[0].Visible = false;

            }
            FunPriGenerateNewInflow();


        }
        catch (Exception ex)
        {
            //ObjCustomerService.Close();
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
        //finally
        //{
        //    if (ObjCustomerService != null)
        //        ObjCustomerService.Close();
        //}
    }


    private void funPriLoadInflowFWC()
    {
        try
        {
            DtCashFlow = new DataTable();
            DtCashFlow.Columns.Add("Date");
            DtCashFlow.Columns.Add("CashInFlowID");
            DtCashFlow.Columns.Add("CashInFlow");
            DtCashFlow.Columns.Add("EntityID");
            DtCashFlow.Columns.Add("Entity");
            DtCashFlow.Columns.Add("InflowFromId");
            DtCashFlow.Columns.Add("InflowFrom");
            DtCashFlow.Columns.Add("Amount", typeof(decimal));
            DtCashFlow.Columns.Add("Accounting_IRR");
            DtCashFlow.Columns.Add("Business_IRR");
            DtCashFlow.Columns.Add("Company_IRR");
            DtCashFlow.Columns.Add("CashFlow_Flag_ID", typeof(int));

            DataRow dr = DtCashFlow.NewRow();
            dr["Date"] = "01/01/1900";
            dr["CashInFlowID"] = "";
            dr["CashInFlow"] = "";
            dr["EntityID"] = "";
            dr["Entity"] = "";
            dr["InflowFromId"] = "";
            dr["InflowFrom"] = "";
            dr["Amount"] = 0;
            dr["Accounting_IRR"] = "";
            dr["Business_IRR"] = "";
            dr["Company_IRR"] = "";
            dr["CashFlow_Flag_ID"] = 0;
            DtCashFlow.Rows.Add(dr);
            gvInflow.DataSource = DtCashFlow;
            gvInflow.DataBind();

            gvOutFlow.DataSource = DtCashFlow;
            gvOutFlow.DataBind();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void FunPriGenerateNewInflow()
    {
        try
        {
            DropDownList ddlInflowDesc = gvInflow.FooterRow.FindControl("ddlInflowDesc") as DropDownList;
            //DropDownList ddlEntityName_InFlow = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_InFlow = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as UserControls_S3GAutoSuggest;
            DropDownList ddlEntityName_InFlowFrom = gvInflow.FooterRow.FindControl("ddlEntityName_InFlowFrom") as DropDownList;

            Utility.FillDLL(ddlInflowDesc, ((DataSet)ViewState["InflowDDL"]).Tables[2], true);
            //Utility.FillDLL(ddlEntityName_InFlow, ((DataSet)ViewState["InflowDDL"]).Tables[1], true);
            Utility.FillDLL(ddlEntityName_InFlowFrom, ((DataSet)ViewState["InflowDDL"]).Tables[0], true);
            ddlEntityName_InFlowFrom.SelectedIndex = 0;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
    }

    private void FunPriInsertUMFC()
    {
        try
        {
            string decTotalUmfcAmount = "";

            TextBox txtCustomerName = (TextBox)ucCustomerCodeLov.FindControl("txtName");
            DtCashFlow = (DataTable)ViewState["DtCashFlow"];
            DataSet dsUMFC = (DataSet)ViewState["InflowDDL"];
            DataRow dr = DtCashFlow.NewRow();
            DtCashFlow.PrimaryKey = new DataColumn[] { DtCashFlow.Columns["CashInFlowID"], DtCashFlow.Columns["Date"] };
            dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
            string[] strArrayIds = null;
            string cashflowdesc = "";
            foreach (DataRow drOut in dsUMFC.Tables[2].Rows)
            {
                string[] strCashflow = drOut["CashFlow_ID"].ToString().Split(',');
                if (strCashflow[4].ToString() == "34")
                {
                    strArrayIds = strCashflow;
                    cashflowdesc = drOut["CashFlow_Description"].ToString();
                }
            }
            if (strArrayIds == null)
            {
                //Utility.FunShowAlertMsg(this, "Define the Cashflow for UMFC in Cashflow Master");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege3));
                return;
            }




            if (ddl_Repayment_Mode.SelectedValue == "2")
            {
                //Code added by saran for observation raised by RS through mail dated on 18-Jan-2012 start

                if (Convert.ToInt32(ddl_Return_Pattern.SelectedValue) > 2)
                {
                    decTotalUmfcAmount = FunPriGetInterestAmount().ToString(Funsetsuffix());
                }
                else
                {
                    decTotalUmfcAmount = FunPriGetStructureAdhocInterestAmount().ToString(Funsetsuffix());

                    //if (ddlLifeInsurance.SelectedValue == "2")
                    //{
                    //    if (txtLifeInsuranceCustomerPremiumAmount.Text != string.Empty)
                    //    {
                    //        decTotalUmfcAmount = (Convert.ToDecimal(decTotalUmfcAmount) - Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text)).ToString();
                    //    }
                    //}

                }
                //Code added by saran for observation raised by RS through mail dated on 18-Jan-2012 end

            }
            else
            {
                decTotalUmfcAmount = FunPriGetInterestAmount().ToString(Funsetsuffix());

                //if (ddlLifeInsurance.SelectedValue == "2")
                //{
                //    if (txtLifeInsuranceCustomerPremiumAmount.Text != string.Empty)
                //    {
                //        decTotalUmfcAmount = (Convert.ToDecimal(decTotalUmfcAmount) - Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text)).ToString();
                //    }
                //}
            }
            if (ddlLifeInsurance.SelectedValue == "2")
            {
                if (txtLifeInsuranceCustomerPremiumAmount.Text != string.Empty)
                {
                    decTotalUmfcAmount = (Convert.ToDecimal(decTotalUmfcAmount) - Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text)).ToString();
                }
            }
            if (ddlSubvention.SelectedValue == "1")
            {
                decTotalUmfcAmount = decTotalUmfcAmount + Convert.ToDecimal(txtTotalSubvetionamount.Text);
            }
            if (decTotalUmfcAmount != string.Empty)
            {
                //if (Convert.ToDecimal(decTotalUmfcAmount) > 0)
                //{

                dr["CashInFlowID"] = strArrayIds[0];
                dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                dr["CashFlow_Flag_ID"] = strArrayIds[4];
                dr["CashInFlow"] = cashflowdesc;
                dr["EntityID"] = hdnCustID.Value;
                dr["Entity"] = txtCustomerName.Text;
                dr["InflowFromId"] = "144";
                dr["InflowFrom"] = "Customer";
                dr["Amount"] = decTotalUmfcAmount;
                DtCashFlow.Rows.Add(dr);
                //}
            }






            //Insert LIP Income Start
            if (ddlLifeInsurance.SelectedValue == "2")
            {
                strArrayIds = null;
                foreach (DataRow drOut in dsUMFC.Tables[2].Rows)
                {
                    string[] strCashflow = drOut["CashFlow_ID"].ToString().Split(',');
                    if (strCashflow[4].ToString() == "506")//UMFC-LIP Income in Cashflow Master
                    {
                        strArrayIds = strCashflow;
                        cashflowdesc = drOut["CashFlow_Description"].ToString();
                    }
                }
                if (strArrayIds == null)
                {
                    Utility.FunShowAlertMsg(this, "Define the UMFC-LIP Income in Cashflow Master");
                    txtBusinessIRR_Repay.Text = string.Empty;
                    return;
                }

                DataRow[] drDeleteLIp = DtCashFlow.Select("CashFlow_Flag_ID=506");
                if (drDeleteLIp.Length > 0)
                {
                    foreach (DataRow drDeleteLIpLoop in drDeleteLIp)
                    {
                        drDeleteLIpLoop.Delete();
                    }
                }
                DtCashFlow.AcceptChanges();

                dr = DtCashFlow.NewRow();
                dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                dr["CashInFlowID"] = strArrayIds[0];
                dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                dr["CashFlow_Flag_ID"] = strArrayIds[4];
                dr["CashInFlow"] = cashflowdesc;
                dr["EntityID"] = hdnCustID.Value;
                dr["Entity"] = txtCustomerName.Text;
                dr["InflowFromId"] = "144";
                dr["InflowFrom"] = "Customer";
                dr["Amount"] = (Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text) - Convert.ToDecimal(txtLifeInsuranceCompanyAmount.Text)).ToString(Funsetsuffix());

                DtCashFlow.Rows.Add(dr);
                DtCashFlow.AcceptChanges();

            }
            else
            {
                DataRow[] drDeleteLIp = DtCashFlow.Select("CashFlow_Flag_ID=506");
                if (drDeleteLIp.Length > 0)
                {
                    foreach (DataRow drDeleteLIpLoop in drDeleteLIp)
                    {
                        drDeleteLIpLoop.Delete();
                    }
                }
                DtCashFlow.AcceptChanges();
            }
            //Insert LIP Income End


            //Insert LIP Appropriation Start
            if (ddlLifeInsurance.SelectedValue == "2")
            {
                strArrayIds = null;
                foreach (DataRow drOut in dsUMFC.Tables[2].Rows)
                {
                    string[] strCashflow = drOut["CashFlow_ID"].ToString().Split(',');
                    if (strCashflow[4].ToString() == "515")//UMFC-LIP Income in Cashflow Master
                    {
                        strArrayIds = strCashflow;
                        cashflowdesc = drOut["CashFlow_Description"].ToString();
                    }
                }
                if (strArrayIds == null)
                {
                    Utility.FunShowAlertMsg(this, "Define the LIP Appropriation Cash Inflow in Cashflow Master");
                    txtBusinessIRR_Repay.Text = string.Empty;
                    return;
                }

                DataRow[] drDeleteLIp = DtCashFlow.Select("CashFlow_Flag_ID=515");//LIP Appropriation
                if (drDeleteLIp.Length > 0)
                {
                    foreach (DataRow drDeleteLIpLoop in drDeleteLIp)
                    {
                        drDeleteLIpLoop.Delete();
                    }
                }
                DtCashFlow.AcceptChanges();

                dr = DtCashFlow.NewRow();
                dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                dr["CashInFlowID"] = strArrayIds[0];
                dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                dr["CashFlow_Flag_ID"] = strArrayIds[4];
                dr["CashInFlow"] = cashflowdesc;
                dr["EntityID"] = hdnCustID.Value;
                dr["Entity"] = txtCustomerName.Text;
                dr["InflowFromId"] = "144";
                dr["InflowFrom"] = "Customer";
                dr["Amount"] = (Convert.ToDecimal(txtLifeInsuranceCompanyAmount.Text)).ToString(Funsetsuffix());
                DtCashFlow.Rows.Add(dr);
                DtCashFlow.AcceptChanges();

            }
            else
            {
                DataRow[] drDeleteLIp = DtCashFlow.Select("CashFlow_Flag_ID=515");//LIP Appropriation
                if (drDeleteLIp.Length > 0)
                {
                    foreach (DataRow drDeleteLIpLoop in drDeleteLIp)
                    {
                        drDeleteLIpLoop.Delete();
                    }
                }
                DtCashFlow.AcceptChanges();
            }
            //Insert LIP Appropriation End


            //Insert VAT Receivable Start Added by Boobalan M on 26-Jun-2021
            if (ddlLifeInsurance.SelectedValue == "2")
            {
                strArrayIds = null;
                foreach (DataRow drOut in dsUMFC.Tables[2].Rows)
                {
                    string[] strCashflow = drOut["CashFlow_ID"].ToString().Split(',');
                    if (strCashflow[4].ToString() == "533")// VAT Receivable in Cashflow Master
                    {
                        strArrayIds = strCashflow;
                        cashflowdesc = drOut["CashFlow_Description"].ToString();
                    }
                }
                if (strArrayIds == null)
                {
                    Utility.FunShowAlertMsg(this, "Define the VAT Receivable Cash Inflow in Cashflow Master");
                    txtBusinessIRR_Repay.Text = string.Empty;
                    return;
                }

                DataRow[] drDeleteLIp = DtCashFlow.Select("CashFlow_Flag_ID=533");//VAT Receivable
                if (drDeleteLIp.Length > 0)
                {
                    foreach (DataRow drDeleteLIpLoop in drDeleteLIp)
                    {
                        drDeleteLIpLoop.Delete();
                    }
                }
                DtCashFlow.AcceptChanges();

                dr = DtCashFlow.NewRow();
                dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                dr["CashInFlowID"] = strArrayIds[0];
                dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                dr["CashFlow_Flag_ID"] = strArrayIds[4];
                dr["CashInFlow"] = cashflowdesc;
                dr["EntityID"] = hdnCustID.Value;
                dr["Entity"] = txtCustomerName.Text;
                dr["InflowFromId"] = "144";
                dr["InflowFrom"] = "Customer";
                dr["Amount"] = (Convert.ToDecimal(txtInsuranceCustomerTaxAmount.Text)).ToString(Funsetsuffix());
                DtCashFlow.Rows.Add(dr);
                DtCashFlow.AcceptChanges();

            }
            else
            {
                if (DtCashFlow.Rows.Count > 0)
                {
                    DataRow[] drDeleteLIp = DtCashFlow.Select("CashFlow_Flag_ID=533");//VAT Receivable
                    if (drDeleteLIp.Length > 0)
                    {
                        foreach (DataRow drDeleteLIpLoop in drDeleteLIp)
                        {
                            drDeleteLIpLoop.Delete();
                        }
                    }
                    DtCashFlow.AcceptChanges();
                }
            }
            //Insert VAT Receivable End


            //Insert Broken Period Income Start
            //txtStartdelaycharges.Text = "500";
            if ((txtStartdelaycharges.Text != string.Empty))
            {
                if (Convert.ToDecimal(txtStartdelaycharges.Text) > 0)
                {

                    strArrayIds = null;
                    foreach (DataRow drOut in dsUMFC.Tables[2].Rows)
                    {
                        string[] strCashflow = drOut["CashFlow_ID"].ToString().Split(',');
                        if (strCashflow[4].ToString() == "73")//UMFC-LIP Income in Cashflow Master
                        {
                            strArrayIds = strCashflow;
                            cashflowdesc = drOut["CashFlow_Description"].ToString();
                        }
                    }
                    if (strArrayIds == null)
                    {
                        //Utility.FunShowAlertMsg(this, "Define the Broken Period Income Cashflow in Cashflow Master");
                        //txtBusinessIRR_Repay.Text = string.Empty;
                        //return;
                    }
                    else
                    {

                        DataRow[] drDeleteLIp = DtCashFlow.Select("CashFlow_Flag_ID=73");
                        if (drDeleteLIp.Length > 0)
                        {
                            foreach (DataRow drDeleteLIpLoop in drDeleteLIp)
                            {
                                drDeleteLIpLoop.Delete();
                            }
                        }
                        DtCashFlow.AcceptChanges();

                        dr = DtCashFlow.NewRow();
                        dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                        dr["CashInFlowID"] = strArrayIds[0];
                        dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                        dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                        dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                        dr["CashFlow_Flag_ID"] = strArrayIds[4];
                        dr["CashInFlow"] = cashflowdesc;
                        dr["EntityID"] = hdnCustID.Value;
                        dr["Entity"] = txtCustomerName.Text;
                        dr["InflowFromId"] = "144";
                        dr["InflowFrom"] = "Customer";
                        dr["Amount"] = (Convert.ToDecimal(txtStartdelaycharges.Text).ToString(Funsetsuffix()));

                        DtCashFlow.Rows.Add(dr);
                        DtCashFlow.AcceptChanges();
                    }
                }

            }
            //Insert Insert Broken Period Income Start Income End


            if (strMode == "C" && ViewState["dtAutoCashFlow"] != null)
                DtCashFlow.Merge((DataTable)ViewState["dtAutoCashFlow"]);

            gvInflow.DataSource = DtCashFlow;
            gvInflow.DataBind();

            ViewState["DtCashFlow"] = DtCashFlow;
            FunPriGenerateNewInflow();

            if (DtCashFlow.Rows.Count == 0)
            {
                FunPriFillInflowDLL(strAddMode);
            }
            //FunPriBindMarginMoneyInflow(); // Added on 23-08-2021
            //FunPriBindMarginMoneyOutflow(); // Added on 23-08-2021
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
    }
    private void FunPriInsertInflow()
    {
        try
        {
            DtCashFlow = (DataTable)ViewState["DtCashFlow"];

            TextBox txtDate_GridInflow1 = gvInflow.FooterRow.FindControl("txtDate_GridInflow") as TextBox;
            DropDownList ddlInflowDesc1 = gvInflow.FooterRow.FindControl("ddlInflowDesc") as DropDownList;
            //DropDownList ddlEntityName_InFlow1 = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_InFlow1 = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as UserControls_S3GAutoSuggest;
            DropDownList ddlEntityName_InFlowFrom = gvInflow.FooterRow.FindControl("ddlEntityName_InFlowFrom") as DropDownList;
            TextBox txtAmount_Inflow1 = gvInflow.FooterRow.FindControl("txtAmount_Inflow") as TextBox;

            string[] strArrayIds = ddlInflowDesc1.SelectedValue.Split(',');

            if (DtCashFlow.Rows.Count > 0)
            {
                DataRow[] drDupCashFlow = DtCashFlow.Select(" Date ='"
                    + Utility.StringToDate(txtDate_GridInflow1.Text)
                    + "' and CashFlow_Flag_ID = " + strArrayIds[4]
                    + " and InflowFromId = " + ddlEntityName_InFlowFrom.SelectedValue
                    + " and EntityID = " + ddlEntityName_InFlow1.SelectedValue);

                if (drDupCashFlow.Count() > 0)
                {
                    //Utility.FunShowAlertMsg(this, "Cannot add duplicate Cash inflow");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege4));
                    return;
                }
            }

            DataRow dr = DtCashFlow.NewRow();
            //DtCashFlow.PrimaryKey = new DataColumn[] { DtCashFlow.Columns["CashInFlowID"], DtCashFlow.Columns["Date"] };
            if (txtDate_GridInflow1.Text != "")
                dr["Date"] = Utility.StringToDate(txtDate_GridInflow1.Text);
            else
                dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
            dr["CashInFlowID"] = strArrayIds[0];
            dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
            dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
            dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
            dr["CashFlow_Flag_ID"] = strArrayIds[4];
            dr["CashInFlow"] = ddlInflowDesc1.SelectedItem;

            dr["EntityID"] = ddlEntityName_InFlow1.SelectedValue;
            dr["Entity"] = ddlEntityName_InFlow1.SelectedText;
            dr["InflowFromId"] = ddlEntityName_InFlowFrom.SelectedValue;
            DtCashFlow.PrimaryKey = new DataColumn[] { DtCashFlow.Columns["Date"], DtCashFlow.Columns["CashInFlowID"], DtCashFlow.Columns["InflowFromId"], DtCashFlow.Columns["EntityID"] };
            dr["InflowFrom"] = ddlEntityName_InFlowFrom.SelectedItem;
            dr["Amount"] = txtAmount_Inflow1.Text;

            DtCashFlow.Rows.Add(dr);

            gvInflow.DataSource = DtCashFlow;
            gvInflow.DataBind();

            ViewState["DtCashFlow"] = DtCashFlow;
            FunPriGenerateNewInflow();

            /* Clear the IRR for Generating RepayStructure. If we calls FunPriIRRREset() here, It clears UMFC also. */
            txtAccountingIRR.Text = "";
            txtAccountIRR_Repay.Text = "";
            txtBusinessIRR.Text = "";
            txtBusinessIRR_Repay.Text = "";
            txtCompanyIRR.Text = "";
            txtCompanyIRR_Repay.Text = "";
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
    }

    private void FunPriRemoveInflow(GridViewDeleteEventArgs e)
    {
        try
        {
            DtCashFlow = (DataTable)ViewState["DtCashFlow"];
            if (DtCashFlow.Rows.Count > 0)
            {
                //FunPriIRRReset();
                txtAccountingIRR.Text = "";
                txtAccountIRR_Repay.Text = "";
                txtBusinessIRR.Text = "";
                txtBusinessIRR_Repay.Text = "";
                txtCompanyIRR.Text = "";
                txtCompanyIRR_Repay.Text = "";
                DtCashFlow.Rows.RemoveAt(e.RowIndex);
                ViewState["DtCashFlow"] = DtCashFlow;
                if (DtCashFlow.Rows.Count == 0)
                {
                    FunPriFillInflowDLL(strAddMode);
                }
                else
                {
                    gvInflow.DataSource = DtCashFlow;
                    gvInflow.DataBind();
                    FunPriGenerateNewInflow();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Remove Inflow");
        }
    }

    private void FunPriAssignInflowDateFormat(GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                TextBox txtDate_GridInflow1 = e.Row.FindControl("txtDate_GridInflow") as TextBox;
                txtDate_GridInflow1.Attributes.Add("onblur", "fnDoDate(this,'" + txtDate_GridInflow1.ClientID + "','" + strDateFormat + "',false,  false);");
                //txtDate_GridInflow1.Attributes.Add("readonly", "readonly");
                AjaxControlToolkit.CalendarExtender CalendarExtenderSD_InflowDate1 = e.Row.FindControl("CalendarExtenderSD_InflowDate") as AjaxControlToolkit.CalendarExtender;
                CalendarExtenderSD_InflowDate1.Format = ObjS3GSession.ProDateFormatRW;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Assign the DateFormat in Inflow");
        }
    }
    protected void gvInflow_RowDataBound1(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblAmount_Inflow = e.Row.FindControl("lblAmount_Inflow") as Label;
            lblAmount_Inflow.funPubChangeCurrencyFormat();
        }
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            TextBox txtDate_GridInflow1 = e.Row.FindControl("txtDate_GridInflow") as TextBox;

            txtDate_GridInflow1.Attributes.Add("onblur", "fnDoDate(this,'" + txtDate_GridInflow1.ClientID + "','" + strDateFormat + "',false,  false);");
            //txtDate_GridInflow1.Attributes.Add("readonly", "readonly");
            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_InflowDate1 = e.Row.FindControl("CalendarExtenderSD_InflowDate") as AjaxControlToolkit.CalendarExtender;
            CalendarExtenderSD_InflowDate1.Format = ObjS3GSession.ProDateFormatRW;
        }
    }
    protected void gvOutFlow_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblAmount_Outflow = e.Row.FindControl("lblAmount_Outflow") as Label;
            lblAmount_Outflow.funPubChangeCurrencyFormat();
        }

        if (e.Row.RowType == DataControlRowType.Footer)
        {
            TextBox txtDate_GridOutflow = e.Row.FindControl("txtDate_GridOutflow") as TextBox;
            txtDate_GridOutflow.Attributes.Add("onblur", "fnDoDate(this,'" + txtDate_GridOutflow.ClientID + "','" + strDateFormat + "',false,  false);");
            //txtDate_GridOutflow.Attributes.Add("readonly", "readonly");
            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_OutflowDate = e.Row.FindControl("CalendarExtenderSD_OutflowDate") as AjaxControlToolkit.CalendarExtender;
            CalendarExtenderSD_OutflowDate.Format = ObjS3GSession.ProDateFormatRW;

        }
    }
    private void FunPriLoadInflowCustomerEntityDLL()
    {
        try
        {
            //DropDownList ddlEntityName_InFlow = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_InFlow = gvInflow.FooterRow.FindControl("ddlEntityName_InFlow") as UserControls_S3GAutoSuggest;
            DropDownList ddlEntityName_InFlowFrom = gvInflow.FooterRow.FindControl("ddlEntityName_InFlowFrom") as DropDownList;

            if (ddlEntityName_InFlowFrom.SelectedItem.Text.ToUpper() == "CUSTOMER")
            {
                //if (S3GCustomerAddress1.CustomerName != string.Empty)
                //{
                //ddlEntityName_InFlow.Items.Clear();
                //ListItem lstItem = new ListItem(S3GCustomerAddress1.CustomerName, hdnCustID.Value);
                //ddlEntityName_InFlow.Items.Add(lstItem);

                ddlEntityName_InFlow.Clear();
                ddlEntityName_InFlow.SelectedValue = hdnCustID.Value;
                //ddlEntityName_InFlow.SelectedText = S3GCustomerAddress1.CustomerName;
                ddlEntityName_InFlow.ReadOnly = true;


                TextBox txtCustomerName = (TextBox)ucCustomerCodeLov.FindControl("txtName");


                if (txtCustomerName.Text != string.Empty) //SelectedIndex > 0)
                {
                    //ddlEntityName_InFlow.Items.Clear();
                    //ListItem lstItem = new ListItem(txtCustomerName.Text, hdnCustID.Value);
                    //ddlEntityName_InFlow.Items.Add(lstItem);
                    ddlEntityName_InFlow.SelectedValue = hdnCustID.Value;
                    ddlEntityName_InFlow.SelectedText = txtCustomerName.Text;

                }


                //}
            }
            else
            {
                ddlEntityName_InFlow.ReadOnly = false;
                ddlEntityName_InFlow.Clear();

                //ddlEntityName_InFlow.BindDataTable(((DataSet)ViewState["InflowDDL"]).Tables[1]);
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem,Unable to Load Customer/Entity Name");
        }

    }

    #endregion

    [System.Web.Services.WebMethod]
    public static string[] GetVendors(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Add("@Company_ID", obj_Page.intCompanyId.ToString());
        Procparam.Add("@Entity_Type", "DLR");
        Procparam.Add("@Program_Id", "38");
        Procparam.Add("@Pricing_Id", obj_Page.ddlApplicationNo.SelectedValue);
        Procparam.Add("@USERID", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        Procparam.Add("@PrefixText", prefixText);

        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_GET_ENTYMAST_Agt", Procparam));
        return suggetions.ToArray();

    }
    [System.Web.Services.WebMethod]
    public static string[] GetDC(String prefixText, int count)
    {
        List<String> suggetions = new List<String>();
        Dictionary<string, string> strProParm = new Dictionary<string, string>();
        strProParm.Add("@OPTION", "3");
        if (HttpContext.Current.Session["Company_Id"] != null)
            strProParm.Add("@COMPANYID", HttpContext.Current.Session["Company_Id"].ToString());
        if (HttpContext.Current.Session["User_Id"] != null)
            strProParm.Add("@USERID", HttpContext.Current.Session["User_Id"].ToString());
        strProParm.Add("@PROGRAMID", "38");
        strProParm.Add("@Prefix", prefixText);
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm));
        return suggetions.ToArray();


    }
    [System.Web.Services.WebMethod]
    public static string[] GetLeadSourceName(String prefixText, int count)
    {
        List<String> suggetions = new List<String>();
        Dictionary<string, string> strProParm = new Dictionary<string, string>();
        strProParm.Add("@OPTION", "4");
        if (HttpContext.Current.Session["Company_Id"] != null)
            strProParm.Add("@COMPANYID", HttpContext.Current.Session["Company_Id"].ToString());
        if (HttpContext.Current.Session["User_Id"] != null)
            strProParm.Add("@USERID", HttpContext.Current.Session["User_Id"].ToString());
        strProParm.Add("@PROGRAMID", "38");
        if (HttpContext.Current.Session["LeadSource"] != null)
        {
            strProParm.Add("@Lead_Source_Type", HttpContext.Current.Session["LeadSource"].ToString());
            if (HttpContext.Current.Session["LeadSource"].ToString() == "1")
            {
                strProParm.Add("@ENTITY_TYPE", "");
            }
            else if (HttpContext.Current.Session["LeadSource"].ToString() == "2")
            {
                strProParm.Add("@ENTITY_TYPE", "EMP");
            }
            else if (HttpContext.Current.Session["LeadSource"].ToString() == "3")
            {
                strProParm.Add("@ENTITY_TYPE", "DLR");
            }
        }
        strProParm.Add("@Prefix", prefixText);
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm));
        return suggetions.ToArray();


    }



    //[System.Web.Services.WebMethod]
    //public static void ddlLOB_SelectedIndexChanged_Page(string strValueLob)
    //{
    //    try
    //    {
    //        obj_Page.FunPriLoadLocation(obj_Page.intCompanyId, obj_Page.intUserId, obj_Page.intProgramID, Convert.ToInt32(strValueLob));
    //        obj_Page.funPriLoadProduct();
    //        //obj_Page.ddlLOB.Focus();
    //    }
    //    catch (Exception ex)
    //    {
    //        ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
    //    }
    //    finally
    //    {
    //    }
    //}

    [System.Web.Services.WebMethod]
    public static string[] LoadBranch()
    {
        //List<String> suggetions = new List<String>();
        //Dictionary<string, string> strProParm = new Dictionary<string, string>();
        //strProParm.Add("@OPTION", "3");
        //if (HttpContext.Current.Session["Company_Id"] != null)
        //    strProParm.Add("@COMPANYID", HttpContext.Current.Session["Company_Id"].ToString());
        //if (HttpContext.Current.Session["User_Id"] != null)
        //    strProParm.Add("@USERID", HttpContext.Current.Session["User_Id"].ToString());
        //strProParm.Add("@PROGRAMID", "38");
        //strProParm.Add("@Prefix", prefixText);
        //suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm));
        //return suggetions.ToArray();

        List<String> suggetions = new List<String>();
        DataTable dt = new DataTable();
        Dictionary<string, string> strProParm = new Dictionary<string, string>();
        strProParm.Add("@Company_Id", obj_Page.intCompanyId.ToString());
        strProParm.Add("@User_Id", obj_Page.intUserId.ToString());
        strProParm.Add("@Program_Id", obj_Page.intProgramID.ToString());
        strProParm.Add("@Lob_Id", "2");
        dt = Utility.GetDefaultData("RP_GET_BRN_DET", strProParm);
        suggetions = Utility.GetSuggestions(dt);
        return suggetions.ToArray();



    }



    [System.Web.Services.WebMethod]
    public static string[] GetAssetVendors(String prefixText, int count)
    {
        try
        {
            Dictionary<string, string> Procparam;
            Procparam = new Dictionary<string, string>();
            List<String> suggetions = new List<String>();
            DataTable dtCommon = new DataTable();
            DataSet Ds = new DataSet();

            DataTable PricingAssetDetails = (DataTable)obj_Page.Session["PricingAssetDetails"];
            DataRow[] dr = PricingAssetDetails.Select("Pay_To_ID=137 and Entity_Code like '%" + prefixText + "%'");

            DataTable dtAssetEntity = new DataTable();
            if (dr.Length == 0)
                dtAssetEntity = PricingAssetDetails.Clone();
            else
                dtAssetEntity = (dr.CopyToDataTable().Copy());

            dtAssetEntity.Columns["Entity_ID"].ColumnName = "ID";
            dtAssetEntity.Columns["Entity_Code"].ColumnName = "Name";

            suggetions = Utility.GetSuggestions(dtAssetEntity, true);

            return suggetions.ToArray();
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    #region Cash Out Flow
    private void FunPriFillOutflowDLL(string Mode)
    {
        try
        {
            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            Dictionary<string, string> objParameters = new Dictionary<string, string>();
            objParameters.Add("@CompanyId", intCompanyId.ToString());
            if (ddlLOB.SelectedValue != "0")
            {
                objParameters.Add("@LobId", ddlLOB.SelectedValue);
            }
            DataSet dsInflow = Utility.GetDataset("s3g_org_loadOutflowLov", objParameters);
            ViewState["OutflowDDL"] = dsInflow;

            if (Mode == strAddMode)
            {
                //Code modified by Nataraj Y
                DtCashFlowOut = new DataTable();
                DtCashFlowOut.Columns.Add("Date");
                DtCashFlowOut.Columns.Add("CashOutFlowID");
                DtCashFlowOut.Columns.Add("CashOutFlow");
                DtCashFlowOut.Columns.Add("EntityID");
                DtCashFlowOut.Columns.Add("Entity");
                DtCashFlowOut.Columns.Add("OutflowFromId");
                DtCashFlowOut.Columns.Add("OutflowFrom");
                DtCashFlowOut.Columns.Add("Amount");
                DtCashFlowOut.Columns.Add("Accounting_IRR");
                DtCashFlowOut.Columns.Add("Business_IRR");
                DtCashFlowOut.Columns.Add("Company_IRR");
                DtCashFlowOut.Columns.Add("CashFlow_Flag_ID", typeof(int));
                DtCashFlowOut.Columns["Amount"].DataType = typeof(decimal);
                DtCashFlowOut.PrimaryKey = new DataColumn[] { DtCashFlowOut.Columns["CashOutFlowID"], DtCashFlowOut.Columns["Date"], DtCashFlowOut.Columns["EntityID"] };
                DataRow dr_out = DtCashFlowOut.NewRow();
                dr_out["Date"] = "01/01/1900";
                dr_out["CashOutFlowID"] = "";
                dr_out["CashOutFlow"] = "";
                dr_out["EntityID"] = "";
                dr_out["Entity"] = "";
                dr_out["OutflowFromId"] = "";
                dr_out["OutflowFrom"] = "";
                dr_out["Amount"] = "0";
                dr_out["Accounting_IRR"] = "";
                dr_out["Business_IRR"] = "";
                dr_out["Company_IRR"] = "";
                dr_out["CashFlow_Flag_ID"] = 0;
                DtCashFlowOut.Rows.Add(dr_out);

            }
            if (Mode == strEditMode)
            {
                if ((DataTable)ViewState["DtCashFlowOut"] != null)
                    DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
            }
            gvOutFlow.DataSource = DtCashFlowOut;
            gvOutFlow.DataBind();

            if (Mode == strAddMode)
            {

                DtCashFlowOut.Rows.Clear();
                ViewState["DtCashFlowOut"] = DtCashFlowOut;
                DtCashFlowOut.Dispose();

                gvOutFlow.Rows[0].Cells.Clear();
                gvOutFlow.Rows[0].Visible = false;
            }
            FunPriGenerateNewOutflow();
            if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count > 0)
            {
                lblTotalOutFlowAmount.Text = ((DataTable)ViewState["DtCashFlowOut"]).
                    Compute("sum(Amount)", "CashOutFlowID > 0").ToString();
                lblTotalOutFlowAmount.funPubChangeCurrencyFormat();

            }
            else
                lblTotalOutFlowAmount.Text = "0";
        }
        catch (Exception ex)
        {
            //ObjCustomerService.Close();
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
        //finally
        //{
        //    if (ObjCustomerService != null)
        //        ObjCustomerService.Close();
        //}
    }

    private void FunPriGenerateNewOutflow()
    {
        try
        {
            DropDownList ddlInflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
            //DropDownList ddlEntityName_InFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_InFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as UserControls_S3GAutoSuggest;
            DropDownList ddlEntityName_InFlowFrom = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;

            Utility.FillDLL(ddlInflowDesc, ((DataSet)ViewState["OutflowDDL"]).Tables[2], true);
            if (ViewState["OutflowDDL"] != null)
            {
                DataTable dtCashFlowFrom = ((DataSet)ViewState["OutflowDDL"]).Tables[0];
                string vendor = (string)ViewState["vendor"];
                if (dtCashFlowFrom.Rows.Count > 1)
                {
                    switch (vendor)
                    {
                        case "vendor":
                            dtCashFlowFrom.Rows.RemoveAt(0);
                            break;
                        case "customer":
                            dtCashFlowFrom.Rows.RemoveAt(1);
                            break;
                    }
                    ((DataSet)ViewState["OutflowDDL"]).Merge(dtCashFlowFrom);
                }
                Utility.FillDLL(ddlEntityName_InFlowFrom, dtCashFlowFrom, true);
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
    }

    private void FunPriRemoveOutflow(GridViewDeleteEventArgs e)
    {
        try
        {
            DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
            if (DtCashFlowOut.Rows.Count > 0)
            {
                DtCashFlowOut.Rows.RemoveAt(e.RowIndex);
                ViewState["DtCashFlowOut"] = DtCashFlowOut;
                if (DtCashFlowOut.Rows.Count == 0)
                {
                    FunPriFillOutflowDLL(strAddMode);
                    lblTotalOutFlowAmount.Text = "0";
                    FunPriIRRReset();
                }
                else
                {

                    FunProBindCashFlow();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Remove Outflow");
        }
    }


    private void funpriResetZeroInterestCashoutflow()
    {
        DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
        DataRow[] dr = DtCashFlowOut.Select("CashFlow_Flag_ID in(109,28)");
        if (dr.Length > 0)
        {
            foreach (DataRow drr in dr)
            {
                drr.Delete();
            }
        }
        DtCashFlowOut.AcceptChanges();
        ViewState["DtCashFlowOut"] = DtCashFlowOut;

    }

    private void FunPriInsertOutflow(DataTable dtAcctype)
    {
        try
        {

            DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];

            TextBox txtDate_GridOutflow = gvOutFlow.FooterRow.FindControl("txtDate_GridOutflow") as TextBox;
            DropDownList ddlOutflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
            DropDownList ddlPaymentto_OutFlow = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
            //DropDownList ddlEntityName_OutFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_OutFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as UserControls_S3GAutoSuggest;
            TextBox txtAmount_Outflow = gvOutFlow.FooterRow.FindControl("txtAmount_Outflow") as TextBox;

            DataRow dr = DtCashFlowOut.NewRow();

            dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";
            if (Utility.CompareDates(txtApplicationDateDate.Text, txtDate_GridOutflow.Text) == -1)
            {
                // Utility.FunShowAlertMsg(this, "Outflow date cannot be less than Application date");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege5));
                return;
            }

            DtCashFlowOut.PrimaryKey = new DataColumn[] { DtCashFlowOut.Columns["Date"], DtCashFlowOut.Columns["CashOutFlowID"], DtCashFlowOut.Columns["OutflowFromId"], DtCashFlowOut.Columns["EntityID"] };
            dr["Date"] = Utility.StringToDate(txtDate_GridOutflow.Text);
            string[] strArrayIds = ddlOutflowDesc.SelectedValue.Split(',');
            if (strArrayIds[4] == "41")
            {
                if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().ToUpper() == "DEFERRED PAYMENT")
                {
                    //if (Utility.CompareDates(txtDate.Text, txtDate_GridOutflow.Text) == 0)
                    if (Utility.CompareDates(txtApplicationDateDate.Text, txtDate_GridOutflow.Text) != 0 && Utility.CompareDates(txtApplicationDateDate.Text, txtDate_GridOutflow.Text) != 1)
                    {
                        Utility.FunShowAlertMsg(this, "Outflow date should be greater than or equal to Application date for Deferred Payment");
                        return;
                    }



                    if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().ToUpper() == "DEFERRED PAYMENT")
                    {

                        if (Utility.StringToDate(txtDate_GridOutflow.Text) <= Utility.StringToDate(txtApplicationDateDate.Text))
                        {
                            //Utility.FunShowAlertMsg(this, "Outflow date should be greater than Application date for Deferred Payment");
                            Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege46));
                            return;

                        }



                    }





                    if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count > 0)
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(((DataTable)ViewState["DtCashFlowOut"]).
                            Compute("Count(CashFlow_Flag_ID)", "CashFlow_Flag_ID = 41 and " +
                            " Date <> #" + Utility.StringToDate(txtDate_GridOutflow.Text.Trim()) + "#"))))
                        {
                            Int32 IntTotalOutflow = (Int32)((DataTable)ViewState["DtCashFlowOut"]).
                                Compute("Count(CashFlow_Flag_ID)", "CashFlow_Flag_ID = 41 and " +
                                " Date <> #" + Utility.StringToDate(txtDate_GridOutflow.Text.Trim()) + "#");
                            if (IntTotalOutflow >= 1)
                            {
                                Utility.FunShowAlertMsg(this, "Finance amount Outflow date should " +
                                "be the same for all entities (" +
                                DateTime.Parse(((DataTable)ViewState["DtCashFlowOut"]).Rows[0]["Date"].ToString(),
                                CultureInfo.CurrentCulture).ToString(strDateFormat) + ")");
                                //Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege6));
                                //return;
                            }
                        }
                    }
                }

                if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString() == "Trade Advance" || dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString() == "Normal Payment")
                {
                    if (Utility.StringToDate(txtApplicationDateDate.Text) != Utility.StringToDate(txtDate_GridOutflow.Text))
                    {
                        //Utility.FunShowAlertMsg(this, "Outflow date should be equal to Application date for Normal Payment/Trade Advance");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege7));
                        return;
                    }
                }
            }

            if (DtCashFlowOut.Rows.Count > 0)
            {
                DataRow[] drDupCashFlow = DtCashFlowOut.Select(" Date ='"
                    + Utility.StringToDate(txtDate_GridOutflow.Text)
                    + "' and CashFlow_Flag_ID = " + strArrayIds[4]
                    + " and OutflowFromId = " + ddlPaymentto_OutFlow.SelectedValue
                    + " and EntityID = " + ddlEntityName_OutFlow.SelectedValue);

                if (drDupCashFlow.Count() > 0)
                {
                    //Utility.FunShowAlertMsg(this, "Cannot add duplicate Cash outflow");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege8));
                    return;
                }
            }

            dr["CashOutFlowID"] = strArrayIds[0];
            dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
            dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
            if (strArrayIds[3] != string.Empty)
            {
                dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
            }
            dr["CashFlow_Flag_ID"] = strArrayIds[4];
            dr["CashOutFlow"] = ddlOutflowDesc.SelectedItem;
            dr["OutflowFrom"] = ddlPaymentto_OutFlow.SelectedItem;
            dr["OutflowFromId"] = ddlPaymentto_OutFlow.SelectedValue;
            dr["EntityID"] = ddlEntityName_OutFlow.SelectedValue;
            dr["Entity"] = ddlEntityName_OutFlow.SelectedText;
            dr["Amount"] = txtAmount_Outflow.Text;
            DtCashFlowOut.Rows.Add(dr);
            DtCashFlowOut.AcceptChanges();
            ViewState["DtCashFlowOut"] = DtCashFlowOut;
            FunProBindCashFlow();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
    }

    protected void FunProBindCashFlow()
    {
        try
        {
            dcmTotalamount = 0;
            DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
            //lblTotalOutFlowAmount.Text = DtCashFlowOut.Compute("sum(Amount)", "CashOutFlowID > 0 and CashOutFlowID not in(28)").ToString();
            foreach (DataRow drrow in DtCashFlowOut.Rows)
            {
                string strOutFlowAmount = drrow["Amount"].ToString();
                if (strOutFlowAmount != "")
                {
                    dcmTotalamount = dcmTotalamount + Convert.ToDouble(strOutFlowAmount);
                    lblTotalOutFlowAmount.Text = dcmTotalamount.ToString();
                    lblTotalOutFlowAmount.funPubChangeCurrencyFormat();
                }
            }
            gvOutFlow.DataSource = DtCashFlowOut;
            gvOutFlow.DataBind();
            FunPriGenerateNewOutflow();
            FunPriIRRReset();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
    }

    private void FunPriLoadOutflowCustomerEntity()
    {
        try
        {
            //DropDownList ddlEntityName_InFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_InFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as UserControls_S3GAutoSuggest;
            DropDownList ddlPaymentto_OutFlow = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
            //Code Added by saran for UAT Fix in round 4 on 18-Jul-2012 start 
            TextBox txtAmount_Outflow = gvOutFlow.FooterRow.FindControl("txtAmount_Outflow") as TextBox;
            //Code Added by saran for UAT Fix in round 4 on 18-Jul-2012 end 
            ddlEntityName_InFlow.Clear();
            ddlEntityName_InFlow.ReadOnly = true;

            if (ddlPaymentto_OutFlow.SelectedItem.Text.ToUpper() == "CUSTOMER")
            {


                TextBox txtCustomerName = (TextBox)ucCustomerCodeLov.FindControl("txtName");


                if (txtCustomerName.Text != string.Empty) //SelectedIndex > 0)
                {
                    //ddlEntityName_InFlow.Items.Clear();
                    //ListItem lstItem = new ListItem(txtCustomerName.Text, hdnCustID.Value);
                    //ddlEntityName_InFlow.Items.Add(lstItem);
                    ddlEntityName_InFlow.SelectedValue = hdnCustID.Value;
                    ddlEntityName_InFlow.SelectedText = txtCustomerName.Text;

                }
            }
            else if (ddlPaymentto_OutFlow.SelectedItem.Text.ToUpper() == "ENTITY")
            {
                DropDownList ddlOutflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
                string[] strArrayIds = ddlOutflowDesc.SelectedValue.Split(',');
                DataSet dsDealer = new DataSet();

                ddlEntityName_InFlow.ServiceMethod = "GetVendors";
                ddlEntityName_InFlow.ReadOnly = false;
                ddlEntityName_InFlow.Clear();

                if (strArrayIds.Length >= 4)
                {
                    if (strArrayIds[4].ToString() == "41")
                    {
                        //Code Added by saran for UAT Fix in round 4 on 18-Jul-2012 start 
                        if (Session["PricingAssetDetails"] != null)
                        {
                            if (((DataTable)Session["PricingAssetDetails"]).Rows.Count > 0)
                            {
                                DataRow[] dr = ((DataTable)Session["PricingAssetDetails"]).Select("Pay_To_ID=137");//Entity
                                if (dr != null)
                                {
                                    if (dr.Length > 0)
                                    {
                                        string strEntity_Ids = "0";
                                        for (int i = 0; i < dr.Length; i++)
                                            strEntity_Ids += "," + dr[i]["Entity_ID"].ToString();

                                        DataRow[] drEntity = ((DataSet)ViewState["OutflowDDL"]).Tables[1].Select("Entity_ID in (" + strEntity_Ids + ")");
                                        if (drEntity != null)
                                        {
                                            if (drEntity.Length > 0)
                                            {
                                                //ddlEntityName_InFlow.ServiceMethod = "GetAssetVendors";
                                                ddlEntityName_InFlow.ServiceMethod = "GetVendors";
                                                //ddlEntityName_InFlow.BindDataTable(drEntity.CopyToDataTable());

                                                if (drEntity.Length == 1)
                                                {
                                                    //ddlEntityName_InFlow.SelectedIndex = 1;
                                                    //ddlEntityName_InFlow.ReadOnly = true;
                                                    ddlEntityName_InFlow.SelectedValue = drEntity[0]["Entity_ID"].ToString();
                                                    ddlEntityName_InFlow.SelectedText = drEntity[0]["Entity_Code"].ToString();

                                                    txtAmount_Outflow.Text = Utility.funPubChangeCurrencyFormat((txtFinanceAmount.Text));

                                                    if (ViewState["StartDelayRate"] != null)
                                                    {
                                                        txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                                                        txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix()));
                                                    }
                                                }
                                                return;
                                            }
                                        }
                                    }
                                }

                            }
                        }
                        //Code Added by saran for UAT Fix in round 4 on 18-Jul-2012 end 


                        DataRow[] drDealer = ((DataSet)ViewState["OutflowDDL"]).Tables[1].Select("Entity_Type_Name = 'Dealer'");
                        dsDealer.Merge(drDealer);
                    }
                    else
                    {
                        dsDealer.Merge(((DataSet)ViewState["OutflowDDL"]).Tables[1]);
                    }
                }
                //ddlEntityName_InFlow.BindDataTable(dsDealer.Tables[0]);
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem,Unable to Load Customer/Entity Name");
        }
    }

    private void FunPriAssignOutflowDateFormat(GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                TextBox txtDate_GridOutflow = e.Row.FindControl("txtDate_GridOutflow") as TextBox;
                txtDate_GridOutflow.Attributes.Add("onblur", "fnDoDate(this,'" + txtDate_GridOutflow.ClientID + "','" + strDateFormat + "',false,  false);");
                //txtDate_GridOutflow.Attributes.Add("readonly", "readonly");
                AjaxControlToolkit.CalendarExtender CalendarExtenderSD_OutflowDate = e.Row.FindControl("CalendarExtenderSD_OutflowDate") as AjaxControlToolkit.CalendarExtender;
                CalendarExtenderSD_OutflowDate.Format = ObjS3GSession.ProDateFormatRW;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            ///throw new ApplicationException("Due to Data Problem,Unable to Assign DateFormat in Outflow");
        }
    }

    #endregion

    #region Repayment Details

    private void FunPriFillRepaymentDLL(string Mode)
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {

            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            if (Mode == strAddMode)
            {
                gvRepaymentDetails.DataSource = null;
                gvRepaymentDetails.DataBind();
                ObjStatus.Option = 52;
                DtRepayGrid = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);


            }
            if (Mode == strEditMode)
            {
                if ((DataTable)ViewState["DtRepayGrid"] != null)
                    DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];

            }

            gvRepaymentDetails.DataSource = DtRepayGrid;
            gvRepaymentDetails.DataBind();

            if (Mode == strAddMode)
            {
                DtRepayGrid.Rows.Clear();
                ViewState["DtRepayGrid"] = DtRepayGrid;
                gvRepaymentDetails.Rows[0].Cells.Clear();
                gvRepaymentDetails.Rows[0].Visible = false;
            }

            FunPriGenerateNewRepayment();

        }
        catch (Exception ex)
        {
            //ObjCustomerService.Close();
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }
    }

    private void FunPriGenerateNewRepayment()
    {
        try
        {
            DropDownList ddlRepaymentCashFlow_RepayTab = gvRepaymentDetails.FooterRow.FindControl("ddlRepaymentCashFlow_RepayTab") as DropDownList;

            if (ViewState["InflowDDL"] != null)
            {
                DataSet dt = ((DataSet)ViewState["InflowDDL"]);
                if (dt.Tables[3].Rows.Count > 0)
                {
                    Utility.FillDLL(ddlRepaymentCashFlow_RepayTab, ((DataSet)ViewState["InflowDDL"]).Tables[3], true);
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Load Cashflow Description in Repayment");
        }
    }


    private void FunPriInsertRepayment()
    {
        try
        {
            DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];
            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
            DateTime dtNextFromdate; DateTime dtStartdate;
            DropDownList ddlRepaymentCashFlow_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("ddlRepaymentCashFlow_RepayTab") as DropDownList;
            TextBox txtAmountRepaymentCashFlow_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtAmountRepaymentCashFlow_RepayTab") as TextBox;
            TextBox txtPerInstallmentAmount_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtPerInstallmentAmount_RepayTab") as TextBox;
            TextBox txtBreakup_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtBreakup_RepayTab") as TextBox;
            TextBox txtFromInstallment_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;
            TextBox txtToInstallment_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtToInstallment_RepayTab") as TextBox;
            TextBox txtfromdate_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtfromdate_RepayTab") as TextBox;
            TextBox txtToDate_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtToDate_RepayTab") as TextBox;
            string[] strIds = ddlRepaymentCashFlow_RepayTab1.SelectedValue.ToString().Split(',');

            if (txtfromdate_RepayTab1.Text.Trim() != "" &&
                Utility.StringToDate(txtfromdate_RepayTab1.Text.Trim()) < Utility.StringToDate(txtApplicationDateDate.Text.Trim()))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('From Date should be greater than or Equal to Application Date');", true);
                return;
            }

            if (Convert.ToInt32(txtToInstallment_RepayTab1.Text) > Convert.ToInt32(txtTenure.Text))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('To Installment should not exceed Tenure');", true);
                txtToInstallment_RepayTab1.Focus();
                return;
            }

            // Code Added By R. Mankandan 11 - MAR - 2015
            // To the Mail Raised by Vishal should not allow user to select the date exit the tenure
            if (DtRepayGrid.Rows.Count == 0)
            {
                DateTime strRepaymentEndDate;
                if (ddlTenureType.SelectedValue == "136")
                    strRepaymentEndDate = (Utility.StringToDate(txtApplicationDateDate.Text)).AddDays(Convert.ToInt32(txtTenure.Text));
                else if (ddlTenureType.SelectedValue == "134")
                    strRepaymentEndDate = (Utility.StringToDate(txtApplicationDateDate.Text)).AddMonths(Convert.ToInt32(txtTenure.Text));
                else
                    strRepaymentEndDate = (Utility.StringToDate(txtApplicationDateDate.Text)).AddDays(Convert.ToInt32(txtTenure.Text) * 7);
                if (strRepaymentEndDate < Utility.StringToDate(txtfromdate_RepayTab1.Text))
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Repayment From Date cannot exit the total tenure');", true);
                    txtToInstallment_RepayTab1.Focus();
                    return;
                }
            }
            // code added by R. MAnikandan on 11-Mar-2015 End


            if (DtRepayGrid.Rows.Count > 0)
            {
                if (ddlLOB_SelectedItem_Text.Value.Contains("TL") || ddlLOB_SelectedItem_Text.Value.Contains("TE"))
                {
                    objRepaymentStructure.FunPubGetNextRepaydateTL(DtRepayGrid, ddl_Frequency.SelectedValue, ddlRepaymentCashFlow_RepayTab1.SelectedValue);
                }
                else
                {
                    objRepaymentStructure.FunPubGetNextRepaydate(DtRepayGrid, ddl_Frequency.SelectedValue);
                }
                if (txtfromdate_RepayTab1.Text != "")
                {
                    if (Utility.StringToDate(txtfromdate_RepayTab1.Text) < objRepaymentStructure.dtNextDate.Date)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('From and To Installment should not be overlapped');", true);
                        return;
                    }
                    /*Changed by Prabhu.K on 23-Nov-2011 for UAT Issue*/
                    else if (Utility.StringToDate(txtfromdate_RepayTab1.Text) != objRepaymentStructure.dtNextDate.Date && (ddlRepaymentCashFlow_RepayTab1.SelectedValue == "91" || ddlRepaymentCashFlow_RepayTab1.SelectedValue == "23"))
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('From Date should be " + objRepaymentStructure.dtNextDate.ToString(strDateFormat) + "');", true);
                        return;
                    }
                }
            }

            DataTable dtMoratorium = (DataTable)ViewState["dtMoratorium"];

            if (dtMoratorium.Rows.Count > 0 && strIds[4] == "23")
            {
                DataRow[] drMoratoriumRangeExist = dtMoratorium.Select("ToDate >= #" + Utility.StringToDate(txtfromdate_RepayTab1.Text) + "#");
                if (drMoratoriumRangeExist.Length > 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Selected Installment Period Exist in Moratorium');", true);
                    return;
                }
            }
            else
            {
                if (DtRepayGrid.Rows.Count > 0)
                {
                    DataRow[] drRepayDetail = null;
                    drRepayDetail = DtRepayGrid.Select(" CASHFLOW_FLAG_ID = " + strIds[4] +
                        " and (( " + txtFromInstallment_RepayTab1.Text.Trim() + " >= FROMINSTALL " +
                        " and " + txtFromInstallment_RepayTab1.Text.Trim() + " <= TOINSTALL ) or " +
                        " ( " + txtToInstallment_RepayTab1.Text.Trim() + " >= FROMINSTALL and " +
                        txtToInstallment_RepayTab1.Text.Trim() + " <= TOINSTALL) or " +
                        " ( FROMINSTALL >= " + txtFromInstallment_RepayTab1.Text.Trim() +
                        " and FROMINSTALL <= " + txtToInstallment_RepayTab1.Text.Trim() + " ))");
                    if (drRepayDetail.Count() > 0)
                    {
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('From and To Installment should not be overlaped');", true);
                        txtToInstallment_RepayTab1.Focus();
                        return;
                    }
                }
            }

            Dictionary<string, string> objMethodParameters = new Dictionary<string, string>();
            objMethodParameters.Add("REPAYMODE", ddl_Repayment_Mode.SelectedItem.Text.ToString());
            //objMethodParameters.Add("LOB", ddlLOB.SelectedItem.Text.ToString());
            objMethodParameters.Add("LOB", ddlLOB_SelectedItem_Text.Value.ToString());
            objMethodParameters.Add("CashFlow", ddlRepaymentCashFlow_RepayTab1.SelectedItem.Text);
            objMethodParameters.Add("CashFlowId", ddlRepaymentCashFlow_RepayTab1.SelectedValue);
            objMethodParameters.Add("PerInstall", txtPerInstallmentAmount_RepayTab1.Text);
            objMethodParameters.Add("Breakup", txtBreakup_RepayTab1.Text);
            objMethodParameters.Add("FromInstall", txtFromInstallment_RepayTab1.Text);
            objMethodParameters.Add("ToInstall", txtToInstallment_RepayTab1.Text);
            objMethodParameters.Add("FromDate", txtfromdate_RepayTab1.Text);
            objMethodParameters.Add("Frequency", ddl_Frequency.SelectedValue);
            objMethodParameters.Add("TenureType", ddlTenureType.SelectedItem.Text);
            objMethodParameters.Add("Tenure", txtTenure.Text);

            // Modified By R. Manikandan to validate Tenure Not exist first Instalment date
            if (ddl_Repayment_Mode.SelectedValue == "2" && DtRepayGrid.Rows.Count > 0)
                objMethodParameters.Add("DocumentDate", DtRepayGrid.Rows[0]["fromdate"].ToString());
            else
            {
                if (txtfromdate_RepayTab1.Text.Trim() != string.Empty)
                {
                    objMethodParameters.Add("DocumentDate", Utility.StringToDate(txtfromdate_RepayTab1.Text).ToString());
                }
                else
                {
                    objMethodParameters.Add("DocumentDate", DtRepayGrid.Rows[0]["fromdate"].ToString());
                }
            }
            // objMethodParameters.Add("DocumentDate", txtDate.Text);
            // Modification End 
            dtStartdate = Utility.StringToDate(txtApplicationDateDate.Text);
            string strErrorMessage = "";
            if (ddlLOB_SelectedItem_Text.Value.Contains("TL") || ddlLOB_SelectedItem_Text.Value.Contains("TE"))
            {
                objMethodParameters.Add("repayMode_id", ddl_Repayment_Mode.SelectedValue);
                objMethodParameters.Add("Levy", ddl_Interest_Levy.SelectedItem.Value);

                //Checking if other than normal payment , start date should be last payment date.
                if (ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
                {
                    DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
                    dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";
                    string strAcctType = dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper();

                    if (strAcctType == "PROJECT FINANCE" || strAcctType == "DEFERRED PAYMENT" || strAcctType == "DEFERRED STRUCTURED")
                    {
                        DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
                        if (DtCashFlowOut.Rows.Count > 0)
                        {
                            DataRow drOutFlw = DtCashFlowOut.Select("CashFlow_Flag_ID=41").Last();
                            if (drOutFlw != null)
                            {
                                objMethodParameters.Remove("DocumentDate");
                                objMethodParameters.Add("DocumentDate", drOutFlw["Date"].ToString());
                                dtStartdate = Utility.StringToDate(drOutFlw["Date"].ToString());
                            }
                        }

                    }
                }
                //objRepaymentStructure.FunPubAddRepaymentforTL(out dtNextFromdate, out strErrorMessage, out DtRepayGrid, DtRepayGrid, objMethodParameters);
                objRepaymentStructure.FunPubAddRepayment(out dtNextFromdate, out strErrorMessage, out DtRepayGrid, DtRepayGrid, objMethodParameters);
            }
            else
            {
                objRepaymentStructure.FunPubAddRepayment(out dtNextFromdate, out strErrorMessage, out DtRepayGrid, DtRepayGrid, objMethodParameters);
            }

            if (strErrorMessage != "")
            {
                //Utility.FunShowAlertMsg(this, strErrorMessage);
                Utility.FunShowAlertMsg(this, strErrorMessage);
                return;
            }
            if (strIds[4] == "23")
            {
                decimal decIRRActualAmount = 0;
                decimal decTotalAmount = 0;

                decimal DecRoundOff;
                if (Convert.ToString(ViewState["hdnRoundOff"]) != "")
                    DecRoundOff = Convert.ToDecimal(ViewState["hdnRoundOff"]);
                else
                    DecRoundOff = 2;

                if (!((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))))
                {
                    if (ddlLifeInsurance.SelectedValue == "2")
                    {

                        if (!objRepaymentStructure.FunPubValidateTotalAmount(DtRepayGrid, (Convert.ToDecimal(txtFinanceAmount.Text) + Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text)).ToString(), txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue, hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, out decIRRActualAmount, out decTotalAmount, "1", DecRoundOff))
                        {
                            DtRepayGrid.Rows.RemoveAt(DtRepayGrid.Rows.Count - 1);
                            //Utility.FunShowAlertMsg(this, "Total Amount Should be equal to finance amount + interest (" + decTotalAmount + ")");
                            Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege10));
                            return;
                        }
                    }
                    else
                    {
                        if (!objRepaymentStructure.FunPubValidateTotalAmount(DtRepayGrid, txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue, hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, out decIRRActualAmount, out decTotalAmount, "1", DecRoundOff))
                        {
                            DtRepayGrid.Rows.RemoveAt(DtRepayGrid.Rows.Count - 1);
                            //Utility.FunShowAlertMsg(this, "Total Amount Should be equal to finance amount + interest (" + decTotalAmount + ")");
                            Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege10));
                            return;
                        }
                    }
                }
                //else
                //{
                //    int intValidation = objRepaymentStructure.FunPubValidateTotalAmountTL((DataTable)ViewState["DtRepayGrid"], txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue, txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, out decIRRActualAmount, out decTotalAmount, "", DecRoundOff);
                //    if (intValidation == 1)
                //    {
                //        Utility.FunShowAlertMsg(this, "Total Amount Should be equal to finance amount + interest (" + decTotalAmount + ")");
                //        return;
                //    }
                //    else if (intValidation == 2)
                //    {
                //        Utility.FunShowAlertMsg(this, "Principal Amount Should be equal to finance amount (" + txtFinanceAmount.Text + ")");
                //        return;
                //    }
                //    else if (intValidation == 3)
                //    {
                //        Utility.FunShowAlertMsg(this, "Total Amount Should be equal to interest (" + (decTotalAmount - Convert.ToDecimal(txtFinanceAmount.Text)).ToString() + ")");
                //        return;
                //    }
                //    else if (intValidation == 6)
                //    {
                //        Utility.FunShowAlertMsg(this, "No Principal and Interest amount entered to calculate");
                //        return;
                //    }
                //    else if (intValidation == 4)
                //    {
                //        Utility.FunShowAlertMsg(this, "No Principal amount entered to calculate");
                //        return;
                //    }
                //    else if (intValidation == 5)
                //    {
                //        Utility.FunShowAlertMsg(this, "No Interest amount entered to calculate");
                //        return;
                //    }
                //}
            }

            gvRepaymentDetails.DataSource = DtRepayGrid;
            gvRepaymentDetails.DataBind();

            TextBox txtFromInstallment_RepayTab1_upd = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;

            if (gvRepaymentDetails.Rows.Count > 0)
            {
                Label lblToInstallment_Upd = (Label)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lblToInstallment_RepayTab");
                txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(Convert.ToDecimal(lblToInstallment_Upd.Text.Trim()) + Convert.ToInt32("1"));
            }



            TextBox txtfromdate_RepayTab1_Upd = gvRepaymentDetails.FooterRow.FindControl("txtfromdate_RepayTab") as TextBox;
            txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(dtNextFromdate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);

            //if (ddl_Rate_Type.SelectedItem.Text == "Floating" && string.IsNullOrEmpty(txtFBDate.Text))
            //{
            //    ((TextBox)gvRepaymentDetails.Rows[0].FindControl("txRepaymentFromDate")).Visible = true;
            //    ((Label)gvRepaymentDetails.Rows[0].FindControl("lblfromdate_RepayTab")).Visible = false;
            //}
            //else
            //{
            ((TextBox)gvRepaymentDetails.Rows[0].FindControl("txRepaymentFromDate")).Visible = false;
            ((Label)gvRepaymentDetails.Rows[0].FindControl("lblfromdate_RepayTab")).Visible = true;
            //}

            ViewState["DtRepayGrid"] = DtRepayGrid;

            if (ViewState["DtRepayGrid_TL"] != null)
            {
                DataTable DtRepayGrid_TL = (DataTable)ViewState["DtRepayGrid_TL"];
                DataRow drow = DtRepayGrid_TL.NewRow();

                for (int i = 0; i <= DtRepayGrid_TL.Columns.Count - 1; i++)
                {
                    drow[i] = DtRepayGrid.Rows[DtRepayGrid.Rows.Count - 1][i].ToString();
                }

                DtRepayGrid_TL.Rows.Add(drow);
                ViewState["DtRepayGrid_TL"] = DtRepayGrid_TL;
            }

            FunPriGenerateNewRepayment();
            FunPriIRRReset();
            FunPriCalculateSummary(DtRepayGrid, "CashFlow", "TotalPeriodInstall");
            ((LinkButton)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lnRemoveRepayment")).Visible = true;


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
    }
    private decimal FunPriGetAmountFinanced()
    {
        decimal decFinanaceAmt = 0;
        try
        {

            decFinanaceAmt = Convert.ToDecimal(txtFinanceAmount.Text);// -FunPriGetMarginAmout();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Error in getting finance amount");
        }
        return Math.Round(decFinanaceAmt, ObjS3GSession.ProGpsSuffixRW);
    }

    private string Funsetsuffix()
    {

        int suffix = 1;

        // S3GSession ObjS3GSession = new S3GSession();
        suffix = ObjS3GSession.ProGpsSuffixRW;
        // suffix = 0;
        string strformat = "0.";
        for (int i = 1; i <= suffix; i++)
        {
            strformat += "0";
        }
        return strformat;
    }
    private void FunPriAssignMarginAmount()
    {
        try
        {
            if (!string.IsNullOrEmpty(txt_Margin_Percentage.Text))
            {
                if (Convert.ToDecimal(txt_Margin_Percentage.Text) > 100)
                {
                    Utility.FunShowAlertMsg(this, "Margin Percentage Should not exceed the 100");
                    txt_Margin_Percentage.Text = string.Empty;
                    txtMarginMoneyPer_Cashflow.Text = txtMarginMoneyAmount_Cashflow.Text = "";
                    return;
                }

                txtMarginMoneyPer_Cashflow.Text = txt_Margin_Percentage.Text;
                txtMarginMoneyPer_Cashflow.ReadOnly = true;
                txtMarginMoneyAmount_Cashflow.ReadOnly = true;
                txtMarginMoneyAmount_Cashflow.Text = FunPriGetMarginAmout().ToString(Funsetsuffix());

            }
            else
            {
                txtMarginMoneyPer_Cashflow.Text = txtMarginMoneyAmount_Cashflow.Text = "";
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Assign the Margin Amount");
        }
    }
    private bool FunPriValidateTotalAmount(out decimal decActualAmount, out decimal decTotalAmount, string strOption)
    {


        //try
        //{
        if (strOption != "3")
        {
            decTotalAmount = FunPriGetAmountFinanced() + Math.Round(S3GBusEntity.CommonS3GBusLogic.FunPubInterestAmount(ddlTenureType.SelectedItem.Text, FunPriGetAmountFinanced(), Convert.ToDecimal(hdnRate.Value), Convert.ToInt32(txtTenure.Text)), 0);
        }
        else
        {
            decTotalAmount = FunPriGetAmountFinanced();
        }
        decActualAmount = 0;
        if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count <= 0)
        {
            cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + " Add atleast one row Repayment details";
            cvApplicationProcessing.IsValid = false;
            return false;
        }
        DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];
        foreach (DataRow drRepyrow in DtRepayGrid.Rows)
        {
            decActualAmount += (Convert.ToDecimal(drRepyrow["TotalPeriodInstall"].ToString()));
        }
        if (strOption == "1")
        {
            if (decActualAmount > decTotalAmount)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        else if (strOption == "2")
        {
            if (decActualAmount == decTotalAmount)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else if (strOption == "3")
        {
            if (decActualAmount >= decTotalAmount)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
        //}
        //catch (Exception ex)
        //{
        //    ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        //    //throw new ApplicationException("Unable to Validate Total Amount");
        //}

    }

    private bool FunPriValidateTenurePeriod(DateTime dtStartDate, DateTime dtEndDate)
    {
        DateTime dateInterval = new DateTime();
        bool blnIsvalid = true;
        try
        {
            switch (ddlTenureType.SelectedItem.Text.ToLower())
            {
                case "monthly":
                    dateInterval = dtStartDate.AddMonths(Convert.ToInt32(txtTenure.Text));
                    break;
                case "weeks":

                    int intAddweeks = Convert.ToInt32(txtTenure.Text) * 7;
                    dateInterval = dtStartDate.AddDays(intAddweeks);
                    break;
                case "days":
                    dateInterval = dtStartDate.AddDays(Convert.ToInt32(txtTenure.Text));
                    break;
            }
            if (dtEndDate > dateInterval)
            {
                blnIsvalid = false;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Validate Tenure Period with Tenure Type");
        }
        return blnIsvalid;
    }

    private bool FunPriValidateTenurePeriod(int intActualTenurePeriod)
    {
        bool blnIsValid = false;
        try
        {
            if (intActualTenurePeriod == Convert.ToInt32(txtTenure.Text))
            {
                blnIsValid = true;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Validate Tenure with Tenure Type");
        }
        return blnIsValid;
    }

    private void FunPriCalculateSummary(DataTable objDataTable, string strGroupByField, string strSumField)
    {
        try
        {

            DataTable dtRepay = (DataTable)ViewState["RepaymentStructure"];

            DataTable dtSummaryDetails = Utility.FunPriCalculateSumAmount(objDataTable, strGroupByField, strSumField);
            DataRow[] dr = dtSummaryDetails.Select("1=1");
            if (dr[0]["TotalPeriodInstall"].ToString() != string.Empty)
            {
                dr[0]["TotalPeriodInstall"] = Math.Round(Convert.ToDecimal(dr[0]["TotalPeriodInstall"]), 3);
            }


            //if (ViewState["InflowDDL"] != null)
            //{
            //    DataTable dtRepaymentCashFlow3 = ((DataSet)ViewState["InflowDDL"]).Tables[3];
            //    if (dtRepaymentCashFlow3 != null)
            //    {
            //        DataRow[] dr7 = dtRepaymentCashFlow3.Select("CashFlow_Flag_ID='" + 108 + "'");//Insurance to Customer
            //        if (dr7.Length > 0)
            //        {
            //            string strCashflowDesc = dr7[0]["CASHFLOW_DESCRIPTION"].ToString();
            //            if (txtLifeInsuranceCustomerPremiumAmount.Text != string.Empty && txtLifeInsuranceCustomerPremiumAmount.Text != "0")
            //            {
            //                if (dtSummaryDetails.Rows.Count > 0)
            //                {
            //                    DataRow dr2 = dtSummaryDetails.NewRow();
            //                    dr2["CashFlow"] = strCashflowDesc;
            //                    dr2["TotalPeriodInstall"] = Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text).ToString(Funsetsuffix());
            //                    dtSummaryDetails.Rows.Add(dr2);
            //                }
            //            }
            //        }
            //    }
            //}


            if (ViewState["RepaymentStructure"] != null)
            {
                string decDealCommission = string.Empty;
                decDealCommission = funPriDatatTableSum(dtRepay, "PrincipalAmount").ToString();
                if (decDealCommission != string.Empty)
                {

                    if (dtSummaryDetails.Rows.Count > 0)
                    {
                        DataRow dr2 = dtSummaryDetails.NewRow();
                        dr2["CashFlow"] = "PRINCIPAL AMOUNT";
                        dr2["TotalPeriodInstall"] = Convert.ToDecimal(decDealCommission).ToString(Funsetsuffix());
                        dtSummaryDetails.Rows.Add(dr2);
                    }

                }
            }
            if (ViewState["RepaymentStructure"] != null)
            {
                string decDealCommission = string.Empty;
                decDealCommission = funPriDatatTableSum(dtRepay, "FinanceCharges").ToString();
                if (decDealCommission != string.Empty)
                {

                    if (dtSummaryDetails.Rows.Count > 0)
                    {
                        DataRow dr2 = dtSummaryDetails.NewRow();
                        dr2["CashFlow"] = "FINANCE CHARGES";
                        dr2["TotalPeriodInstall"] = Convert.ToDecimal(decDealCommission).ToString(Funsetsuffix());
                        dtSummaryDetails.Rows.Add(dr2);
                    }

                }
            }


            if (ViewState["RepaymentStructure"] != null)
            {
                string decDealCommission = string.Empty;
                decDealCommission = funPriDatatTableSum(dtRepay, "Deal_Commission").ToString();
                if (decDealCommission != string.Empty)
                {

                    if (dtSummaryDetails.Rows.Count > 0)
                    {
                        DataRow dr2 = dtSummaryDetails.NewRow();
                        dr2["CashFlow"] = "DEAL.COMMISSION";
                        dr2["TotalPeriodInstall"] = Convert.ToDecimal(decDealCommission).ToString(Funsetsuffix());
                        dtSummaryDetails.Rows.Add(dr2);
                    }

                }
            }

            if (ViewState["RepaymentStructure"] != null)
            {
                string decDealCommission = string.Empty;
                decDealCommission = funPriDatatTableSum(dtRepay, "INSURANCE_AMT").ToString();
                if (decDealCommission != string.Empty)
                {

                    if (dtSummaryDetails.Rows.Count > 0)
                    {
                        DataRow dr2 = dtSummaryDetails.NewRow();
                        dr2["CashFlow"] = "LIP CUSTOMER";
                        dr2["TotalPeriodInstall"] = Convert.ToDecimal(decDealCommission).ToString(Funsetsuffix());
                        dtSummaryDetails.Rows.Add(dr2);
                    }

                }
            }
            if (ViewState["RepaymentStructure"] != null)
            {
                string decDealCommission = string.Empty;
                decDealCommission = funPriDatatTableSum(dtRepay, "INSURANCE_PAYABLE").ToString();
                if (decDealCommission != string.Empty)
                {
                    if (dtSummaryDetails.Rows.Count > 0)
                    {
                        DataRow dr2 = dtSummaryDetails.NewRow();
                        dr2["CashFlow"] = "LIP COMPANY";
                        dr2["TotalPeriodInstall"] = Convert.ToDecimal(decDealCommission).ToString(Funsetsuffix());
                        dtSummaryDetails.Rows.Add(dr2);
                    }
                }
            }
            dtSummaryDetails.AcceptChanges();
            gvRepaymentSummary.DataSource = dtSummaryDetails;
            gvRepaymentSummary.DataBind();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Calculate Repayment Summary");
        }

    }

    private decimal funPriDatatTableSum(DataTable dataTable, string strColumn)
    {
        decimal sum = 0;
        foreach (DataRow dr in dataTable.Rows)
        {
            if (dr[strColumn].ToString() != string.Empty)
            {
                sum += Convert.ToDecimal(dr[strColumn]);
            }
        }
        return sum;
    }

    private void FunPriRemoveRepayment(GridViewDeleteEventArgs e)
    {
        try
        {
            DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];
            if (ViewState["DtRepayGrid_TL"] != null)
            {
                DataTable DtRepayGrid_TL = (DataTable)ViewState["DtRepayGrid_TL"];
                if (DtRepayGrid_TL.Rows.Count > 0)
                {
                    DtRepayGrid_TL.Rows.RemoveAt(DtRepayGrid_TL.Rows.Count - 1);
                }
            }
            if (DtRepayGrid.Rows.Count > 0)
            {
                DtRepayGrid.Rows.RemoveAt(e.RowIndex);

                if (DtRepayGrid.Rows.Count == 0)
                {
                    FunPriFillRepaymentDLL(strAddMode);
                    gvRepaymentSummary.DataSource = null;
                    gvRepaymentSummary.DataBind();
                }
                else
                {
                    gvRepaymentDetails.DataSource = DtRepayGrid;
                    gvRepaymentDetails.DataBind();
                    FunPriGenerateNewRepayment();
                    TextBox txtFromInstallment_RepayTab1_upd = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;
                    Label lblToInstallment_Upd = (Label)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lblToInstallment_RepayTab");
                    txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(Convert.ToDecimal(lblToInstallment_Upd.Text.Trim()) + Convert.ToInt32("1"));
                    TextBox txtfromdate_RepayTab1_Upd = gvRepaymentDetails.FooterRow.FindControl("txtfromdate_RepayTab") as TextBox;
                    Label lblTODate_ReapyTab_Upd = (Label)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lblTODate_ReapyTab");
                    DateTime dtTodate = Utility.StringToDate(lblTODate_ReapyTab_Upd.Text);
                    DateTime dtNextFromdate = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedItem.Text, dtTodate);
                    txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(dtNextFromdate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                    FunPriCalculateSummary(DtRepayGrid, "CashFlow", "TotalPeriodInstall");
                    if (ddl_Repayment_Mode.SelectedValue != "2")
                    {
                        Label lblCashFlowId = (Label)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lblCashFlow_Flag_ID");
                        if (lblCashFlowId.Text != "23")
                        {
                            ((LinkButton)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lnRemoveRepayment")).Visible = true;
                        }
                    }
                    else
                    {
                        ((LinkButton)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lnRemoveRepayment")).Visible = true;
                    }
                }
            }
            grvRepayStructure.DataSource = null;
            grvRepayStructure.DataBind();
            FunPriIRRReset();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem,Unable to Remove Repayment");
        }
    }



    private void FunPriBindRepaymentDetails(GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                Label lblPerInstallmentAmount_RepayTab = e.Row.FindControl("lblPerInstallmentAmount_RepayTab") as Label;
                lblPerInstallmentAmount_RepayTab.funPubChangeCurrencyFormat();

                intSlNo += 1;
                e.Row.Cells[0].Text = intSlNo.ToString();
                if (Request.QueryString["qsMode"] != null)
                {
                    if (Request.QueryString["qsMode"].ToString() == "Q")
                    {
                        AjaxControlToolkit.CalendarExtender calext_FromDate = e.Row.FindControl("calext_FromDate") as AjaxControlToolkit.CalendarExtender;
                        calext_FromDate.Enabled = false;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Load Repayment Details");
        }
    }



    private void FunPriAssignRepaymentDateFormat(GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                TextBox txtToDate_RepayTab = e.Row.FindControl("txtToDate_RepayTab") as TextBox;
                txtToDate_RepayTab.Attributes.Add("readonly", "readonly");
                AjaxControlToolkit.CalendarExtender CalendarExtenderSD_ToDate_RepayTab = e.Row.FindControl("CalendarExtenderSD_ToDate_RepayTab") as AjaxControlToolkit.CalendarExtender;
                CalendarExtenderSD_ToDate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;

                TextBox txtfromdate_RepayTab = e.Row.FindControl("txtfromdate_RepayTab") as TextBox;
                //txtfromdate_RepayTab.Attributes.Add("readonly", "readonly");
                AjaxControlToolkit.CalendarExtender CalendarExtenderSD_fromdate_RepayTab = e.Row.FindControl("CalendarExtenderSD_fromdate_RepayTab") as AjaxControlToolkit.CalendarExtender;
                CalendarExtenderSD_fromdate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;
            }
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                AjaxControlToolkit.CalendarExtender calext_FromDate = e.Row.FindControl("calext_FromDate") as AjaxControlToolkit.CalendarExtender;
                calext_FromDate.Format = ObjS3GSession.ProDateFormatRW;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Assign Date Format in Repayment Details");
        }
    }

    #endregion

    #region Alert

    private void FunPriFillAlertDLL(string Mode)
    {
        try
        {


            Dictionary<string, string> objParameters = new Dictionary<string, string>();
            objParameters.Add("@CompanyId", intCompanyId.ToString());
            objParameters.Add("@ProgramId", "38");
            DataSet dsAlert = Utility.GetDataset("s3g_org_loadAlertLov", objParameters);

            //added by saranya on 08-Mar-2012 based on sudarsan observation to add Programs in Type field
            //DataRow[] dr = dsAlert.Tables[0].Select("ID in(141,143,218, 220, 222)"); //Changed by Thangam M on 08/Nov/2012
            //DataTable dtAlert = dr.CopyToDataTable();
            DataTable dtAlert = dsAlert.Tables[0];
            ViewState["AlertDDL"] = dtAlert;
            ViewState["AlertUser"] = dsAlert;
            //End Here

            if (Mode == strAddMode)
            {

                DataTable ObjDT = new DataTable();


                ObjDT.Columns.Add("Type");
                ObjDT.Columns.Add("TypeID");
                ObjDT.Columns.Add("UserContact");
                ObjDT.Columns.Add("UserContactID");
                ObjDT.Columns.Add("EMail");
                ObjDT.Columns["Email"].DataType = typeof(Boolean);
                ObjDT.Columns.Add("SMS");
                ObjDT.Columns["SMS"].DataType = typeof(Boolean);
                ObjDT.Columns.Add("User_Type_Id", typeof(Int32));
                ObjDT.Columns.Add("User_Type", typeof(string));

                DataRow dr_Alert = ObjDT.NewRow();
                dr_Alert["Type"] = "";
                dr_Alert["TypeID"] = "";
                dr_Alert["UserContact"] = "";
                dr_Alert["UserContactID"] = "";
                dr_Alert["EMail"] = "False";
                dr_Alert["SMS"] = "False";
                ObjDT.Rows.Add(dr_Alert);

                gvAlert.DataSource = ObjDT;
                gvAlert.DataBind();

                ObjDT.Rows.Clear();
                ViewState["DtAlertDetails"] = ObjDT;

                gvAlert.Rows[0].Cells.Clear();
                gvAlert.Rows[0].Visible = false;

            }
            FunPriGenerateNewAlert();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
        //finally
        //{
        //    if (ObjCustomerService != null)
        //        ObjCustomerService.Close();
        //}
    }

    private void FunPriGenerateNewAlert()
    {

        try
        {
            DropDownList ObjddlType_AlertTab = gvAlert.FooterRow.FindControl("ddlType_AlertTab") as DropDownList;
            //Removed By Shibu 18-Sep-2013
            //  DropDownList ObjddlContact_AlertTab = gvAlert.FooterRow.FindControl("ddlContact_AlertTab") as DropDownList;
            UserControls_S3GAutoSuggest ddlContact_AlertTab = gvAlert.FooterRow.FindControl("ddlContact_AlertTab") as UserControls_S3GAutoSuggest;
            Utility.FillDLL(ObjddlType_AlertTab, ((DataTable)ViewState["AlertDDL"]), true);
            //Utility.FillDLL(ObjddlContact_AlertTab, ((DataSet)ViewState["AlertUser"]).Tables[1], true);
        }

        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriInsertAlert()
    {
        try
        {
            DtAlertDetails = (DataTable)ViewState["DtAlertDetails"];

            DropDownList ddlAlert_Type = gvAlert.FooterRow.FindControl("ddlType_AlertTab") as DropDownList;
            //  DropDownList ddlAlert_ContactList = gvAlert.FooterRow.FindControl("ddlContact_AlertTab") as DropDownList;
            UserControls_S3GAutoSuggest ddlContact_AlertTab = gvAlert.FooterRow.FindControl("ddlContact_AlertTab") as UserControls_S3GAutoSuggest;
            CheckBox ChkAlertEmail = gvAlert.FooterRow.FindControl("ChkEmail") as CheckBox;
            CheckBox ChkAlertSMS = gvAlert.FooterRow.FindControl("ChkSMS") as CheckBox;

            if (ChkAlertEmail.Checked || ChkAlertSMS.Checked)
            {

                if (DtAlertDetails.Rows.Count > 0)
                {
                    foreach (DataRow dr2 in DtAlertDetails.Rows)
                    {
                        //Sathish R--16-OCT-2018

                        if ((dr2["TypeId"].ToString() == ddlAlert_Type.SelectedValue) &&
                            (dr2["UserContactId"].ToString() == ddlContact_AlertTab.SelectedValue))
                        {
                            Utility.FunShowAlertMsg(this, " Selected combination already exists");
                            return;
                        }

                        if (dr2["TypeId"].ToString() == "141")
                        {
                            Utility.FunShowAlertMsg(this, "All Type Exists Other Type not Allowed");
                            return;
                        }
                        if (dr2["TypeId"].ToString() != "141" && ddlAlert_Type.SelectedValue == "141")
                        {
                            Utility.FunShowAlertMsg(this, "Other Type Exists All Type not Allowed");
                            return;
                        }

                    }


                }



                DataRow dr = DtAlertDetails.NewRow();

                dr["TypeId"] = ddlAlert_Type.SelectedValue;
                dr["Type"] = ddlAlert_Type.SelectedItem.Text.ToUpper();
                dr["UserContactId"] = ddlContact_AlertTab.SelectedValue.ToString();
                dr["UserContact"] = ddlContact_AlertTab.SelectedText.ToUpper();
                dr["EMail"] = ChkAlertEmail.Checked;
                dr["SMS"] = ChkAlertSMS.Checked;

                DtAlertDetails.Rows.Add(dr);

                gvAlert.DataSource = DtAlertDetails;
                gvAlert.DataBind();
                ViewState["DtAlertDetails"] = DtAlertDetails;
                FunPriGenerateNewAlert();
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Select Email or SMS');", true);

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Add Alert");
        }
    }

    private void FunPriRemoveAlert(GridViewDeleteEventArgs e)
    {
        try
        {
            DtAlertDetails = (DataTable)ViewState["DtAlertDetails"];
            if (DtAlertDetails.Rows.Count > 0)
            {
                DtAlertDetails.Rows.RemoveAt(e.RowIndex);

                if (DtAlertDetails.Rows.Count == 0)
                {
                    FunPriFillAlertDLL(strAddMode);
                }
                else
                {
                    gvAlert.DataSource = DtAlertDetails;
                    gvAlert.DataBind();
                    FunPriGenerateNewAlert();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Remove Alert Details");
        }
    }

    #endregion

    #region Follow Up

    private void FunPriFillFollowupDLL(string Mode)
    {
        ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        try
        {

            //ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            DataTable ObjDT = new DataTable();
            bool blIsFooterRow = false;
            if (Mode == strAddMode)
            {
                ObjStatus.Option = 47;
                ObjStatus.Param1 = null;
                ObjDT = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
                ObjDT.Columns.Add("FromUserId");
                ObjDT.Columns.Add("ToUserId");
                blIsFooterRow = true;
            }
            if (!blIsFooterRow)
                ObjDT = (DataTable)ViewState["DtFollowUp"];

            gvFollowUp.DataSource = ObjDT;
            gvFollowUp.DataBind();

            if (Mode == strAddMode)
            {
                ObjDT.Rows.Clear();
                ViewState["DtFollowUp"] = ObjDT;
                if (gvFollowUp.Rows.Count > 0)
                {
                    gvFollowUp.Rows[0].Cells.Clear();
                    gvFollowUp.Rows[0].Visible = false;
                }
            }
            FunPriGenerateNewFollowUp();


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
        finally
        {
            //if (ObjCustomerService != null)
            ObjCustomerService.Close();
        }

    }

    private void FunPriGenerateNewFollowUp()
    {
        try
        {
            //Removed By Shibu 18-Sep-2013
            //DropDownList ddlfrom_GridFollowup = gvFollowUp.FooterRow.FindControl("ddlfrom_GridFollowup") as DropDownList;
            UserControls_S3GAutoSuggest ddlfrom_GridFollowup = gvFollowUp.FooterRow.FindControl("ddlfrom_GridFollowup") as UserControls_S3GAutoSuggest;
            //DropDownList ddlTo_GridFollowup = gvFollowUp.FooterRow.FindControl("ddlTo_GridFollowup") as DropDownList;
            UserControls_S3GAutoSuggest ddlTo_GridFollowup = gvFollowUp.FooterRow.FindControl("ddlTo_GridFollowup") as UserControls_S3GAutoSuggest;
            //Utility.FillDLL(ddlfrom_GridFollowup, ((DataTable)ViewState["UserListFolloup"]), true);
            //Utility.FillDLL(ddlTo_GridFollowup, ((DataTable)ViewState["UserListFolloup"]), true);


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Load From/To UserName in Followup Details");
        }
    }

    private void FunPriInsertFollowup()
    {
        try
        {
            DtFollowUp = (DataTable)ViewState["DtFollowUp"];

            TextBox txttxtDate_GridFollowup1 = gvFollowUp.FooterRow.FindControl("txtDate_GridFollowup") as TextBox;
            //Removed By Shibu 18-Sep-2013
            //DropDownList ddlfrom_GridFollowup1 = gvFollowUp.FooterRow.FindControl("ddlfrom_GridFollowup") as DropDownList;
            //DropDownList ddlTo_GridFollowup1 = gvFollowUp.FooterRow.FindControl("ddlTo_GridFollowup") as DropDownList;
            UserControls_S3GAutoSuggest ddlfrom_GridFollowup1 = gvFollowUp.FooterRow.FindControl("ddlfrom_GridFollowup") as UserControls_S3GAutoSuggest;
            UserControls_S3GAutoSuggest ddlTo_GridFollowup1 = gvFollowUp.FooterRow.FindControl("ddlTo_GridFollowup") as UserControls_S3GAutoSuggest;


            TextBox txtAction_GridFollowup1 = gvFollowUp.FooterRow.FindControl("txtAction_GridFollowup") as TextBox;
            TextBox txtActionDate_GridFollowup1 = gvFollowUp.FooterRow.FindControl("txtActionDate_GridFollowup") as TextBox;
            TextBox txtCustomerResponse_GridFollowup1 = gvFollowUp.FooterRow.FindControl("txtCustomerResponse_GridFollowup") as TextBox;
            TextBox txtRemarks_GridFollowup1 = gvFollowUp.FooterRow.FindControl("txtRemarks_GridFollowup") as TextBox;
            if (Utility.CompareDates(txttxtDate_GridFollowup1.Text, txtActionDate_GridFollowup1.Text) != 1 && Utility.CompareDates(txttxtDate_GridFollowup1.Text, txtActionDate_GridFollowup1.Text) != 0)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Followup Details", "alert('Action Date should be greater than or Equal to Date in Followup');", true);
                return;
            }
            if (ddlfrom_GridFollowup1.SelectedValue == ddlTo_GridFollowup1.SelectedValue)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Followup Details", "alert('From and To UserName should be different');", true);
                return;
            }


            DataRow dr = DtFollowUp.NewRow();
            dr["Date"] = Utility.StringToDate(txttxtDate_GridFollowup1.Text);
            dr["From"] = ddlfrom_GridFollowup1.SelectedText.ToUpper();
            dr["FromUserId"] = ddlfrom_GridFollowup1.SelectedValue;
            dr["To"] = ddlTo_GridFollowup1.SelectedText.ToUpper();
            dr["ToUserId"] = ddlTo_GridFollowup1.SelectedValue;
            dr["Action"] = txtAction_GridFollowup1.Text.ToUpper();
            dr["ActionDate"] = Utility.StringToDate(txtActionDate_GridFollowup1.Text);
            dr["CustomerResponse"] = txtCustomerResponse_GridFollowup1.Text.ToUpper();
            dr["Remarks"] = txtRemarks_GridFollowup1.Text.ToUpper();

            DtFollowUp.Rows.Add(dr);

            gvFollowUp.DataSource = DtFollowUp;
            gvFollowUp.DataBind();

            ViewState["DtFollowUp"] = DtFollowUp;
            FunPriGenerateNewFollowUp();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Add Followup");
        }
    }

    private void FunPriRemoveFollowup(GridViewDeleteEventArgs e)
    {
        try
        {
            DtFollowUp = (DataTable)ViewState["DtFollowUp"];
            if (DtFollowUp.Rows.Count > 0)
            {
                DtFollowUp.Rows.RemoveAt(e.RowIndex);

                if (DtFollowUp.Rows.Count == 0)
                {
                    FunPriFillFollowupDLL(strAddMode);
                }
                else
                {
                    gvFollowUp.DataSource = DtFollowUp;
                    gvFollowUp.DataBind();
                    FunPriGenerateNewFollowUp();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Remove Followup");
        }
    }

    private void FunPriAssignFollowupDateFormat(GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                TextBox txtDate_GridFollowup = e.Row.FindControl("txtDate_GridFollowup") as TextBox;
                txtDate_GridFollowup.Attributes.Add("readonly", "readonly");
                AjaxControlToolkit.CalendarExtender CalendarExtenderSD_FollowupDate = e.Row.FindControl("CalendarExtenderSD_FollowupDate") as AjaxControlToolkit.CalendarExtender;
                CalendarExtenderSD_FollowupDate.Format = ObjS3GSession.ProDateFormatRW;

                TextBox txtActionDate_GridFollowup = e.Row.FindControl("txtActionDate_GridFollowup") as TextBox;
                txtActionDate_GridFollowup.Attributes.Add("readonly", "readonly");
                AjaxControlToolkit.CalendarExtender CalendarExtenderSD_FollowupActionDate = e.Row.FindControl("CalendarExtenderSD_FollowupActionDate") as AjaxControlToolkit.CalendarExtender;
                CalendarExtenderSD_FollowupActionDate.Format = ObjS3GSession.ProDateFormatRW;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Assign Date Format in Followup");
        }

    }

    #endregion

    #region Constitution Document

    private void FunPriLoadConsitutionBasedCustomer(int intCustomerId)
    {
        objProcedureParameter = new Dictionary<string, string>();
        try
        {
            objProcedureParameter.Add("@CompanyId", intCompanyId.ToString());
            objProcedureParameter.Add("@IsActive", "1");
            objProcedureParameter.Add("@CustomerId", intCustomerId.ToString());
            objProcedureParameter.Add("@Lob_Id", ddlLOB.SelectedValue);
            grvConsDocuments.BindGridView("S3G_OR_Get_ConstCust", objProcedureParameter);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Load the Constitution Documents");
        }
    }
    protected void lnkScannedReference_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriShowConsDocImage(sender);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriShowConsDocImage(object sender)
    {
        try
        {
            string strFieldAtt = ((LinkButton)sender).ClientID;
            int gRowIndex = Utility.FunPubGetGridRowID("grvConsDocuments", strFieldAtt);
            Label lblPath = grvConsDocuments.Rows[gRowIndex].FindControl("lblDocumentPath") as Label;
            string strFileName = lblPath.Text.Replace("\\", "/").Trim();
            string strScipt = "window.open('../Common/S3GViewFile.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to View the Document");
        }
    }
    private void FunPriBindConstitutionDocuments(GridViewRowEventArgs e)
    {
        try
        {
            e.Row.Cells[0].Visible = false;

            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                TextBox txtVal = (TextBox)e.Row.FindControl("txtValues");
                CheckBox ObjchkIsMandatory = (CheckBox)e.Row.FindControl("chkIsMandatory");
                CheckBox ObjchkIsNeedImageCopy = (CheckBox)e.Row.FindControl("chkIsNeedImageCopy");

                ObjchkIsMandatory.Enabled = false;
                ObjchkIsNeedImageCopy.Enabled = false;
                CheckBox chkScanned = (CheckBox)e.Row.FindControl("chkScanned");
                CheckBox chkCollect = (CheckBox)e.Row.FindControl("chkCollected");
                LinkButton lnkScannedReference = (LinkButton)e.Row.FindControl("lnkScannedReference");
                //chkScanned.Enabled = !chkScanned.Checked; //if yes then disabled
                //lnkScannedReference.Enabled = chkScanned.Checked; // if yes then enabled

                lnkScannedReference.Enabled = chkScanned.Checked;

                //added by saranya
                chkCollect.Enabled = false;
                chkScanned.Enabled = false;
                //lnkScannedReference.Enabled = false;
                TextBox Remarks = (TextBox)e.Row.FindControl("txtRemark");
                TextBox txtValues = (TextBox)e.Row.FindControl("txtValues");
                Remarks.ReadOnly = true;
                txtValues.ReadOnly = true;
                //end


                if (txtVal != null)
                {
                    txtVal.Enabled = FunPriDisableValueField(e.Row.Cells[1].Text);
                }
                if (strMode == "Q")
                {
                    CheckBox chkCollected = (CheckBox)e.Row.FindControl("chkCollected");
                    TextBox txtRemarks = (TextBox)e.Row.FindControl("txtRemark");
                    chkCollected.Enabled = chkScanned.Enabled = false;
                    txtVal.ReadOnly = txtRemarks.ReadOnly = true;
                    txtRemarks.ToolTip = txtRemarks.Text;
                }
                if (ddlApplicationNo.SelectedValue != "0")
                {
                    CheckBox chkCollected = (CheckBox)e.Row.FindControl("chkCollected");
                    TextBox txtRemarks = (TextBox)e.Row.FindControl("txtRemark");
                    chkCollected.Enabled = chkScanned.Enabled = false;
                    txtVal.ReadOnly = txtRemarks.ReadOnly = true;
                    txtRemarks.ToolTip = txtRemarks.Text;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Load Constitution Document Details");
        }
    }

    #endregion

    #region Guarantor / Invoice / Collateral

    private void FunPriFillGuarantorDLL()
    {
        OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
        try
        {

            Dictionary<string, string> objParameters = new Dictionary<string, string>();
            objParameters.Add("@CompanyId", intCompanyId.ToString());
            DataSet dsGuarantor = Utility.GetDataset("s3g_org_loadGuarantorLov", objParameters);
            ViewState["GuarantorDDL"] = dsGuarantor;
            if (ViewState["mode"].ToString() == strAddMode)
            {
                ObjStatus.Option = 53;
                ObjStatus.Param1 = null;
                DtRepayGrid = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                gvGuarantor.DataSource = DtRepayGrid;
                gvGuarantor.DataBind();

                DtRepayGrid.Rows.Clear();
                ViewState["dtGuarantorGrid"] = DtRepayGrid;

                gvGuarantor.Rows[0].Cells.Clear();
                gvGuarantor.Rows[0].Visible = false;

            }
            if (ViewState["mode"].ToString() == strEditMode)
            {
                if (ViewState["dtGuarantorGrid"] != null)
                {
                    DtRepayGrid = (DataTable)ViewState["dtGuarantorGrid"];
                    gvGuarantor.DataSource = DtRepayGrid;
                    gvGuarantor.DataBind();
                }
            }
            if (DtRepayGrid.Rows.Count == 1)
            {
                if (DtRepayGrid.Rows[0]["GUARANTORTYPE"].ToString() == "150")
                {
                    hdnIsGuarantor.Value = "1";
                }
                else
                {
                    hdnIsGuarantor.Value = "0";
                }

            }
            FunPriGenerateNewGuarantor();
        }

        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
        finally
        {
            ObjStatus = null;
            ObjCustomerService.Close();
        }
    }

    private void FunPriGenerateNewGuarantor()
    {
        try
        {
            if (gvGuarantor.Rows.Count > 0)
            {

                DropDownList ddlGuarantortype_GuarantorTab1 = gvGuarantor.FooterRow.FindControl("ddlGuarantortype_GuarantorTab") as DropDownList;
                DropDownList ddlNatureofRelation = gvGuarantor.FooterRow.FindControl("ddlNatureofRelation") as DropDownList;

                //DropDownList ddlCode_GuarantorTab1 = gvGuarantor.FooterRow.FindControl("ddlCode_GuarantorTab") as DropDownList;
                DropDownList ddlChargesequence_GuarantorTab1 = gvGuarantor.FooterRow.FindControl("ddlChargesequence_GuarantorTab") as DropDownList;
                UserControls_CommonSearch ucCustomerLov = gvGuarantor.FooterRow.FindControl("ucCustomerLov") as UserControls_CommonSearch;
                ucCustomerLov.strControlID = ucCustomerLov.ClientID;
                Utility.FillDLL(ddlGuarantortype_GuarantorTab1, ((DataSet)ViewState["GuarantorDDL"]).Tables[0], true);
                FunPriSetWhiteSpaceDLL(ddlGuarantortype_GuarantorTab1);

                //ddlCode_GuarantorTab1.BindDataTable((DataTable)Session["CustomerDT"], new string[] {"Customer_Id","Customer_Code","Customer_Name" });

                Utility.FillDLL(ddlChargesequence_GuarantorTab1, ((DataSet)ViewState["GuarantorDDL"]).Tables[1], true);
                Utility.FillDLL(ddlNatureofRelation, ((DataSet)ViewState["GuarantorDDL"]).Tables[2], true);
                FunPriSetWhiteSpaceDLL(ddlChargesequence_GuarantorTab1);

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Load Guarantor Type/Code/Charge Sequence in Guarantor");
        }
    }
    protected void ddlGuarantortype_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            ViewState["Guarantee"] = "G";

            DropDownList ddlGuarantortype_GuarantorTab1 = gvGuarantor.FooterRow.FindControl("ddlGuarantortype_GuarantorTab") as DropDownList;
            UserControls_CommonSearch ucCustomerLov = gvGuarantor.FooterRow.FindControl("ucCustomerLov") as UserControls_CommonSearch;
            if (ddlGuarantortype_GuarantorTab1.SelectedIndex > 0)
            {
                if (ddlGuarantortype_GuarantorTab1.SelectedItem.Text.StartsWith("G") && ddlGuarantortype_GuarantorTab1.SelectedItem.Text.EndsWith("1"))
                {
                    ucCustomerLov.strLOV_Code = "GCMD";
                    ucCustomerLov.ButtonEnabled = true;
                }
                else if (ddlGuarantortype_GuarantorTab1.SelectedItem.Text.Contains("G") && ddlGuarantortype_GuarantorTab1.SelectedItem.Text.Contains("2"))
                {
                    ucCustomerLov.strLOV_Code = "PCMD";
                    ucCustomerLov.ButtonEnabled = true;
                }
                else
                {
                    //For Co-Applicant
                    ucCustomerLov.strLOV_Code = "COAP";
                    ucCustomerLov.ButtonEnabled = true;
                }
                ViewState["Type"] = ucCustomerLov.strLOV_Code;

            }
            ucCustomerLov.strControlID = ucCustomerLov.ClientID;


            if (ddlGuarantortype_GuarantorTab1.SelectedValue == "-1")
            {
                ucCustomerLov.ButtonEnabled = false;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        //Page_Load(null, null);
    }
    private void FunPriInsertGuarantor()
    {
        try
        {
            DtRepayGrid = (DataTable)ViewState["dtGuarantorGrid"];

            TextBox txtFromDate = gvGuarantor.FooterRow.FindControl("txtFromDate") as TextBox;
            DropDownList ddlGuarantortype_GuarantorTab = gvGuarantor.FooterRow.FindControl("ddlGuarantortype_GuarantorTab") as DropDownList;
            DropDownList ddlNatureofRelation = gvGuarantor.FooterRow.FindControl("ddlNatureofRelation") as DropDownList;
            //DropDownList ddlCode_GuarantorTab = gvGuarantor.FooterRow.FindControl("ddlCode_GuarantorTab") as DropDownList;
            DropDownList ddlChargesequence_GuarantorTab = gvGuarantor.FooterRow.FindControl("ddlChargesequence_GuarantorTab") as DropDownList;
            TextBox txtGuaranteeamount_GuarantorTab = gvGuarantor.FooterRow.FindControl("txtGuaranteeamount_GuarantorTab_Footer") as TextBox;
            UserControls_CommonSearch ucCustomerLov = gvGuarantor.FooterRow.FindControl("ucCustomerLov") as UserControls_CommonSearch;
            HiddenField hdnCustomerId = ucCustomerLov.FindControl("hdnID") as HiddenField;
            TextBox txtName = ucCustomerLov.FindControl("txtName") as TextBox;
            if (txtName.Text == "")
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Guarantor Details", "alert('Select the Guarantor');", true);
                return;
            }
            if (hdnCustID.Value == hdnCustomerId.Value)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Guarantor Details", "alert('Guarantor should be other than Customer');", true);
                return;
            }
            DataRow[] drDuplicateGuarantor = DtRepayGrid.Select("Code = " + hdnCustomerId.Value);
            if (drDuplicateGuarantor.Length > 0)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Guarantor Details", "alert('Guarantor already Exists');", true);
                return;
            }
            DataRow dr = DtRepayGrid.NewRow();

            dr["Guarantortype"] = ddlGuarantortype_GuarantorTab.SelectedValue;
            dr["Guarantor"] = ddlGuarantortype_GuarantorTab.SelectedItem.Text;
            dr["Code"] = hdnCustomerId.Value;
            dr["Name"] = txtName.Text;
            dr["Amount"] = txtGuaranteeamount_GuarantorTab.Text;
            if (ddlChargesequence_GuarantorTab.SelectedIndex > 0)
            {
                dr["Charge"] = ddlChargesequence_GuarantorTab.SelectedValue;
                dr["ChargeSequence"] = ddlChargesequence_GuarantorTab.SelectedItem.Text;
            }

            dr["View"] = "View";
            dr["Nature_of_Relation_ID"] = ddlNatureofRelation.SelectedValue;
            dr["Nature_of_Relation"] = ddlNatureofRelation.SelectedItem.Text;
            //dr["EFFEC_DATE"] = Utility.StringToDate(txtFromDate.Text).ToString(strDateFormat);
            DtRepayGrid.Rows.Add(dr);

            gvGuarantor.DataSource = DtRepayGrid;
            gvGuarantor.DataBind();

            ViewState["dtGuarantorGrid"] = DtRepayGrid;
            FunPriGenerateNewGuarantor();
            FunPriSetMaxLength_gvGuarantor();
            if (ddlGuarantortype_GuarantorTab.SelectedValue == "150")
            {
                if (DtRepayGrid.Rows.Count == 1)
                {

                    hdnIsGuarantor.Value = "1";
                }
                else
                {
                    hdnIsGuarantor.Value = "0";
                }
            }
            else
                hdnIsGuarantor.Value = "0";
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Add Guarantor");
        }
    }

    private void FunPriRemoveGuarantor(GridViewDeleteEventArgs e)
    {
        try
        {
            DtRepayGrid = (DataTable)ViewState["dtGuarantorGrid"];
            Label ddlGuarantortype_GuarantorTab = gvGuarantor.Rows[e.RowIndex].FindControl("ddlGuarantortype_GuarantorTab") as Label;
            if (ddlGuarantortype_GuarantorTab.Text == "Co-applicant")
            {
                hdnIsGuarantor.Value = "0";
            }

            if (DtRepayGrid.Rows.Count > 0)
            {
                DtRepayGrid.Rows.RemoveAt(e.RowIndex);

                if (DtRepayGrid.Rows.Count == 0)
                {
                    ViewState["mode"] = strAddMode;
                    FunPriFillGuarantorDLL();
                }
                else
                {
                    gvGuarantor.DataSource = DtRepayGrid;
                    gvGuarantor.DataBind();
                    FunPriGenerateNewGuarantor();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Remove Guarantor");
        }
    }

    private void FunPriBindGuarantorDetails(GridViewRowEventArgs e)
    {

        try
        {

            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                DataTable dtAccts = new DataTable();

                Label lblGuaranteeID = e.Row.FindControl("lblGuaranteeID") as Label;
                Label txtGuaranteeamount_GuarantorTab = e.Row.FindControl("txtGuaranteeamount_GuarantorTab") as Label;
                txtGuaranteeamount_GuarantorTab.funPubChangeCurrencyFormat();
                LinkButton lbtnViewCustomer = e.Row.FindControl("lbtnViewCustomer") as LinkButton;

                if (lbtnViewCustomer != null && lblGuaranteeID != null)
                {
                    FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(lblGuaranteeID.Text, false, 0);
                    lbtnViewCustomer.Attributes.Add("onclick", "window.open('../Credit Admin/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes&qsCustomerId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q', 'null','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');return false;");
                }
            }
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                TextBox txtGuaranteeamount_GuarantorTab_Footer = e.Row.FindControl("txtGuaranteeamount_GuarantorTab_Footer") as TextBox;
                txtGuaranteeamount_GuarantorTab_Footer.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, "Guarantee Amount");
                AjaxControlToolkit.CalendarExtender CalGuarantee = e.Row.FindControl("CalGuarantee") as AjaxControlToolkit.CalendarExtender;
                CalGuarantee.Format = strDateFormat;
                UserControls_CommonSearch ucCustomerLov = e.Row.FindControl("ucCustomerLov") as UserControls_CommonSearch;
                //TextBox txtName = ucCustomerLov.FindControl("txtName") as TextBox;
                //txtName.Attributes.Add("onchange", "fnCheckGuarantor('" + ucCustomerLov.ClientID + "');");
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Load Guarantor Details");
        }
    }

    private static void FunPriBindInvoiceDetails(GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                //Label lblInvoiceReferNo = e.Row.FindControl("lblInvoiceReferNo") as Label;
                //LinkButton lbtnViewInvoice = e.Row.FindControl("lbtnViewInvoice") as LinkButton;
                //if (lbtnViewInvoice != null && lblInvoiceReferNo != null)
                //{
                //    FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(lblInvoiceReferNo.Text, false, 0);
                //    //lbtnViewInvoice.Attributes.Add("onclick", "window.open('../LoanAdmin/S3GLoanAdInvoiceVendor_Add.aspx?qsViewId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q&IsFromAccount=Yes', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');return false;");
                //    string myURL = "window.showModalDialog('../LoanAdmin/S3GLoanAdInvoiceVendor_Add.aspx?qsViewId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q&IsFromAccount=Yes','#1','dialogHeight: 600; dialogWidth: 950;dialogTop: 190px;  dialogLeft: 220px; edge: Raised; center: No;help: No; resizable: No; status: No;')";
                //    lbtnViewInvoice.Attributes.Add("onclick", myURL);
                //}
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem,Unable to Load Invoice Details");
        }
    }

    protected void lbtnViewAccts_OnClick(object sender, EventArgs e)
    {

        try
        {
            string strFieldAtt = ((LinkButton)sender).ClientID;
            string strVal = strFieldAtt.Substring(strFieldAtt.LastIndexOf("gvGuarantor_")).Replace("gvGuarantor_ctl", "");
            int gRowIndex = Convert.ToInt32(strVal.Substring(0, strVal.LastIndexOf("_")));
            gRowIndex = gRowIndex - 2;

            foreach (GridViewRow row in gvGuarantor.Rows)
            {
                if (row.RowIndex == gRowIndex)
                {
                    row.BackColor = ColorTranslator.FromHtml("#E0E0E0");
                }
                else
                {
                    row.BackColor = ColorTranslator.FromHtml("#FFFFFF");
                }
            }


            Label lblGuaranteeID = (Label)gvGuarantor.Rows[gRowIndex].FindControl("lblGuaranteeID");

            DataTable dtAccts = new DataTable();
            Dictionary<string, string> Procparam;
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", intCompanyId.ToString());
            Procparam.Add("@Guarantee_ID", lblGuaranteeID.Text);
            dtAccts = Utility.GetDefaultData("S3G_OR_GET_GUAR_INFO", Procparam);

            if (dtAccts.Rows.Count > 0)
            {
                pnlLoanaccts.Visible = true;
                //divAccts.Style.Add("display", "block");
                grvLoanaccts.DataSource = dtAccts;
                grvLoanaccts.DataBind();
            }
            else
            {
                pnlLoanaccts.Visible = true;
                //divAccts.Style.Add("display", "block");
                grvLoanaccts.EmptyDataText = "Guarantor has no loan accounts";
                grvLoanaccts.DataBind();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    #endregion

    #region MLA / SLA

    private void FunPriShowMLAROIDetails(DataTable ObjDt)
    {
        try
        {
            DataTable ObjDTPaymentGen = new DataTable();
            DataColumn dc1 = new DataColumn("FieldName");
            DataColumn dc2 = new DataColumn("FieldValue");
            ObjDTPaymentGen.Columns.Add(dc1);
            ObjDTPaymentGen.Columns.Add(dc2);

            for (int i = 0; i < ObjDt.Columns.Count; i++)
            {
                DataRow dr = ObjDTPaymentGen.NewRow();
                dr[0] = ObjDt.Columns[i].ColumnName.Replace("_", " ");

                if (ObjDt.Rows.Count > 0)
                    dr[1] = ObjDt.Rows[0][i].ToString();
                else
                    dr[1] = string.Empty;
                ObjDTPaymentGen.Rows.Add(dr);
            }

            //gv_MLAROI.DataSource = ObjDTPaymentGen;
            //gv_MLAROI.DataBind();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Load ROI Details in Prime Account Tab");

        }
    }

    #endregion

    #region Moratorium

    private void FunPriFillMoratoriumDLL()
    {
        OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();

        try
        {

            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

            ObjStatus.Option = 1;
            ObjStatus.Param1 = "MORATORIUM_TYPE";
            ViewState["MoratoriumType"] = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

            if (ViewState["mode"].ToString() == strAddMode)
            {
                ObjStatus.Option = 54;
                ObjStatus.Param1 = null;
                DtRepayGrid = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

                //gvMoratorium.DataSource = DtRepayGrid;
                //gvMoratorium.DataBind();

                //DtRepayGrid.Rows.Clear();
                ViewState["dtMoratorium"] = DtRepayGrid;

                //gvMoratorium.Rows[0].Cells.Clear();
                //gvMoratorium.Rows[0].Visible = false;


            }
            if (ViewState["mode"].ToString() == strEditMode)
            {
                if (ViewState["dtMoratorium"] != null)
                {
                    DtRepayGrid = (DataTable)ViewState["dtMoratorium"];
                    //gvMoratorium.DataSource = DtRepayGrid;
                    //gvMoratorium.DataBind();
                }
            }
            //TextBox txtFromdate_MoratoriumTab = gvMoratorium.FooterRow.FindControl("txtFromdate_MoratoriumTab") as TextBox;
            //TextBox txtTodate_MoratoriumTab = gvMoratorium.FooterRow.FindControl("txtTodate_MoratoriumTab") as TextBox;
            //AjaxControlToolkit.CalendarExtender CalendarExtenderSD_ToDate_MoratoriumTab1 = gvMoratorium.FooterRow.FindControl("CalendarExtenderSD_ToDate_MoratoriumTab") as AjaxControlToolkit.CalendarExtender;
            //AjaxControlToolkit.CalendarExtender CalendarExtenderSD_FromDate_MoratoriumTab1 = gvMoratorium.FooterRow.FindControl("CalendarExtenderSD_FromDate_MoratoriumTab") as AjaxControlToolkit.CalendarExtender;

            //txtFromdate_MoratoriumTab.Attributes.Add("readonly", "readonly");
            //txtTodate_MoratoriumTab.Attributes.Add("readonly", "readonly");
            //CalendarExtenderSD_ToDate_MoratoriumTab1.Format = strDateFormat;
            //CalendarExtenderSD_FromDate_MoratoriumTab1.Format = strDateFormat;

            FunPriGenerateNewMoratorium();
            //ObjCustomerService.Close();

        }
        catch (FaultException<AccountMgtServicesReference.ClsPubFaultException> objFaultExp)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objFaultExp);
            //ObjCustomerService.Close();
            throw objFaultExp;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //ObjCustomerService.Close();
            throw ex;
        }
        finally
        {
            ObjCustomerService.Close();
        }
    }

    private void FunPriGenerateNewMoratorium()
    {
        try
        {
            //AjaxControlToolkit.CalendarExtender CalendarExtenderSD_ToDate_MoratoriumTab1 = gvMoratorium.FooterRow.FindControl("CalendarExtenderSD_ToDate_MoratoriumTab") as AjaxControlToolkit.CalendarExtender;
            //AjaxControlToolkit.CalendarExtender CalendarExtenderSD_FromDate_MoratoriumTab1 = gvMoratorium.FooterRow.FindControl("CalendarExtenderSD_FromDate_MoratoriumTab") as AjaxControlToolkit.CalendarExtender;
            //CalendarExtenderSD_ToDate_MoratoriumTab1.Format = strDateFormat;
            //CalendarExtenderSD_FromDate_MoratoriumTab1.Format = strDateFormat;

            //DropDownList ddlMoratoriumtype_MoratoriumTab = gvMoratorium.FooterRow.FindControl("ddlMoratoriumtype_MoratoriumTab") as DropDownList;
            //Utility.FillDLL(ddlMoratoriumtype_MoratoriumTab, ((DataTable)ViewState["MoratoriumType"]), true);
            //DtRepayGrid = (DataTable)ViewState["dtMoratorium"];
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Unable to Load Moratorium Type");
        }
    }

    private void FunPriSetDLLSelecteItem(DropDownList ObjDrop, string str)
    {
        try
        {
            if (!string.IsNullOrEmpty(str))
            {
                ObjDrop.SelectedValue = str;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
    }

    private void FunPriInsertMoratorium()
    {
        try
        {
            //DtRepayGrid = (DataTable)ViewState["dtMoratorium"];

            //DropDownList ddlMoratoriumtype_MoratoriumTab = gvMoratorium.FooterRow.FindControl("ddlMoratoriumtype_MoratoriumTab") as DropDownList;
            //TextBox txtFromdate_MoratoriumTab = gvMoratorium.FooterRow.FindControl("txtFromdate_MoratoriumTab") as TextBox;
            //TextBox txtTodate_MoratoriumTab = gvMoratorium.FooterRow.FindControl("txtTodate_MoratoriumTab") as TextBox;

            //DataRow dr = DtRepayGrid.NewRow();

            //dr["Moratoriumtype"] = ddlMoratoriumtype_MoratoriumTab.SelectedValue;
            //dr["Moratorium"] = ddlMoratoriumtype_MoratoriumTab.SelectedItem.Text;
            //dr["Fromdate"] = Utility.StringToDate(txtFromdate_MoratoriumTab.Text);
            //dr["Todate"] = Utility.StringToDate(txtTodate_MoratoriumTab.Text);
            //dr["Noofdays"] = (Utility.StringToDate(txtTodate_MoratoriumTab.Text) - Utility.StringToDate(txtFromdate_MoratoriumTab.Text)).TotalDays;
            //if (ddl_Repayment_Mode.SelectedValue == "2")
            //{
            //    if (!ddlLOB.SelectedItem.Text.ToLower().StartsWith("wc") && !ddlLOB.SelectedItem.Text.ToLower().StartsWith("ft"))
            //    {
            //        int intValidRange = FunPriGetMoratoriumDays(Convert.ToInt32(dr["Noofdays"]));
            //        if (intValidRange > 0)
            //        {
            //            ScriptManager.RegisterStartupScript(this, this.GetType(), "Moratorium details", "alert('Moratorium Period should be " + ddl_Frequency.SelectedItem.Text + " basis');", true);
            //            return;
            //        }
            //    }
            //}

            //if (Utility.CompareDates(txtFromdate_MoratoriumTab.Text, txtTodate_MoratoriumTab.Text) != 1)
            //{
            //    ScriptManager.RegisterStartupScript(this, this.GetType(), "Moratorium details", "alert('To Date should be greater than from date in Moratorium');", true);
            //    return;
            //}

            //DtRepayGrid.Rows.Add(dr);

            //gvMoratorium.DataSource = DtRepayGrid;
            //gvMoratorium.DataBind();

            ViewState["dtMoratorium"] = DtRepayGrid;
            //FunPriGenerateNewMoratorium();
            //if (ddl_Repayment_Mode.SelectedValue == "2")
            //{
            //    FunPriResetIRRDetails();
            //    TabContainerAP.ActiveTabIndex = 2;
            //}
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Add Moratorium");
        }
    }
    private int FunPriGetMoratoriumDays(int intNoDays)
    {
        int intNoInstalment = 0;

        try
        {

            switch (ddl_Frequency.SelectedValue)
            {
                //Weekly
                case "2":
                    intNoInstalment = intNoDays % 7;

                    break;
                //Fortnightly
                case "3":
                    intNoInstalment = intNoDays % 15;

                    break;
                //Monthly
                case "4":
                    intNoInstalment = intNoDays % 30;
                    break;
                //bi monthly
                case "5":
                    intNoInstalment = intNoDays % 60;
                    break;
                //quarterly
                case "6":
                    intNoInstalment = intNoDays % 120;
                    break;
                // half yearly
                case "7":
                    intNoInstalment = intNoDays % 180;
                    break;
                //annually
                case "8":
                    intNoInstalment = intNoDays % 365;
                    break;

            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

        return intNoInstalment;
    }
    private void FunPriRemoveMoratorium(GridViewDeleteEventArgs e)
    {
        try
        {
            DtRepayGrid = (DataTable)ViewState["dtMoratorium"];
            if (DtRepayGrid.Rows.Count > 0)
            {
                DtRepayGrid.Rows.RemoveAt(e.RowIndex);

                if (DtRepayGrid.Rows.Count == 0)
                {
                    ViewState["mode"] = strAddMode;
                    FunPriFillMoratoriumDLL();
                }
                else
                {
                    //gvMoratorium.DataSource = DtRepayGrid;
                    //gvMoratorium.DataBind();
                    FunPriGenerateNewMoratorium();
                }
                if (ddl_Repayment_Mode.SelectedValue == "2")
                {
                    FunPriResetIRRDetails();
                    TabContainerAP.ActiveTabIndex = 2;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Remove Moratorium");
        }
    }

    private void FunPriLoadMoratorium(string Appid)
    {
        OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();

        try
        {

            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

            ObjStatus.Option = 73;
            ObjStatus.Param1 = Appid;
            DtRepayGrid = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);

            //gvMoratorium.DataSource = DtRepayGrid;
            //gvMoratorium.DataBind();

            ViewState["dtMoratorium"] = DtRepayGrid;

            FunPriGenerateNewMoratorium();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Load Moratorium");
        }
        finally
        {
            ObjCustomerService.Close();
        }
    }

    #endregion

    #region PreDisbursement

    private void FunPriShowPRDD(object sender)
    {
        try
        {
            string strFieldAtt = ((LinkButton)sender).ClientID;
            int gRowIndex = Utility.FunPubGetGridRowID("gvPRDDT", strFieldAtt);
            Label lblPath = gvPRDDT.Rows[gRowIndex].FindControl("lblPath") as Label;
            string strFileName = lblPath.Text.Replace("\\", "/").Trim();
            string strScipt = "window.open('../Common/S3GViewFile.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to View the Document");
        }
    }
    protected void ddlCollectedBy_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            DropDownList ddlCollectedBy = sender as DropDownList;
            if (ddlCollectedBy.SelectedIndex > 0)
            {
                int intCurrentRow = ((GridViewRow)ddlCollectedBy.Parent.Parent).RowIndex;
                Label lblCollectedBy = (Label)gvPRDDT.Rows[intCurrentRow].FindControl("lblCollectedBy");
                lblCollectedBy.Text = ddlCollectedBy.SelectedValue;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    protected void ddlScannedBy_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            DropDownList ddlScannedBy = sender as DropDownList;
            if (ddlScannedBy.SelectedIndex > 0)
            {
                int intCurrentRow = ((GridViewRow)ddlScannedBy.Parent.Parent).RowIndex;
                Label lblScannedBy = (Label)gvPRDDT.Rows[intCurrentRow].FindControl("lblScannedBy");
                lblScannedBy.Text = ddlScannedBy.SelectedValue;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriBindPRDD(GridViewRowEventArgs e)
    {
        OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                UserInfo ObjUserInfo = new UserInfo();
                DropDownList ddlCollectedby = (DropDownList)e.Row.FindControl("ddlCollectedby");
                AjaxControlToolkit.CalendarExtender calCollectedDate = (AjaxControlToolkit.CalendarExtender)e.Row.FindControl("calCollectedDate");
                AjaxControlToolkit.CalendarExtender calScannedDate = (AjaxControlToolkit.CalendarExtender)e.Row.FindControl("calScannedDate");
                calScannedDate.Format = calCollectedDate.Format = strDateFormat;
                TextBox txtColletedDate = (TextBox)e.Row.FindControl("txtCollectedDate");
                LinkButton Viewdoct = (LinkButton)e.Row.FindControl("hyplnkView");
                CheckBox Cbx1 = (CheckBox)e.Row.FindControl("CbxCheck");
                DropDownList ddlScannedby = (DropDownList)e.Row.FindControl("ddlScannedby");
                TextBox txtScannedDate = (TextBox)e.Row.FindControl("txtScannedDate");
                TextBox txtUpload = (TextBox)e.Row.FindControl("txOD");
                Label lblPath = e.Row.FindControl("lblPath") as Label;
                //Label lblScanned = e.Row.FindControl("lblScanned") as Label;
                Label myThrobber = e.Row.FindControl("myThrobber") as Label;

                ObjStatus.Option = 35;
                ObjStatus.Param1 = intCompanyId.ToString();
                Utility.FillDLL(ddlCollectedby, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                ObjStatus.Option = 35;
                ObjStatus.Param1 = intCompanyId.ToString();
                Utility.FillDLL(ddlScannedby, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

                Label lblCollectedBy = e.Row.FindControl("lblCollectedBy") as Label;
                Label lblScannedBy = e.Row.FindControl("lblScannedBy") as Label;
                if (lblCollectedBy.Text != "")
                {
                    ddlCollectedby.SelectedValue = lblCollectedBy.Text;
                }
                if (lblScannedBy.Text != "")
                {
                    ddlScannedby.SelectedValue = lblScannedBy.Text;
                }

                if (ViewState["PRDDDocPath"] != null)
                    txtUpload.Text = ViewState["PRDDDocPath"].ToString();
                AjaxControlToolkit.AsyncFileUpload asyFileUpload = e.Row.FindControl("asyFileUpload") as AjaxControlToolkit.AsyncFileUpload;
                Label lblScanned = e.Row.FindControl("lblScanned") as Label;
                //string Path;
                //Path = txtUpload.Text.Split('\\')[1].ToString();
                string Path = string.Empty;
                if (txtUpload.Text.Trim() != string.Empty)
                    if (txtUpload.Text.Trim().Contains('\\') == true)
                        Path = txtUpload.Text.Split('\\')[1].ToString();



                if (lblScanned != null && asyFileUpload != null)
                {

                    if (lblScanned.Text == "False")
                    {
                        myThrobber.Text = "";
                        Viewdoct.Enabled = false;
                        Cbx1.Checked = false;
                        txtScannedDate.Text = "";
                        txtScannedDate.Visible = false; //added
                        calScannedDate.Enabled = false;
                        ddlScannedby.ClearDropDownList();
                        ddlScannedby.Visible = false; //added
                    }
                    else
                    {
                        Cbx1.Checked = true;
                        if (Path == string.Empty)
                        {
                            Viewdoct.Enabled = false;

                        }
                        else
                        {

                            Viewdoct.Enabled = true;
                        }
                    }
                }
                if (txtScannedDate.Text.Contains("1900"))
                {
                    Cbx1.Checked = false;
                    txtScannedDate.Text = "";
                    txtScannedDate.Visible = false; //added
                    ddlScannedby.ClearDropDownList();
                    ddlScannedby.Visible = false; //added
                }

                //if (intApplicationProcessId >= 0)
                //{
                //    Cbx1.Checked = true;
                //}
                ObjUserInfo = null;

                asyFileUpload.Enabled = false;
                ddlCollectedby.ClearDropDownList();
                calCollectedDate.Enabled = false;
                txtColletedDate.ReadOnly = true;

                gvPRDDT.Columns[9].Visible = false;
                ddlScannedby.ClearDropDownList();
                calScannedDate.Enabled = false;
                txtScannedDate.ReadOnly = true;
                Cbx1.Enabled = false;
                TextBox txtRemarks = (TextBox)e.Row.FindControl("txtRemarks");
                txtRemarks.ReadOnly = true;

                //Added here to handle collected status in check box on 24-Dec-2015
                if (Convert.ToInt32(lblCollectedBy.Text) > 0)
                {
                    Cbx1.Checked = true;
                }
                else
                {
                    Cbx1.Checked = false;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Load Pre-Disbursement Documents");
        }
        finally
        {
            ObjCustomerService.Close();
            ObjStatus = null;
        }
    }

    #endregion






    private void FunPriLoadPage()
    {
        try
        {

            intCompanyId = ObjUserInfo.ProCompanyIdRW;
            intUserId = ObjUserInfo.ProUserIdRW;
            strDateFormat = ObjS3GSession.ProDateFormatRW;
            strDateFormat_Static = ObjS3GSession.ProDateFormatRW;
            //User Authorization
            bCreate = ObjUserInfo.ProCreateRW;
            bModify = ObjUserInfo.ProModifyRW;
            bQuery = ObjUserInfo.ProViewRW;
            FormsAuthenticationTicket fromTicket;
            Session["CustomerNameForAsset"] = "";
            //ccTentativeAccDate.Format = strDateFormat;
            CalendarApplicationDate.Format = strDateFormat;
            CaltxtPdcStartDate.Format = strDateFormat;
            CEFirstInstallDate.Format = strDateFormat;
            CEtxtIncomeBookStartDate.Format = strDateFormat;
            txtPdcStartDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtPdcStartDate.ClientID + "','" + strDateFormat + "',false,  false);");
            txtApplicationDateDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtApplicationDateDate.ClientID + "','" + strDateFormat + "',true,  false);");
            txtFirstInstallDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtFirstInstallDate.ClientID + "','" + strDateFormat + "',false,  true);");
            txtTentativeAccDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtTentativeAccDate.ClientID + "','" + strDateFormat + "',true,  false);");
            txtIncomeBookStartDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtIncomeBookStartDate.ClientID + "','" + strDateFormat + "',true,  false);");
            //txtApplicationDateFWC.Text = DateTime.Now.ToString(strDateFormat);
            if (ViewState["hdnRoundOff"] != null && !string.IsNullOrEmpty(ViewState["hdnRoundOff"].ToString()))
            {
                S3GBusEntity.CommonS3GBusLogic.GPSRoundOff = Convert.ToInt32(ViewState["hdnRoundOff"].ToString());
            }



            FunGetScreenModifyAccess();
            if (ViewState["Password"] != null)
            {
            }
            if (Request.QueryString["qsViewId"] != null)
            {
                fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsViewId"));
                if (fromTicket != null)
                {
                    intApplicationProcessId = Convert.ToInt32(fromTicket.Name);
                }
                else
                {
                    strAlert = strAlert.Replace("__ALERT__", "Invalid Application Details");
                    ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
                }

                ViewState["mode"] = strEditMode;
            }
            funPriSetUserControProperty();


            if (Request.QueryString["qsMode"] != null)
                hdnQueryMode.Value = strMode = Request.QueryString["qsMode"];

            if (strMode.ToUpper().Trim() != "Q")
                // txtMarginAmount.CheckGPSLength(false, "Margin Amount");





                //if (Session["EnqNewCustomerId"] != null && string.IsNullOrEmpty(S3GCustomerAddress1.CustomerName))
                //if (Session["EnqNewCustomerId"] != null)
                //{
                //    intEnqNewCustomerId = Convert.ToInt32(Utility.Load("EnqNewCustomerId", ""));
                //    hdnCustID.Value = intEnqNewCustomerId.ToString();
                //    //Session["AssetCustomer"] = hdnCustID.Value + ";" + S3GCustomerAddress1.CustomerName;

                //    //By Thangam M on 03/Oct/2012 to set customer id for new customer
                //    HiddenField hdnCustomerId = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                //    if (hdnCustomerId != null)
                //    {
                //        hdnCustomerId.Value = hdnCustID.Value;
                //        HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                //        hdnCID.Value = hdnCID.Value;
                //        btnLoadCustomer_Click(null, null);
                //    }
                //    //End here

                //    if (intEnqNewCustomerId > 0)
                //    {
                //        FunPubQueryExistCustomerListEnquiryUpdation(intEnqNewCustomerId);
                //    }
                //}
                if (ddlLOB.SelectedIndex.ToString() != "-1")
                {
                    if (intApplicationProcessId == 0 || (intApplicationProcessId > 0 && ddlBusinessOfferNoList.SelectedValue == "-1"))
                    {

                        if (ddlLOB_SelectedItem_Text.Value != null)
                        {
                            if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("PL"))
                            {
                                if (Session["PricingloanAssetDetails"] != null && ddlLOB.Items.Count > 0)
                                {
                                    DataTable dtloanassetdetails = (DataTable)Session["PricingloanAssetDetails"];
                                    //grvloanasset.DataSource = dtloanassetdetails;
                                    //grvloanasset.DataBind();
                                }
                            }

                            else
                            {
                                if (Session["PricingAssetDetails"] != null && ddlLOB.Items.Count > 0)
                                {
                                    DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                                    gvAssetDetails.DataSource = dsAssetDetails;
                                    gvAssetDetails.DataBind();

                                    if (ddlDealTransfer.SelectedValue != "1")
                                    {

                                        if (dsAssetDetails.Rows.Count > 0)
                                        {
                                            decimal dcmMarginAmount = (decimal)(dsAssetDetails.Compute("Sum(Margin_Amount_1)", "Noof_Units > 0"));
                                            txtMarginAmount.Text = Utility.funPubChangeCurrencyFormat((dcmMarginAmount == 0) ? "" : dcmMarginAmount.ToString(Funsetsuffix()));
                                            decimal dcmAssetFinAmount2 = (decimal)(dsAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                                            txtFinanceAmount.Text = (dcmAssetFinAmount2 == 0) ? "" : dcmAssetFinAmount2.ToString(Funsetsuffix());
                                            txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(txtFinanceAmount.Text);
                                            funPriSetGuarantorAmount();
                                            if (ViewState["StartDelayRate"] != null)
                                            {
                                                txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                                                txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix()));
                                            }

                                            txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
                                            decimal dcmAssetTradeIn = (decimal)(dsAssetDetails.Compute("Sum(Trade_In_1)", "Noof_Units > 0"));
                                            txtdiscount.Text = (dcmAssetTradeIn == 0) ? "" : dcmAssetTradeIn.ToString(Funsetsuffix());
                                            txtdiscount.funPubChangeCurrencyFormat();


                                            decimal decUNITVALUE1 = (decimal)(dsAssetDetails.Compute("Sum(UNIT_VALUE_1)", "Noof_Units > 0"));
                                            txtTotalAssetCost.Text = decUNITVALUE1.ToString(Funsetsuffix());
                                            txtTotalAssetCost.funPubChangeCurrencyFormat();

                                            decimal deTotalFin = (decimal)(dsAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                                            txtTotalFinanceAmount.Text = deTotalFin.ToString(Funsetsuffix());
                                            txtTotalFinanceAmount.funPubChangeCurrencyFormat();


                                        }
                                        FunPriAssignMarginAmount();
                                    }
                                    txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();



                                    if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
                                    {
                                        decimal dcmAssetFinAmount = (decimal)(dsAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                                        txtFinanceAmount.Text = (dcmAssetFinAmount == 0) ? "" : dcmAssetFinAmount.ToString(Funsetsuffix());
                                        txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(txtFinanceAmount.Text);
                                        if (ViewState["StartDelayRate"] != null)
                                        {
                                            txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                                            txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix()));
                                        }

                                    }
                                    if (ddlDealTransfer.SelectedValue == "1")
                                    {
                                        gvAssetDetails.Columns[11].Visible = false;
                                        btnAddAsset.Enabled_False();
                                    }
                                }
                            }
                        }
                    }
                }
            if (!IsPostBack)
            {
                //Length Setup Start
                ViewState["NEGATIVELIST_CUSTOMER"] = null;
                txtMarginMoneyAmount_Cashflow.CheckGPSLength(false, "Margin Amount");
                txtMarginMoneyPer_Cashflow.SetDecimalPrefixSuffix(2, 4, false, "Margin %");
                txtMarginAmount.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, lblMarginAmount.Text);
                txtMarginAmount.Attributes.Add("readonly", "true");
                txtResidualValue.SetDecimalPrefixSuffix(10, 0, false, "Residual Amount");
                txtResidualAmt_Cashflow.SetDecimalPrefixSuffix(10, 0, false, "Residual Amount");
                txtResidualValue_Cashflow.SetPercentagePrefixSuffix(2, 4, false, true, "Residual %");
                txtdiscount.SetPercentagePrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, lblDiscount.Text);
                txtResidualValue_Cashflow.CheckGPSLength(false, "Residual %");

                txtCompanyIRR.Attributes.Add("readonly", "true");
                txtBusinessIRR.Attributes.Add("readonly", "true");
                txtAccountingIRR.Attributes.Add("readonly", "true");
                txtCompanyIRR_Repay.Attributes.Add("readonly", "true");
                txtBusinessIRR_Repay.Attributes.Add("readonly", "true");
                txtAccountIRR_Repay.Attributes.Add("readonly", "true");
                //txtPrePaymentLimitFWC.Attributes.Add("readonly", "true");
                //txtDebtPurchaseLimitFWC.Attributes.Add("readonly", "true");
                txtCreditLimit.Attributes.Add("readonly", "true");
                txtCreditLimitFWC.Attributes.Add("readonly", "true");
                txtTenure.SetDecimalPrefixSuffix(3, 0, true, "Tenure");
                txtCreditLimit.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, lblCrditLimit.Text);
                txtCreditLimitFWC.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, lbltxtCreditLimitFWC.Text);
                txtFinanceAmount.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, true, "Finance Amount");//5366
                txtLimitF.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, false, "Limit");//5366
                txtResidualValue.Attributes.Add("readonly", "true");
                CEtxtApplicationDateFWC.Format = strDateFormat;
                txtApplicationDateFWC.Attributes.Add("onblur", "fnDoDate(this,'" + txtApplicationDateFWC.ClientID + "','" + strDateFormat + "',true,  false);");
                CEtxtFacilityStartDate.Format = strDateFormat;
                txtFacilityStartDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtFacilityStartDate.ClientID + "','" + strDateFormat + "',false,  true);");
                CEtxtFacilityEndDate.Format = strDateFormat;
                txtFacilityEndDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtFacilityEndDate.ClientID + "','" + strDateFormat + "',false,  false);");
                //fACTORING OFFER TERMS 
                txtDebtPurchaseLimitFWC.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, false, lblDebtPurchaseLimit.Text);
                txtMarginFWC.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, false, lblMarginFWC.Text);
                txtPrePaymentLimitFWC.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, lblPrePaymentLimit.Text);
                txtInvoiceCapValue.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, true, lblInvoiceCapValue.Text);
                txtDiscountRateforLineofCredit.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, false, lblDiscountRateforLineofCredit.Text);
                txtPenalRate.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, lblPenalRate.Text);

                //txtNoofDaystobeconsidered.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, 0, true, lblPenalRate.Text);
                //txtCreditPeriodInDays.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, lblCreditPeriodInDays.Text);
                //txtGracePeriodInDays.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, lblGracePeriodInDays.Text);
                //txtDisbuteGracePeriodInDays.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, lblDisbuteGracePeriodInDays.Text);
                //txtResolutionPeriodinDays.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, txtResolutionPeriodinDays.Text);


                txtStartDatedelayrate.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, false, lblStartDatedelayrate.Text);
                txtStartdelaycharges.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, false, lblStartdelaychargesE.Text);
                txtOverDueCharges.SetDecimalPrefixSuffix(3, 2, false, false, lblOverDueCharges.Text);



                txt_Recovery_Pattern_Year1.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, false, lblRecovery_Pattern_Year1.Text);
                txt_Recovery_Pattern_Year2.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, false, lblRecovery_Pattern_Year2.Text);
                txt_Recovery_Pattern_Year3.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, false, lblRecovery_Pattern_Year3.Text);


                //Length Setup End


                Guarantee.Value = "";
                //FunPriValidateApplicationStart();
                FunProGetIRRDetails();
                funPriShowHideMainTabInfo();
                bClearList = Convert.ToBoolean(ConfigurationManager.AppSettings.Get("ClearListValues"));

                //AssignSession Values
                System.Web.HttpContext.Current.Session["Company_Id"] = intCompanyId.ToString();
                System.Web.HttpContext.Current.Session["User_Id"] = intUserId.ToString();
                ddlLOB.Focus();
                strPrefixLength = ObjS3GSession.ProGpsPrefixRW;
                strDecMaxLength = ObjS3GSession.ProGpsSuffixRW;
                FunPriInsertCustSubLimit("", "", "", "");
                System.Web.HttpContext.Current.Session["Is_Dealer_Commission_Applicable"] = "0";
                funPriSetProgramName();
                ddlStartDelayChargesApplicable_SelectedIndexChanged(null, null);
                //ddlDealType_SelectedIndexChanged(null, null);
                ddlContType_SelectedIndexChanged(null, null);

                if (intApplicationProcessId == 0)
                {

                    FunPriDisableControls(0);
                }
                else if (intApplicationProcessId > 0)
                {
                    if (strMode == "M")
                    {
                        FunPriDisableControls(1);
                    }
                    else if (strMode == "Q")
                    {
                        FunPriDisableControls(-1);
                    }
                }

                if (PageMode == PageModes.WorkFlow)
                {
                    ViewState["PageMode"] = PageModes.WorkFlow;
                }

                // WORK FLOW IMPLEMENTATION
                if (ViewState["PageMode"] != null && ViewState["PageMode"].ToString() == PageModes.WorkFlow.ToString() && !IsPostBack)
                {
                    PreparePageForWFLoad();
                }

                //Added by Thangam M on 25/Jul/2013 to create Pricing from CRM
                if (Request.QueryString.Get("qsCRMID") != null)
                {
                    FunPrILoadCRMInfo();
                }
                //End here


            }
            //FunPriLoadFileNameInPRDDT();
            FunPriSetRateLength();
            FunPriSetMaxLength();
            //Workflow for Modify Mode
            if (ViewState["PageMode"] != null && ViewState["PageMode"].ToString() == PageModes.WorkFlow.ToString())
            {
                if (ViewState["intApplicationProcessId"] != null)
                    intApplicationProcessId = Convert.ToInt32(ViewState["intApplicationProcessId"]);
            }

            txtCustomerFocus.Attributes.Add("onfocus", "fnLoadCustomerMaster()");
            txtCustomerFocus.Width = 0;
            txtCustomerFocus.TabIndex = -1;
            txtCustomerFocus.BorderStyle = BorderStyle.None;

            txtCustomerMasterGuarantorFocus.Attributes.Add("onfocus", "fnLoadCustomerMasterGuar()");
            txtCustomerMasterGuarantorFocus.Width = 0;
            txtCustomerMasterGuarantorFocus.TabIndex = -1;
            txtCustomerMasterGuarantorFocus.BorderStyle = BorderStyle.None;
            //funPriSendAlertMail();


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw ex;
        }
    }
    private void funPriSetProgramName()
    {
        try
        {
            Dictionary<string, string> strProparm = new Dictionary<string, string>();
            strProparm.Add("@Program_ID", "38");
            DataTable dtProgram = Utility.GetDefaultData("S3G_GET_PROGRAM_NAME", strProparm);
            if (dtProgram.Rows.Count > 0)
            {
                strProgramName = dtProgram.Rows[0]["NAME"].ToString();

            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriSetUserControProperty()
    {

        try
        {

            txtAssetFocus.Attributes.Add("onfocus", "fnLoadAsset()");
            txtAssetFocus.Width = 0;
            txtAssetFocus.TabIndex = -1;
            txtAssetFocus.BorderStyle = BorderStyle.None;

            //Lease Customer Start
            ucCustomerCodeLov.strControlID = ucCustomerCodeLov.ClientID.ToString();
            TextBox txtCustItemNumber = ((TextBox)ucCustomerCodeLov.FindControl("txtItemName"));
            txtCustItemNumber.Attributes.Add("onfocus", "fnLoadCustomer()");
            txtCustItemNumber.Style["display"] = "block";
            txtCustItemNumber.Width = 0;
            txtCustItemNumber.TabIndex = -1;
            txtCustItemNumber.BorderStyle = BorderStyle.None;
            //Lease Customer End


            //FWC Customer Start
            ucCustomerLovFWC.strControlID = ucCustomerLovFWC.ClientID.ToString();
            TextBox txtUserNameFWC = ((TextBox)ucCustomerLovFWC.FindControl("txtItemName"));
            txtUserNameFWC.Style["display"] = "block";
            txtUserNameFWC.Attributes.Add("onfocus", "fnLoadCustomer_FWC()");
            //txtCustItemNumber.Attributes.Add("readonly", "false");
            txtUserNameFWC.Width = 0;
            txtUserNameFWC.TabIndex = -1;
            txtUserNameFWC.BorderStyle = BorderStyle.None;
            //FWC Customer End

            //Factoring SubLimit Account Mapping Start
            ucCustomerLovCustomerMapFWC.strControlID = ucCustomerLovCustomerMapFWC.ClientID.ToString();
            TextBox txtItemName = ((TextBox)ucCustomerLovCustomerMapFWC.FindControl("txtItemName"));
            txtItemName.Style["display"] = "block";
            txtItemName.Attributes.Add("onfocus", "fnLoadCustomerSubLimitDLR()");
            txtItemName.Width = 0;
            txtItemName.TabIndex = -1;
            txtItemName.BorderStyle = BorderStyle.None;
            //Factoring SubLimit Account Mapping End



            //Application no Selection Start
            //ddlApplicationNo.strControlID = ddlApplicationNo.ClientID.ToString();
            //TextBox txtAccItemNumber = ((TextBox)ddlApplicationNo.FindControl("txtItemName"));
            //txtAccItemNumber.Style["display"] = "block";
            //txtAccItemNumber.Attributes.Add("onfocus", "fnLoadCustomer_Pro()");
            //txtAccItemNumber.Width = 0;
            //txtAccItemNumber.TabIndex = -1;
            //txtAccItemNumber.BorderStyle = BorderStyle.None;
            //Application no Selection End

            //Deal Transfer Start
            //ucDealTransferAccountLov.strControlID = ucDealTransferAccountLov.ClientID.ToString();
            //TextBox txtAccItemNumber2 = ((TextBox)ucDealTransferAccountLov.FindControl("txtItemName"));
            //txtAccItemNumber2.Style["display"] = "block";
            //txtAccItemNumber2.Attributes.Add("onfocus", "fnLoadAccount()");
            //txtAccItemNumber2.Width = 0;
            //txtAccItemNumber2.TabIndex = -1;
            //txtAccItemNumber2.BorderStyle = BorderStyle.None;

            //TextBox TxtName = ((TextBox)ucDealTransferAccountLov.FindControl("TxtName"));
            //Button btnGetLov = ((Button)ucDealTransferAccountLov.FindControl("btnGetLOV"));
            //TxtName.Enabled = false;
            //btnGetLov.Enabled = false;

            //Deal Transfer End



        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    protected void ucCustomerCodeLov_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            Button btnLoadCust = (Button)ucCustomerCodeLov.FindControl("btnGetLOV");
            //btnLoadCust.Focus();
            HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            hdnCID.Value = ucCustomerCodeLov.SelectedValue;
            ucCustomerCodeLov.ShowHideAddressImageButton = true;
            btnLoadCustomer_Click(null, null);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    [System.Web.Services.WebMethod]
    public static string[] GetDealTransAccountNo(String prefixText, int count)
    {

        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();
        Procparam.Add("@COMPANYID", HttpContext.Current.Session["Company_Id"].ToString());
        Procparam.Add("@USERID", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        Procparam.Add("@PREFIX", prefixText);
        Procparam.Add("@OPTION", "12");
        Procparam.Add("@PROGRAMID", "38");
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", Procparam));
        return suggetions.ToArray();
    }
    [System.Web.Services.WebMethod]
    public static string[] GetProposalFromCheckList(String prefixText, int count)
    {

        List<String> suggetions = new List<String>();
        Dictionary<string, string> strProParm = new Dictionary<string, string>();
        strProParm.Add("@OPTION", "5");
        if (HttpContext.Current.Session["Company_Id"] != null)
            strProParm.Add("@COMPANYID", HttpContext.Current.Session["Company_Id"].ToString());
        if (HttpContext.Current.Session["User_Id"] != null)
            strProParm.Add("@USERID", HttpContext.Current.Session["User_Id"].ToString());
        strProParm.Add("@PROGRAMID", "38");
        strProParm.Add("@LOB_ID", obj_Page.ddlLOB.SelectedValue);
        strProParm.Add("@Prefix", prefixText);
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm));
        return suggetions.ToArray();



        return suggetions.ToArray();
    }
    public void funPriInitializeDiscountRateGrid()
    {
        try
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Sno", typeof(int));
            dt.Columns.Add("Start_Slab", typeof(decimal));
            dt.Columns.Add("End_Slab", typeof(decimal));
            dt.Columns.Add("Discount_Rate", typeof(decimal));
            DataRow dr = dt.NewRow();
            dr[0] = -1;
            dt.Rows.Add(dr);
            ViewState["DiscountRateUtilization"] = dt;
            grvDiscountRateforUtilization.DataSource = dt;
            grvDiscountRateforUtilization.DataBind();

            grvDiscountRateforUtilization.Rows[0].Visible = false;

            TextBox txtDiscRateF = grvDiscountRateforUtilization.FooterRow.FindControl("txtDiscRateF") as TextBox;
            txtDiscRateF.Text = "";




        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }

    }
    protected void grvCustSubLimit_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            if (e.CommandName == "Add")
            {

                //UserControls_CommonSearch ucCustomerLovCustomerMapFWC = grvCustSubLimit.FooterRow.FindControl("ucCustomerLovCustomerMapFWC") as UserControls_CommonSearch;
                //TextBox txtCustomerName = (TextBox)ucCustomerLovCustomerMapFWC.FindControl("txtName");
                //HiddenField hdnCustomerId = (HiddenField)ucCustomerLovCustomerMapFWC.FindControl("hdnID");



                //Label lblSerialNo = grvCustSubLimit.FooterRow.FindControl("lblSerialNo") as Label;
                //TextBox txtLimitF = grvCustSubLimit.FooterRow.FindControl("txtLimitF") as TextBox;
                //TextBox txtCutOffDateF = grvCustSubLimit.FooterRow.FindControl("txtCutOffDateF") as TextBox;
                //FunPriInsertCustSubLimit(lblSerialNo.Text, hdnCustomerId.Value, txtCustomerName.Text, txtLimitF.Text.Trim(), txtCutOffDateF.Text.Trim());
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
        }
    }
    private void funPriCalPrepaymentLimit()
    {
        try
        {
            txtPrePaymentLimitFWC.Text = (Convert.ToDouble(txtTotalSubLimit.Text) / (1 * decPrePayDenominator)).ToString(Funsetsuffix());
            txtPrePaymentLimitFWC.funPubChangeCurrencyFormat();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, "Application Calculate PrepaymentLimit ");

        }

    }
    protected void lnkAddCustomerMapFWC_Click(object sender, EventArgs e)
    {
        try
        {
            //TextBox txtCustomerName = (TextBox)ucCustomerLovCustomerMapFWC.FindControl("txtName");
            //HiddenField hdnCustomerId = (HiddenField)ucCustomerLovCustomerMapFWC.FindControl("hdnID");

            HiddenField hdnCIDClient = (HiddenField)ucCustomerLovCustomerMapFWC.FindControl("hdnID");


            HiddenField hdnCID2ClientCustomer = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
            if (hdnCID2ClientCustomer.Value == "0" || hdnCID2ClientCustomer.Value == "")
            {
                Utility.FunShowAlertMsg(this, "Select the Client");
                return;
            }


            if (hdnCIDClient.Value == "0")
            {
                Utility.FunShowAlertMsg(this, "Select the Clients Customer");
                return;
            }
            if (ucCustomerLovCustomerMapFWC.SelectedText.Split('-').Length == 1)
            {
                Utility.FunShowAlertMsg(this, "InValid Customer");
                return;
            }



            if (txtCreditLimitFWC.Text == string.Empty || txtCreditLimitFWC.Text == "0")
            {
                Utility.FunShowAlertMsg(this, "Client Credit Limit Should be Greater than the Zero");
                return;
            }

            TextBox TxtName = (TextBox)ucCustomerLovCustomerMapFWC.FindControl("TxtName");


            if (txtLimitF.Text == "")
            {
                Utility.FunShowAlertMsg(this, "Enter the Limit");
                return;
            }
            if (Convert.ToDecimal(txtLimitF.Text) == 0)
            {
                Utility.FunShowAlertMsg(this, "Limit should be greater than the zero");
                return;
            }




            //Label lblSerialNo = grvCustSubLimit.FooterRow.FindControl("lblSerialNo") as Label;
            //TextBox txtLimitF = grvCustSubLimit.FooterRow.FindControl("txtLimitF") as TextBox;
            //TextBox txtCutOffDateF = grvCustSubLimit.FooterRow.FindControl("txtCutOffDateF") as TextBox;
            int iSno = 0;
            DataTable dt = (DataTable)ViewState["CUST_SUBLIMIT"];
            if (dt == null)
            {
                FunPriGetSubLimitDataTable();
                dt = (DataTable)ViewState["CUST_SUBLIMIT"];
            }
            if (dt.Rows.Count > 0)
            {
                decimal decTotalSubLimit = 0;
                decimal decCurrentSubLimit = 0;

                //if (dt.Compute("sum(Limit)", "Limit>0").ToString() != string.Empty)
                //    decTotalSubLimit = Convert.ToDecimal(dt.Compute("sum(Limit)", "Limit>0").ToString());
                foreach (DataRow dr5 in dt.Rows)
                {
                    if (dr5["Limit"].ToString() != string.Empty)
                    {
                        decCurrentSubLimit = decCurrentSubLimit + Convert.ToDecimal(dr5["Limit"]);
                    }
                }


                decCurrentSubLimit = Convert.ToDecimal(txtLimitF.Text);
                if ((decTotalSubLimit + decCurrentSubLimit) > Convert.ToDecimal(txtAvailableCreditLimit.Text))
                {
                    //Utility.FunShowAlertMsg(this, "Customers sublimit should not exceed the Client Credit Limit ");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege11));
                    return;
                }


                DataRow[] dr = dt.Select("Entity_Id='" + ucCustomerLovFWC.SelectedValue + "'");
                if (dr.Length > 0)
                {
                    //Utility.FunShowAlertMsg(this, "Client not Allowed here");
                    Utility.FunShowAlertMsg(this, "Client not allowed here");
                    return;
                }

                if (hdnCIDClient.Value == hdnCID2ClientCustomer.Value)
                {
                    Utility.FunShowAlertMsg(this, "Client not allowed here");
                    return;
                }
            }

            if (hdnCIDClient.Value == hdnCID2ClientCustomer.Value)
            {
                Utility.FunShowAlertMsg(this, "Client not allowed here");
                return;
            }
            string strNo = dt.Compute("max(Serial_Number)", "1=1").ToString();
            if (strNo == null)
            {
                iSno = 1;
            }
            else
            {
                iSno = iSno + 1;
            }
            FunPriInsertCustSubLimit(iSno.ToString(), hdnCIDClient.Value, TxtName.Text, txtLimitF.Text.Trim());
            funPriCalPrepaymentLimit();
            txtMarginFWC.Text = string.Empty;
            txtDebtPurchaseLimitFWC.Text = string.Empty;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    public void txtLimitAmnt_OntextChanged(object sender, EventArgs e)
    {
        try
        {
            TextBox txtAmount = (TextBox)sender;
            if (Convert.ToDecimal(txtAmount.Text) <= 0)
            {
                //Utility.FunShowAlertMsg(this, "Amount Should be greater than Zero");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege13));
                txtAmount.Text = string.Empty;
                return;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void grvCustSubLimit_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Footer)
            {

                //UserControls_CommonSearch ucCustomerLovCustomerMapFWC = grvCustSubLimit.FooterRow.FindControl("ucCustomerLovCustomerMapFWC") as UserControls_CommonSearch;
                //DropDownList ddlGuarantortype_GuarantorTab1 = grvCustSubLimit.FooterRow.FindControl("ddlGuarantortype_GuarantorTab") as DropDownList;
                //ucCustomerLovCustomerMapFWC.strControlID = ucCustomerLovCustomerMapFWC.ClientID;
                //TextBox txt1 = (TextBox)ucCustomerLovCustomerMapFWC.FindControl("txtName");
                //txt1.Attributes.Add("onfocus", "fnLoadCustomerSubLimit()");

                //UserControls_CommonSearch ucCustomerLovCustomerMapFWC =e.Row.FindControl("ucCustomerLovCustomerMapFWC") as UserControls_CommonSearch;
                //ucCustomerLovCustomerMapFWC.strControlID = ucCustomerLovCustomerMapFWC.ClientID.ToString();
                //TextBox txtItemName = ((TextBox)ucCustomerLovCustomerMapFWC.FindControl("txtItemName"));
                //txtItemName.Attributes.Add("onfocus", "fnLoadCustomerSubLimit()");
                //txtItemName.Width = 0;
                //txtItemName.TabIndex = -1;
                //txtItemName.BorderStyle = BorderStyle.None;

            }
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                //LinkButton lnkEdit = e.Row.FindControl("lnkEdit") as LinkButton;
                //LinkButton lnkRemove = e.Row.FindControl("lnkRemove") as LinkButton;
                //LinkButton lnkAdd = e.Row.FindControl("lnkAdd") as LinkButton;
                //TextBox txtCutOffDate = e.Row.FindControl("txtCutOffDate") as TextBox;
                //Label lbldelst = e.Row.FindControl("lbldelst") as Label;
                //Label lblEntityId = e.Row.FindControl("lblEntityId") as Label;



                //if (strMode == "Q")
                //{
                //    lnkEdit.Enabled = false;
                //    lnkRemove.Enabled = false;
                //    lnkAdd.Enabled = false;
                //}
                //else
                //{
                //    Dictionary<string, string> ProParm = new Dictionary<string, string>();
                //    ProParm.Add("@OPTION", "2001");
                //    //ProParm.Add("@Param1", intCustomerId.ToString());
                //    ProParm.Add("@Param2", lblEntityId.Text);
                //    DataTable dt = Utility.GetDefaultData("S3G_OR_GET_CUSTLOOKUP", ProParm);
                //    if (dt.Rows.Count > 0)
                //    {
                //        lnkRemove.Enabled = false;
                //        lnkRemove.OnClientClick = null;
                //    }
                //}
                //if (txtCutOffDate.Text != string.Empty)
                //{
                //    txtCutOffDate.Text = DateTime.Parse(txtCutOffDate.Text.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                //}
                Label lblLimitAmnt = e.Row.FindControl("lblLimitAmnt") as Label;
                lblLimitAmnt.funPubChangeCurrencyFormat();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private DataTable FunPriGetSubLimitDataTable()
    {
        try
        {
            DataRow drEmptyRow;
            if (ViewState["CUST_SUBLIMIT"] == null)
            {
                dtCustSubLimit = new DataTable();
                dtCustSubLimit.Columns.Add("Serial_Number");
                dtCustSubLimit.Columns.Add("Entity_Id");
                dtCustSubLimit.Columns.Add("ENTITY_NAME");
                dtCustSubLimit.Columns.Add("Limit", System.Type.GetType("System.Decimal"));
                dtCustSubLimit.Columns.Add("CuttOffDate");
                dtCustSubLimit.Columns.Add("DEL_STAT", Type.GetType("System.Int32"));
                ViewState["CUST_SUBLIMIT"] = dtCustSubLimit;
            }
            dtCustSubLimit = (DataTable)ViewState["CUST_SUBLIMIT"];

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return dtCustSubLimit;

    }
    private void FunPriInsertCustSubLimit(string strSno, string strEntityId, string strEntityName, string strEntityLimit)
    {
        try
        {
            DataTable dt = (DataTable)ViewState["CUST_SUBLIMIT"];

            if (dt != null)
            {

                DataRow[] dr = dt.Select("Serial_Number=0 and Serial_Number is not null");
                foreach (DataRow dr2 in dr)
                {
                    dr2.Delete();
                }

                if (ViewState["CUST_SUBLIMIT"] != null)
                {
                    DataRow[] drDupCheck = dt.Select("Entity_Id='" + strEntityId + "'");
                    if (drDupCheck.Count() > 0)
                    {
                        //Utility.FunShowAlertMsg(this, "Customer already Exists");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege14));
                        return;
                    }
                }
                DataRow drEmptyRow;
                dtCustSubLimit = FunPriGetSubLimitDataTable();
                drEmptyRow = dtCustSubLimit.NewRow();
                drEmptyRow["Serial_Number"] = strSno;
                drEmptyRow["Entity_Id"] = strEntityId;
                drEmptyRow["ENTITY_NAME"] = strEntityName;
                if (strEntityLimit != string.Empty)
                    drEmptyRow["Limit"] = Convert.ToDecimal(strEntityLimit);
                drEmptyRow["DEL_STAT"] = 3;
                dtCustSubLimit.Rows.Add(drEmptyRow);
                ViewState["CUST_SUBLIMIT"] = dtCustSubLimit;
                //Utility.FunShowAlertMsg(this, "Client SubLimit Added Successfully");
                FunPriFillGrid();
            }


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }
    }
    protected void grvCustSubLimit_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        try
        {
            grvCustSubLimit.EditIndex = -1;
            FunPriFillGrid();
            lnkAdd.Enabled_True();
            ucCustomerLovCustomerMapFWC.Clear();
            txtLimitF.Text = string.Empty;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
        }
    }
    protected void grvCustSubLimit_RowUpdating(object sender, GridViewUpdateEventArgs e)//Added By Sathish
    {
        try
        {

            DataTable dtEditApprDet = (DataTable)ViewState["CUST_SUBLIMIT"];
            int IEditIndex = 0;
            IEditIndex = e.RowIndex;

            dtEditApprDet.Rows[IEditIndex]["Entity_Id"] = ucCustomerLovCustomerMapFWC.SelectedValue;
            dtEditApprDet.Rows[IEditIndex]["ENTITY_NAME"] = ucCustomerLovCustomerMapFWC.SelectedText;
            dtEditApprDet.Rows[IEditIndex]["Limit"] = txtLimitF.Text;
            dtEditApprDet.AcceptChanges();
            grvCustSubLimit.EditIndex = -1;
            grvCustSubLimit.DataSource = dtEditApprDet;
            grvCustSubLimit.DataBind();
            ViewState["CUST_SUBLIMIT"] = dtEditApprDet;
            ucCustomerLovCustomerMapFWC.Clear();
            txtLimitF.Text = string.Empty;
            lnkAdd.Enabled_True();
            funPriTotalSubLimit();
            funPriCalPrepaymentLimit();
            txtMarginFWC.Text = string.Empty;
            txtDebtPurchaseLimitFWC.Text = string.Empty;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void grvCustSubLimit_RowEditing(object sender, GridViewEditEventArgs e)
    {
        try
        {
            lnkAdd.Enabled_False();
            grvCustSubLimit.EditIndex = e.NewEditIndex;
            int intRowId = Convert.ToInt32(grvCustSubLimit.DataKeys[e.NewEditIndex].Value.ToString()) - 1;
            DataTable dt = (DataTable)ViewState["CUST_SUBLIMIT"];

            if (ViewState["CUST_SUBLIMIT"] != null)
            {
                grvCustSubLimit.DataSource = (DataTable)ViewState["CUST_SUBLIMIT"];
                grvCustSubLimit.DataBind();
            }

            Label lblLimitAmnt = (Label)grvCustSubLimit.Rows[e.NewEditIndex].FindControl("lblLimitAmnt");
            Label lblEntityId = (Label)grvCustSubLimit.Rows[e.NewEditIndex].FindControl("lblEntityId");
            Label lblEntityName = (Label)grvCustSubLimit.Rows[e.NewEditIndex].FindControl("lblEntityName");

            ucCustomerLovCustomerMapFWC.SelectedText = lblEntityName.Text;
            ucCustomerLovCustomerMapFWC.SelectedValue = lblEntityId.Text;
            txtLimitF.Text = lblLimitAmnt.Text;
            funPriTotalSubLimit();


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
        }
    }
    public void FunPubLoadEntityType(DropDownList ddlCommon)
    {
        try
        {
            Dictionary<string, string> ProParm = new Dictionary<string, string>();
            ProParm.Add("@COMPANY_ID", "1");
            ddlCommon.BindDataTable("S3G_ORG_GET_ENTITY", ProParm, new string[] { "ID", "NAME" });
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }


    }

    private void FunPriFillGrid()
    {
        try
        {
            DataTable dtCustSubLimit = (DataTable)ViewState["CUST_SUBLIMIT"];
            grvCustSubLimit.DataSource = dtCustSubLimit;
            grvCustSubLimit.EmptyDataText = "No Records Found..";
            grvCustSubLimit.DataBind();

            ucCustomerLovCustomerMapFWC.Clear();
            txtCusomerCodeMapFWChidden.Text = string.Empty;
            txtLimitF.Clear();
            HiddenField hdnCID = (HiddenField)ucCustomerLovCustomerMapFWC.FindControl("hdnID");
            hdnCID.Value = "0";

            funPriTotalSubLimit();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void grvCustSubLimit_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {

            dtCustSubLimit = FunPriGetSubLimitDataTable();

            dtCustSubLimit.Rows.RemoveAt(e.RowIndex);
            ViewState["CUST_SUBLIMIT"] = dtCustSubLimit;


            if (dtCustSubLimit.Rows.Count == 0)
            {
                //Utility.FunShowAlertMsg(this.Page, "There should be atleast one row in the grid");
                //Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege16));
                //return;
                ViewState["CUST_SUBLIMIT"] = null;
                FunPriGetSubLimitDataTable();
            }

            FunPriFillGrid();
            funPriCalPrepaymentLimit();
            txtMarginFWC.Text = string.Empty;
            txtDebtPurchaseLimitFWC.Text = string.Empty;

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
        }
    }

    //Added by Thangam M on 25/Jul/2013 to create Pricing from CRM
    private void FunPrILoadCRMInfo()
    {
        try
        {
            Page.Master.FindControl("SiteMapPath1").Visible = false;
            lblHeading.Text = lblHeading.Text + "  [From CRM]";

            FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsCRMID"));
            int intCRMID = Convert.ToInt32(fromTicket.Name);

            //btnCreateCustomer.Enabled = false;
            Button btnGetLOV = (Button)ucCustomerCodeLov.FindControl("btnGetLOV");
            TextBox txtName = (TextBox)ucCustomerCodeLov.FindControl("txtName");
            HiddenField hdnID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            btnGetLOV.Enabled = false;

            HiddenField hdnCustomerId = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");

            objProcedureParameter = new Dictionary<string, string>();
            objProcedureParameter.Add("@CRM_ID", intCRMID.ToString());
            objProcedureParameter.Add("@Company_ID", intCompanyId.ToString());

            DataSet dSet = Utility.GetDataset("S3G_CLN_GerCRMForApplication", objProcedureParameter);

            if (dSet != null && dSet.Tables[0].Rows.Count > 0)
            {
                txtName.Text = dSet.Tables[0].Rows[0]["Customer"].ToString();
                if (dSet.Tables[0].Rows[0]["Customer_ID"] != DBNull.Value)
                {
                    hdnCustID.Value = hdnID.Value = dSet.Tables[0].Rows[0]["Customer_ID"].ToString();
                }
                btnLoadCustomer_OnClick(null, null);
                ddlLOB.SelectedValue = dSet.Tables[0].Rows[0]["LOB_ID"].ToString();
                ddlLOB_SelectedIndexChanged(null, null);
                ddlBranchList.SelectedValue = dSet.Tables[0].Rows[0]["LocationID"].ToString();
                ddlBranch_SelectedIndexChanged(null, null);
                txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(dSet.Tables[0].Rows[0]["Finance_Amount"].ToString());


                txtTenure.Text = dSet.Tables[0].Rows[0]["Tenure"].ToString();
                ddlTenureType.SelectedValue = "134";
                ddlTenureType.ClearDropDownList();

                if (dSet.Tables[1].Rows.Count == 0)
                {
                    dSet.Tables[1].Rows.Add();
                    dSet.Tables[1].Columns.Add("AssetValue", typeof(decimal));
                    gvAssetDetails.DataSource = dSet.Tables[1];
                    gvAssetDetails.DataBind();
                    txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();



                    txtMarginAmount.Text = "";

                    txtFinanceAmount.Text = "";

                    txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();

                    txtdiscount.Text = "";

                    gvAssetDetails.Rows[0].Cells.Clear();
                    gvAssetDetails.Rows[0].Visible = false;
                    gvAssetDetails.Visible = false;
                    dSet.Tables[1].Rows.Clear();
                }
                else
                {
                    gvAssetDetails.DataSource = dSet.Tables[1];
                    gvAssetDetails.DataBind();
                    txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();


                    decimal dcmMarginAmount = (decimal)(dSet.Tables[1].Compute("Sum(Margin_Amount_1)", "Noof_Units > 0"));
                    txtMarginAmount.Text = Utility.funPubChangeCurrencyFormat((dcmMarginAmount == 0) ? "" : dcmMarginAmount.ToString(Funsetsuffix()));
                    decimal dcmAssetFinAmount2 = (decimal)(dSet.Tables[1].Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                    txtFinanceAmount.Text = (dcmAssetFinAmount2 == 0) ? "" : dcmAssetFinAmount2.ToString(Funsetsuffix());
                    txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(txtFinanceAmount.Text);

                    if (ViewState["StartDelayRate"] != null)
                    {
                        txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                        txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix()));
                    }

                    txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
                    decimal dcmAssetTradeIn = (decimal)(dSet.Tables[1].Compute("Sum(Trade_In_1)", "Noof_Units > 0"));
                    txtdiscount.Text = (dcmAssetTradeIn == 0) ? "" : dcmAssetTradeIn.ToString(Funsetsuffix());
                    txtdiscount.funPubChangeCurrencyFormat();


                    gvAssetDetails.Visible = true;
                    //gvAssetDetails.Columns[7].Visible = false;
                    Session["PricingAssetDetails"] = ViewState["ObjDTAssetDetails"] = dSet.Tables[1];


                    if (ViewState["StartDelayRate"] != null)
                    {
                        txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                        txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix()));
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriSetMaxLength_gvOutFlow()
    {
        try
        {
            if (gvOutFlow.FooterRow != null)
            {
                TextBox txtAmountOutflow = gvOutFlow.FooterRow.FindControl("txtAmount_Outflow") as TextBox;
                //txtAmountOutflow.SetDecimalPrefixSuffix(10, 0, true, "Outflow Amount");
                txtAmountOutflow.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, "Finance Amount");//5366
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriSetMaxLength_gvInflow()
    {
        try
        {
            if (gvInflow.FooterRow != null)
            {
                TextBox txtAmountInflow = gvInflow.FooterRow.FindControl("txtAmount_Inflow") as TextBox;
                txtAmountInflow.SetDecimalPrefixSuffix(10, 0, true, "Inflow Amount");
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriSetMaxLength_gvRepaymentDetails()
    {

        try
        {
            if (gvRepaymentDetails.FooterRow != null)
            {
                TextBox txtPerInstall = gvRepaymentDetails.FooterRow.FindControl("txtPerInstallmentAmount_RepayTab") as TextBox;
                txtPerInstall.SetDecimalPrefixSuffix(10, 3, false, false, "Per Installment Amount");

                TextBox txtBreakPer = gvRepaymentDetails.FooterRow.FindControl("txtBreakup_RepayTab") as TextBox;
                txtBreakPer.SetDecimalPrefixSuffix(2, 2, false, false, "Break up Percentage");

                TextBox ObjtxtFromInstallment = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;
                ObjtxtFromInstallment.SetDecimalPrefixSuffix(3, 0, true, false, "From Installment");

                TextBox ObjtxtToInstallment = gvRepaymentDetails.FooterRow.FindControl("txtToInstallment_RepayTab") as TextBox;
                ObjtxtToInstallment.SetDecimalPrefixSuffix(3, 0, true, false, "To Installment");
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriSetMaxLength()
    {

        /*txtMarginMoneyPer_Cashflow.SetDecimalPrefixSuffix(2, 4, false, false, "Margin %");
        txtMarginMoneyAmount_Cashflow.CheckGPSLength(false, "Margin Amount");

        txtMarginPercentage.SetDecimalPrefixSuffix(2, 4, false, false, "Margin %");
        txtMarginAmountAsset.CheckGPSLength(false, "Margin Amount");

        txtRate.SetDecimalPrefixSuffix(5, 4, false, false, "Rate");

        txt_Margin_Percentage.SetDecimalPrefixSuffix(2, 4, false, false, "Margin %");

        txtResidualValue_Cashflow.SetDecimalPrefixSuffix(2, 2, false, false, "Residual Value");
        txtResidualAmt_Cashflow.CheckGPSLength(false, "Residual Amount");

        txtFacilityAmt.CheckGPSLength(true, "Facility Amount");
        txtUnitValue.SetDecimalPrefixSuffix(10, 2, true, "Unit Value");

        //txtCompanyIRR.SetDecimalPrefixSuffix(10, 4, true);
        //txtCompanyIRR_Repay.SetDecimalPrefixSuffix(10, 4, true);

        //txtBusinessIRR.SetDecimalPrefixSuffix(10, 4, true);
        //txtBusinessIRR_Repay.SetDecimalPrefixSuffix(10, 4, true);

        //txtAccIRR.SetDecimalPrefixSuffix(10, 4, true);
        //txtAccountIRR_Repay.SetDecimalPrefixSuffix(10, 4, true);

        Button btnAdd_OutFlow = gvOutFlow.FooterRow.FindControl("btnAddOut") as Button;
        btnAdd_OutFlow.Attributes.Add("onclick", "FunChkAllFooterValues(" + gvOutFlow.ClientID + ");");

        Button btnAdd_Inflow = gvInflow.FooterRow.FindControl("btnAdd") as Button;
        btnAdd_Inflow.Attributes.Add("onclick", "FunChkAllFooterValues(" + gvInflow.ClientID + ");");*/

        FunPriSetMaxLength_gvOutFlow();
        FunPriSetMaxLength_gvInflow();
        FunPriSetMaxLength_gvRepaymentDetails();
        FunPriSetMaxLength_gvGuarantor();
    }

    private void FunPriSetMaxLength_gvGuarantor()
    {
        try
        {
            if (gvGuarantor.FooterRow != null)
            {
                TextBox txtGuaranteeamount_GuarantorTab3 = gvGuarantor.FooterRow.FindControl("txtGuaranteeamount_GuarantorTab_Footer") as TextBox;
                txtGuaranteeamount_GuarantorTab3.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, "Guarantee Amount");
                //txtGuaranteeamount_GuarantorTab3.Attributes.Add("onkeypress", "fnAllowNumbersOnly('true','false','" + txtGuaranteeamount_GuarantorTab3.ClientID + "')");
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void PreparePageForWFLoad()
    {

        try
        {
            WorkFlowSession WFSessionValues = new WorkFlowSession();

            objProcedureParameter = new Dictionary<string, string>();
            objProcedureParameter.Add("@EnquiryNo", WFSessionValues.WorkFlowDocumentNo);
            objProcedureParameter.Add("@CompanyId", intCompanyId.ToString());
            if (!string.IsNullOrEmpty(WFSessionValues.Document_Type.ToString()))
                objProcedureParameter.Add("@Document_Type", WFSessionValues.Document_Type.ToString());
            DataSet dsWFData = new DataSet();
            dsWFData = Utility.GetDataset("S3G_WORKFLOW_LoadApplication", objProcedureParameter);
            if (dsWFData.Tables.Count > 0)
            {
                if (dsWFData.Tables[0].Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dsWFData.Tables[0].Rows[0]["Doc_Id"].ToString()))
                    {
                        ddlApplicationNo.SelectedText = WFSessionValues.WorkFlowDocumentNo;
                        ddlApplicationNo.SelectedValue = dsWFData.Tables[0].Rows[0]["Doc_Id"].ToString();
                    }

                    ddlLOB.SelectedValue = dsWFData.Tables[0].Rows[0]["LOB_ID"].ToString(); ;
                }
                FunPriToggleOfferNoBased();

            }

            if (ddlLOB.SelectedIndex > 0) ddlLOB.ClearDropDownList();
            //if (ddlBranchList.SelectedIndex > 0) ddlBranchList.ClearDropDownList();
            ddlBranchList.Enabled = false;
            if (ddlBusinessOfferNoList.SelectedIndex > 0) ddlBusinessOfferNoList.ClearDropDownList();
            //btnClear.Enabled = false;
            btnClear.Enabled_False();

            ddlApplicationNo_Item_Selected(ddlApplicationNo.SelectedValue, null);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private decimal FunPriGetMarginAmout()
    {
        decimal decMarginAmount = 0;
        try
        {

            if (((!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("FT")) && (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("WC"))))
            {
                if (txt_Margin_Percentage.Text != "" && txtFinanceAmount.Text != "")
                {
                    if (Session["PricingAssetDetails"] != null)
                    {
                        decimal dcmTotalAssetValue = Convert.ToDecimal(((DataTable)Session["PricingAssetDetails"]).Compute("Sum(UNIT_VALUE_1)", "Noof_Units > 0"));

                        decMarginAmount = (dcmTotalAssetValue * (Convert.ToDecimal(txtMarginMoneyPer_Cashflow.Text) / 100));
                    }
                    else
                    {
                        decMarginAmount = (Convert.ToDecimal(txtFinanceAmount.Text) * (Convert.ToDecimal(txtMarginMoneyPer_Cashflow.Text) / 100));
                    }
                }
                else
                {
                    decMarginAmount = 0;
                }

            }
            else
            {
                decMarginAmount = 0;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return decMarginAmount;
    }

    private void FunPriDisableControls(int intModeID)
    {
        try
        {
            switch (intModeID)
            {
                case 0: // Create Mode
                    lblHeading.Text = strProgramName + " - Create"; //FunPubGetPageTitles(enumPageTitle.Create);
                    Label lblUserVal = (Label)Page.Master.FindControl("lblPageName");

                    if (!bCreate)
                    {
                        //btnSave.Enabled = false;
                        btnSave.Enabled_False();

                    }
                    ViewState["mode"] = strAddMode;
                    intApplicationProcessId = 0;

                    FunPriSetInitialSettings();
                    FunPriFillMainPageDLL();
                    FunPriInitializeControls();
                    FunProGetIRRDetails();
                    TabContainerMainTab.ActiveTabIndex = 0;
                    //btnApplicationCancel.Visible = false;
                    btnPrint.Enabled = false;
                    lblRoundNumber.Visible = lblRoundNo.Visible = false;
                    btnApplicationCancel.Enabled_False();
                    //ddlDealType_SelectedIndexChanged(null, null);
                    // FunProIntializeFacChargeGridData();

                    txt_Recovery_Pattern_Year1.Enabled = false;
                    txt_Recovery_Pattern_Year2.Enabled = false;
                    txt_Recovery_Pattern_Year3.Enabled = false;
                    txt_Recovery_Pattern_Rest.Enabled = false;
                    chk_lblResidual_Value.Enabled = false;
                    if (ddlLOB.SelectedValue == "2")
                    {
                        pnlPromoter.Visible = true;
                    }
                    else
                    {
                        pnlPromoter.Visible = false;
                    }
                    break;

                case 1: // Modify Mode
                    lblHeading.Text = strProgramName + " - Modify"; //FunPubGetPageTitles(enumPageTitle.Create);

                    //rfvtxtPassword.Enabled = false;
                    //lblRoundNumber.Visible = lblRoundNo.Visible = true;
                    dvprint.Visible = true;
                    btnKYCPDFPrint.Visible = true;
                    FunPriLoadApplicationDetails();
                    FunPriSetInitialSettings();
                    btnApplicationCancel.Enabled_True();
                    TabContainerAP.ActiveTabIndex = 0;
                    btnClear.Enabled_False();
                    ucCustomerCodeLov.ButtonEnabled = false;
                    //ddldealerSalesPerson.Enabled = false;
                    ddlDealerschemename.Enabled = false;
                    if (ddlStatus.SelectedValue == "2" || ddlStatus.SelectedValue == "4" || ddlStatus.SelectedValue == "5")
                    {
                        btnApplicationCancel.Enabled_False();
                    }
                    else
                    {
                        btnApplicationCancel.Enabled_True();
                    }
                    //}
                    FunPriToggleModeControls();
                    TabContainerMainTab.ActiveTabIndex = 0;
                    //btnPrint.Enabled = true;
                    //rfvtxtPassword.Enabled = false;
                    //btnCreateCustomer.Visible = false;
                    //rfvBusinessOfferNo.Enabled = false;
                    if (ddlBusinessOfferNoList.SelectedValue != "-1")
                    {
                        if (gvAssetDetails.Rows.Count > 0)
                        {
                            gvAssetDetails.Columns[7].Visible = false;
                        }
                    }
                    else
                    {
                        FunPriAssignAssetLink();
                    }
                    ddlApplicationNo.Enabled = false;
                    //txtMLAFinanceAmount.ReadOnly = true;
                    //added by saranya
                    if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC") ||
                        ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT") ||
                        ((ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TE") ||
                        ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL")) &&
                        ddl_Repayment_Mode.SelectedItem.Text.ToUpper().StartsWith("PRO")))

                        TabContainerAP.Tabs[2].Enabled = false;
                    else
                        TabContainerAP.Tabs[2].Enabled = true;

                    //end

                    if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT"))
                    {
                        //grvRepayStructure.Columns[5].Visible = false;
                        //grvRepayStructure.Columns[6].Visible = true;
                        //grvRepayStructure.Columns[7].Visible = true;
                        //grvRepayStructure.Columns[8].Visible = false;
                        grvRepayStructure.Columns[9].Visible = false;
                        grvRepayStructure.Columns[10].Visible = false;
                    }
                    else
                    {
                        //grvRepayStructure.Columns[5].Visible = true;
                        //grvRepayStructure.Columns[6].Visible = false;
                        //grvRepayStructure.Columns[7].Visible = false;
                    }
                    if (gvRepaymentDetails.Rows.Count > 1)
                        ((LinkButton)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lnRemoveRepayment")).Visible = true;
                    //ddlDealType_SelectedIndexChanged(null, null);
                    ddlCreditPurpose.Enabled = false;
                    cmbSubLocation.Enabled = false;
                    cmbSubLocationFWC.Enabled = false;
                    ddlContType.Enabled = false;
                    ddlDealTransfer.Enabled = false;
                    btnCreateCustomer.Attributes.Add("disabled", "disabled");
                    btnCreateCustomer.Attributes.Add("class", "btn_control_disable");  // enab
                    ucCustomerCodeLov.ButtonEnabled = false;


                    txt_Recovery_Pattern_Year1.Enabled = false;
                    txt_Recovery_Pattern_Year2.Enabled = false;
                    txt_Recovery_Pattern_Year3.Enabled = false;
                    txt_Recovery_Pattern_Rest.Enabled = false;
                    chk_lblResidual_Value.Enabled = false;

                    ucCustomerCodeLov.Enabled = false;
                    if (ddlLOB.SelectedValue == "2")
                    {
                        pnlPromoter.Visible = true;
                    }
                    else
                    {
                        pnlPromoter.Visible = false;
                    }
                    if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("HP") || ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL"))
                    {
                        if (ddl_Repayment_Mode.SelectedValue != "2")//SAP
                        {
                            Panel2.Visible = false;
                        }
                        else
                        {
                            Panel2.Visible = true;
                        }
                    }
                    if (ViewState["CHK_APPDT"].ToString() == "1")
                    {
                        txtApplicationDateDate.Enabled = true;
                        CalendarApplicationDate.Enabled = true;
                        rfvApplicationDate.Enabled = true;
                    }
                    if (ddlDealTransfer.SelectedValue == "1")
                    {
                        txtFinanceAmount.ReadOnly = false;
                    }
                    txtFacilityEndDate.Enabled = true;
                    fltFacilityEndDate.Enabled = true;
                    rfvtxtFacilityEndDate.Enabled = true;
                    if (!bModify)
                    {
                        //btnSave.Enabled = false;
                        btnSave.Enabled_False();

                    }
                    else
                    {
                        btnSave.Enabled_True();
                    }
                    break;


                case -1:// Query Mode
                    //lblHeading.Text = FunPubGetPageTitles(enumPageTitle.View);
                    lblHeading.Text = strProgramName + " - View";
                    //btnSave.Enabled = false;
                    btnSave.Enabled_False();
                    ucCustomerCodeLov.ButtonEnabled = false;
                    //FunPriLoadApplicationDetails();

                    if (Request.QueryString["Is_RiskApvl"] != null)
                    {
                        FunPriLoadTenureType();
                        FunPriLoadRiskApprovalDetails();
                    }
                    else
                    {
                        FunPriLoadApplicationDetails();
                    }
                    dvprint.Visible = true;
                    btnKYCPDFPrint.Visible = true;
                    lblRoundNumber.Visible = lblRoundNo.Visible = false;
                    FunPriSetInitialSettings();
                    TabContainerAP.ActiveTabIndex = 0;

                    TabContainerMainTab.ActiveTabIndex = 0;
                    if (!bQuery)
                    {
                        Response.Redirect(strRedirectPage, false);
                    }
                    if (bClearList)
                    {
                        ddlLOB.ClearDropDownList();
                        ddlBranchList.Enabled = false;
                        //ddlBusinessOfferNoList.ClearDropDownList();
                        //ddlSalePersonCodeList.ClearDropDownList();
                        ddlTenureType.ClearDropDownList();
                        //ddlROIRuleList.ClearDropDownList();

                        if (ddlROIRuleList.Items.Count > 0)
                        {
                            ddlROIRuleList.ClearDropDownList();
                        }

                        if (ddlPaymentRuleList.Items.Count > 0)
                        {
                            ddlPaymentRuleList.ClearDropDownList();
                        }

                    }
                    txtPdcStartDate.Enabled = false;
                    ddlApplicationNo.Enabled = false;
                    btnFetchPayment.Visible = btnFetchROI.Visible = false;
                    txtCustomerCode.ReadOnly =
                    txtTenure.ReadOnly = txtMarginAmount.ReadOnly = txtResidualValue.ReadOnly = txtMarginMoneyAmount_Cashflow.ReadOnly =
                    txtMarginMoneyPer_Cashflow.ReadOnly = txtResidualAmt_Cashflow.ReadOnly = txtResidualValue_Cashflow.ReadOnly = true;
                    ChkRefinanceContract.Enabled = false;
                    if (gvInflow.FooterRow != null)
                        gvInflow.FooterRow.Visible = gvInflow.Columns[8].Visible = false;
                    if (gvOutFlow.FooterRow != null)
                        gvOutFlow.FooterRow.Visible = gvOutFlow.Columns[8].Visible = false;
                    if (gvRepaymentDetails.FooterRow != null)
                        gvRepaymentDetails.FooterRow.Visible = gvRepaymentDetails.Columns[10].Visible = false;
                    if (gvGuarantor.Rows.Count > 0)
                    {
                        gvGuarantor.FooterRow.Visible = gvGuarantor.Columns[gvGuarantor.Columns.Count - 1].Visible = false;
                    }
                    if (gvAlert.FooterRow != null)
                        gvAlert.FooterRow.Visible = gvAlert.Columns[6].Visible = false;
                    if (gvFollowUp.FooterRow != null)
                        gvFollowUp.FooterRow.Visible = gvFollowUp.Columns[9].Visible = false;


                    if (grvLienAccount.FooterRow != null)
                    {
                        grvLienAccount.FooterRow.Visible = grvLienAccount.Columns[grvLienAccount.Columns.Count - 1].Visible = false;
                    }
                    ddlLienAccount.Enabled = false;
                    ddlLienAccount.PostBackButtonEnabled = false;

                    btnLienAccount.Enabled_False();

                    //if (gvMoratorium.Rows.Count > 0)
                    //{
                    //    gvMoratorium.FooterRow.Visible = gvMoratorium.Columns[4].Visible = false;
                    //}
                    btnReset.Enabled_False();
                    btnCalIRR.Enabled_False();
                    btnApplicationCancel.Visible = btnAddAsset.Visible = false;
                    btnClear.Enabled_False();
                    if (gvAssetDetails.Rows.Count > 0)
                    {
                        gvAssetDetails.Columns[7].Visible = false;
                    }
                    // ddlDoyouWant_MLA.ClearDropDownList();
                    btnCreateCustomer.Visible =
                        //CalendarExtenderED.Enabled = btnConfigure.Enabled = false;
                        //btnPrint.Enabled = true;
                    btnAddAsset.Visible = false;
                    btnCreateCustomer.Visible = false;// txtPassword.ReadOnly =
                    //txtMLANo.ReadOnly = txtValidFrom_MLA.ReadOnly = txtValidTo_MLA.ReadOnly = true;

                    ddl_Frequency.Enabled = txt_Margin_Percentage.Enabled = ddl_Time_Value.Enabled =
                    ddl_Insurance.Enabled =
                    txtRate.Enabled = false;
                    //added by saranya
                    if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC") ||
                        ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT") ||
                        ((ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TE") ||
                       ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL")) &&
                        ddl_Repayment_Mode.SelectedItem.Text.ToUpper().StartsWith("PRO")))

                        TabContainerAP.Tabs[2].Enabled = false;
                    else
                        TabContainerAP.Tabs[2].Enabled = true;
                    //end
                    if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT"))
                    {
                        //grvRepayStructure.Columns[5].Visible = false;
                        //grvRepayStructure.Columns[6].Visible = true;
                        //grvRepayStructure.Columns[7].Visible = true;
                        //grvRepayStructure.Columns[8].Visible = false;
                        grvRepayStructure.Columns[9].Visible = false;
                        grvRepayStructure.Columns[10].Visible = false;
                    }
                    else
                    {
                        //grvRepayStructure.Columns[5].Visible = true;
                        //grvRepayStructure.Columns[6].Visible = false;
                        //grvRepayStructure.Columns[7].Visible = false;
                    }
                    btnApplicationCancel.Enabled_False();


                    foreach (GridViewRow grv in gvAssetDetails.Rows)
                    {
                        LinkButton lnRemove = (LinkButton)grv.FindControl("lnRemove");
                        lnRemove.Enabled = false;
                        lnRemove.OnClientClick = null;
                        lnRemove.CssClass = "grid_btn_delete_disabled";

                    }

                    //ddlDealType_SelectedIndexChanged(null, null);
                    ddlCreditPurpose.Enabled = false;
                    cmbSubLocation.Enabled = false;
                    cmbSubLocationFWC.Enabled = false;
                    ddlContType.Enabled = false;
                    ddlDealTransfer.Enabled = false;
                    btnCreateCustomer.Attributes.Add("disabled", "disabled");
                    btnCreateCustomer.Attributes.Add("class", "btn_control_disable");  // enab
                    ucCustomerCodeLov.ButtonEnabled = false;
                    ddlDealType.Enabled = false;
                    ddlLeadSource.Enabled = false;
                    ddlLeadSourceName.Enabled = false;
                    txtLeadOtherSource.Enabled = false;
                    ddlBusinessSource.Enabled = false;
                    ddldc.Enabled = false;
                    ddlDealerCommissionApplicable.Enabled = false;
                    txtFirstInstallDate.Enabled = false;
                    CEFirstInstallDate.Enabled = false;
                    ddlRepamentMode.Enabled = false;
                    ddlExistenceofFirstCharge.Enabled = false;
                    ddlExistenceofsecondcharge.Enabled = false;
                    txtGracePeriodInDays.Enabled = false;
                    ddlStartDelayChargesApplicable.Enabled = false;
                    txtNoofDaystobeconsidered.Enabled = false;
                    txtDelayDays.Enabled = false;
                    txtStartDatedelayrate.Enabled = false;
                    txtStartdelaycharges.Enabled = false;
                    txtOverDueCharges.Enabled = false;
                    ddlLifeInsurance.Enabled = false;
                    ddlLifeInsuranceEntity.Enabled = false;
                    txtLifeInsuranceCustRate.Enabled = false;
                    txtLifeInsuranceCompanyRate.Enabled = false;
                    txtLifeInsuranceCompanyAmount.Enabled = false;
                    txtLifeInsuranceCustomerPremiumAmount.Enabled = false;
                    txtInsuranceTaxRate.Enabled = false;
                    txtInsuranceCompanyTaxAmount.Enabled = false;
                    txtInsuranceCustomerTaxAmount.Enabled = false;

                    ddlRiskRating.Enabled = false;
                    txtRiskDocumentNo.Enabled = false;
                    txtRiskScore.Enabled = false;
                    txtRiskDocumentNo.Enabled = false;
                    ddlRiskQualityValue.Enabled = false;
                    txtAMLClasification.Enabled = false;
                    txtRiskRemarks.Enabled = false;

                    txtLOB_Followup.Enabled = false;
                    txtBranch_Followup.Enabled = false;
                    txtCustNameAdd_Followup.Enabled = false;
                    txtOfferNo_Followup.Enabled = false;
                    txtApplication_Followup.Enabled = false;


                    //FT Disable
                    ucCustomerLovFWC.ButtonEnabled = false;
                    ddlBranchListFWC.Enabled = false;
                    cmbSubLocationFWC.Enabled = false;
                    txtApplicationDateFWC.Enabled = false;
                    ddlProductCodeListFWC.Enabled = false;
                    txtFacilityStartDate.Enabled = false;
                    txtFacilityEndDate.Enabled = false;
                    txtAuditor.Enabled = false;
                    ucCustomerLovCustomerMapFWC.ButtonEnabled = false;
                    txtEvaluator.Enabled = false;
                    ddlRelationshipManager.Enabled = false;
                    ucCustomerLovCustomerMapFWC.Enabled = false;
                    txtLimitF.Enabled = false;
                    lnkAdd.Enabled_False();
                    if (grvCustSubLimit.FooterRow != null)
                    {
                        grvCustSubLimit.FooterRow.Visible = false;
                    }
                    if (grvCustSubLimit.Columns.Count > 0)
                    {
                        grvCustSubLimit.Columns[grvCustSubLimit.Columns.Count - 1].Visible = false;
                    }
                    ddlROIRuleList.Enabled = false;
                    rfvddlROIRuleList.Enabled = false;
                    btnFetchROI.Enabled_False();

                    ddlPaymentRuleList.Enabled = false;
                    rfvddlPaymentRuleList.Enabled = false;
                    btnFetchPayment.Enabled_False();

                    //FT Offer Terms
                    txtDebtPurchaseLimitFWC.Enabled = true;
                    txtMarginFWC.Enabled = false;
                    txtPrePaymentLimitFWC.Enabled = true;
                    txtInvoiceCapValue.Enabled = true;
                    txtDiscountRateforLineofCredit.Enabled = false;
                    txtPenalRate.Enabled = false;
                    txtCreditPeriodInDays.Enabled = false;
                    txtGracePeriodInDays.Enabled = false;
                    txtDisbuteGracePeriodInDays.Enabled = false;
                    txtResolutionPeriodinDays.Enabled = false;
                    txtRemarksFWC.Enabled = false;


                    ddlProductCodeList.Enabled = false;
                    ucCustomerCodeLov.Enabled = false;
                    txtSellerCode.Enabled = false;
                    txtSellerName.Enabled = false;
                    txt_Model_Description.Enabled = false;
                    txt_Recovery_Pattern_Year1.Enabled = false;
                    txt_Recovery_Pattern_Year2.Enabled = false;
                    txt_Recovery_Pattern_Year3.Enabled = false;
                    txt_Recovery_Pattern_Rest.Enabled = false;
                    chk_lblResidual_Value.Enabled = false;
                    chk_lblMargin.Enabled = false;


                    if (gvFACCharges.FooterRow != null)
                    {
                        gvFACCharges.Columns[gvFACCharges.Columns.Count - 1].Visible = false;
                    }

                    if (grvDiscountRateforUtilization.FooterRow != null)
                    {
                        grvDiscountRateforUtilization.Columns[grvCustSubLimit.Columns.Count - 1].Visible = false;
                    }
                    if (grvTransferDeal.Rows.Count > 0)
                    {
                        grvTransferDeal.Columns[grvTransferDeal.Columns.Count - 1].Visible = false;
                        grvTransferDeal.FooterRow.Visible = false;
                        ddlDealTransfer.Enabled = false;
                        btnAddDeal.Enabled_False();

                    }
                    txt_Recovery_Pattern_Year1.Enabled = false;
                    txt_Recovery_Pattern_Year2.Enabled = false;
                    txt_Recovery_Pattern_Year3.Enabled = false;
                    txt_Recovery_Pattern_Rest.Enabled = false;
                    chk_lblResidual_Value.Enabled = false;
                    ddlDealerName.Enabled = false;
                    ddldealerSalesPerson.Enabled = false;
                    ddlDealerschemename.Enabled = false;
                    txtFinanceAmount.Enabled = false;
                    ddl_Repayment_Mode.Enabled = false;
                    ddl_IRR_Rest.Enabled = false;

                    if (gvFACCharges.Rows.Count > 0)
                    {
                        if (gvFACCharges != null)
                        {
                            gvFACCharges.FooterRow.Visible = false;
                        }
                    }
                    if (grvDiscountRateforUtilization.Rows.Count > 0)
                    {
                        if (grvDiscountRateforUtilization != null)
                        {
                            grvDiscountRateforUtilization.FooterRow.Visible = false;
                        }
                    }
                    ddlLOB.Enabled = false;

                    grvPropomoter.Columns[grvPropomoter.Columns.Count - 1].Visible = false;
                    txtGeneralRemarks.Enabled = false;
                    ddlPNTD.Enabled = false;
                    ddlInstallmentRoundOff.Enabled = false;

                    //chkRiskStage.Enabled = false;
                    //ChkDataEntryRootback.Enabled = false;
                    chkDataEntryStage.Enabled = false;
                    btnSave.Enabled_False();

                    if (ddlLOB.SelectedValue == "2")
                    {
                        pnlPromoter.Visible = true;
                    }
                    else
                    {
                        pnlPromoter.Visible = false;
                    }

                    if (Request.QueryString["Is_RiskApvl"] != null)
                    {
                        TabContainerAP.Tabs[1].Visible = TabContainerAP.Tabs[2].Visible = TabContainerAP.Tabs[3].Visible = TabContainerAP.Tabs[4].Visible = TabContainerAP.Tabs[5].Visible = false;
                    }
                    pnlApplicanAppraisaltDetails.Enabled = false;
                    pnlPromoter.Enabled = false;
                    break;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPubQueryExistCustomerListEnquiryUpdation(int CustomerID)
    {

        //objProcedureParameter = new Dictionary<string, string>();
        //objProcedureParameter.Add("@CustomerID", CustomerID.ToString());
        //objProcedureParameter.Add("@CompanyID", intCompanyId.ToString());
        //DataSet dsCustomer = Utility.GetDataset("S3G_Get_Exist_Customer_Details_Enquiry_Updation", objProcedureParameter);
        //hdnConstitutionId.Value = dsCustomer.Tables[0].Rows[0]["Constitution_Id"].ToString();
        //TextBox txtName = (TextBox)ucCustomerCodeLov.FindControl("txtName");
        //txtName.Text = txtCustomerCode.Text = dsCustomer.Tables[0].Rows[0]["Customer_Code"].ToString();
        //S3GCustomerAddress1.SetCustomerDetails(dsCustomer.Tables[0].Rows[0]["Customer_Code"].ToString(),
        //        dsCustomer.Tables[0].Rows[0]["comm_Address1"].ToString() + "\n" +
        // dsCustomer.Tables[0].Rows[0]["comm_Address2"].ToString() + "\n" +
        //dsCustomer.Tables[0].Rows[0]["comm_city"].ToString() + "\n" +
        //dsCustomer.Tables[0].Rows[0]["comm_state"].ToString() + "\n" +
        //dsCustomer.Tables[0].Rows[0]["comm_country"].ToString() + "\n" +
        //dsCustomer.Tables[0].Rows[0]["comm_pincode"].ToString(), dsCustomer.Tables[0].Rows[0]["Customer_Name"].ToString(), dsCustomer.Tables[0].Rows[0]["Comm_Telephone"].ToString(),
        //dsCustomer.Tables[0].Rows[0]["Comm_mobile"].ToString(),
        //dsCustomer.Tables[0].Rows[0]["comm_email"].ToString(), dsCustomer.Tables[0].Rows[0]["comm_website"].ToString());
        //txtConstitution.Text = dsCustomer.Tables[0].Rows[0]["Constitution"].ToString();

        //FunPriLoadConsitutionBasedCustomer(CustomerID);
        //Session["AssetCustomer"] = hdnCustID.Value + ";" + S3GCustomerAddress1.CustomerName;

    }

    private void FunPriToggleCustomerCodeBased()
    {
        try
        {
            //S3GCustomerAddress1.SetCustomerDetails("", "", "", "", "", "", "");
            //Session["AssetCustomer"] = "";
            //DataTable dt = (DataTable)System.Web.HttpContext.Current.Session["CustomerDT"];
            //if (dt.Rows.Count > 0 && txtCustomerCode.Text != "")
            //{

            //    string[] strSplit = txtCustomerCode.Text.Split('-');
            //    if (strSplit.Length == 1)
            //    {
            //        Utility.FunShowAlertMsg(this, "Customer Code doesnot Exist");
            //        S3GCustomerAddress1.SetCustomerDetails(txtCustomerCode.Text, "", "", "", "", "", "");
            //        txtConstitution.Text = "";
            //        grvConsDocuments.DataSource = null;
            //        grvConsDocuments.DataBind();
            //        return;
            //    }
            //    strSplit[1] = strSplit[1].ToString() + "-" + strSplit[2].ToString();
            //    string filterExpression = "Customer_Code = '" + strSplit[1].ToString() + "'";
            //    DataRow[] dtSuggestions = dt.Select(filterExpression);
            //    if (dtSuggestions.Length > 0)
            //    {
            //        txtCustomerCode.Text = strSplit[1].ToString();
            //        strCustomerId = dtSuggestions[0]["Customer_ID"].ToString();
            //        hdnCustID.Value = dtSuggestions[0]["Customer_ID"].ToString();
            //        strCustomerValue = dtSuggestions[0]["Customer_Code"].ToString();
            //        strCustomerName = dtSuggestions[0]["Customer_Name"].ToString();
            //        FunPubQueryExistCustomerListEnquiryUpdation(Convert.ToInt32(strCustomerId));
            //        Dictionary<string, string> Procparam = new Dictionary<string, string>();
            //        Procparam.Add("@Is_Active", "1");
            //        Procparam.Add("@User_Id", intUserId.ToString());
            //        Procparam.Add("@Company_ID", intCompanyId.ToString());
            //        Procparam.Add("@Consitution_Id", hdnConstitutionId.Value);
            //        ddlLOB.BindDataTable(SPNames.LOBMaster, Procparam, new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });
            //        Session["AssetCustomer"] = strCustomerId + ";" + strCustomerName;
            //    }
            //}
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriInitializeControls()
    {
        try
        {
            FunPriFillROIDLL(strAddMode);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriValidateApplicationStart()
    {
        try
        {
            objProcedureParameter = new Dictionary<string, string>();
            objProcedureParameter.Add("@COMPANYID", intCompanyId.ToString());
            objProcedureParameter.Add("@PROGRAMID", "38");
            DataSet dsGlobalStartPoint = Utility.GetDataset("S3G_ORG_GETSTARTINGPOINT", objProcedureParameter);
            if (dsGlobalStartPoint.Tables[0].Rows.Count > 0)
            {
                bool blnIsStartUp = Convert.ToBoolean(dsGlobalStartPoint.Tables[0].Rows[0]["APPLICATION_NUMBER"].ToString());
                if (blnIsStartUp)
                {
                    txtCustomerCode.ReadOnly = false;
                    btnCreateCustomer.Visible = true;
                    //rfvcmbCustomer.Enabled = true;
                    //rfvBusinessOfferNo.Enabled = false;
                    lblCustomerName.CssClass = "styleReqFieldLabel";
                    lblBusinessOfferNo.CssClass = "styleDisplayLabel";
                    if (dsGlobalStartPoint.Tables[1].Rows.Count > 0)
                    {
                        bool blnIsAllowROIModify = Convert.ToBoolean(dsGlobalStartPoint.Tables[1].Rows[0]["IS_PROGRAM"].ToString());
                        ViewState["PricingROIRuleModify"] = blnIsAllowROIModify;
                    }
                }
                else
                {
                    txtCustomerCode.ReadOnly = true;
                    btnCreateCustomer.Visible = false;
                    lblCustomerName.CssClass = "styleDisplayLabel";
                    lblBusinessOfferNo.CssClass = "styleReqFieldLabel";
                    //rfvcmbCustomer.Enabled = false;
                    //rfvBusinessOfferNo.Enabled = true;
                    if (dsGlobalStartPoint.Tables[1].Rows.Count > 0)
                    {
                        bool blnIsAllowROIModify = Convert.ToBoolean(dsGlobalStartPoint.Tables[1].Rows[0]["IS_PROGRAM"].ToString());
                        ViewState["PricingROIRuleModify"] = blnIsAllowROIModify;
                    }
                    else
                    {
                        //Utility.FunShowAlertMsg(this, "Define ROI Rule Modification in GlobalParameter setup");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege17));
                        return;
                    }
                }
            }
            else
            {
                //Utility.FunShowAlertMsg(this, "Define startup-screen in GlobalParameter setup");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege18));
                return;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    private void FunPriSetInitialSettings()
    {
        try
        {
            //txtMLANo.Attributes.Add("readonly", "readonly");
            //txtValidFrom_MLA.Attributes.Add("readonly", "readonly");
            //txtValidTo_MLA.Attributes.Add("readonly", "readonly");
            //CalendarExtenderED.Format = strDateFormat;
            if (intApplicationProcessId == 0)
            {
                //txtApplicationDateDate.Text = DateTime.Now.Date.ToString(strDateFormat);
                //txtIncomeBookStartDate.Text = DateTime.Now.Date.ToString(strDateFormat);
                txtFirstInstallDate.Text = DateTime.Now.Date.ToString(strDateFormat);
                //funCheckGPSMonth();
                //txtStatus.Text = "Pending";
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriClearForms()
    {
        try
        {
            ViewState["mode"] = strAddMode;

            #region Main Tab

            ChkRefinanceContract.Checked = false;
            FunPriClearGrid(grvConsDocuments);
            FunPriClearGrid(gvPRDDT);
            FunPriClearGrid(gvAssetDetails);
            txtProposalNumber.Text = txtApplicationDateDate.Text =
                //txtValidFrom_MLA.Text = txtDate.Text = txtBusinessIRR.Text = txtCompanyIRR.Text = txtAccountingIRR.Text =
            txtFinanceAmount.Text = txtTenure.Text = txtMarginAmount.Text = txtResidualValue.Text = string.Empty;
            #endregion

            #region Offer Terms
            FunPriClearGrid(gvPaymentRuleDetails);
            chk_lblMargin.Enabled = false;
            chk_lblResidual_Value.Checked = false;
            chk_lblMargin.Checked = false;
            txt_Model_Description.Text = txt_ROI_Rule_Number.Text = txt_Recovery_Pattern_Year1.Text =
            txt_Recovery_Pattern_Year2.Text = txt_Recovery_Pattern_Year3.Text = txt_Recovery_Pattern_Rest.Text =
            txt_Margin_Percentage.Text = txtResidualValue_Cashflow.Text = txtResidualAmt_Cashflow.Text = txtMarginMoneyPer_Cashflow.Text =
            txtMarginMoneyAmount_Cashflow.Text = string.Empty;

            FunPriClearGrid(gvOutFlow);
            FunPriClearGrid(gvInflow);

            #endregion

            #region Repayment
            txtAccountIRR_Repay.Text = txtCompanyIRR_Repay.Text = txtBusinessIRR_Repay.Text = string.Empty;
            FunPriClearGrid(gvRepaymentDetails);
            #endregion

            #region GuaranteeInvoice Details
            FunPriClearGrid(gvCollateralDetails);
            FunPriClearGrid(gvGuarantor);
            FunPriClearGrid(gvInvoiceDetails);
            #endregion

            #region Alert
            FunPriClearGrid(gvAlert);
            #endregion

            #region Followup
            FunPriClearGrid(gvFollowUp);
            txtApplication_Followup.Text = txtOfferNo_Followup.Text = txtCustNameAdd_Followup.Text = txtEnquiryDate_Followup.Text =
            txtEnquiry_Followup.Text = txtBranch_Followup.Text = txtLOB_Followup.Text = string.Empty;
            #endregion

            #region MLA/SLA Details
            //FunPriClearGrid(gv_MLARepayRuleCard);
            //FunPriClearGrid(gv_MLAROI);
            //txtPassword.Text = txtMLANo.Text = txtValidTo_MLA.Text = txtROIMLA.Text = txtPaymentCardMLA.Text = string.Empty;
            //ddlDoyouWant_MLA.Enabled = true;
            #endregion

            #region Moratorium Details
            //FunPriClearGrid(gvMoratorium);
            #endregion

            #region Clear view state
            //txtStatus.Text = "Pending";

            intApplicationProcessId = 0;
            #endregion

            FunPriInitializeControls();


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriClearGrid(GridView Gv)
    {
        try
        {
            Gv.Dispose();
            Gv.DataSource = null;
            Gv.DataBind();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriSetDDLFirstitem(DropDownList DDl)
    {
        try
        {
            DDl.SelectedValue = "-1";
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriSetDDLFirstitem(AjaxControlToolkit.ComboBox DDl)
    {
        try
        {
            DDl.SelectedValue = "-1";
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private bool FunPriDisableValueField(string str)
    {
        string[] strsp = new string[2];
        strsp = str.Split('-');

        if (strsp[0].ToString() != "CID")
            return false;
        else
            return true;

    }

    private void FunPriSetWhiteSpaceDLL(DropDownList ObjDLL)
    {
        try
        {
            if (ObjDLL.Items.Count == 0)
            {
                ListItem liSelect = new ListItem("", "-1");
                ObjDLL.Items.Insert(0, liSelect);
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriMLASLAApplicable(int intLobId)
    {
        ContractMgtServicesReference.ContractMgtServicesClient objContractMgtserviceClient = new ContractMgtServicesReference.ContractMgtServicesClient();
        try
        {
            byte[] ObjPricingDataTable = objContractMgtserviceClient.FunPubGetMLASLAApplicable(Convert.ToInt32(ddlLOB.SelectedValue), intCompanyId);

            DataSet dsMLASLAApplicable = (DataSet)ClsPubSerialize.DeSerialize(ObjPricingDataTable, SerializationMode.Binary, typeof(DataSet));
            if (dsMLASLAApplicable.Tables.Count > 0)
            {
                if (dsMLASLAApplicable.Tables[0].Rows.Count > 0)
                {
                    string strMLASLAApplicable = dsMLASLAApplicable.Tables[0].Rows[0][0].ToString();
                    ViewState["strMLASLAApplicable"] = strMLASLAApplicable;
                    if (strMLASLAApplicable == "False")
                    {
                        TabContainerAP.Tabs[6].Visible = false;
                        //rfvtxtPassword.Enabled = false;
                        //rfvtxtValidTo_MLA.Enabled = false;
                    }
                    else
                    {
                        TabContainerAP.Tabs[6].Visible = true;
                        //rfvtxtPassword.Enabled = true;
                        //rfvtxtValidTo_MLA.Enabled = true;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {
            objContractMgtserviceClient.Close();
        }
    }

    private void FunPriLOBBasedvalidations(string strLobName, string strLobId, string strTMode, string StrRuleID)
    {
        try
        {

            if (strTMode == strAddMode)
            {
                objProcedureParameter = new Dictionary<string, string>();

                if (strMode.ToUpper().Trim() != "Q")
                    objProcedureParameter.Add("@Is_Active", "1");

                if (strMode.ToUpper().Trim() == "M" && StrRuleID != "")
                    objProcedureParameter.Add("@Rules_ID", StrRuleID);

                objProcedureParameter.Add("@Company_ID", intCompanyId.ToString());
                objProcedureParameter.Add("@LOB_ID", strLobId);
                ddlProductCodeList.BindDataTable(SPNames.SYS_ProductMaster, objProcedureParameter, new string[] { "Product_ID", "Product_Code", "Product_Name" });
                ddlProductCodeListFWC.BindDataTable(SPNames.SYS_ProductMaster, objProcedureParameter, new string[] { "Product_ID", "Product_Code", "Product_Name" });
                objProcedureParameter.Add("@Option", "7");
                ddlROIRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, objProcedureParameter, new string[] { "ROI_Rules_ID", "ROI_Rule_Number", "Model_Description" });
                txtLOB_Followup.Text = ddlLOB.SelectedItem.Text;
                hdnROIRule.Value = "";
                if (ddlBusinessOfferNoList.SelectedIndex == 0)
                {
                    FunPriLoadOfferNo();
                }
            }
            if (strTMode == strEditMode)
            {
                objProcedureParameter = new Dictionary<string, string>();
                objProcedureParameter.Add("@Is_Active", "1");
                objProcedureParameter.Add("@Company_ID", intCompanyId.ToString());
                objProcedureParameter.Add("@LOB_ID", strLobId);
                objProcedureParameter.Add("@Option", "13");
                ddlConstitutionCodeList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, objProcedureParameter, new string[] { "Constitution_ID", "Constitution_Code", "Constitution_Name" });
                txtLOB_Followup.Text = ddlLOB.SelectedItem.Text;
                if (ddlConstitutionCodeList.Items.Count <= 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Constitution List", "alert('Define the Constitution for the selected Line of business');", true);
                }
            }

            DataTable dtPLR = (DataTable)ViewState["IRRDetails"];
            dtPLR.DefaultView.RowFilter = "LOB_ID = " + strLobId;
            dtPLR = dtPLR.DefaultView.ToTable();
            if (dtPLR.Rows.Count > 0)
            {
                hdnCTR.Value = dtPLR.Rows[0]["Corporate_Tax_Rate"].ToString();
                hdnPLR.Value = dtPLR.Rows[0]["Prime_Lending_Rate"].ToString();
                ViewState["hdnRoundOff"] = dtPLR.Rows[0]["Roundoff"].ToString();
            }
            FunPriLOBBasedvalidations(ddlLOB_SelectedItem_Text.Value);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriLOBBasedvalidations(string strType)
    {
        try
        {
            strType = strType.Split('-')[0].Trim();
            switch (strType.ToLower())
            {
                case "ol":  //Operating lease
                    TabContainerAP.Tabs[2].Visible = true;
                    break;


                case "te": //Term loan Extensible
                case "tl": //Term loan
                case "ft": //Factoring 
                    TabContainerAP.Tabs[2].Visible = true;
                    break;
                default://for default case
                    TabContainerAP.Tabs[2].Visible = true;
                    break;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriBindPaymentDDL(string StrRuleID)
    {
        try
        {
            objProcedureParameter = new Dictionary<string, string>();
            if (strMode.ToUpper().Trim() != "Q")
                objProcedureParameter.Add("@Is_Active", "1");

            if (strMode.ToUpper().Trim() == "M" && StrRuleID != "")
                objProcedureParameter.Add("@Rules_ID", StrRuleID);

            objProcedureParameter.Add("@Company_ID", intCompanyId.ToString());
            objProcedureParameter.Add("@LOB_ID", ddlLOB.SelectedItem.Value);

            objProcedureParameter.Add("@Product_ID", ddlProductCodeList.SelectedItem.Value);

            objProcedureParameter.Add("@Option", "8");
            ddlPaymentRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, objProcedureParameter, new string[] { "Payment_RuleCard_ID", "Payment_Rule_Number" });
            hdnPayment.Value = "";
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPubGetPricingDetails(int intPricingId)
    {

        objProcedureParameter = new Dictionary<string, string>();
        objProcedureParameter.Add("@Company_ID", intCompanyId.ToString());
        objProcedureParameter.Add("@Pricing_ID", intPricingId.ToString());
        try
        {
            DataSet ds_PricingDetails = Utility.GetDataset("S3G_ORG_GetPricingDetails_App", objProcedureParameter);
            if (ds_PricingDetails != null)
            {
                if (ds_PricingDetails.Tables[0].Rows[0]["Status_ID"].ToString() != "44")
                {
                    strMode = "Q";
                }
                #region MainPage Tab
                ddlLOB.Items.Clear();
                ddlProductCodeList.Items.Clear();
                //ddlBranchList.Items.Clear();
                ddlBranchList.ClearSelection();

                //Added by Vinodh.N to load pricing date in application date if pricing number is selected
                txtApplicationDateDate.Text = DateTime.Parse(ds_PricingDetails.Tables[0].Rows[0]["Offer_Date"].ToString(), CultureInfo.CurrentCulture).ToString(strDateFormat);
                //Added by Vinodh.N to load pricing date in application date if pricing number is selected

                //txtOfferDate.Text = DateTime.Parse(ds_PricingDetails.Tables[0].Rows[0]["Offer_Date"].ToString(), CultureInfo.CurrentCulture).ToString(strDateFormat);
                txtEnquiry_Followup.Text = ds_PricingDetails.Tables[0].Rows[0]["Enquiry_No"].ToString();
                txtOfferNo_Followup.Text = ds_PricingDetails.Tables[0].Rows[0]["Business_Offer_Number"].ToString();
                FunPriLoadTenureType();
                txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat((ds_PricingDetails.Tables[0].Rows[0]["Facility_Amount"].ToString()));

                txtTenure.Text = ds_PricingDetails.Tables[0].Rows[0]["Tenure"].ToString();
                ddlTenureType.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Tenure_Type"].ToString();

                ListItem lstItem;
                lstItem = new ListItem(ds_PricingDetails.Tables[0].Rows[0]["LOB"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["LOB_ID"].ToString());
                ddlLOB.Items.Add(lstItem);
                ddlLOB_SelectedItem_Text.Value = ds_PricingDetails.Tables[0].Rows[0]["LOB"].ToString();
                FunPriLOBBasedvalidations(ddlLOB_SelectedItem_Text.Value, ddlLOB.SelectedValue, strAddMode,
                    ds_PricingDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString());
                if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
                {
                    rfvddlPaymentRuleList.Enabled = false;
                }
                else
                {
                    rfvddlPaymentRuleList.Enabled = true;
                }
                //lstItem = new ListItem(ds_PricingDetails.Tables[0].Rows[0]["PRODUCT"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["PRODUCT_ID"].ToString());
                //ddlProductCodeList.Items.Add(lstItem);
                ddlProductCodeList.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["PRODUCT_ID"].ToString();
                ddlProductCodeList.ClearDropDownList();

                //lstItem = new ListItem(ds_PricingDetails.Tables[0].Rows[0]["Location"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["Location_ID"].ToString());
                //ddlBranchList.Items.Add(lstItem);
                ddlBranchList.SelectedItem.Text = ds_PricingDetails.Tables[0].Rows[0]["Location"].ToString();
                ddlBranchList.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Location_ID"].ToString();

                //S3GCustomerAddress1.SetCustomerDetails(ds_PricingDetails.Tables[0].Rows[0]["Customer_Code"].ToString(),
                //    ds_PricingDetails.Tables[0].Rows[0]["comm_Address1"].ToString() + "\n" +
                //    ds_PricingDetails.Tables[0].Rows[0]["comm_Address2"].ToString() + "\n" +
                //    ds_PricingDetails.Tables[0].Rows[0]["comm_city"].ToString() + "\n" +
                //    ds_PricingDetails.Tables[0].Rows[0]["comm_state"].ToString() + "\n" +
                //    ds_PricingDetails.Tables[0].Rows[0]["comm_country"].ToString() + "\n" +
                //    ds_PricingDetails.Tables[0].Rows[0]["comm_pincode"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["Customer_Name"].ToString(),
                //    ds_PricingDetails.Tables[0].Rows[0]["Comm_Telephone"].ToString(),
                //    ds_PricingDetails.Tables[0].Rows[0]["Comm_mobile"].ToString(),
                //    ds_PricingDetails.Tables[0].Rows[0]["comm_email"].ToString(), ds_PricingDetails.Tables[0].Rows[0]["comm_website"].ToString());

                ViewState["GuarantorCustomer"] = hdnCustID.Value = ds_PricingDetails.Tables[0].Rows[0]["Customer_ID"].ToString();

                TextBox txtName = ucCustomerCodeLov.FindControl("txtName") as TextBox;
                txtName.Text = txtCustomerCode.Text = ds_PricingDetails.Tables[0].Rows[0]["Customer_Code"].ToString();
                //Session["AssetCustomer"] = hdnCustID.Value + ";" + S3GCustomerAddress1.CustomerName;
                Session["AssetCustomer"] = hdnCustID.Value + ";" + txtName.Text;
                txtAccountIRR_Repay.Text = txtAccountingIRR.Text = ds_PricingDetails.Tables[0].Rows[0]["Accounting_IRR"].ToString();
                /*For call id 4528 to fetch pricing repayment details on pricing number selection*/
                txtBusinessIRR_Repay.Text = txtBusinessIRR.Text = ds_PricingDetails.Tables[0].Rows[0]["Business_IRR"].ToString();
                //txtBusinessIRR_Repay.Text = "";
                /*For call id 4528 to fetch pricing repayment details on pricing number selection*/
                txtCompanyIRR_Repay.Text = txtCompanyIRR.Text = ds_PricingDetails.Tables[0].Rows[0]["Company_IRR"].ToString();
                FunPriMLASLAApplicable(Convert.ToInt32(ddlLOB.SelectedValue));
                if (ds_PricingDetails.Tables[0].Rows[0]["offer_margin_amount"].ToString() != "0")
                    txtMarginAmount.Text = Utility.funPubChangeCurrencyFormat(ds_PricingDetails.Tables[0].Rows[0]["offer_margin_amount"].ToString());
                #endregion

                #region Document Details Tab
                ddlConstitutionCodeList.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Constitution_Id"].ToString();
                hdnConstitutionId.Value = ds_PricingDetails.Tables[0].Rows[0]["Constitution_Id"].ToString();
                txtConstitution.Text = ds_PricingDetails.Tables[0].Rows[0]["Consitution"].ToString();
                grvConsDocuments.DataSource = ds_PricingDetails.Tables[12];
                grvConsDocuments.DataBind();

                #endregion

                #region OfferTerms Tab
                //lstItem = new ListItem(ds_PricingDetails.Tables[3].Rows[0]["ROI_Number"].ToString(), ds_PricingDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString());
                //ddlROIRuleList.Items.Add(lstItem);
                //ddlROIRuleList.ClearDropDownList();

                ddlROIRuleList.SelectedValue = ds_PricingDetails.Tables[3].Rows[0]["ROI_Rules_ID"].ToString();


                //if(ds_PricingDetails.Tables[3].Rows[0]["Residual_Value"].ToString() != "0" )
                //{
                //    txtResidualValue_Cashflow.Text = ds_PricingDetails.Tables[3].Rows[0]["Residual_Value"].ToString() ;
                //}
                //else
                //{
                //    txtResidualValue_Cashflow.Text = string.Empty;
                //}

                if (!Convert.ToBoolean(ViewState["PricingROIRuleModify"]))
                {
                    ddlROIRuleList.RemoveDropDownList();
                }
                ViewState["ROIRules"] = ds_PricingDetails.Tables[3];
                //lstItem = new ListItem(ds_PricingDetails.Tables[4].Rows[0]["Payment_Rule_Number"].ToString(), ds_PricingDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString());
                //ddlPaymentRuleList.Items.Add(lstItem);
                if (ds_PricingDetails.Tables[4].Rows.Count > 0)
                {
                    FunPriBindPaymentDDL(ds_PricingDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString());
                }
                else
                {
                    FunPriBindPaymentDDL("");
                }
                if (ds_PricingDetails.Tables[4].Rows.Count > 0)
                {
                    ddlPaymentRuleList.SelectedValue = ds_PricingDetails.Tables[4].Rows[0]["Payment_RuleCard_ID"].ToString();
                    ddlPaymentRuleList.ClearDropDownList();
                }
                FunPriFillROIDLL(strAddMode);
                FunPriLoadROIRuleDetails(strEditMode);


                if (ds_PricingDetails.Tables[1].Rows.Count > 0)
                {
                    gvInflow.DataSource = ds_PricingDetails.Tables[1];
                    gvInflow.DataBind();

                    //5366

                    DataTable dtCloned = ds_PricingDetails.Tables[1].Clone();
                    dtCloned.Columns[4].DataType = typeof(decimal);
                    foreach (DataRow row in ds_PricingDetails.Tables[1].Rows)
                    {
                        dtCloned.ImportRow(row);
                    }

                    ViewState["DtCashFlow"] = dtCloned;
                    FunPriFillInflowDLL(strEditMode);

                }
                else
                {

                    ViewState["DtCashFlow"] = ds_PricingDetails.Tables[1];
                    FunPriFillInflowDLL(strAddMode);
                    FunPriBindProductCharges(ddlProductCodeList.SelectedValue, ddlLOB.SelectedValue);
                }

                if (ds_PricingDetails.Tables[2].Rows.Count > 0)
                {
                    gvOutFlow.DataSource = ds_PricingDetails.Tables[2];
                    gvOutFlow.DataBind();
                    DataTable dtCloned = ds_PricingDetails.Tables[2].Clone();
                    dtCloned.Columns[4].DataType = typeof(decimal);
                    foreach (DataRow row in ds_PricingDetails.Tables[2].Rows)
                    {
                        dtCloned.ImportRow(row);
                    }
                    ViewState["DtCashFlowOut"] = dtCloned;//5366

                    FunPriFillOutflowDLL(strEditMode);
                    lblTotalOutFlowAmount.Text = ds_PricingDetails.Tables[9].Rows[0].ItemArray[0].ToString();
                    lblTotalOutFlowAmount.funPubChangeCurrencyFormat();
                }
                else
                {
                    DataTable dtCloned1 = ds_PricingDetails.Tables[2].Clone();
                    dtCloned1.Columns[4].DataType = typeof(decimal);
                    foreach (DataRow row in ds_PricingDetails.Tables[2].Rows)
                    {
                        dtCloned1.ImportRow(row);
                    }
                    ViewState["DtCashFlowOut"] = dtCloned1;//5366
                    FunPriFillOutflowDLL(strAddMode);
                }

                if (ds_PricingDetails.Tables[4].Rows.Count > 0)
                {
                    FunPriLoadPaymentRuleDetails();
                }

                if (ds_PricingDetails.Tables[2].Rows.Count > 0)
                {
                    DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
                    dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";

                    DataRow[] drOutflowDate;

                    drOutflowDate = ds_PricingDetails.Tables[2].Select("CashFlow_Flag_ID = 41 and Date <= #" + Utility.StringToDate(txtApplicationDateDate.Text) + "#");
                    if (drOutflowDate.Length > 0)
                    {
                        if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().ToUpper() == "DEFERRED PAYMENT")
                        {
                            foreach (DataRow drrow in drOutflowDate)
                            {
                                drrow["Date"] = Utility.StringToDate(txtApplicationDateDate.Text).AddDays(1);
                                drrow.AcceptChanges();
                            }
                        }

                        if ((dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper() == "DEFERRED STRUCTURED") ||
                            (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper() == "PROJECT FINANCE") ||
                            (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().ToUpper() == "TRADE ADVANCE") ||
                            (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().ToUpper() == "NORMAL PAYMENT"))
                        {
                            foreach (DataRow drrow in drOutflowDate)
                            {
                                drrow["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                                drrow.AcceptChanges();
                            }
                        }
                    }

                    gvOutFlow.DataSource = ds_PricingDetails.Tables[2];
                    gvOutFlow.DataBind();
                    DataTable dtCloned = ds_PricingDetails.Tables[2].Clone();
                    dtCloned.Columns[4].DataType = typeof(decimal);
                    foreach (DataRow row in ds_PricingDetails.Tables[2].Rows)
                    {
                        dtCloned.ImportRow(row);
                    }
                    ViewState["DtCashFlowOut"] = dtCloned;//5366

                    FunPriFillOutflowDLL(strEditMode);
                    lblTotalOutFlowAmount.Text = ds_PricingDetails.Tables[9].Rows[0].ItemArray[0].ToString();
                    lblTotalOutFlowAmount.funPubChangeCurrencyFormat();
                }
                else
                {
                    DataTable dtCloned = ds_PricingDetails.Tables[2].Clone();
                    dtCloned.Columns[4].DataType = typeof(decimal);
                    foreach (DataRow row in ds_PricingDetails.Tables[2].Rows)
                    {
                        dtCloned.ImportRow(row);
                    }
                    ViewState["DtCashFlowOut"] = dtCloned;//5366
                    FunPriFillOutflowDLL(strAddMode);
                }

                #endregion

                #region Repayment Tab

                //DataRow[] drReapyDet = ds_PricingDetails.Tables[5].Select("FROMINSTALL = 1 and FROMDATE < #" +
                //    Utility.StringToDate(txtDate.Text) + "# and CASHFLOW_FLAG_ID = 23 ");
                //if (drReapyDet.Length > 0)
                //{
                //    foreach (DataRow drrow in drReapyDet)
                //    {
                //        drrow["FROMDATE"] = Utility.StringToDate(txtDate.Text);
                //        drrow.AcceptChanges();
                //    }

                //Commented as these are not used for call id 4528
                //DateTime DtNextInstallmentDate;
                //int intNoOfInstalment;
                if (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddlLOB_SelectedItem_Text.Value.ToUpper().Split('-')[0].Trim() != "FT")
                {
                    DataRow[] drReapyDet = ds_PricingDetails.Tables[5].Select("FROMINSTALL >= 1");

                    foreach (DataRow drrow in drReapyDet)
                    {
                        if (drrow["CASHFLOW_FLAG_ID"].ToString() != "23")
                        {
                            DataRow[] drRow;

                            drRow = ds_PricingDetails.Tables[5].Select("FROMINSTALL <='" + drrow["FROMINSTALL"].ToString() + "' and TOINSTALL >='" + drrow["TOINSTALL"].ToString() + "'");
                            if (drRow.Length == 0)
                            {
                                drRow = DtRepayGrid.Select("FROMINSTALL <='" + drrow["FROMINSTALL"].ToString() + "' or TOINSTALL >='" + drrow["TOINSTALL"].ToString() + "'");
                            }
                            int intNextInstall = Convert.ToInt32(drRow[0]["TOINSTALL"].ToString());
                            int intNoOfInstall = Convert.ToInt32(drrow["FROMINSTALL"].ToString()) - intNextInstall + 1;
                            DateTime dtDate = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedValue, Convert.ToDateTime(drRow[0]["ToDate"].ToString()), (intNoOfInstall - 1));
                            drrow["FROMDATE"] = dtDate;
                            drrow.AcceptChanges();
                        }

                        /* Commented to fetch details from pricing details for call id 4528 */
                        //if (drrow["CASHFLOW_FLAG_ID"].ToString() == "23")
                        //{
                        //    drrow["FROMDATE"] = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedValue, Utility.StringToDate(txtDate.Text), Convert.ToInt32(drrow["FROMINSTALL"].ToString()) - 1);
                        //}
                        //intNoOfInstalment = Convert.ToInt32(drrow["TOINSTALL"].ToString()) - Convert.ToInt32(drrow["FROMINSTALL"].ToString()) + 1;
                        //DateTime dtTodate = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedValue, Utility.StringToDate(drrow["FROMDATE"].ToString()), (intNoOfInstalment - 1));
                        //drrow["TODATE"] = dtTodate;
                        //DtNextInstallmentDate = dtTodate;
                        //drrow.AcceptChanges();
                        /* Commented to fetch details from pricing details for call id 4528 */

                    }

                    //}
                    /*For call id 4528 to fetch pricing repayment details on pricing number selection*/
                    gvRepaymentDetails.DataSource = ds_PricingDetails.Tables[5];
                    gvRepaymentDetails.DataBind();
                    ((LinkButton)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lnRemoveRepayment")).Visible = true;
                    TextBox txtFromInstallment_RepayTab1_upd = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;
                    Label lblToInstallment_Upd = (Label)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lblToInstallment_RepayTab");
                    txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(Convert.ToDecimal(lblToInstallment_Upd.Text.Trim()) + Convert.ToInt32("1"));
                    ViewState["DtRepayGrid"] = ds_PricingDetails.Tables[5];
                    if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Return_Pattern.SelectedValue == "6"))
                    {
                        ViewState["DtRepayGrid_TL"] = ds_PricingDetails.Tables[5];
                    }

                    //FunPriFillRepaymentDLL(strEditMode);
                    FunPriGenerateNewRepayment();
                    gvRepaymentDetails.FooterRow.Visible = true;

                    //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 start
                    if (ds_PricingDetails.Tables[16].Rows.Count > 0)
                        ViewState["dtRepayDetailsOthers"] = ds_PricingDetails.Tables[16];
                    //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 end

                    FunPriCalculateSummary(ds_PricingDetails.Tables[5], "CashFlow", "TotalPeriodInstall");
                    FunPriShowRepaymetDetails((decimal)ds_PricingDetails.Tables[5].Compute("SUM(TotalPeriodInstall)", "CashFlow_Flag_ID =23"));
                }
                #endregion

                #region Alerts Tab

                if (ds_PricingDetails.Tables[6].Rows.Count > 0)
                {
                    gvAlert.DataSource = ds_PricingDetails.Tables[6];
                    gvAlert.DataBind();
                    FunPriFillAlertDLL(strEditMode);
                    ViewState["DtAlertDetails"] = ds_PricingDetails.Tables[6];
                }
                else
                {
                    FunPriFillAlertDLL(strAddMode);
                }



                #endregion

                #region Followup Tab
                txtEnquiry_Followup.Text = ds_PricingDetails.Tables[7].Rows[0]["Enquiry_Number"].ToString();
                txtOfferNo_Followup.Text = ds_PricingDetails.Tables[7].Rows[0]["Offer_Number"].ToString();
                txtApplication_Followup.Text = ds_PricingDetails.Tables[7].Rows[0]["Application_Number"].ToString();
                if (ds_PricingDetails.Tables[7].Rows[0]["Date"].ToString() != "" || ds_PricingDetails.Tables[7].Rows[0]["Date"].ToString() != string.Empty)
                    txtEnquiryDate_Followup.Text = Utility.StringToDate(ds_PricingDetails.Tables[7].Rows[0]["Date"].ToString()).ToString(strDateFormat);
                //txtCustNameAdd_Followup.Text = S3GCustomerAddress1.CustomerAddress;
                txtBranch_Followup.Text = ds_PricingDetails.Tables[0].Rows[0]["Location"].ToString();
                txtLOB_Followup.Text = ds_PricingDetails.Tables[0].Rows[0]["LOB"].ToString();

                //Code added to populate Residual% from Pricing form For "OL"-BusinessOfferNo selection - Bug_ID - 6382 - Kuppusamy.B - May-31-2012
                txtResidualValue_Cashflow.Text = ds_PricingDetails.Tables[0].Rows[0]["OFFER_RESIDUAL_VALUE"].ToString();
                if (ds_PricingDetails.Tables[8].Rows.Count > 0)
                {
                    ViewState["DtFollowUp"] = ds_PricingDetails.Tables[8];
                    FunPriFillFollowupDLL(strEditMode);
                }
                else
                {
                    FunPriFillFollowupDLL(strAddMode);
                }





                #endregion

                #region Asset Tab
                //Commented by Saranya
                //if (ddlLOB.SelectedItem.Text.ToUpper().Contains("WORK") || ddlLOB.SelectedItem.Text.ToUpper().Contains("FACT") || ddlLOB.SelectedItem.Text.ToUpper().Contains("TERM"))
                if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC") || ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT"))
                {
                    TabContainerMainTab.Tabs[1].Visible = false;
                }
                else
                {
                    TabContainerMainTab.Tabs[1].Visible = true;
                }
                if (TabContainerMainTab.Tabs[1].Visible)
                {
                    gvAssetDetails.Visible = true;

                    DataTable dtCloned = ds_PricingDetails.Tables[10].Clone();
                    dtCloned.Columns[5].DataType = typeof(decimal);
                    dtCloned.Columns[6].DataType = typeof(decimal);
                    dtCloned.Columns[11].DataType = typeof(decimal);
                    dtCloned.Columns[12].DataType = typeof(decimal);
                    dtCloned.Columns[13].DataType = typeof(decimal);
                    foreach (DataRow row in ds_PricingDetails.Tables[10].Rows)
                    {
                        dtCloned.ImportRow(row);
                    }
                    ViewState["ObjDTAssetDetails"] = Session["PricingAssetDetails"] = dtCloned;//5366
                    FunProBindAssetGrid();
                }

                #endregion

                #region Toggle for BusinessOfferNo
                ddlTenureType.ClearDropDownList();
                txtTenure.ReadOnly = true;


                if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL"))
                {
                    txtMarginAmount.Attributes.Add("readonly", "true");
                }



                txtResidualValue.Attributes.Add("readonly", "true");
                ViewState["mode"] = strAddMode;
                FunPriFillGuarantorDLL();
                FunPriFillMoratoriumDLL();
                #endregion



                #region MLA/SLA
                if (TabContainerAP.Tabs[6].Visible)
                {
                    //txtROIMLA.Text = ddlROIRuleList.SelectedItem.Text;
                    //if (ddlPaymentRuleList.SelectedItem.Text != "--Select--")
                    //    txtPaymentCardMLA.Text = ddlPaymentRuleList.SelectedItem.Text;
                    //txtMLAFinanceAmount.Text = ds_PricingDetails.Tables[0].Rows[0]["Facility_Amount"].ToString();
                }

                /*For call id 4528 to fetch pricing repayment details on pricing number selection*/
                /* This need to be regenerate */
                if (ds_PricingDetails.Tables[14].Rows.Count > 0)
                {
                    ViewState["RepaymentStructure"] = ds_PricingDetails.Tables[14];
                    grvRepayStructure.DataSource = ds_PricingDetails.Tables[14];
                    grvRepayStructure.DataBind();
                    if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT"))
                    {
                        //grvRepayStructure.Columns[5].Visible = false;
                        //grvRepayStructure.Columns[6].Visible = true;
                        //grvRepayStructure.Columns[7].Visible = true;
                    }
                    else
                    {
                        //grvRepayStructure.Columns[5].Visible = true;
                        //grvRepayStructure.Columns[6].Visible = false;
                        //grvRepayStructure.Columns[7].Visible = false;
                    }//5366
                }
                /*
                grvRepayStructure.DataSource = null;
                grvRepayStructure.DataBind();*/
                /*For call id 4528 to fetch pricing repayment details on pricing number selection*/
                if (ds_PricingDetails.Tables.Count > 14)
                {

                    if (ds_PricingDetails.Tables[15].Rows.Count > 0)
                    {
                        pnlPreDisbursementDocumentDetails.Visible = true;
                        gvPRDDT.DataSource = ds_PricingDetails.Tables[15];
                        gvPRDDT.DataBind();
                    }

                }

                #endregion
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    //private bool FunPriIsValidConstitution()
    //{
    //    bool blnIsValid = true;

    //    foreach (GridViewRow gvRow in grvConsDocuments.Rows)
    //    { 
    //        CheckBox chkIsMandatory = (CheckBox)gvRow.FindControl("chkIsMandatory");
    //        CheckBox chkCollected = (CheckBox)gvRow.FindControl("chkCollected");
    //        if (chkCollected != null && chkIsMandatory != null)
    //        {
    //            if (chkIsMandatory.Checked && !chkCollected.Checked)
    //            {
    //                cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Choose the Collected in Consitution Document Details";
    //                cvApplicationProcessing.IsValid = false;
    //                TabContainerMainTab.ActiveTabIndex = 0;
    //                return false;
    //            }
    //        }
    //        CheckBox chkIsNeedImageCopy = (CheckBox)gvRow.FindControl("chkIsNeedImageCopy");
    //        CheckBox chkScanned = (CheckBox)gvRow.FindControl("chkScanned");
    //        if (chkScanned != null && chkIsNeedImageCopy != null)
    //        {
    //            if (chkIsNeedImageCopy.Checked && !chkScanned.Checked)
    //            {
    //                cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Choose the Scanned in Consitution Document Details";
    //                cvApplicationProcessing.IsValid = false;
    //                TabContainerMainTab.ActiveTabIndex = 0;
    //                return false;
    //            }
    //        }
    //    }
    //    return blnIsValid;
    //}

    private void FunPriLoadLObandBranch(int intUser_id, int intCompany_id)
    {
        Dictionary<string, string> Procparam = new Dictionary<string, string>();
        Procparam.Clear();
        try
        {
            if (intApplicationProcessId == 0)
            {
                Procparam.Add("@Is_Active", "1");
            }
            Procparam.Add("@User_Id", intUser_id.ToString());
            Procparam.Add("@Company_ID", intCompany_id.ToString());
            Procparam.Add("@Program_Id", "38");
            Procparam.Add("@Consitution_Id", hdnConstitutionId.Value);

            ddlLOB.BindDataTable("S3G_SA_Get_LOBLst", Procparam, new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });
            //ddlLOB.FillDataTable()
            //Procparam.Remove("@Consitution_Id");
            //ddlBranchList.BindDataTable(SPNames.BranchMaster_LIST, Procparam, new string[] { "Location_ID", "Location" });
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void FunPriSaveRecord()
    {
        ApplicationMgtServicesReference.ApplicationMgtServicesClient ObjAProcessSave = new ApplicationMgtServicesReference.ApplicationMgtServicesClient();

        try
        {
            string strApp_Number = string.Empty;
            S3GBusEntity.ApplicationProcess.ApplicationProcess ObjBusApplicationProcess = new S3GBusEntity.ApplicationProcess.ApplicationProcess();
            ObjBusApplicationProcess.Application_Process_ID = Convert.ToInt32(intApplicationProcessId);









            if (ddlLOB_SelectedItem_Text.Value == "HP" || ddlLOB_SelectedItem_Text.Value == "TL")
            {
                //Header Contenet
                // DateTime appdate = Convert.ToDateTime(txtApplicationDateDate.Text);
                ObjBusApplicationProcess.Application_Number = txtProposalNumber.Text;//Display
                ObjBusApplicationProcess.Status_ID = ddlStatus.SelectedValue;
                ObjBusApplicationProcess.Company_ID = intCompanyId;
                ObjBusApplicationProcess.Created_By = intUserId;
                if (hdnConstitutionId.Value != string.Empty)
                    ObjBusApplicationProcess.Constitution_ID = Convert.ToInt32(hdnConstitutionId.Value);
                ObjBusApplicationProcess.Lease_Type = 1;
                if (ddlPaymentRuleList.SelectedValue != string.Empty)
                    ObjBusApplicationProcess.Payment_RuleCard_ID = Convert.ToInt32(ddlPaymentRuleList.SelectedValue);
                if (!string.IsNullOrEmpty(txtMarginMoneyPer_Cashflow.Text))
                    ObjBusApplicationProcess.Offer_Margin = Convert.ToDecimal(txtMarginMoneyPer_Cashflow.Text);
                if (!string.IsNullOrEmpty(txtMarginMoneyAmount_Cashflow.Text))
                    ObjBusApplicationProcess.Offer_Margin_Amount = Convert.ToDecimal(txtMarginMoneyAmount_Cashflow.Text);
                if (!string.IsNullOrEmpty(txtResidualValue_Cashflow.Text))
                    ObjBusApplicationProcess.Offer_Residual_Value = Convert.ToDecimal(txtResidualValue_Cashflow.Text);
                if (!string.IsNullOrEmpty(txtResidualAmt_Cashflow.Text))
                    ObjBusApplicationProcess.Offer_Residual_Value_Amount = Convert.ToDecimal(txtResidualAmt_Cashflow.Text);
                //MFC Customization
                ObjBusApplicationProcess.LOB_ID = Convert.ToInt32(ddlLOB.SelectedValue);
                if (ddlApplicationNo.SelectedValue != string.Empty)
                    ObjBusApplicationProcess.Pricing_Id = Convert.ToInt32(ddlApplicationNo.SelectedValue);
                ObjBusApplicationProcess.Business_Offer_Number = ddlApplicationNo.SelectedText;//Proposal No-From Checklist
                ObjBusApplicationProcess.Branch_ID = Convert.ToInt32(ddlBranchList.SelectedValue);
                if (cmbSubLocation.SelectedValue != string.Empty)
                    ObjBusApplicationProcess.Sub_Location = Convert.ToInt32(cmbSubLocation.SelectedValue);
                ObjBusApplicationProcess.Credit_Purpose = Convert.ToInt32(ddlCreditPurpose.SelectedValue);
                ObjBusApplicationProcess.Product_ID = Convert.ToInt32(ddlProductCodeList.SelectedValue);
                ObjBusApplicationProcess.Date = Utility.StringToDate(txtApplicationDateDate.Text);
                ObjBusApplicationProcess.Contract_Type = Convert.ToInt32(ddlContType.SelectedValue);
                ObjBusApplicationProcess.Sales_Person_ID = Convert.ToInt32(ddlSalePersonCodeList.SelectedValue);
                ObjBusApplicationProcess.Covenants = Convert.ToInt32(ddlCovenantsClause.SelectedValue);//
                ObjBusApplicationProcess.Covenants_Terms = txtCovenantTerms.Text;
                if (!string.IsNullOrEmpty(hdnCustID.Value))
                {
                    ObjBusApplicationProcess.Customer_ID = Convert.ToInt32(hdnCustID.Value);
                }
                if (!string.IsNullOrEmpty(txtCreditLimit.Text))
                    ObjBusApplicationProcess.Credit_Limit = Convert.ToDecimal(0);
                if (!string.IsNullOrEmpty(ddlDealTransfer.SelectedValue))
                    ObjBusApplicationProcess.DealTransfer = Convert.ToInt32(ddlDealTransfer.SelectedValue);
                if (!string.IsNullOrEmpty(ddlDealType.SelectedValue))
                    ObjBusApplicationProcess.Deal_Type = Convert.ToInt32(ddlDealType.SelectedValue);
                if (!string.IsNullOrEmpty(ddlDealerName.SelectedValue))
                    ObjBusApplicationProcess.Dealer_Id = Convert.ToInt32(ddlDealerName.SelectedValue);

                if (!string.IsNullOrEmpty(ddldealerSalesPerson.SelectedValue))
                {
                    ObjBusApplicationProcess.Dealer_Sales_Persion_Id = Convert.ToInt32(ddldealerSalesPerson.SelectedValue);
                }

                if (!string.IsNullOrEmpty(ddldc.SelectedValue))
                    ObjBusApplicationProcess.Debt_Collector_Name_Id = Convert.ToInt32(ddldc.SelectedValue);
                if (!string.IsNullOrEmpty(ddlLeadSource.SelectedValue))
                    ObjBusApplicationProcess.Lead_Source_Type = Convert.ToInt32(ddlLeadSource.SelectedValue);
                if (!string.IsNullOrEmpty(ddlLeadSourceName.SelectedValue))
                {
                    if (ddlLeadSource.SelectedValue == "4")
                        ObjBusApplicationProcess.Lead_Other_Source_Name = txtLeadOtherSource.Text;
                    else
                        ObjBusApplicationProcess.Lead_Source_Name_Id = Convert.ToInt32(ddlLeadSourceName.SelectedValue);
                }
                if (!string.IsNullOrEmpty(ddlBusinessSource.SelectedValue))
                    ObjBusApplicationProcess.Business_Source_Id = Convert.ToInt32(ddlBusinessSource.SelectedValue);
                if (!string.IsNullOrEmpty(ddlDealerschemename.SelectedValue))
                    ObjBusApplicationProcess.Dealer_Scheme_Name_Id = Convert.ToInt32(ddlDealerschemename.SelectedValue);
                if (!string.IsNullOrEmpty(txtSellerCode.Text))
                    ObjBusApplicationProcess.Seller_Code = txtSellerCode.Text;
                if (!string.IsNullOrEmpty(txtSellerName.Text))
                    ObjBusApplicationProcess.Seller_Name = txtSellerName.Text;
                if (!string.IsNullOrEmpty(ddlDealerCommissionApplicable.SelectedValue))
                    ObjBusApplicationProcess.Dealer_Commission_Applicable = Convert.ToInt32(ddlDealerCommissionApplicable.SelectedValue);
                if (!string.IsNullOrEmpty(txtFinanceAmount.Text))
                    ObjBusApplicationProcess.Finance_Amount = Convert.ToDecimal(txtFinanceAmount.Text);
                ObjBusApplicationProcess.Tenure = Convert.ToDecimal(txtTenure.Text);
                ObjBusApplicationProcess.Tenure_Type = Convert.ToInt32(ddlTenureType.SelectedValue);
                ObjBusApplicationProcess.Refinance_Contract = Convert.ToInt32(ChkRefinanceContract.Checked);
                if (!string.IsNullOrEmpty(txtMarginAmount.Text))
                    ObjBusApplicationProcess.Margin_Amount = Convert.ToDecimal(txtMarginAmount.Text);
                if (!string.IsNullOrEmpty(txtResidualValue.Text))
                    ObjBusApplicationProcess.Residual_Value = Convert.ToDecimal(txtResidualValue.Text);
                ObjBusApplicationProcess.Arear_Advance = Convert.ToInt32(ddlArearAdvance.SelectedValue);
                if (txtdiscount.Text != string.Empty)
                    ObjBusApplicationProcess.Discount = Convert.ToDecimal(txtdiscount.Text);
                if (txtFirstInstallDate.Text != string.Empty)
                    ObjBusApplicationProcess.First_Installment_Date = Utility.StringToDate(txtFirstInstallDate.Text);
                if (txtIncomeBookStartDate.Text != string.Empty)
                    ObjBusApplicationProcess.Income_Book_Start_Date = Utility.StringToDate(txtIncomeBookStartDate.Text);
                if (txtTentativeAccDate.Text != string.Empty)
                    ObjBusApplicationProcess.Tentative_Account_Date = Utility.StringToDate(txtTentativeAccDate.Text);
                if (ddlRepamentMode.SelectedValue != string.Empty)
                    ObjBusApplicationProcess.Repayment_Mode = Convert.ToInt32(ddlRepamentMode.SelectedValue);
                if (ddlPNTD.SelectedValue != string.Empty)
                    ObjBusApplicationProcess.PNTD = Convert.ToInt32(ddlPNTD.SelectedValue);
                //if (ddlEmployerBankName.SelectedValue != string.Empty)
                //    ObjBusApplicationProcess.Employer_Bank_Name = ddlEmployerBankName.SelectedValue;
                if (!string.IsNullOrEmpty(txtBusinessIRR_Repay.Text))
                    ObjBusApplicationProcess.Business_IRR = Convert.ToDecimal(txtBusinessIRR_Repay.Text);
                if (!string.IsNullOrEmpty(txtAccountIRR_Repay.Text))
                    ObjBusApplicationProcess.Accounting_IRR = Convert.ToDecimal(txtAccountIRR_Repay.Text);
                if (!string.IsNullOrEmpty(txtCompanyIRR_Repay.Text))
                    ObjBusApplicationProcess.Company_IRR = Convert.ToDecimal(txtCompanyIRR_Repay.Text);
                if (!string.IsNullOrEmpty(ddlExistenceofFirstCharge.SelectedValue))
                    ObjBusApplicationProcess.Existence_of_First_Charge = Convert.ToInt32(ddlExistenceofFirstCharge.SelectedValue);
                if (!string.IsNullOrEmpty(ddlExistenceofsecondcharge.SelectedValue))
                    ObjBusApplicationProcess.Existence_of_Second_Charge = Convert.ToInt32(ddlExistenceofsecondcharge.SelectedValue);
                if (!string.IsNullOrEmpty(txtNoofDaystobeconsidered.Text))
                    ObjBusApplicationProcess.No_of_Days_to_be_considered = Convert.ToInt32(txtNoofDaystobeconsidered.Text);//GRACE DAYS
                if (!string.IsNullOrEmpty(ddlStartDelayChargesApplicable.SelectedValue))
                    ObjBusApplicationProcess.Start_delay_charges_Applicable = Convert.ToInt32(ddlStartDelayChargesApplicable.SelectedValue);
                if (!string.IsNullOrEmpty(txtDelayDays.Text))
                    ObjBusApplicationProcess.Delay_Days = Convert.ToInt32(txtDelayDays.Text);
                if (!string.IsNullOrEmpty(txtStartDatedelayrate.Text))
                    ObjBusApplicationProcess.Start_Date_delay_rate = Convert.ToDecimal(txtStartDatedelayrate.Text);
                if (!string.IsNullOrEmpty(txtStartdelaycharges.Text))
                    ObjBusApplicationProcess.Start_delay_charges = Convert.ToDecimal(txtStartdelaycharges.Text);
                if (!string.IsNullOrEmpty(txtOverDueCharges.Text))
                    ObjBusApplicationProcess.Over_Due_Charges = Convert.ToDecimal(txtOverDueCharges.Text);


                if (!string.IsNullOrEmpty(ddlLifeInsurance.SelectedValue))
                    ObjBusApplicationProcess.Life_Insurance_Applicable = Convert.ToInt32(ddlLifeInsurance.SelectedValue);
                if (!string.IsNullOrEmpty(ddlLifeInsuranceEntity.SelectedValue))
                    ObjBusApplicationProcess.Life_Insurance_Entity = Convert.ToInt32(ddlLifeInsuranceEntity.SelectedValue);
                if (!string.IsNullOrEmpty(txtLifeInsuranceCustRate.Text))
                    ObjBusApplicationProcess.Life_Insurance_Premium_Customer_Rate = Convert.ToDecimal(txtLifeInsuranceCustRate.Text);
                if (!string.IsNullOrEmpty(txtLifeInsuranceCompanyRate.Text))
                    ObjBusApplicationProcess.Life_Insurance_Premium_Comapny_Rate = Convert.ToDecimal(txtLifeInsuranceCompanyRate.Text);
                if (!string.IsNullOrEmpty(txtLifeInsuranceCompanyAmount.Text))
                    ObjBusApplicationProcess.Life_Insurance_Premium_Company_Amount = Convert.ToDecimal(txtLifeInsuranceCompanyAmount.Text);
                if (!string.IsNullOrEmpty(txtLifeInsuranceCustomerPremiumAmount.Text))
                    ObjBusApplicationProcess.Life_Insurance_Premium_Customer_Amount = Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text);
                
                // VAT
                if (!string.IsNullOrEmpty(txtInsuranceTaxRate.Text))
                    ObjBusApplicationProcess.Life_Insurance_Tax_Rate = Convert.ToDecimal(txtInsuranceTaxRate.Text);

                if (!string.IsNullOrEmpty(txtInsuranceCompanyTaxAmount.Text))
                    ObjBusApplicationProcess.Life_Insurance_Company_Tax_Amount = Convert.ToDecimal(txtInsuranceCompanyTaxAmount.Text);

                if (!string.IsNullOrEmpty(txtInsuranceCustomerTaxAmount.Text))
                    ObjBusApplicationProcess.Life_Insurance_Customer_Tax_Amount = Convert.ToDecimal(txtInsuranceCustomerTaxAmount.Text);

                if (!string.IsNullOrEmpty(txtLifeInsuranceCompanyAmountWT.Text))
                    ObjBusApplicationProcess.Life_Insurance_Premium_Company_Amount_WT = Convert.ToDecimal(txtLifeInsuranceCompanyAmountWT.Text);

                if (!string.IsNullOrEmpty(txtLifeInsuranceCustomerPremiumAmountWT.Text))
                    ObjBusApplicationProcess.Life_Insurance_Premium_Customer_Amount_WT = Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmountWT.Text);

               
                if (!string.IsNullOrEmpty(ddlRiskRating.SelectedValue))
                    ObjBusApplicationProcess.Risk_Rating = Convert.ToInt32(ddlRiskRating.SelectedValue);
                if (!string.IsNullOrEmpty(txtRiskRemarks.Text))
                    ObjBusApplicationProcess.Risk_Remarks = txtRiskRemarks.Text;
                if (!string.IsNullOrEmpty(txtRiskScore.Text))
                    ObjBusApplicationProcess.Risk_Score = Convert.ToInt32(txtRiskScore.Text);
                if (!string.IsNullOrEmpty(txtRiskDocumentNo.Text))
                    ObjBusApplicationProcess.Risk_Document_No = txtRiskDocumentNo.Text;
                if (!string.IsNullOrEmpty(ddlRiskQualityValue.Text))
                    ObjBusApplicationProcess.Risk_Quality_Value = Convert.ToInt32(ddlRiskQualityValue.SelectedValue);
                if (!string.IsNullOrEmpty(txtAMLClasification.Text))
                    ObjBusApplicationProcess.Risk_AML_Classification = txtAMLClasification.Text;

                //FT


                if (ViewState["DealTransfer"] != null)
                    ObjBusApplicationProcess.XMLDealTransfer = ((DataTable)ViewState["DealTransfer"]).FunPubFormXml();
                if (ViewState["LienAccount"] != null)
                    ObjBusApplicationProcess.XMLLienAccount = ((DataTable)ViewState["LienAccount"]).FunPubFormXml();

                //if (ViewState["COVENANTS"] != null)
                //    ObjBusApplicationProcess.XMLCovenants = ((DataTable)ViewState["COVENANTS"]).FunPubFormXml();
                #region Constitution

                strXMLCommon = grvConsDocuments.FunPubFormXml(true);
                strXMLCommon = strXMLCommon.Replace("OPTIONAL/MANDATORY='1'", "");
                strXMLCommon = strXMLCommon.Replace("OPTIONAL/MANDATORY='0'", "");
                strXMLCommon = strXMLCommon.Replace("VALUE=''", "VALUE=' '");
                ObjBusApplicationProcess.XML_Constitution = strXMLCommon;
                strXMLCommon = "<Root></Root>";
                ObjBusApplicationProcess.XML_PDD = strXMLCommon;


                #endregion
                #region Asset
                if (!ddlLOB.SelectedItem.Text.ToUpper().Contains("TERM") && !ddlLOB.SelectedItem.Text.ToUpper().Contains("WORKING") && !ddlLOB.SelectedItem.Text.ToUpper().Contains("FACT"))
                    if (!ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC") && !ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT") && !ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                    {
                        if (Session["PricingAssetDetails"] != null)
                        {
                            if (((DataTable)Session["PricingAssetDetails"]).Rows.Count > 0)
                            {

                                strXMLCommon = Utility.FunPubFormXml((DataTable)Session["PricingAssetDetails"], true);
                                strXMLCommon = strXMLCommon.Replace("SLNO=''", "");
                                strXMLCommon = strXMLCommon.Replace("BOOKDEPRECIATIONPERCENTAGE='&NBSP;'", "BOOKDEPRECIATIONPERCENTAGE='0'");
                                strXMLCommon = strXMLCommon.Replace("BLOCKDEPRECIATIONPERCENTAGE='&NBSP;'", "BLOCKDEPRECIATIONPERCENTAGE='0'");
                                strXMLCommon = strXMLCommon.Replace("''", "'0'");
                                ObjBusApplicationProcess.XML_AssetDetails = strXMLCommon;
                            }
                        }

                    }

                ObjBusApplicationProcess.CRM_ID = 0;

                if (ddlLOB.SelectedItem.Text.ToUpper().Contains("HP"))
                {
                    if (gvAssetDetails.Rows.Count <= 0)
                    {
                        dtAstChk = new DataTable();
                        Procparam = new Dictionary<string, string>();
                        Procparam.Add("@Company_ID", intCompanyId.ToString());
                        Procparam.Add("@LOB_ID", ddlLOB.SelectedItem.Value);
                        Procparam.Add("@Product_ID", ddlProductCodeList.SelectedItem.Value);
                        dtAstChk = Utility.GetDefaultData("S3G_SYSAD_GET_PRODASTCHK", Procparam);
                        if (dtAstChk.Rows[0]["ACTCHK"].ToString() == "1")
                        {
                            if (dtAstChk.Rows[0]["ASTCHK"].ToString() == "1")
                            {
                                //Utility.FunShowAlertMsg(this.Page, "Asset is mandatory for the selected LOB and Product");
                                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege19));
                                return;
                            }
                        }
                    }
                }

                //if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("PL"))
                //{
                //    if (Session["PricingloanAssetDetails"] != null)
                //    {
                //        if (((DataTable)Session["PricingloanAssetDetails"]).Rows.Count > 0)
                //        {

                //            strXMLCommon = Utility.FunPubFormXml((DataTable)Session["PricingloanAssetDetails"], true);
                //            strXMLCommon = strXMLCommon.Replace("SLNO=''", "");
                //            strXMLCommon = strXMLCommon.Replace("''", "'0'");
                //            ObjBusApplicationProcess.XML_AssetLoanDetails = strXMLCommon;
                //        }
                //    }

                //}

                #endregion

                #region ROI Rule

                if (!ddlROIRuleList.SelectedItem.Text.ToUpper().Contains("RRA"))
                {
                    FunPriUpdateROIRule();
                }

                FunPriUpdateROIRuleDecRate();

                ObjBusApplicationProcess.XML_ROIRULE = ((DataTable)ViewState["ROIRules"]).FunPubFormXml(true);

                #endregion

                #region Inflow
                if (((DataTable)ViewState["DtCashFlow"]).Rows.Count > 0)
                {
                    strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["DtCashFlow"], true);
                    ObjBusApplicationProcess.XML_Inflow = strXMLCommon;
                }

                else
                {
                    strXMLCommon = "<Root></Root>";
                    ObjBusApplicationProcess.XML_Inflow = strXMLCommon;
                }
                #endregion

                #region OutFlow
                if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count > 0)
                {
                    strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["DtCashFlowOut"], true);
                    ObjBusApplicationProcess.XML_OutFlow = strXMLCommon;
                }

                else
                {
                    strXMLCommon = "<Root></Root>";
                    ObjBusApplicationProcess.XML_OutFlow = strXMLCommon;
                }
                #endregion

                #region Guarantor
                strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["dtGuarantorGrid"], true);
                ObjBusApplicationProcess.XML_Guarantor = strXMLCommon;
                #endregion

                #region ALERT
                strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["DtAlertDetails"], true);
                ObjBusApplicationProcess.XML_ALERT = strXMLCommon;
                #endregion

                #region Repayment
                if (ViewState["DtRepayGrid"] != null)
                {
                    strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["DtRepayGrid"], true);
                }
                ObjBusApplicationProcess.XML_Repayment = strXMLCommon;
                if (grvRepayStructure.Rows.Count > 0)
                {
                    strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["RepaymentStructure"], true);
                    ObjBusApplicationProcess.XMLRepaymentStructure = strXMLCommon;
                }
                DataTable dtRepayDetailsOthers = new DataTable();
                if (ViewState["dtRepayDetailsOthers"] != null)
                {
                    dtRepayDetailsOthers = (DataTable)ViewState["dtRepayDetailsOthers"];
                }
                if (dtRepayDetailsOthers.Rows.Count > 0)
                {

                    ObjBusApplicationProcess.XMLRepayDetailsOthers = dtRepayDetailsOthers.FunPubFormXml(true);
                }
                #endregion

                #region FollowDetail
                strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["DtFollowUp"], true);
                ObjBusApplicationProcess.XML_FollowDetail = strXMLCommon;
                #endregion

                #region Moratorium
                if (ViewState["dtMoratorium"] != null)
                    strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["dtMoratorium"], true);
                ObjBusApplicationProcess.XML_Moratorium = strXMLCommon;
                #endregion

                if (!string.IsNullOrEmpty(txtFBDate.Text))
                {
                    ObjBusApplicationProcess.intFBDate = Convert.ToInt32(txtFBDate.Text);
                }
            }
            else if (ddlLOB_SelectedItem_Text.Value.ToUpper() == "FT" || ddlLOB_SelectedItem_Text.Value.ToUpper() == "WC")
            {
                ObjBusApplicationProcess.Company_ID = intCompanyId;
                ObjBusApplicationProcess.LOB_CODE = ddlLOB_SelectedItem_Text.Value;
                ObjBusApplicationProcess.LOB_ID = Convert.ToInt32(ddlLOB.SelectedValue);
                ObjBusApplicationProcess.Application_Number = txtProposalNumber.Text;
                if (!string.IsNullOrEmpty(hdnCustID.Value))
                {
                    ObjBusApplicationProcess.Customer_ID = Convert.ToInt32(hdnCustID.Value);
                }
                ObjBusApplicationProcess.Branch_ID = Convert.ToInt32(ddlBranchListFWC.SelectedValue);

                if (ddlApplicationNo.SelectedValue != string.Empty)
                    ObjBusApplicationProcess.Pricing_Id = Convert.ToInt32(ddlApplicationNo.SelectedValue);
                ObjBusApplicationProcess.Business_Offer_Number = ddlApplicationNo.SelectedText;//Proposal No-From Checklist

                if (cmbSubLocation.SelectedValue != string.Empty)
                    ObjBusApplicationProcess.Sub_Location = Convert.ToInt32(cmbSubLocation.SelectedValue);
                ObjBusApplicationProcess.Date = Utility.StringToDate(txtApplicationDateFWC.Text);
                ObjBusApplicationProcess.Product_ID = Convert.ToInt32(ddlProductCodeListFWC.SelectedValue);
                ObjBusApplicationProcess.Facility_Start_Date = Utility.StringToDate(txtFacilityStartDate.Text);
                ObjBusApplicationProcess.Facility_End_Date = Utility.StringToDate(txtFacilityEndDate.Text);
                ObjBusApplicationProcess.AUDITOR = txtAuditor.Text;
                ObjBusApplicationProcess.EVALUATOR = txtEvaluator.Text;
                ObjBusApplicationProcess.Sales_Person_ID = Convert.ToInt32(ddlRelationshipManager.SelectedValue);
                ObjBusApplicationProcess.Status_ID = ddlStatus.SelectedValue;
                ObjBusApplicationProcess.Created_By = intUserId;
                ObjBusApplicationProcess.Constitution_ID = Convert.ToInt32(hdnConstitutionId.Value);


                //FACFinanceDetails
                ObjBusApplicationProcess.DEBT_PURCHASE_LIMIT = Convert.ToDecimal(txtDebtPurchaseLimitFWC.Text);
                ObjBusApplicationProcess.Margin_Amount = Convert.ToDecimal(txtMarginFWC.Text);
                ObjBusApplicationProcess.PREPAYMENT_LIMIT = Convert.ToDecimal(txtPrePaymentLimitFWC.Text);
                ObjBusApplicationProcess.INVOICE_CAP_VALUE = Convert.ToDecimal(txtInvoiceCapValue.Text);
                ObjBusApplicationProcess.DISCOUNT_RATE_LOC = Convert.ToDecimal(txtDiscountRateforLineofCredit.Text);
                ObjBusApplicationProcess.PENAL_RATE = Convert.ToDecimal(txtPenalRate.Text);
                ObjBusApplicationProcess.CREDIT_PERIOD_DAYS = Convert.ToInt32(txtCreditPeriodInDays.Text);
                ObjBusApplicationProcess.GRACE_PERIOD_DAYS = Convert.ToInt32(txtGracePeriodInDays.Text);
                //ObjBusApplicationProcess.DISGP_PERIOD_DAYS = Convert.ToInt32(txtDisbuteGracePeriodInDays.Text);
                //ObjBusApplicationProcess.RESUL_PERIOD_DAYS = Convert.ToInt32(txtResolutionPeriodinDays.Text);
                ObjBusApplicationProcess.DISGP_PERIOD_DAYS = 0;
                ObjBusApplicationProcess.RESUL_PERIOD_DAYS = 0;

                ObjBusApplicationProcess.RemarksFWC = txtRemarksFWC.Text;


                if (!string.IsNullOrEmpty(txtPrePaymentLimitFWC.Text))
                    ObjBusApplicationProcess.Finance_Amount = Convert.ToDecimal(txtPrePaymentLimitFWC.Text);


                //TL
                //if (hdnLobCode.Value == "TL")
                //{
                //    ObjBusApplicationProcess.Arear_Advance = Convert.ToInt32(ddlArearAdvance.SelectedValue);
                //    ObjBusApplicationProcess.Tenure = Convert.ToInt32(txtTenureFWC.Text);
                //}
                //Risk Rating 
                if (!string.IsNullOrEmpty(ddlRiskRating.SelectedValue))
                    ObjBusApplicationProcess.Risk_Rating = Convert.ToInt32(ddlRiskRating.SelectedValue);
                if (!string.IsNullOrEmpty(txtRiskRemarks.Text))
                    ObjBusApplicationProcess.Risk_Remarks = txtRiskRemarks.Text;
                if (!string.IsNullOrEmpty(txtRiskScore.Text))
                    ObjBusApplicationProcess.Risk_Score = Convert.ToInt32(txtRiskScore.Text);
                if (!string.IsNullOrEmpty(txtRiskDocumentNo.Text))
                    ObjBusApplicationProcess.Risk_Document_No = txtRiskDocumentNo.Text;
                if (!string.IsNullOrEmpty(ddlRiskQualityValue.Text))
                    ObjBusApplicationProcess.Risk_Quality_Value = Convert.ToInt32(ddlRiskQualityValue.SelectedValue);
                if (!string.IsNullOrEmpty(txtAMLClasification.Text))
                    ObjBusApplicationProcess.Risk_AML_Classification = txtAMLClasification.Text.Trim();



                #region ROI Rule start

                //if (!ddlROIRuleList.SelectedItem.Text.ToUpper().Contains("RRA"))
                //{
                //    FunPriUpdateROIRule();
                //}

                //FunPriUpdateROIRuleDecRate();

                //ObjBusApplicationProcess.XML_ROIRULE = ((DataTable)ViewState["ROIRules"]).FunPubFormXml(true);

                #endregion

                //FT GridDetails
                if (ViewState["CUST_SUBLIMIT"] != null)
                    ObjBusApplicationProcess.strXMLCustomerMap = ((DataTable)ViewState["CUST_SUBLIMIT"]).FunPubFormXml();
                if (ViewState["DiscountRateUtilization"] != null)
                    ObjBusApplicationProcess.strXMLDiscountRateforUtilization = ((DataTable)ViewState["DiscountRateUtilization"]).FunPubFormXml();
                if (ViewState["FACCharge"] != null)
                    ObjBusApplicationProcess.strXMLOtherCharges = ((DataTable)ViewState["FACCharge"]).FunPubFormXml();

                #region FollowDetail
                if (ViewState["DtFollowUp"] != null)
                {
                    strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["DtFollowUp"], true);
                    ObjBusApplicationProcess.XML_FollowDetail = strXMLCommon;
                }
                #endregion
                #region Guarantor
                if (ViewState["dtGuarantorGrid"] != null)
                {
                    strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["dtGuarantorGrid"], true);
                    ObjBusApplicationProcess.XML_Guarantor = strXMLCommon;
                }
                #endregion

                #region ALERT
                if (ViewState["DtAlertDetails"] != null)
                {
                    strXMLCommon = Utility.FunPubFormXml((DataTable)ViewState["DtAlertDetails"], true);
                    ObjBusApplicationProcess.XML_ALERT = strXMLCommon;
                }
                #endregion




            }
            ObjBusApplicationProcess.strXMLAppraisalInfo = grvApplicanAppraisalInformation.FunPubFormXml();
            ObjBusApplicationProcess.strXMLAppraisalInfoPropmoter = ((DataTable)ViewState["PromoterGrid"]).FunPubFormXml();

            ObjBusApplicationProcess.GenRemarks = txtGeneralRemarks.Text;
            if (ddlPNTD.SelectedValue != "0" && ddlPNTD.SelectedValue != "")
                ObjBusApplicationProcess.PNTD = Convert.ToInt32(ddlPNTD.SelectedValue);


            if (chkDataEntryStage.Checked)
            {
                ObjBusApplicationProcess.Stage_Status = 2;
            }
            else
            {
                ObjBusApplicationProcess.Stage_Status = 1;
                //ObjBusApplicationProcess.Rootback = 1;
            }
            //if (chkRiskStage.Checked)
            //{
            //    ObjBusApplicationProcess.Stage_Status = 2;
            //}
            //if (ChkDataEntryRootback.Checked)
            //{
            //    ObjBusApplicationProcess.Rootback = 2;
            //    ObjBusApplicationProcess.Stage_Status = 1;
            //}



            StringBuilder strAdditionalParmDet = new StringBuilder();
            strAdditionalParmDet.Append("<Root>");
            if (grvAdditionalInfo.Rows.Count > 0)
            {
                foreach (GridViewRow grvRow in grvAdditionalInfo.Rows)
                {
                    Label lblPARAM_ID = (Label)grvRow.FindControl("lblPARAM_ID");
                    Label lblPARAM_DET_ID = (Label)grvRow.FindControl("lblPARAM_DET_ID");
                    Label lblCONSTANT_TRAN_ID = (Label)grvRow.FindControl("lblCONSTANT_TRAN_ID");
                    Label lblLookupType = (Label)grvRow.FindControl("lblLookupType");
                    TextBox txtValues = (TextBox)grvRow.FindControl("txtValues");
                    DropDownList ddlValues = (DropDownList)grvRow.FindControl("ddlValues");

                    strAdditionalParmDet.Append("<Details  CONSTANT_TRAN_ID = '" + lblCONSTANT_TRAN_ID.Text + "'");
                    strAdditionalParmDet.Append(" PARAM_ID = '" + lblPARAM_ID.Text + "'");
                    strAdditionalParmDet.Append(" PARAM_DET_ID = '" + lblPARAM_DET_ID.Text + "'");

                    if (!string.IsNullOrEmpty(lblLookupType.Text))
                        strAdditionalParmDet.Append(" VALUES ='" + ddlValues.SelectedValue + "'/>");
                    else
                        strAdditionalParmDet.Append(" VALUES ='" + txtValues.Text + "'/>");
                }
            }
            strAdditionalParmDet.Append("</Root>");


            ObjBusApplicationProcess.XmlAdditionalInfo = strAdditionalParmDet.ToString();



            ObjBusApplicationProcess.InstallmentRoundofPosition = Convert.ToInt32(ddlInstallmentRoundOff.SelectedValue);
            intResult = ObjAProcessSave.FunPubCreateApplicationProcessInt(out strApp_Number, ObjBusApplicationProcess);

            if (intResult == 0)
            {
                if (intApplicationProcessId > 0)
                {
                    //Added by Thangam M on 18/Oct/2012 to avoid double save click
                    //btnSave.Enabled = false;
                    btnSave.Enabled_False();
                    //End here
                    //funPriSendAlertMail();

                    //Deviation Validation message, Start By Praba On 17-02-2021

                    Dictionary<string, string> Procparam = new Dictionary<string, string>();
                    Procparam.Add("@COMPANY_ID", Convert.ToString(intCompanyId));
                    Procparam.Add("@APPLICATION_NO", strApp_Number);
                    DataTable dtResult = Utility.GetDefaultData("S3G_ORG_CHK_DEVIATION", Procparam);
                    if (dtResult != null)
                    {
                        if (!string.IsNullOrEmpty(dtResult.Rows[0][0].ToString()))
                        {
                            strDeviationValMsg = " with the following deviation " + dtResult.Rows[0][0].ToString();
                        }
                    }

                    // strAlert = "Application " + strApp_Number + " Created Successfully " + strDeviationValMsg;

                    //Deviation Validation message, End By Praba On 17-02-2021

                    strAlert = strAlert.Replace("__ALERT__", "Application " + txtProposalNumber.Text + " Modified Successfully" + strDeviationValMsg);



                    Session.Remove("PricingAssetDetails");
                    Session.Remove("AssetCustomer");
                    Session.Remove("AssetCustomerValiMessege");

                    strApp_Number = txtProposalNumber.Text;
                    //Utility.FunShowAlertMsg(this, strAlert);
                    if (ViewState["PageMode"] != null && ViewState["PageMode"].ToString() == PageModes.WorkFlow.ToString())  //if (isWorkFlowTraveler) 
                    {
                        //WorkFlowSession WFValues = new WorkFlowSession();
                        //int intWorkflowStatus = 0;
                        //try
                        //{
                        //    intWorkflowStatus = UpdateWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), WFValues.LOBId, WFValues.BranchID, strApp_Number, WFValues.WorkFlowProgramId, WFValues.WorkFlowStatusID.ToString(), WFValues.ProductId, WFValues.Document_Type);
                        //    strAlert = "";

                        //    //Added by Thangam M on 18/Oct/2012 to avoid double save click
                        //    btnSave.Enabled_False();
                        //    //End here

                        //    //strRedirectPageView = strRedirectHomePage;
                        //    WFValues.LastDocumentNo = strApp_Number;
                        //    ShowWFAlertMessage(strApp_Number, ProgramCode, strAlert);
                        //    return;
                        //}
                        //catch (Exception ex)
                        //{
                        //    strAlert = "Work Flow is not Assigned";
                        //    //int WorkflowStatus = UpdateWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), WFValues.WorkFlowDocumentNo, WFValues.WorkFlowProgramId, WFValues.WorkFlowStatusID.ToString());
                        //    ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
                        //}

                    }
                }
                else
                {
                    Session.Remove("PricingAssetDetails");
                    Session.Remove("AssetCustomer");
                    Session.Remove("AssetCustomerValiMessege");
                    txtProposalNumber.Text = strApp_Number;
                    DataTable dtWorkFlow = new DataTable();
                    int WFProgramId = 0;
                    string strWFMsg = "";
                    //if Starting Point is either Enquiry or Pricing

                    //Added by Thangam M on 27/Jul/2012 for CRM
                    //if (Request.QueryString.Get("qsCRMID") != null)      // From CRM
                    //{
                    //btnSave.Enabled = false;
                    //FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsCRMID"));
                    //Session["InitiateNumber"] = fromTicket.Name;
                    //FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(hdnCustID.Value, false, 0);
                    //string strCustomerAlert = "alert('Application " + strApp_Number + " Created Successfully');";
                    //strCustomerAlert += "window.location.href='../Origination/S3GOrgCRM.aspx?qsCustomer=" + FormsAuthentication.Encrypt(Ticket) + "'";
                    ////strCustomerAlert += "window.parent.document.getElementById('ctl00_ContentPlaceHolder1_btnFrameCancel').click()";
                    ////strCustomerAlert += "window.opener.location.reload();window.close();";
                    //strRedirectPageView = "";
                    //ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", strCustomerAlert, true);
                    //return;

                    //string strRedirectPageView = "window.location.href='../Origination/S3GOrgCRM_View.aspx?Code=CRM'";
                    //btnSave.Enabled = false;
                    //strAlert = "Application " + strApp_Number + " Created Successfully";
                    //strAlert = "if(confirm('" + strAlert + "')){" + strRedirectPageAdd + "}else {" + strRedirectPageView + "}";
                    //strRedirectPageView = "";
                    //ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);

                    //string strCustomerAlert = "alert('Application " + strApp_Number + " Created Successfully');";
                    //strCustomerAlert += "window.location.href='../Origination/S3GOrgCRM_View.aspx?Code=CRM'";
                    //strRedirectPageView = "";
                    //ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", strCustomerAlert, true);
                    //return;
                    //}

                    if (ViewState["SENDSMSEMAIL"] != null)
                    {
                        if (ViewState["SENDSMSEMAIL"].ToString() == "1")
                        {
                            funPriSendAlertMail();
                        }
                    }

                    //WORKFLOW START
                    if (ViewState["PageMode"] != null && ViewState["PageMode"].ToString() == PageModes.WorkFlow.ToString())  //if (isWorkFlowTraveler) 
                    {

                        WorkFlowSession WFValues = new WorkFlowSession();
                        int intWorkflowStatus = 0;
                        try
                        {
                            intWorkflowStatus = UpdateWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), Convert.ToInt32(ddlLOB.SelectedValue), WFValues.BranchID, strApp_Number, WFValues.WorkFlowProgramId, WFValues.WorkFlowStatusID.ToString(), WFValues.ProductId, WFValues.Document_Type);
                            strAlert = "";

                            //Added by Thangam M on 18/Oct/2012 to avoid double save click
                            btnSave.Enabled_False();
                            //End here

                            WFValues.LastDocumentNo = strApp_Number;

                            //strRedirectPageView = strRedirectHomePage;
                            ShowWFAlertMessage(strApp_Number, ProgramCode, strAlert);
                            return;
                        }
                        catch (Exception ex)
                        {
                            strAlert = "Work Flow is not Assigned";
                            //int WorkflowStatus = UpdateWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), WFValues.WorkFlowDocumentNo, WFValues.WorkFlowProgramId, WFValues.WorkFlowStatusID.ToString());
                            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
                        }

                    }

                    //if Starting Point is Application
                    else if (CheckForWorkFlowConfiguration(ProgramCode, WFLOBId, WFProductId, out WFProgramId, out dtWorkFlow) > 0)
                    {
                        AssignNewWorkFlowValues(WFProgramId, int.Parse(ProgramCode), strApp_Number, WFBranchId, WFLOBId, WFProductId, "", dtWorkFlow);
                        try
                        {
                            int intWorkflowStatus = InsertWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), WFLOBId, WFBranchId, strApp_Number, WFProgramId, WFProductId, 3);
                            strAlert = "";

                            //Added by Thangam M on 18/Oct/2012 to avoid double save click
                            //btnSave.Enabled = false;
                            btnSave.Enabled_False();
                            //End here

                            ShowWFAlertMessage(strApp_Number, ProgramCode, strAlert);
                            return;
                        }
                        catch (Exception ex)
                        {
                            strAlert = "Work Flow is not Assigned";
                            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
                        }

                    }
                    //  if workflow has not been defined for this combination(LOB, Product, Branch)
                    else
                    {
                        DataTable WFFP = new DataTable();
                        //string strWFMsg = "";
                        string strBusinessOfferNoList = string.Empty;
                        //if (strMode == "C")
                        //{
                        //    if (ddlBusinessOfferNoList.SelectedValue.ToString() != "0")
                        //    {
                        //        strBusinessOfferNoList = ddlBusinessOfferNoList.SelectedItem.Text.Substring(0, ddlBusinessOfferNoList.SelectedItem.Text.Trim().ToString().LastIndexOf("-") - 1).ToString();
                        //    }
                        //}
                        //if (strMode == "M")
                        //{
                        //    if (ddlBusinessOfferNoList.SelectedValue.ToString() != "0")
                        //    {
                        //        strBusinessOfferNoList = ddlBusinessOfferNoList.SelectedItem.Text;
                        //    }
                        //}

                        //if (CheckForForcePullOperation(null, strBusinessOfferNoList, ProgramCode, null, null, "O", CompanyId, null, null, ddlLOB_SelectedItem_Text.Value, ddlProductCodeList.SelectedItem.Text, out WFFP))
                        //{
                        //    DataRow dtrForce = WFFP.Rows[0];
                        //    try
                        //    {
                        //        int intWorkflowStatus = UpdateWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), int.Parse(dtrForce["LOBId"].ToString()), int.Parse(dtrForce["LocationID"].ToString()), strApp_Number, int.Parse(dtrForce["WFPROGRAMID"].ToString()), dtrForce["WFSTATUSID"].ToString(), int.Parse(dtrForce["PRODUCTID"].ToString()), 3);
                        //    }
                        //    catch (Exception ex)
                        //    {
                        //        strWFMsg = "WorkFlow not assigned";
                        //        int WorkflowStatus = UpdateWorkFlowTasks(CompanyId.ToString(), UserId.ToString(), "", WFProductId, dtrForce["WFSTATUSID"].ToString());
                        //    }

                        //}
                    }
                    //WORKFLOW END

                    //Deviation Validation message, Start By Praba On 30-12-2020

                    Dictionary<string, string> Procparam = new Dictionary<string, string>();
                    Procparam.Add("@COMPANY_ID", Convert.ToString(intCompanyId));
                    Procparam.Add("@APPLICATION_NO", strApp_Number);
                    DataTable dtResult = Utility.GetDefaultData("S3G_ORG_CHK_DEVIATION", Procparam);
                    if (dtResult != null)
                    {
                        if (!string.IsNullOrEmpty(dtResult.Rows[0][0].ToString()))
                        {
                            strDeviationValMsg = "with the following deviation " + dtResult.Rows[0][0].ToString();
                        }
                    }
                    //Deviation Validation message, End By Praba On 30-12-2020

                    btnSave.Enabled_False();
                    strAlert = "Application " + strApp_Number + " Created Successfully " + strDeviationValMsg;
                    if (strWFMsg != "")
                        strAlert += @"\n'" + strWFMsg + "'";
                    strAlert += @"\n\nWould you like to Create one more Application?";
                    strAlert = "if(confirm('" + strAlert + "')){" + strRedirectPageAdd + "}else {" + strRedirectPageView + "}";
                    strRedirectPageView = "";
                    //}
                }

            }
            else if (intResult == -1)
            {
                if (intApplicationProcessId == 0)
                {
                    //strAlert = strAlert.Replace("__ALERT__", Resources.LocalizationResources.DocNoNotDefined);
                    Utility.FunShowAlertMsg(this, Resources.LocalizationResources.DocNoNotDefined);
                    return;
                }
                strRedirectPageView = "";
            }
            else if (intResult == -2)
            {
                if (intApplicationProcessId == 0)
                {
                    //strAlert = strAlert.Replace("__ALERT__", Resources.LocalizationResources.DocNoExceeds);
                    Utility.FunShowAlertMsg(this, Resources.LocalizationResources.DocNoExceeds);

                    return;
                }
                // strRedirectPageView = "";
            }
            else if (intResult == 1)
            {
                //strAlert = strAlert.Replace("__ALERT__", "Finance Amount Exceeds");

                //Utility.FunShowAlertMsg(this, "Finance Amount Exceeds");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege20));
                return;
                //strRedirectPageView = "";
            }
            else if (intResult == 4)
            {
                Utility.FunShowAlertMsg(this, "Factoring Application Modification not allowed Due to unnapproved Invoice available for the contract (" + txtAccountNumber.Text + ")");
                return;
            }
            else if (intResult == 2)
            {
                //strAlert = strAlert.Replace("__ALERT__", "Tenure Exceeds");
                //Utility.FunShowAlertMsg(this, "Tenure Exceeds");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege21));
                return;
                //strRedirectPageView = "";
            }

            else
            {
                if (intApplicationProcessId > 0)
                {
                    //strAlert = strAlert.Replace("__ALERT__", "Due to Data Problem,Unable to Modify an Application");
                    //Utility.FunShowAlertMsg(this, "Due to Data Problem,Unable to Modify an Application");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege22));
                    return;
                }
                else
                {
                    //Utility.FunShowAlertMsg(this, "Due to Data Problem,Unable to Create an Application");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege23));
                    return;
                    //strAlert = strAlert.Replace("__ALERT__", "Due to Data Problem,Unable to Create an Application");

                }
                strRedirectPageView = "";
            }

            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
        }
        catch (FaultException<AccountMgtServicesReference.ClsPubFaultException> objFaultExp)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(objFaultExp);
            //if (ObjAProcessSave != null)
            //{
            //    if (ObjAProcessSave.State == CommunicationState.Opened)
            //        ObjAProcessSave.Close();
            //}
            throw objFaultExp;
        }
        catch (ApplicationException ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            //ObjAProcessSave.Close();
            throw ex;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {
            ObjAProcessSave.Close();
        }


    }

    /* WorkFlow Properties */
    private int WFLOBId { get { return int.Parse(ddlLOB.SelectedValue); } }
    private int WFBranchId { get { return int.Parse(ddlBranchList.SelectedValue); } }
    private int WFProductId { get { return int.Parse(ddlProductCodeList.SelectedValue); } }

    void AssignNewWorkFlowValues(int SelecteDocument, int SelectedProgramId, string SelectedDocumentNo, int BranchID, int LOBId, int ProductId, string LasDocumentNo, DataTable WFSequence)
    {
        WorkFlowSession WFValues = new WorkFlowSession(SelecteDocument, SelectedProgramId, SelectedDocumentNo, BranchID, LOBId, ProductId, LasDocumentNo, 3);
        WFValues.WorkFlowScreens = WFSequence;
    }
    DataTable LoadWorkFlowScreensList(string WFSequenceID)
    {
        //S3G_GEN_GetWorkFlowScreens
        Dictionary<string, string> Procparam = new Dictionary<string, string>();
        Procparam.Add("@WFSequence", WFSequenceID);
        DataTable WorkFlowScreens = Utility.GetDefaultData(SPNames.S3G_WORKFLOW_GetWorkFlowScreens, Procparam);
        return WorkFlowScreens;
    }

    private void FunPriShowScriptManager(string Title, string AlertMsg)
    {
        try
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), Title, "alert('" + AlertMsg + "');", true);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }

    private void FunPriCalculateIRR()
    {
        try
        {
            decimal decActualAmount, decTotalAmount = 0;
            string strType;
            string stroption;
            RepaymentType rePayType = new RepaymentType();
            //strType = ddlLOB.SelectedItem.Text.ToLower().Split('-')[0].Trim();
            strType = ddlLOB_SelectedItem_Text.Value.ToLower().Trim();
            switch (strType.ToLower())
            {
                case "tl":
                case "te":
                    rePayType = RepaymentType.TLE;
                    //tenure = 1;
                    break;
                case "ft":
                    rePayType = RepaymentType.FC;
                    // tenure = 1;
                    break;
                case "wc":
                    rePayType = RepaymentType.WC;
                    //tenure = 1;
                    break;
                default:
                    rePayType = RepaymentType.EMI;
                    break;
            }
            if (ddl_Return_Pattern.SelectedItem.Text == "PTF (Per thousand frequency)" || ddl_Return_Pattern.SelectedItem.Text == "PLF (Per lakh frequency)" || ddl_Return_Pattern.SelectedItem.Text == "PMF (Per million frequency)")
            {
                stroption = "3";
            }
            else
            {
                stroption = "2";
            }
            if (FunPriValidateTotalAmount(out decActualAmount, out decTotalAmount, stroption))
            {
                CommonS3GBusLogic ObjBusinessLogic = new CommonS3GBusLogic();

                DataTable dtRepaymentTab = (DataTable)ViewState["DtRepayGrid"];
                DataTable dtCashInflow = (DataTable)ViewState["DtCashFlow"];
                DataTable dtCashOutflow = (DataTable)ViewState["DtCashFlowOut"];
                double decResultIrr = 0;
                decimal decPLR = 0;
                if (hdnPLR.Value != "")
                {
                    decPLR = Convert.ToDecimal(hdnPLR.Value);
                }
                string strIrrRest = string.Empty;
                string strTimeval = string.Empty;
                switch (ddl_IRR_Rest.SelectedItem.Text.ToLower())
                {
                    case "day wise irr":
                        strIrrRest = "daily";
                        break;
                    case "month wise irr":
                        strIrrRest = "monthly";
                        break;
                    default:
                        strIrrRest = "daily";
                        break;

                }
                switch (ddl_Time_Value.SelectedItem.Text.ToLower())
                {
                    case "adv(advance)":
                    case "adf(advance fbd)":
                        strTimeval = "advance";
                        break;
                    case "arr(arrears)":
                    case "arf(arrears fbd)":
                        strTimeval = "arrears";
                        break;
                    default:
                        strTimeval = "advance";
                        break;
                }

                decimal decRate;
                double docRate;
                switch (ddl_Return_Pattern.SelectedItem.Text)
                {

                    case "IRR (Internal Rate of Return)":
                        ObjBusinessLogic.FunPubCalculateFlatRate(dtRepaymentTab, dtCashInflow, dtCashOutflow, ddl_Frequency.SelectedItem.Text, Convert.ToInt32(txtTenure.Text), ddlTenureType.SelectedItem.Text, strDateFormat, FunPriGetAmountFinanced(), Convert.ToDouble(hdnRate.Value), strIrrRest, "Empty", strTimeval, Convert.ToDecimal(0.10), IRRType.Accounting_IRR, out docRate, Convert.ToDecimal(10.05), decPLR);
                        decRate = Convert.ToDecimal(docRate);
                        break;
                    default:
                        decRate = Convert.ToDecimal(hdnRate.Value

                            );
                        break;
                }
                //Function for Calculating IRR Called
                decimal? decResvalue = null;
                decimal? decResAmt = null;
                if (txtResidualAmt_Cashflow.Text != "")
                {
                    decResAmt = Convert.ToDecimal(txtResidualAmt_Cashflow.Text);
                }
                if (txtResidualValue_Cashflow.Text != "")
                {
                    decResvalue = Convert.ToDecimal(txtResidualValue_Cashflow.Text);
                }
                // ObjBusinessLogic.FunPubCalculateIRR(dtRepaymentTab, dtCashInflow, dtCashOutflow, ddl_Frequency.SelectedItem.Text, Convert.ToInt32(txtTenure.Text), ddlTenureType.SelectedItem.Text, strDateFormat, FunPriGetAmountFinanced(), decRate, strIrrRest, "Empty", strTimeval, Convert.ToDecimal(0.10), IRRType.Accounting_IRR, out decResultIrr, Convert.ToDecimal(10.05), decPLR, Utility.StringToDate(txtDate.Text), decResvalue, decResAmt, rePayType);


                txtAccountIRR_Repay.Text = decResultIrr.ToString("0.00000");
                txtAccountingIRR.Text = decResultIrr.ToString("0.00000");

                //ObjBusinessLogic.FunPubCalculateIRR(dtRepaymentTab, dtCashInflow, dtCashOutflow, ddl_Frequency.SelectedItem.Text, Convert.ToInt32(txtTenure.Text), ddlTenureType.SelectedItem.Text, strDateFormat, FunPriGetAmountFinanced(), decRate, strIrrRest, "Empty", strTimeval, Convert.ToDecimal(0.10), IRRType.Business_IRR, out decResultIrr, Convert.ToDecimal(10.05), decPLR, Utility.StringToDate(txtDate.Text), decResvalue, decResAmt, rePayType);
                txtBusinessIRR_Repay.Text = decResultIrr.ToString("0.00000");
                txtBusinessIRR.Text = decResultIrr.ToString("0.00000");

                //ObjBusinessLogic.FunPubCalculateIRR(dtRepaymentTab, dtCashInflow, dtCashOutflow, ddl_Frequency.SelectedItem.Text, Convert.ToInt32(txtTenure.Text), ddlTenureType.SelectedItem.Text, strDateFormat, FunPriGetAmountFinanced(), decRate, strIrrRest, "Empty", strTimeval, Convert.ToDecimal(0.10), IRRType.Company_IRR, out decResultIrr, Convert.ToDecimal(10.05), decPLR, Utility.StringToDate(txtDate.Text), decResvalue, decResAmt, rePayType);
                txtCompanyIRR_Repay.Text = decResultIrr.ToString("0.00000");
                txtCompanyIRR.Text = decResultIrr.ToString("0.00000");
            }
            else
            {
                //Utility.FunShowAlertMsg(this, "Total Amount Should be equal to finance amount + interest (" + decTotalAmount + ")");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege24));
                return;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriIRRReset()
    {
        try
        {
            txtAccountingIRR.Text = "";
            txtAccountIRR_Repay.Text = "";
            txtBusinessIRR.Text = "";
            txtBusinessIRR_Repay.Text = "";
            txtCompanyIRR.Text = "";
            txtCompanyIRR_Repay.Text = "";
            if (ViewState["DtCashFlow"] != null)
            {
                DataTable DtCashFlow = (DataTable)ViewState["DtCashFlow"];
                if (DtCashFlow.Rows.Count > 0)
                {
                    DataRow[] drUMFC = null;
                    if (DtCashFlow.Columns.Contains("CashFlow_ID"))
                    {
                        drUMFC = DtCashFlow.Select("CashFlow_ID = 34");
                    }
                    else
                    {
                        drUMFC = DtCashFlow.Select("CashFlow_Flag_ID = 34");
                    }




                    if (drUMFC.Length > 0)
                    {
                        drUMFC[0].Delete();
                        DtCashFlow.AcceptChanges();


                        DataRow[] drUMFCLIP = DtCashFlow.Select("CashFlow_Flag_ID = 506");
                        if (drUMFCLIP.Length > 0)
                        {
                            drUMFCLIP[0].Delete();
                            DtCashFlow.AcceptChanges();

                        }


                        ViewState["DtCashFlow"] = DtCashFlow;
                        if (DtCashFlow.Rows.Count > 0)
                        {
                            FunPriFillInflowDLL(strEditMode);
                        }
                        else
                        {
                            FunPriFillInflowDLL(strAddMode);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private string FunPriGetScalarValue(DataTable ObjDT)
    {
        //try
        //{
        if (ObjDT.Rows.Count > 0)
            return Convert.ToString(ObjDT.Rows[0][0]);
        else
            return string.Empty;
        //}
        //catch (Exception ex)
        //{
        //    ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        //}

    }

    private void FunPriLoadTenureType()
    {
        OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

        try
        {
            ObjStatus.Option = 1;
            ObjStatus.Param1 = S3G_Statu_Lookup.TENURE_TYPE.ToString();
            Utility.FillDLL(ddlTenureType, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {
            ObjCustomerService.Close();
        }
    }

    private void FunPriFillMainPageDLL()
    {
        OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();

        try
        {
            ObjStatus.Option = 1;
            ObjStatus.Param1 = S3G_Statu_Lookup.TENURE_TYPE.ToString();
            Utility.FillDLL(ddlTenureType, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));
            ddlTenureType.SelectedValue = "134";
            ddlTenureType.ClearDropDownList();
            FunProLoadApplicationlovdtls(intCompanyId);



            //Code added by Chandru K On 18/Sep/2013 For ISFC Customization

            //ObjStatus.Option = 1;
            //ObjStatus.Param1 = "Type_of_Mortgage";
            //Utility.FillDLL(ddlTypeOfMortgage, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

            //ObjStatus.Option = 1;
            //ObjStatus.Param1 = "Step_Down_Revision";
            //Utility.FillDLL(ddlStepDown, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

            //End

            //ObjStatus.Option = 35;
            //ObjStatus.Param1 = intCompanyId.ToString();
            //Utility.FillDLL(ddlSalePersonCodeList, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

            //objProcedureParameter = new Dictionary<string, string>();
            //objProcedureParameter.Add("@Company_ID", Convert.ToString(intCompanyId));
            //objProcedureParameter.Add("@User_Id", Convert.ToString(intUserId));
            //objProcedureParameter.Add("@Program_Id", "38");
            //if (intApplicationProcessId == 0)
            //{
            //    objProcedureParameter.Add("@Is_Active", "1");
            //}
            //ddlLOB.BindDataTable(SPNames.LOBMaster, objProcedureParameter, new string[] { "LOB_ID", "LOB_CODE", "LOB_NAME" });
            //if (strMode != "C")
            //{
            //    ddlBranchList.BindDataTable(SPNames.BranchMaster_LIST, objProcedureParameter, new string[] { "Location_ID", "Location" });
            //}
            //objProcedureParameter = null;

            //FunPriLoadOfferNo();
            //ObjCustomerService.Close();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {
            ObjCustomerService.Close();
        }

    }
    private void FunPriLoadOfferNo()
    {
        OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
        try
        {

            ObjStatus.Option = 33;
            ObjStatus.Param1 = intCompanyId.ToString();
            if (intApplicationProcessId == 0)
            {
                ObjStatus.Param2 = "C";
            }
            else
            {
                ObjStatus.Param2 = "M";
            }

            if (ddlLOB.SelectedIndex > 0)
            {
                ObjStatus.Param3 = ddlLOB.SelectedValue;
            }
            if (ddlBranchList.SelectedValue != "0")
            {
                ObjStatus.Param4 = ddlBranchList.SelectedValue;
            }
            //Utility.FillDLL(ddlBusinessOfferNoList, ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus));

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {
            ObjCustomerService.Close();
            ObjStatus = null;
        }
    }
    private DateTime FunPriSetLastDate(DateTime dt)
    {
        DateTime dtTo = dt;
        try
        {

            dtTo = dt.AddMonths(1);
            dtTo = dtTo.AddDays(-(dtTo.Day));


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return dtTo;
    }


    private bool FunPriValidateUserPassword()
    {
        OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
        bool ischeck = false;
        try
        {


            if (intApplicationProcessId == 0)
            {
                S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
                ObjStatus.Option = 57;
                ObjStatus.Param1 = intUserId.ToString();
                ObjStatus.Param2 = intCompanyId.ToString();
                //ObjStatus.Param3 = txtPassword.Text.Trim();
                if (FunPriGetScalarValue(ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus)).ToString() == "1")
                {
                    ischeck = true;
                }
                else
                    ischeck = false;

                //ObjCustomerService.Close();
                return ischeck;
            }
            else
                return true;

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {
            ObjCustomerService.Close();
        }
        return ischeck;
    }

    private string FunPriValidateEmpty(string Str, bool IsNeedZero)
    {
        string ReturnS = string.Empty;
        try
        {


            if (string.IsNullOrEmpty(Str))
            {
                if (IsNeedZero)
                    ReturnS = "0";
            }
            else
                ReturnS = Str;


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return ReturnS;
    }
    protected void FunGetScreenModifyAccess()
    {
        try
        {
            Dictionary<string, string> Procparam = new Dictionary<string, string>();

            Procparam.Add("@Company_ID", Convert.ToString(intCompanyId));
            Procparam.Add("@User_ID", Convert.ToString(intUserId));
            DataTable dt = Utility.GetDefaultData("S3G_SA_GET_USER_FUN_ACCESS", Procparam);
            ViewState["RISK_AC"] = "0";
            ViewState["FLR_RT"] = "0";
            ViewState["CHK_APPDT"] = "0";//Applic
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    if (dr["USER_FUNCTION"].ToString().ToUpper() == "RISK_AC")
                    {
                        ViewState["RISK_AC"] = "1";
                    }
                    if (dr["USER_FUNCTION"].ToString().ToUpper() == "FLR_RT")
                    {
                        ViewState["FLR_RT"] = "1";
                    }
                    //Live Change Done on 27-June-2019
                    if (dr["USER_FUNCTION"].ToString().ToUpper() == "CHK_APPDT")
                    {
                        ViewState["CHK_APPDT"] = "1";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriLoadApplicationDetails()
    {
        try
        {
            //<<Performance>>
            //FunPriLoadLObandBranch(intUserId, intCompanyId);
            FunPriFillMainPageDLL();
            FunPriLoadTenureType();
            ListItem lstitem;
            string strSPName = "S3G_OR_Get_AppProcDet";
            Dictionary<string, string> procparam = new Dictionary<string, string>();
            procparam.Add("@ApplicationProcessId", intApplicationProcessId.ToString());
            procparam.Add("@COMPANYID", intCompanyId.ToString());
            procparam.Add("@Mode", strMode);
            DataSet dsApplicationProcessDetails = Utility.GetDataset(strSPName, procparam);
            //div7.Visible = true;
            ddlLOB.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["LOB_ID"]);
            HttpContext.Current.Session["LOBID"] = ddlLOB.SelectedValue;
            ddlLOB_SelectedItem_Text.Value = dsApplicationProcessDetails.Tables[0].Rows[0]["LOB_CODE"].ToString();
            ddlApplicationNo.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["Pricing_ID"].ToString();
            ddlApplicationNo.SelectedText = dsApplicationProcessDetails.Tables[0].Rows[0]["business_offer_number"].ToString();//Proposal From DMS

            ddlInstallmentRoundOff.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["INS_ROUND_OFF_POS"].ToString();//Proposal From DMS
            ddlInstallmentRoundOff_SelectedIndexChanged(null, null);

            if (dsApplicationProcessDetails.Tables[0].Rows[0]["Workflow_Status"].ToString() == "1")
            {
                chkDataEntryStage.Checked = true;


                if (ViewState["RISK_AC"].ToString() == "1")
                {
                    //pnlAppraisalInfo.Enabled = false;
                    //pnlFollowup.Enabled = false;
                    //pnlAlert.Enabled = false;
                    //pnlGuarantorHid.Enabled = false;
                    //pnlRepayment.Enabled = false;
                    //pnlOfferTerms.Enabled = false;
                    //pnlMainTab.Enabled = false;
                    //TabContainerAP.Tabs[8].Enabled = true;
                    //TabContainerAP.Tabs[8].Focus();

                    //pnlAssetDetails.Enabled = false;
                    //pnlAssetAdd.Enabled = false;
                }
                else
                {
                    //TabContainerAP.Tabs[8].Enabled = false;
                }
            }
            if (dsApplicationProcessDetails.Tables[0].Rows[0]["Workflow_Status"].ToString() == "2")
            {
                chkDataEntryStage.Checked = true;
                //chkRiskStage.Checked = true;

                if (ViewState["RISK_AC"].ToString() == "1")
                {
                    //pnlAppraisalInfo.Enabled = false;
                    //pnlFollowup.Enabled = false;
                    //pnlAlert.Enabled = false;
                    //pnlGuarantorHid.Enabled = false;
                    //pnlRepayment.Enabled = false;
                    //pnlOfferTerms.Enabled = false;
                    //pnlMainTab.Enabled = false;
                    //TabContainerAP.Tabs[8].Enabled = true;
                    //TabContainerAP.Tabs[8].Focus();

                    //pnlAssetDetails.Enabled = true;
                    //pnlAssetAdd.Enabled = true;
                }
                else
                {
                    //TabContainerAP.Tabs[8].Enabled = false;
                }
            }

            if (dsApplicationProcessDetails.Tables[0].Rows[0]["LOB_CODE"].ToString() == "FT" || dsApplicationProcessDetails.Tables[0].Rows[0]["LOB_CODE"].ToString() == "WC")
            {
                ddlLOB_SelectedIndexChanged(null, null);
                funPriVoidLoadSetFWCDetails(dsApplicationProcessDetails);
                //funPriVoidShowHideFWC();
                return;
            }
            funPriLoadFloorRate();
            lblRoundNo.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["RoundNo"]);
            txtProposalNumber.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Application_Number"]);
            txtApplication_Followup.Text = txtProposalNumber.Text;
            txtApplicationDateDate.Text = DateTime.Parse(dsApplicationProcessDetails.Tables[0].Rows[0]["Date"].ToString(), CultureInfo.CurrentCulture).ToString(strDateFormat);
            //txtOfferDate.Text = DateTime.Parse(dsApplicationProcessDetails.Tables[0].Rows[0]["Offer_Date"].ToString(), CultureInfo.CurrentCulture).ToString(strDateFormat);
            //txtStatus.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Status"]);
            //lstitem = new ListItem(dsApplicationProcessDetails.Tables[0].Rows[0]["LocationCat_Description"].ToString(), dsApplicationProcessDetails.Tables[0].Rows[0]["Location_ID"].ToString());
            //ddlBranchList.Items.Add(lstitem);
            //ddlBranchList.SelectedItem.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["LocationCat_Description"].ToString();
            ddlBranchList.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["Location_ID"].ToString();
            cmbLocation_SelectedIndexChanged(null, null);
            cmbSubLocation.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString();

            if (cmbSubLocation.Items.FindByValue(dsApplicationProcessDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString()) != null)
            {
                cmbSubLocation.Items.FindByValue(dsApplicationProcessDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString()).Selected = true;
            }
            else
            {
                System.Web.UI.WebControls.ListItem lstitem2;
                lstitem2 = new System.Web.UI.WebControls.ListItem();
                lstitem2.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["SUB_LOCATION"]);
                lstitem2.Value = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"]);
                cmbSubLocation.Items.Add(lstitem2);
                cmbSubLocation.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"]);
            }


            ddlCreditPurpose.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["CREDIT_PURPOSE"].ToString();
            ddlContType.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["CONTRACT_TYPE"].ToString();
            ddlContType_SelectedIndexChanged(null, null);
            ddlCovenantsClause.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["COVENANTS"].ToString();
            txtCovenantTerms.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["COV_TERM"].ToString();
            txtSellerCode.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["SELLER_ID"].ToString();
            txtSellerName.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["SELLER_NAME"].ToString();
            txtCreditLimit.Text = Utility.funPubChangeCurrencyFormat(dsApplicationProcessDetails.Tables[0].Rows[0]["MAX_LEND_AMOUNT"].ToString());

            txtFirstInstallDate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["FIRST_INSTALMENT_DATE"].ToString();
            txtIncomeBookStartDate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["INCOME_BOOKING_START_DATE"].ToString();
            ViewState["App_Status"] = ddlStatus.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["STATUS_ID"].ToString();
            ddlDealType.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["DEAL_TYPE"].ToString();
            ddlDealerName.SelectedText = dsApplicationProcessDetails.Tables[0].Rows[0]["entity_name"].ToString();
            ddlDealerName.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["DEALER_ID"].ToString();
            //ddlDealType_SelectedIndexChanged(null, null);
            ddlDealerschemename.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["DEALER_SCHEME_NAME"].ToString();
            ddldc.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["DEBTCOLLECTOR_ID"].ToString();
            ddldc.SelectedText = dsApplicationProcessDetails.Tables[0].Rows[0]["DEBTCOLLECTOR_NAME"].ToString();
            txtDiscountRateforLineofCredit.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["DISCOUNT_RATE_LOC"].ToString();
            txtDiscountRateforLineofCredit.funPubChangeCurrencyFormat();
            //ddlArearAdvance.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["DISCOUNT_RATE_LOC"].ToString();


            ddlDealerCommissionApplicable.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["DEALER_COMM_APPLI"].ToString();

            ddlLifeInsurance.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["LIFE_INSURANCE_APPLI"].ToString();
            ddlLifeInsuranceEntity.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["LIFE_INSURANCE_ENTITY_ID"].ToString();
            ddlLifeInsuranceEntity.SelectedText = dsApplicationProcessDetails.Tables[0].Rows[0]["LIFE_INSURANCE_ENTITY_NAME"].ToString();

            txtLifeInsuranceCustRate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["INSURANCE_CUST_RATE"].ToString();
            txtLifeInsuranceCompanyRate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["INSURANCE_COMPANY_RATE"].ToString();
            txtLifeInsuranceCompanyAmount.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["INSURANCE_PAYABLE_AMOUNT"].ToString();
            txtLifeInsuranceCompanyAmount.funPubChangeCurrencyFormat();
            txtLifeInsuranceCustomerPremiumAmount.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["INSURANCE_AMOUNT"].ToString();
            txtLifeInsuranceCustomerPremiumAmount.funPubChangeCurrencyFormat();
            
            // VAT changes
            txtInsuranceTaxRate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["Insurance_Tax_Rate"].ToString();
            txtInsuranceCompanyTaxAmount.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["Insurance_Company_Tax_Amount"].ToString();
            txtInsuranceCustomerTaxAmount.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["Insurance_Cust_Tax_Amount"].ToString();
            txtLifeInsuranceCustomerPremiumAmountWT.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["Insurance_Prem_Amount_Wt"].ToString();
            txtLifeInsuranceCompanyAmountWT.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["Insurance_Payable_Amount_Wt"].ToString();


            ddlSalePersonCodeList.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["SALES_PERSON_ID"].ToString();
            ddlSalePersonCodeList.SelectedText = dsApplicationProcessDetails.Tables[0].Rows[0]["SALES_PERSON_NAME"].ToString();
            ddldealerSalesPerson.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["DEALER_SALES_PERSON_ID"].ToString();
            ddldealerSalesPerson.SelectedText = dsApplicationProcessDetails.Tables[0].Rows[0]["DEALER_SALES_PERSON_NAME"].ToString();
            txtTentativeAccDate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["TENTATIVE_ACCOUNT_DATE"].ToString();


            ddlRepamentMode.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["REPAYMENT_CODE"].ToString();

            //ddlEmployerBankName.SelectedValue = "1";
            ddlLeadSource.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["SOURCE_TYPE"].ToString();
            ddlLeadSource_SelectedIndexChanged(null, null);
            txtAccountNumber.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["PANUM"].ToString();
            if (dsApplicationProcessDetails.Tables[0].Rows[0]["SOURCE_TYPE"].ToString() != "4")
            {
                ddlLeadSourceName.SelectedText = dsApplicationProcessDetails.Tables[0].Rows[0]["SOURCE_NAME"].ToString();
                ddlLeadSourceName.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["SOURCE_ID"].ToString();
            }
            else
            {
                txtLeadOtherSource.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["OTHER_SOURCE_NAME"].ToString();
            }
            ddlStartDelayChargesApplicable.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["DELAY_CHARGES_APPLI"].ToString();
            ddlStartDelayChargesApplicable_SelectedIndexChanged(null, null);
            ddlExistenceofFirstCharge.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["EX_FIRST_CHARGES"].ToString();
            ddlExistenceofsecondcharge.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["EX_SECOND_CHARGES"].ToString();
            txtNoofDaystobeconsidered.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["delay_charge_Grace_Days"].ToString();

            txtDelayDays.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["CHARGEABLE_DELAY_DAYS"].ToString();
            txtStartDatedelayrate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["DELAY_CHARGE_RATE"].ToString();
            txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(dsApplicationProcessDetails.Tables[0].Rows[0]["delay_charge_Amount"].ToString());
            txtStartdelaycharges.funPubChangeCurrencyFormat();
            txtOverDueCharges.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["OVERDUE_CHARGES"].ToString();


            ddlBusinessSource.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["business_source"].ToString();
            if (Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Pricing_ID"]) != string.Empty)
            {
                lstitem = new ListItem(dsApplicationProcessDetails.Tables[0].Rows[0]["Business_Offer_Number"].ToString(), dsApplicationProcessDetails.Tables[0].Rows[0]["Pricing_ID"].ToString());
                ddlBusinessOfferNoList.Items.Add(lstitem);
            }
            else
            {
                lstitem = new ListItem("--Select--", "-1");
                ddlBusinessOfferNoList.Items.Add(lstitem);
            }
            if (Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Pricing_ID"]) != string.Empty)
            {
                ddlBusinessOfferNoList.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Pricing_ID"]);
                txtOfferNo_Followup.Text = ddlBusinessOfferNoList.SelectedItem.Text;
                ddlBusinessOfferNoList.ClearDropDownList();
            }
            TextBox txtName = ucCustomerCodeLov.FindControl("txtName") as TextBox;
            txtCustomerCodeLease.Text = txtName.Text = txtCustomerCode.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Customer_Code"]);
            HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            hdnCustID.Value = dsApplicationProcessDetails.Tables[0].Rows[0]["Customer_Id"].ToString();
            hdnCID.Value = hdnCustID.Value;
            btnLoadCustomer_Click(null, null);
            //S3GCustomerAddress1.SetCustomerDetails(dsApplicationProcessDetails.Tables[0].Rows[0]["Customer_Code"].ToString(),
            //        dsApplicationProcessDetails.Tables[0].Rows[0]["comm_Address1"].ToString() + "\n" +
            //        dsApplicationProcessDetails.Tables[0].Rows[0]["comm_Address2"].ToString() + "\n" +
            //        dsApplicationProcessDetails.Tables[0].Rows[0]["comm_city"].ToString() + "\n" +
            //        dsApplicationProcessDetails.Tables[0].Rows[0]["comm_state"].ToString() + "\n" +
            //        dsApplicationProcessDetails.Tables[0].Rows[0]["comm_country"].ToString() + "\n" +
            //        dsApplicationProcessDetails.Tables[0].Rows[0]["comm_pincode"].ToString(), dsApplicationProcessDetails.Tables[0].Rows[0]["Customer_Name"].ToString(),
            //        dsApplicationProcessDetails.Tables[0].Rows[0]["Comm_Telephone"].ToString(),
            //        dsApplicationProcessDetails.Tables[0].Rows[0]["Comm_mobile"].ToString(),
            //        dsApplicationProcessDetails.Tables[0].Rows[0]["comm_email"].ToString(), dsApplicationProcessDetails.Tables[0].Rows[0]["comm_website"].ToString());
            ViewState["GuarantorCustomer"] = dsApplicationProcessDetails.Tables[0].Rows[0]["Customer_Id"].ToString();
            Session["AssetCustomer"] = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Customer_Id"]) + ";" + txtName.Text;
            lstitem = new ListItem(dsApplicationProcessDetails.Tables[0].Rows[0]["LOB_Name"].ToString(), dsApplicationProcessDetails.Tables[0].Rows[0]["LOB_ID"].ToString());
            ddlLOB.Items.Add(lstitem);
            Utility.FillDLL(ddlTenureType, dsApplicationProcessDetails.Tables[18]);

            //Utility.FillDLL(ddlTypeOfMortgage, dsApplicationProcessDetails.Tables[22]);
            //Utility.FillDLL(ddlStepDown, dsApplicationProcessDetails.Tables[23]);
            //if (Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Mortgage_Type"]) != string.Empty)
            //    ddlTypeOfMortgage.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Mortgage_Type"]);
            //txtMortgageFee.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Mortgage_Fees"]);
            //if (Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["StepDown_RevisionType"]) != string.Empty)
            //    ddlStepDown.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["StepDown_RevisionType"]);

            FunPriMLASLAApplicable(Convert.ToInt32(ddlLOB.SelectedValue));
            txtLOB_Followup.Text = ddlLOB.SelectedItem.Text;
            if (ddlBranchList.SelectedItem != null)
                txtBranch_Followup.Text = ddlBranchList.SelectedItem.Text;


            //Product

            lstitem = new ListItem();
            lstitem.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["PRODUCT"]);
            lstitem.Value = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Product_ID"]);
            ddlProductCodeList.Items.Add(lstitem);

            ddlSalePersonCodeList.SelectedText = dsApplicationProcessDetails.Tables[0].Rows[0]["Sales_Person"].ToString();
            ddlSalePersonCodeList.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["Sales_Person_ID"].ToString();
            ddlSalePersonCodeList.ToolTip = dsApplicationProcessDetails.Tables[0].Rows[0]["Sales_Person"].ToString();
            if (strMode != "M")
                ddlSalePersonCodeList.ReadOnly = true;
            ddlSalePersonCodeList.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Sales_Person_ID"]);
            lstitem = new ListItem();
            lstitem.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Consitution"]);
            lstitem.Value = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Constitution_ID"]);
            ddlConstitutionCodeList.Items.Add(lstitem);
            txtConstitution.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Consitution"]);

            if (string.IsNullOrEmpty(Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Refinance_Contract"])))
                ChkRefinanceContract.Checked = false;
            else
                ChkRefinanceContract.Checked = Convert.ToBoolean(Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Refinance_Contract"]));
            if (!string.IsNullOrEmpty(Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["FBDate"])))
            {
                txtFBDate.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["FBDate"]);
                //rfvFBDate.Enabled = true;
                //rngFBDate.Enabled = true;
            }
            else
            {
                txtFBDate.Text = "";
                //rfvFBDate.Enabled = false;
                //rngFBDate.Enabled = false;
            }
            txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Finance_Amount"]));
            if (ViewState["StartDelayRate"] != null)
            {
                txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix()));
            }

            if (dsApplicationProcessDetails.Tables[0].Rows[0]["Business_IRR"].ToString() != string.Empty)
            {
                txtBusinessIRR_Repay.Text = txtBusinessIRR.Text = Convert.ToDecimal(dsApplicationProcessDetails.Tables[0].Rows[0]["Business_IRR"]).ToString("0.00000");
            }
            else
                txtBusinessIRR_Repay.Text = txtBusinessIRR.Text = "0.00000";

            if (dsApplicationProcessDetails.Tables[0].Rows[0]["Company_IRR"].ToString() != string.Empty)
            {
                txtCompanyIRR_Repay.Text = txtCompanyIRR.Text = Convert.ToDecimal(dsApplicationProcessDetails.Tables[0].Rows[0]["Company_IRR"]).ToString("0.00000");
            }
            else
            {
                txtCompanyIRR_Repay.Text = txtCompanyIRR.Text = "0.00000";
            }

            if (dsApplicationProcessDetails.Tables[0].Rows[0]["Accounting_IRR"].ToString() != string.Empty)
            {
                txtAccountIRR_Repay.Text = txtAccountingIRR.Text = Convert.ToDecimal(dsApplicationProcessDetails.Tables[0].Rows[0]["Accounting_IRR"]).ToString("0.00000");
            }
            else
                txtAccountIRR_Repay.Text = txtAccountingIRR.Text = "0.00000";

            txtTenure.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Tenure"]);
            ddlTenureType.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Tenure_Type"]);

            txtResidualValue.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Residual_Value"]);
            txtResidualValue.Text = txtResidualValue.Text.StartsWith("0") ? "" : txtResidualValue.Text;

            txtMarginMoneyPer_Cashflow.Text = Convert.ToDecimal(Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Offer_Margin"])).ToString();
            txtMarginMoneyAmount_Cashflow.Text = Convert.ToDecimal(Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Offer_Margin_Amount"])).ToString();

            txtEnquiry_Followup.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Enquiry_Ref_Number"]);
            //if (dsApplicationProcessDetails.Tables[0].Rows[0]["Enquiry_Date"] != DBNull.Value)
            //    txtEnquiryDate_Followup.Text = Convert.ToDateTime(dsApplicationProcessDetails.Tables[0].Rows[0]["Enquiry_Date"]).ToString(strDateFormat);

            //txtCustNameAdd_Followup.Text = S3GCustomerAddress1.CustomerName + "\n" + S3GCustomerAddress1.CustomerAddress;
            ddlConstitutionCodeList.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Constitution_ID"]);
            hdnConstitutionId.Value = ddlConstitutionCodeList.SelectedValue;
            ddlProductCodeList.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Product_ID"]);

            if (strMode == "M")
            {
                FunPriBindPaymentDDL(Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Card_Id"]));
            }
            else
            {
                lstitem = new ListItem(dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Number"].ToString(), dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Card_Id"].ToString());
                ddlPaymentRuleList.Items.Add(lstitem);
            }
            ddlPaymentRuleList.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Card_Id"]);
            hdnPayment.Value = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Card_Id"]);
            if (dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Card_Id"].ToString() != "0")
            {
                FunPriLoadPaymentRuleDetails();
            }
            grvConsDocuments.DataSource = dsApplicationProcessDetails.Tables[1];
            grvConsDocuments.DataBind();

            if (dsApplicationProcessDetails.Tables[2].Rows.Count > 0)
            {
                gvAlert.DataSource = dsApplicationProcessDetails.Tables[2];
                gvAlert.DataBind();
                FunPriFillAlertDLL(strEditMode);
                ViewState["DtAlertDetails"] = dsApplicationProcessDetails.Tables[2];
            }
            else
            {
                FunPriFillAlertDLL(strAddMode);
            }
            ViewState["RepaymentStructure"] = dsApplicationProcessDetails.Tables[21];
            FunPriCalculateSummary(dsApplicationProcessDetails.Tables[4], "CashFlow", "TotalPeriodInstall");
            DataTable dtCloned2 = dsApplicationProcessDetails.Tables[5].Clone();
            dtCloned2.Columns[4].DataType = typeof(decimal);
            foreach (DataRow row in dsApplicationProcessDetails.Tables[5].Rows)
            {
                dtCloned2.ImportRow(row);
            }
            ViewState["DtCashFlow"] = dtCloned2;
            if (dsApplicationProcessDetails.Tables[5].Rows.Count > 0)
            {
                FunPriFillInflowDLL(strEditMode);
            }
            else
            {
                FunPriFillInflowDLL(strAddMode);
            }
            ViewState["DtCashFlowOut"] = dsApplicationProcessDetails.Tables[6];
            DataTable dtCloned = dsApplicationProcessDetails.Tables[6].Clone();
            dtCloned.Columns[4].DataType = typeof(decimal);
            foreach (DataRow row in dsApplicationProcessDetails.Tables[6].Rows)
            {
                dtCloned.ImportRow(row);
            }
            ViewState["DtCashFlowOut"] = dtCloned;
            if (dsApplicationProcessDetails.Tables[6].Rows.Count > 0)
            {
                FunPriFillOutflowDLL(strEditMode);
            }
            else
            {
                FunPriFillOutflowDLL(strAddMode);
            }

            ViewState["DtRepayGrid"] = dsApplicationProcessDetails.Tables[4];
            FunPriFillRepaymentDLL(strEditMode);
            //gvRepaymentDetails.FooterRow.Visible = false;
            btnReset.Enabled_False();
            /*changed by Prabhu.K on 22-Nov-2011 for UAT Issue in App.Approval*/
            //if (TabContainerMainTab.Tabs[1].Visible)
            //{
            //    //Session["PricingAssetDetails"] = dsApplicationProcessDetails.Tables[12];

            //    DataTable dtCloned_1 = dsApplicationProcessDetails.Tables[12].Clone();
            //    dtCloned_1.Columns[6].DataType = typeof(decimal);
            //    dtCloned_1.Columns[7].DataType = typeof(decimal);
            //    dtCloned_1.Columns[8].DataType = typeof(decimal);
            //    dtCloned_1.Columns[9].DataType = typeof(decimal);
            //    dtCloned_1.Columns[10].DataType = typeof(decimal);
            //    foreach (DataRow row in dsApplicationProcessDetails.Tables[6].Rows)
            //    {
            //        dtCloned_1.ImportRow(row);
            //    }
            //    Session["PricingAssetDetails"] = dtCloned_1;
            //}
            FunPriFillROIDLL(strAddMode);
            objProcedureParameter = new Dictionary<string, string>();
            if (strMode == "M")
            {
                Utility.BindDataTable(ddlROIRuleList, dsApplicationProcessDetails.Tables[20], new string[] { "ROI_Rules_ID", "ROI_Rule_Number", "Model_Description" });
            }
            else
            {
                if (dsApplicationProcessDetails.Tables[7].Rows.Count > 0)
                {
                    lstitem = new ListItem(dsApplicationProcessDetails.Tables[7].Rows[0]["ROI_Number"].ToString(), dsApplicationProcessDetails.Tables[7].Rows[0]["ROI_Rules_Id"].ToString());
                    ddlROIRuleList.Items.Add(lstitem);
                }
            }
            //<<Performance>>
            //if (strMode.ToUpper().Trim() != "Q")
            //    objProcedureParameter.Add("@Is_Active", "1");
            //if (strMode.ToUpper().Trim() == "M")
            //    objProcedureParameter.Add("@Rules_ID", Convert.ToString(dsApplicationProcessDetails.Tables[7].Rows[0]["ROI_Rules_Id"]));
            //objProcedureParameter.Add("@Company_ID", intCompanyId.ToString());
            //objProcedureParameter.Add("@LOB_ID", ddlLOB.SelectedValue);
            //objProcedureParameter.Add("@Option", "7");
            //ddlROIRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, objProcedureParameter, new string[] { "ROI_Rules_ID", "ROI_Rule_Number", "Model_Description" });

            ddlROIRuleList.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[7].Rows[0]["ROI_Rules_Id"]);
            hdnROIRule.Value = Convert.ToString(dsApplicationProcessDetails.Tables[7].Rows[0]["ROI_Rules_Id"]);
            ViewState["ROIRules"] = dsApplicationProcessDetails.Tables[7];
            FunPriLoadROIRuleDetails(strEditMode);

            txtResidualValue_Cashflow.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Offer_Residual_Value"]);
            txtResidualValue_Cashflow.Text = txtResidualValue_Cashflow.Text.StartsWith("0") ? "" : txtResidualValue_Cashflow.Text;
            txtResidualAmt_Cashflow.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Residual_Value"]);
            txtResidualAmt_Cashflow.Text = txtResidualAmt_Cashflow.Text.StartsWith("0") ? "" : txtResidualAmt_Cashflow.Text;

            //added by saranya
            if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC") ||
                ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT") ||
                ((ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TE") ||
                ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL")) &&
                ddl_Repayment_Mode.SelectedItem.Text.ToUpper().StartsWith("PRO")))
            {
                Button btnAdd = gvInflow.FooterRow.FindControl("btnAdd") as Button;
                btnAdd.Enabled = false;
                // TabContainerAP.Tabs[2].Enabled = false;
            }
            //end
            if (dsApplicationProcessDetails.Tables[10].Rows.Count > 0)
            {
                ViewState["DtFollowUp"] = dsApplicationProcessDetails.Tables[10];
                FunPriFillFollowupDLL(strEditMode);
            }
            else
            {
                FunPriFillFollowupDLL(strAddMode);
            }
            txtMarginAmount.Text = Utility.funPubChangeCurrencyFormat(Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Margin_Amount"]));
            lblTotalOutFlowAmount.Text = dsApplicationProcessDetails.Tables[11].Rows[0][0].ToString();
            lblTotalOutFlowAmount.funPubChangeCurrencyFormat();
            //commented by saranya for TERM LOAN/EXTENSIBLE changes
            // if (ddlLOB.SelectedItem.Text.ToUpper().Contains("FACT") || ddlLOB.SelectedItem.Text.ToUpper().Contains("WORKING") || ddlLOB.SelectedItem.Text.ToUpper().Contains("TERM"))
            if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT") || ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC"))
            {
                TabContainerMainTab.Tabs[1].Visible = false;
            }
            else
            {
                TabContainerMainTab.Tabs[1].Visible = true;
            }
            if (TabContainerMainTab.Tabs[1].Visible)
            {
                //Session["PricingAssetDetails"] = dsApplicationProcessDetails.Tables[12];
                DataTable dtCloned_1 = dsApplicationProcessDetails.Tables[12].Clone();
                dtCloned_1.Columns[6].DataType = typeof(decimal);
                dtCloned_1.Columns[7].DataType = typeof(decimal);
                dtCloned_1.Columns[8].DataType = typeof(decimal);
                dtCloned_1.Columns[9].DataType = typeof(decimal);
                dtCloned_1.Columns[10].DataType = typeof(decimal);
                foreach (DataRow row in dsApplicationProcessDetails.Tables[12].Rows)
                {
                    dtCloned_1.ImportRow(row);
                }
                Session["PricingAssetDetails"] = dtCloned_1;

                gvAssetDetails.DataSource = dsApplicationProcessDetails.Tables[12];
                gvAssetDetails.DataBind();
                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();

                decimal dcmMarginAmount = (decimal)(dsApplicationProcessDetails.Tables[12].Compute("Sum(Margin_Amount_1)", "Noof_Units > 0"));
                txtMarginAmount.Text = Utility.funPubChangeCurrencyFormat((dcmMarginAmount == 0) ? "" : dcmMarginAmount.ToString(Funsetsuffix()));
                decimal dcmAssetFinAmount2 = (decimal)(dsApplicationProcessDetails.Tables[12].Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                txtFinanceAmount.Text = (dcmAssetFinAmount2 == 0) ? "" : dcmAssetFinAmount2.ToString(Funsetsuffix());
                txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(txtFinanceAmount.Text);
                if (ViewState["StartDelayRate"] != null)
                {
                    txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                    txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix()));
                }
                funPriSetGuarantorAmount();
                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
                decimal dcmAssetTradeIn = (decimal)(dsApplicationProcessDetails.Tables[12].Compute("Sum(Trade_In_1)", "Noof_Units > 0"));
                txtdiscount.Text = (dcmAssetTradeIn == 0) ? "" : dcmAssetTradeIn.ToString(Funsetsuffix());
                txtdiscount.funPubChangeCurrencyFormat();

                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
            }
            if (dsApplicationProcessDetails.Tables[12].Rows.Count > 0)
            {
                gvAssetDetails.DataSource = dsApplicationProcessDetails.Tables[12];
                gvAssetDetails.DataBind();

                decimal dcmMarginAmount = (decimal)(dsApplicationProcessDetails.Tables[12].Compute("Sum(Margin_Amount_1)", "Noof_Units > 0"));
                txtMarginAmount.Text = Utility.funPubChangeCurrencyFormat((dcmMarginAmount == 0) ? "" : dcmMarginAmount.ToString(Funsetsuffix()));
                decimal dcmAssetFinAmount2 = (decimal)(dsApplicationProcessDetails.Tables[12].Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                if (ddlDealTransfer.SelectedValue == "1")
                {
                    txtFinanceAmount.Text = (dcmAssetFinAmount2 == 0) ? "" : dcmAssetFinAmount2.ToString(Funsetsuffix());
                    txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(txtFinanceAmount.Text);
                }
                txtDealerComissionAmount.Text = Convert.ToDecimal(dsApplicationProcessDetails.Tables[12].Compute("sum(Dealer_Commission_Amount_1)", "Dealer_Commission_Amount_1 is not null").ToString()).ToString(Funsetsuffix());
                txtDealerComissionAmount.funPubChangeCurrencyFormat();

                funPriSetGuarantorAmount();

                decimal decUNITVALUE1 = (decimal)(dsApplicationProcessDetails.Tables[12].Compute("Sum(UNIT_VALUE_1)", "Noof_Units > 0"));
                txtTotalAssetCost.Text = decUNITVALUE1.ToString(Funsetsuffix());
                txtTotalAssetCost.funPubChangeCurrencyFormat();

                decimal deTotalFin = (decimal)(dsApplicationProcessDetails.Tables[12].Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                txtTotalFinanceAmount.Text = deTotalFin.ToString(Funsetsuffix());
                txtTotalFinanceAmount.funPubChangeCurrencyFormat();

                if (ViewState["StartDelayRate"] != null)
                {
                    txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                    txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat(((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix()));
                }

                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
                decimal dcmAssetTradeIn = (decimal)(dsApplicationProcessDetails.Tables[12].Compute("Sum(Trade_In_1)", "Noof_Units > 0"));
                txtdiscount.Text = (dcmAssetTradeIn == 0) ? "" : dcmAssetTradeIn.ToString(Funsetsuffix());
                txtdiscount.funPubChangeCurrencyFormat();
                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
                Session["PricingAssetDetails"] = dsApplicationProcessDetails.Tables[12];
            }
            if (dsApplicationProcessDetails.Tables[14].Rows.Count > 0)
            {
                ViewState["mode"] = strEditMode;
            }
            else
            {
                ViewState["mode"] = strAddMode;
            }
            ViewState["dtMoratorium"] = dsApplicationProcessDetails.Tables[14];
            FunPriFillMoratoriumDLL();
            ViewState["dtGuarantorGrid"] = dsApplicationProcessDetails.Tables[3];
            if (dsApplicationProcessDetails.Tables[3].Rows.Count > 0)
            {
                ViewState["mode"] = strEditMode;
            }
            else
            {
                ViewState["mode"] = strAddMode;
            }
            FunPriFillGuarantorDLL();
            ViewState["InvoiceDetails"] = dsApplicationProcessDetails.Tables[15];
            gvInvoiceDetails.DataSource = dsApplicationProcessDetails.Tables[15];
            gvInvoiceDetails.DataBind();
            if (dsApplicationProcessDetails.Tables[15].Rows.Count > 0)
            {
                pnlInvoiceDetails.Visible = true;
            }
            else
            {
                pnlInvoiceDetails.Visible = false;
            }
            //if (dsApplicationProcessDetails.Tables[16].Rows.Count > 0)
            //{
            //    pnlPreDisbursementDocumentDetails.Visible = true;
            //    gvPRDDT.DataSource = dsApplicationProcessDetails.Tables[16];
            //    gvPRDDT.DataBind();
            //}
            if (TabContainerAP.Tabs[6].Visible)
            {
                //txtROIMLA.Text = ddlROIRuleList.SelectedItem.Text;
                //if (ddlPaymentRuleList.SelectedItem.Text != "--Select--")
                //    txtPaymentCardMLA.Text = ddlPaymentRuleList.SelectedItem.Text;
                //ddlDoyouWant_MLA.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["MLA_Applicable"]);
                //txtMLANo.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["MLA_Number"]);
                //txtMLANo.Text = txtMLANo.Text == "0" ? "" : txtMLANo.Text;
                //if (dsApplicationProcessDetails.Tables[0].Rows[0]["MLA_Validity_From"] != null)
                //{
                //    if (dsApplicationProcessDetails.Tables[0].Rows[0]["MLA_Validity_From"].ToString() != "")
                //    {
                //        txtValidFrom_MLA.Text = DateTime.Parse(dsApplicationProcessDetails.Tables[0].Rows[0]["MLA_Validity_From"].ToString(), CultureInfo.CurrentCulture).ToString(strDateFormat);
                //    }
                //}
                //if (dsApplicationProcessDetails.Tables[0].Rows[0]["MLA_Validity_to"].ToString() != "")
                //    txtValidTo_MLA.Text = DateTime.Parse(dsApplicationProcessDetails.Tables[0].Rows[0]["MLA_Validity_to"].ToString(), CultureInfo.CurrentCulture).ToString(strDateFormat);
                //else
                //    txtValidTo_MLA.Text = "";

                //txtMLAFinanceAmount.Text = txtFinanceAmount.Text;
                //rfvtxtPassword.Enabled = false;
            }
            if (ddlBusinessOfferNoList.SelectedValue != "-1")
                ddlPaymentRuleList.ClearDropDownList();
            if (dsApplicationProcessDetails.Tables[17].Rows.Count > 0)
            {
                //gvMLADetails.DataSource = dsApplicationProcessDetails.Tables[17];
                //gvMLADetails.DataBind();
            }

            ViewState["RepaymentStructure"] = dsApplicationProcessDetails.Tables[21];
            if (dsApplicationProcessDetails.Tables[4].Rows.Count > 0)
            {
                FunPriShowRepaymetDetails((decimal)dsApplicationProcessDetails.Tables[4].Compute("SUM(TotalPeriodInstall)", "CashFlow_Flag_ID =23"));
            }
            //<<Performance>>
            //objProcedureParameter = new Dictionary<string, string>();
            //objProcedureParameter.Add("@ApplicationProcessId", intApplicationProcessId.ToString());
            //DataSet dsRepaymentStructure = Utility.GetDataset("s3g_org_loadRepayStructure", objProcedureParameter);
            if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Return_Pattern.SelectedValue == "6"))
            {
                ViewState["DtRepayGrid_TL"] = dsApplicationProcessDetails.Tables[4];
            }


            DataTable dtRepay = (DataTable)ViewState["RepaymentStructure"];
            if (dtRepay.Rows.Count > 0)
            {
                txtFirstInstallmentDueDate.Text = dtRepay.Rows[0]["Installment_Date"].ToString();
                txtLastInstallmentDueDate.Text = dtRepay.Rows[dtRepay.Rows.Count - 1]["Installment_Date"].ToString();

                grvRepayStructure.DataSource = dsApplicationProcessDetails.Tables[21];
                grvRepayStructure.DataBind();

                txtNumberofInstallments.Text = grvRepayStructure.Rows.Count.ToString();
            }

            //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 start
            if (dsApplicationProcessDetails.Tables[23].Rows.Count > 0)
                ViewState["dtRepayDetailsOthers"] = dsApplicationProcessDetails.Tables[23];
            //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 end

            FunPriSetRateLength();

            if (dsApplicationProcessDetails.Tables[27].Rows.Count > 0)
            {
                ddlDealTransfer.SelectedValue = "1";
                ddlDealTransfer_SelectedIndexChanged(null, null);
                grvTransferDeal.DataSource = dsApplicationProcessDetails.Tables[27];
                grvTransferDeal.DataBind();
                grvTransferDeal.FooterRow.Visible = false;

                ViewState["DealTransfer"] = dsApplicationProcessDetails.Tables[27];
            }

            if (dsApplicationProcessDetails.Tables[28].Rows.Count > 0)
            {

                grvLienAccount.DataSource = dsApplicationProcessDetails.Tables[28];
                grvLienAccount.EmptyDataText = "No Records Found..";
                grvLienAccount.DataBind();


                ViewState["LienAccount"] = dsApplicationProcessDetails.Tables[28];
            }



            if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
            {
                rfvddlPaymentRuleList.Enabled = false;
            }
            else
            {
                rfvddlPaymentRuleList.Enabled = true;
            }
            if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("PL") && dsApplicationProcessDetails.Tables[22].Rows.Count > 0)
            {
                Session["PricingloanAssetDetails"] = dsApplicationProcessDetails.Tables[22];
                //grvloanasset.DataSource = dsApplicationProcessDetails.Tables[22];
                //grvloanasset.DataBind();
            }

            //Risk Rating Tab
            ddlRiskRating.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["risk_rating"].ToString();
            txtRiskRemarks.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["risk_remarks"].ToString();
            txtRiskScore.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["risk_score"].ToString();
            txtRiskDocumentNo.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["risk_doc_no"].ToString();
            ddlRiskQualityValue.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["risk_quality_value"].ToString();
            txtAMLClasification.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["AMLClasification"].ToString();

            ddlPNTD.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["IS_PNTD"].ToString();
            txtGeneralRemarks.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["REMARKS"].ToString();

            //if (dsApplicationProcessDetails.Tables[0].Rows[0]["PDC_STARTDATE"].ToString() != string.Empty)
            //{
            //    txtPdcStartDate.Text = Utility.StringToDate(dsApplicationProcessDetails.Tables[0].Rows[0]["PDC_STARTDATE"].ToString()).ToString(strDateFormat);
            //    txtPDCEndDate.Text = Utility.StringToDate(txtPdcStartDate.Text).AddMonths(Convert.ToInt32(txtTenure.Text)).ToString(strDateFormat);
            //}

            ddlLOB_SelectedIndexChangedModifyEnableDisableControls();

            if (dsApplicationProcessDetails.Tables[29].Rows.Count > 0)
            {
                gvPRDDT.DataSource = dsApplicationProcessDetails.Tables[29];
                gvPRDDT.DataBind();
                pnlPreDisbursementDocumentDetails.Visible = true;
            }
            if (dsApplicationProcessDetails.Tables[30].Rows.Count > 0)
            {
                ViewState["PromoterGrid"] = dsApplicationProcessDetails.Tables[30];
                grvPropomoter.DataSource = dsApplicationProcessDetails.Tables[30];
                grvPropomoter.EmptyDataText = "No Records Found";
                grvPropomoter.DataBind();

            }
            else
            {
                grvPropomoter.DataSource = null;
                grvPropomoter.EmptyDataText = "No Records Found";
                grvPropomoter.DataBind();
            }
            ddlDealerName_Item_Selected(null, null);


            if (ddl_Repayment_Mode.SelectedValue == "2")//SAP
            {
                btnReset.Visible = true;
            }
            else
            {
                btnReset.Visible = false;
            }

            funPriLoadAppriasalInfo("", ViewState["ConsitutionId"].ToString(), ddlProductCodeList.SelectedValue, ddlLOB.SelectedValue);

            AdditionalInforFetch(intApplicationProcessId);


            if (dsApplicationProcessDetails.Tables[31].Rows.Count > 0)
            {
                ViewState["PDC"] = dsApplicationProcessDetails.Tables[31];
            }
            if (ddlDealTransfer.SelectedValue == "1")
            {
                txtFinanceAmount.Enabled = true;
            }
            txtPdcStartDate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["FIRST_INSTALMENT_DATE"].ToString();
            txtPdcStartDate_TextChanged(null, null);

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void FunPriToggleModeControls()
    {
        try
        {
            //ddlDoyouWant_MLA.ClearDropDownList();
            ddlLOB.ClearDropDownList();
            //ddlBranchList.ClearDropDownList();
            ddlBranchList.Enabled = false;

            if (ddlBusinessOfferNoList.Items.Count > 0)
                ddlBusinessOfferNoList.ClearDropDownList();
            if (ddlProductCodeList.Items.Count > 0)
                ddlProductCodeList.ClearDropDownList();


            //Enabled this controls when Starting point is application processing - as per Bug id 6194
            if (ddlBusinessOfferNoList.SelectedValue != "-1" && ddlBusinessOfferNoList.SelectedValue != string.Empty)
            {
                //ddlSalePersonCodeList.ClearDropDownList();
                ddlTenureType.ClearDropDownList();
                ChkRefinanceContract.Enabled = false;
                txtResidualValue.Attributes.Add("readonly", "true");

                if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL"))
                {
                    txtMarginAmount.Attributes.Add("readonly", "true");
                }
                txtTenure.ReadOnly = txtFinanceAmount.ReadOnly = true;
                //btnAddAsset.Visible = false;
                //btnAddAsset.Enabled = false;
            }
            txtResidualAmt_Cashflow.ReadOnly = txtResidualValue_Cashflow.ReadOnly =
            txtMarginMoneyAmount_Cashflow.ReadOnly = txtMarginMoneyPer_Cashflow.ReadOnly =
            txtCustomerCode.ReadOnly = true;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriInitializePage()
    {
        try
        {
            if (Request.QueryString["Popup"] != null)
            {
                this.Page.MasterPageFile = "~/Common/MasterPage.master";
                UserInfo ObjUserInfo = new UserInfo();
                this.Page.Theme = ObjUserInfo.ProUserThemeRW;
            }
            else
            {
                this.Page.MasterPageFile = "~/Common/S3GMasterPageCollapse.master";
                UserInfo ObjUserInfo = new UserInfo();
                this.Page.Theme = ObjUserInfo.ProUserThemeRW;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private bool FunPriValidatePage()
    {
        bool blnIsValid = true;
        try
        {
            string strLOBType = ddlLOB_SelectedItem_Text.Value.ToLower().Split('-')[0].Trim();

            #region Asset



            //commented by saranya
            // if (strLOBType != "te" && strLOBType != "tl" && strLOBType != "wc" && strLOBType != "ft")
            if (strLOBType != "wc" && strLOBType != "ft")
            {
                if (Session["PricingAssetDetails"] != null)
                {
                    decimal dcmFinanceAmount = Convert.ToDecimal(txtFinanceAmount.Text);
                    decimal dcmMarginAmount = 0;
                    if (!string.IsNullOrEmpty(txtMarginMoneyPer_Cashflow.Text))
                    {
                        dcmMarginAmount = FunPriGetMarginAmout();
                    }
                    if (((DataTable)Session["PricingAssetDetails"]).Rows.Count > 0)
                    {
                        DataRow[] drFilter = ((DataTable)Session["PricingAssetDetails"]).Select("Finance_Amount_1 = 0");
                        if (drFilter.Length > 0)
                        {
                            //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + " Enter the Finance Amount in AssetDetails";
                            //cvApplicationProcessing.IsValid = false;

                            //Utility.FunShowAlertMsg(this, " Enter the Finance Amount in AssetDetails");
                            Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege25));
                            blnIsValid = false;
                        }
                        else
                        {
                            decimal dcmAssetFinanceAmount = Convert.ToDecimal(((DataTable)Session["PricingAssetDetails"]).Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                            decimal dcmAssetMarginAmount = Convert.ToDecimal(((DataTable)Session["PricingAssetDetails"]).Compute("Sum(Margin_Amount_1)", "Noof_Units > 0"));

                            if (ddlDealTransfer.SelectedValue != "1")
                            {
                                if (dcmFinanceAmount != dcmAssetFinanceAmount)
                                {
                                    //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + " The sum of Finance Amount in Asset Details should be equal to Finance Amount";
                                    //cvApplicationProcessing.IsValid = false;

                                    //Utility.FunShowAlertMsg(this, " The sum of Finance Amount in Asset Details should be equal to Finance Amount");
                                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege26));
                                    blnIsValid = false;


                                }
                                else if (dcmMarginAmount > dcmAssetMarginAmount)
                                {
                                    //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + " The sum of Margin Amount in Asset Details should be greater than or equal to Margin Amount in ROI Rules";
                                    //cvApplicationProcessing.IsValid = false;



                                    //Utility.FunShowAlertMsg(this, "The sum of Margin Amount in Asset Details should be greater than or equal to Margin Amount in ROI Rules");
                                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege27));
                                    blnIsValid = false;
                                }
                            }
                        }

                        //checking cashflow for Discount Absorbed.
                        //DataRow[] drDis_Absorbed = ((DataTable)Session["PricingAssetDetails"]).Select("Discount_Absorbed = 1");
                        //if (drDis_Absorbed.Length > 0)
                        //{
                        //    DataTable dtCashInflow = new DataTable();
                        //    if (ViewState["DtCashFlow"] != null)
                        //    {
                        //        dtCashInflow = (DataTable)ViewState["DtCashFlow"];
                        //    }

                        //    if (dtCashInflow.Rows.Count > 0)
                        //    {
                        //        DataRow[] drCashInflow = dtCashInflow.Select("CashFlow_Flag_ID = 94");//Discount Flag

                        //        if (drCashInflow.Length == 0)
                        //        {
                        //            //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Discount cashflow should be added in Cash Inflow details";
                        //            //cvApplicationProcessing.IsValid = false;
                        //            //Utility.FunShowAlertMsg(this, " Discount cashflow should be added in Cash Inflow details");
                        //            Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege28));
                        //            blnIsValid = false;
                        //        }
                        //    }

                        //}

                    }

                }


            }

            if (strLOBType == "tl")
            {
                decimal dcmMarginAmount = 0;
                dcmMarginAmount = FunPriGetMarginAmout();
                if (txtMarginAmount.Text != string.Empty)
                {
                    if (dcmMarginAmount > Convert.ToDecimal(txtMarginAmount.Text))
                    {
                        Utility.FunShowAlertMsg(this, "Down Payment Amount should be greater than or equal to Margin Amount in ROI Rules for (" + ddlLOB.SelectedItem.Text + ")");
                        blnIsValid = false;
                    }
                }
            }




            #endregion

            //if (rfvtxtPassword.Enabled == true)
            //{
            //    S3GAdminServicesReference.S3GAdminServicesClient ObjS3GAdminServices = new S3GAdminServicesReference.S3GAdminServicesClient();
            //    if (ObjS3GAdminServices.FunPubPasswordValidation(ObjUserInfo.ProUserIdRW, txtPassword.Text.Trim()) > 0)
            //    {
            //        cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + " Invalid Password. ";
            //        cvApplicationProcessing.IsValid = false;
            //        blnIsValid = false;
            //    }
            //}

        }
        catch (Exception ex)
        {
            throw ex;
        }
        return blnIsValid;
    }


    private void FunPriCancelApplication()
    {
        ApplicationMgtServicesReference.ApplicationMgtServicesClient ObjAProcessSave = new ApplicationMgtServicesReference.ApplicationMgtServicesClient();
        S3GBusEntity.ApplicationProcess.ApplicationProcess objApplicationProcess = new S3GBusEntity.ApplicationProcess.ApplicationProcess();
        try
        {
            objApplicationProcess.Application_Process_ID = intApplicationProcessId;
            int intResult = ObjAProcessSave.FunPubUpdateApplicationStatus(objApplicationProcess);
            if (intResult == 0)
            {
                strAlert = strAlert.Replace("__ALERT__", "Application cancelled successfully");
            }
            else
            {

                strAlert = strAlert.Replace("__ALERT__", "Due to Data Problem,Unable to Cancel an Application");
            }
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strAlert + strRedirectPageView, true);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {
            ObjAProcessSave.Close();
        }
    }

    private void FunPriClearPage()
    {
        try
        {
            ViewState["ddlLobValue"] = ddlLOB.SelectedValue;
            FunPriClearForms();
            FunPriFillMainPageDLL();
            //FunPriLoadLObandBranch(intUserId, intCompanyId);
            //ddlBranchList.Items.Clear();
            ddlBranchList.ClearSelection();
            ddlProductCodeList.Items.Clear();
            FunPriLoadOfferNo();
            //S3GCustomerAddress1.SetCustomerDetails("", "", "", "", "", "", "");
            txtCustomerCode.Text =
            txtConstitution.Text = string.Empty;
            TextBox txtCode = ucCustomerCodeLov.FindControl("txtName") as TextBox;
            txtCode.Text = "";
            Button btnGetLov = ucCustomerCodeLov.FindControl("btnGetLov") as Button;
            btnGetLov.Visible = true;
            Session.Remove("PricingAssetDetails");
            Session.Remove("AssetCustomer");
            Session.Remove("AssetCustomerValiMessege");
            ddlSalePersonCodeList.Clear();
            TabContainerAP.ActiveTabIndex = 0;
            FunPriSetInitialSettings();
            btnCreateCustomer.Visible = true;
            btnAddAsset.Visible = true;
            txtTenure.ReadOnly = false;
            //pnlIRRDetails.Visible = true;
            FunPriAssignAssetLink();
            HiddenField Hdval = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            Hdval.Value = "";
            txtCreditLimit.Text = string.Empty;



            //HP Clear Start
            txtProposalNumber.Text = string.Empty;
            hdnConstitutionId.Value = string.Empty;
            ddlPaymentRuleList.ClearSelection();
            txtMarginMoneyPer_Cashflow.Text = string.Empty;
            txtMarginMoneyAmount_Cashflow.Text = string.Empty;
            txtResidualValue_Cashflow.Text = string.Empty;
            txtResidualAmt_Cashflow.Text = string.Empty;
            ddlApplicationNo.Clear();//Proposal No-From Checklist
            ddlBranchList.ClearSelection();
            cmbSubLocation.ClearSelection();
            ddlCreditPurpose.ClearSelection();
            ddlProductCodeList.ClearSelection();
            txtApplicationDateDate.Text = string.Empty;
            ddlContType.ClearSelection();
            ddlSalePersonCodeList.Clear();
            hdnCustID.Value = "";
            txtCreditLimit.Text = string.Empty;
            ddlDealTransfer.ClearSelection();
            ddlDealType.ClearSelection();
            ddlDealerName.Clear();
            ddldc.Clear();
            ddlLeadSource.ClearSelection();
            txtLeadOtherSource.Text = string.Empty;

            ddlLeadSourceName.Clear();


            ddlBusinessSource.ClearSelection();

            ddlDealerschemename.ClearSelection();

            txtSellerCode.Text = string.Empty;

            txtSellerName.Text = string.Empty;

            ddlDealerCommissionApplicable.ClearSelection();
            ucCustomerLovFWC.ShowHideAddressImageButton = false;

            txtFinanceAmount.Text = string.Empty;
            txtTenure.Text = string.Empty;
            ddlTenureType.ClearSelection();
            ChkRefinanceContract.Checked = false;

            txtMarginAmount.Text = string.Empty;

            txtResidualValue.Text = string.Empty;
            ddlArearAdvance.ClearSelection();
            txtdiscount.Text = string.Empty;

            txtFirstInstallDate.Text = string.Empty;
            txtIncomeBookStartDate.Text = string.Empty;
            txtTentativeAccDate.Text = string.Empty;
            //ddlRepamentMode.ClearSelection();

            ddlPNTD.ClearSelection();



            txtBusinessIRR_Repay.Text = string.Empty;

            txtAccountIRR_Repay.Text = string.Empty;

            txtCompanyIRR_Repay.Text = string.Empty;

            ddlExistenceofFirstCharge.ClearSelection();

            ddlExistenceofsecondcharge.ClearSelection();

            txtNoofDaystobeconsidered.Text = string.Empty;

            ddlStartDelayChargesApplicable.ClearSelection();

            txtDelayDays.Text = string.Empty;

            txtStartDatedelayrate.Text = string.Empty;

            ddlStartDelayChargesApplicable.ClearSelection();

            txtOverDueCharges.Text = string.Empty;

            ddlLifeInsurance.ClearSelection();

            ddlLifeInsuranceEntity.Clear();

            txtLifeInsuranceCustRate.Text = string.Empty;

            txtLifeInsuranceCompanyRate.Text = string.Empty;

            txtLifeInsuranceCompanyAmount.Text = string.Empty;

            txtLifeInsuranceCustomerPremiumAmount.Text = string.Empty;

            txtInsuranceTaxRate.Text = string.Empty;
            txtInsuranceCompanyTaxAmount.Text = string.Empty;
            txtInsuranceCustomerTaxAmount.Text = string.Empty;
            txtLifeInsuranceCustomerPremiumAmountWT.Text = string.Empty;
            txtLifeInsuranceCompanyAmountWT.Text = string.Empty;

            ddlRiskRating.ClearSelection();
            txtRiskRemarks.Text = string.Empty;

            txtRiskScore.Text = string.Empty;

            txtRiskDocumentNo.Text = string.Empty;

            ddlRiskQualityValue.ClearSelection();

            //HP Clear End

            //FT Clear Start

            ddlLOB_SelectedItem_Text.Value = "";
            ddlLOB.ClearSelection();
            txtProposalNumber.Text = string.Empty;
            hdnCustID.Value = "";
            ddlBranchListFWC.ClearSelection();
            cmbSubLocation.ClearSelection();
            txtApplicationDateFWC.Text = string.Empty;
            ddlProductCodeListFWC.ClearSelection();
            txtFacilityStartDate.Text = string.Empty;
            txtFacilityEndDate.Text = string.Empty;
            txtAuditor.Text = string.Empty;
            txtEvaluator.Text = string.Empty;
            ddlRelationshipManager.Clear();
            //ddlStatus.ClearSelection();
            hdnConstitutionId.Value = "";
            txtDebtPurchaseLimitFWC.Text = string.Empty;
            txtMarginFWC.Text = string.Empty;
            txtPrePaymentLimitFWC.Text = string.Empty;
            txtInvoiceCapValue.Text = string.Empty;
            txtDiscountRateforLineofCredit.Text = string.Empty;
            txtPenalRate.Text = string.Empty;
            txtCreditPeriodInDays.Text = string.Empty;
            txtGracePeriodInDays.Text = string.Empty;
            txtDisbuteGracePeriodInDays.Text = string.Empty;
            txtRemarksFWC.Text = string.Empty;
            ddlArearAdvance.ClearSelection();
            txtTenureFWC.Text = string.Empty;
            ddlRiskRating.ClearSelection();
            txtRiskRemarks.Text = string.Empty;
            txtRiskScore.Text = string.Empty;
            txtRiskDocumentNo.Text = string.Empty;
            ddlRiskQualityValue.ClearSelection();
            ucCustomerLovFWC.Clear();
            funPriClearCustomerHoverInfo();
            funPriClearCustomerHoverInfoFWC();

            txtCreditLimitFWC.Text = string.Empty;
            //FT Clear End
            ddlLOB.SelectedValue = Convert.ToString(ViewState["ddlLobValue"]);
            funPriLoadProduct();
            funPriLoadProductFWC();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    private void FunPriClosePage()
    {
        try
        {
            if (Request.QueryString["Popup"] != null)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "window.close();", true);
            }
            else
            {
                Response.Redirect(strRedirectPage, false);
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriResetIRRDetails()
    {
        try
        {
            FunPriFillRepaymentDLL(strAddMode);
            txtBusinessIRR.Text = txtCompanyIRR.Text = txtAccountingIRR.Text =
            txtBusinessIRR_Repay.Text = txtAccountIRR_Repay.Text = txtCompanyIRR_Repay.Text = string.Empty;
            gvRepaymentSummary.DataSource = null;
            gvRepaymentSummary.DataBind();
            ViewState["RepaymentStructure"] = null;
            grvRepayStructure.DataSource = null;
            grvRepayStructure.DataBind();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex);
            throw ex;
        }
    }

    //<<Performance>>
    [System.Web.Services.WebMethod]
    public static string[] GetBranchList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.intCompanyId.ToString());
        Procparam.Add("@Type", "GEN");
        Procparam.Add("@User_ID", obj_Page.intUserId.ToString());
        Procparam.Add("@Program_Id", "38");
        Procparam.Add("@Lob_Id", obj_Page.ddlLOB.SelectedValue);
        Procparam.Add("@Is_Active", "1");
        Procparam.Add("@PrefixText", prefixText);
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_Get_Userlist_AGT", Procparam));

        return suggetions.ToArray();
    }


    // Added By Shibu 17-Sep-2013 Sales Personal List (Auto Suggestion)
    [System.Web.Services.WebMethod]
    public static string[] GetSalePersonList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggestions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.intCompanyId.ToString());
        Procparam.Add("@Prefix", prefixText);
        Procparam.Add("@DESIGNATION_ID", "8");//MO
        Procparam.Add("@Dealer_Id", obj_Page.ddlDealerName.SelectedValue);//MO

        //Procparam.Add("@User_Id", obj_Page.intUserId.ToString());
        suggestions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_Get_Userlist_AGT", Procparam));

        return suggestions.ToArray();
    }
    [System.Web.Services.WebMethod]
    public static string[] GetSaleAlertUser(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggestions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.intCompanyId.ToString());
        Procparam.Add("@Prefix", prefixText);
        //Procparam.Add("@DESIGNATION_ID", "8");//MO

        //Procparam.Add("@User_Id", obj_Page.intUserId.ToString());
        suggestions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_GET_USERLIST_AGT_ALERT", Procparam));

        return suggestions.ToArray();
    }
    // Added By Shibu 17-Sep-2013 Sales Personal List (Auto Suggestion)
    [System.Web.Services.WebMethod]
    public static string[] GetRelationShipManager(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggestions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@Company_ID", obj_Page.intCompanyId.ToString());
        Procparam.Add("@Prefix", prefixText);
        Procparam.Add("@DESIGNATION_ID", "8");//MO

        //Procparam.Add("@User_Id", obj_Page.intUserId.ToString());
        suggestions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_Get_Userlist_AGT", Procparam));

        return suggestions.ToArray();
    }
    //[System.Web.Services.WebMethod]
    //public static string[] GetProposalFromCheckList(String prefixText, int count)
    //{
    //    Dictionary<string, string> Procparam;
    //    Procparam = new Dictionary<string, string>();
    //    List<String> suggestions = new List<String>();
    //    DataTable dtCommon = new DataTable();
    //    DataSet Ds = new DataSet();

    //    Procparam.Clear();
    //    if (System.Web.HttpContext.Current.Session["Company_Id"] != null)
    //        Procparam.Add("@COMPANYID", System.Web.HttpContext.Current.Session["Company_Id"].ToString());
    //    if (System.Web.HttpContext.Current.Session["User_Id"] != null)
    //        Procparam.Add("@USERID", System.Web.HttpContext.Current.Session["User_Id"].ToString());
    //    Procparam.Add("@PROGRAMID", "38");
    //    Procparam.Add("@OPTION", "1");
    //    Procparam.Add("@Prefix", prefixText);
    //    suggestions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", Procparam));

    //    return suggestions.ToArray();
    //}


    private void FunPriToggleLOBBased()
    {
        try
        {
            ddlSalePersonCodeList.Clear();
            if (ddlLOB.SelectedIndex > 0)
            {
                div7.Visible = false;
                //div8.Visible = false;

                Dictionary<string, string> Procparam = new Dictionary<string, string>();
                //Procparam.Add("@Is_Active", "1");
                //Procparam.Add("@User_Id", intUserId.ToString());
                //Procparam.Add("@Company_ID", intCompanyId.ToString());
                //Procparam.Add("@Lob_ID", ddlLOB.SelectedValue);
                //Procparam.Add("@Program_Id", "38");
                //ddlBranchList.BindDataTable(SPNames.BranchMaster_LIST, Procparam, new string[] { "Location_ID", "Location" });
                ddlBranchList.ClearSelection();

                #region Add Asset
                FunPriAssignAssetLink();
                #endregion
                FunPriMLASLAApplicable(Convert.ToInt32(ddlLOB.SelectedValue));
                FunPriLOBBasedvalidations(ddlLOB_SelectedItem_Text.Value, ddlLOB.SelectedItem.Value, strAddMode, "");
                txtLOB_Followup.Text = ddlLOB.SelectedItem.Text;
                FunPriFillInflowDLL(strAddMode);
                FunPriFillOutflowDLL(strAddMode);
                FunRepayClear("");
                //FunPriFillRepaymentDLL(strAddMode);


                //commented by saranya
                //if (ddlLOB.SelectedItem.Text.ToUpper().Contains("TERM") || ddlLOB.SelectedItem.Text.ToUpper().Contains("FACT") || ddlLOB.SelectedItem.Text.ToUpper().Contains("WORKING"))
                if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT") || ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC"))
                {
                    TabContainerMainTab.Tabs[1].Visible = false;
                }
                else
                {
                    TabContainerMainTab.Tabs[1].Visible = true;
                }
                if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
                {
                    rfvddlPaymentRuleList.Enabled = false;

                }
                else
                {
                    rfvddlPaymentRuleList.Enabled = true;

                }
                //Added by Arunkumar K on 10-Aug-2016 for Repayment tab disable for call reference 4647
                if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC") ||
                ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT") ||
                ((ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TE") ||
                ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL")) &&
                ddl_Repayment_Mode.SelectedItem.Text.ToUpper().StartsWith("PRO")))
                {
                    TabContainerAP.Tabs[2].Enabled = false;
                }
                else
                    TabContainerAP.Tabs[2].Enabled = true;
                //Added by Arunkumar K on 10-Aug-2016 for Repayment tab disable for call reference 4647

            }
            else
            {
                ddlProductCodeList.Items.Clear();
                ddlConstitutionCodeList.Items.Clear();
                ddlROIRuleList.Items.Clear();
                ddlPaymentRuleList.Items.Clear();
                grvConsDocuments.Visible = false;
                FunPriFillMainPageDLL();
            }
            if (gvAssetDetails.Rows.Count > 0)
            {
                gvAssetDetails.DataSource = null;
                gvAssetDetails.DataBind();
                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();







                txtMarginAmount.Text = "";

                txtFinanceAmount.Text = "";

                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();

                txtdiscount.Text = "";

                Session.Remove("PricingAssetDetails");
                TextBox txtName = (TextBox)ucCustomerCodeLov.FindControl("txtName");

                if (Session["AssetCustomer"] != null && !string.IsNullOrEmpty(txtName.Text))
                {
                    Session["AssetCustomer"] = hdnCustID.Value + ";" + txtName.Text;
                }
                else
                {
                    Session.Remove("AssetCustomer");
                    Session.Remove("AssetCustomerValiMessege");

                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriAssignAssetLink()
    {
        try
        {

            string strNewPurchase = "";
            if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("OPERAT"))
            {
                strNewPurchase = "Yes";
            }
            else
            {
                strNewPurchase = "No";
            }
            //if ((ddlLOB.SelectedIndex > 0 || intApplicationProcessId > 0) && txtCustomerCode.Text != "")
            //{
            if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("PL"))
            {
                btnAddAsset.Attributes.Add("onclick", strNewWin1 + "?qsMaster=" + strNewPurchase + NewWinAttributes);
            }
            else
            {
                btnAddAsset.Attributes.Add("onclick", strNewWin + "?qsMaster=" + strNewPurchase + NewWinAttributes);
                //this.Focus();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        //}
    }

    private void FunPriToggleOfferNoBased()
    {
        try
        {
            Session.Remove("PricingAssetDetails");
            Session.Remove("AssetCustomer");
            //pnlIRRDetails.Visible = true;
            ddlSalePersonCodeList.Clear();
            if (ddlBusinessOfferNoList.SelectedIndex == 0)
            {
                TextBox txtName = ucCustomerCodeLov.FindControl("txtName") as TextBox;
                txtName.Text = "";
                FunPriClearForms();
                txtCustomerCode.Text = txtConstitution.Text = string.Empty;
                //S3GCustomerAddress1.SetCustomerDetails("", "", "", "", "", "", "");
                txtApplicationDateDate.Text = DateTime.Now.Date.ToString(strDateFormat);
                FunPriLoadLObandBranch(intUserId, intCompanyId);
                FunPriLoadTenureType();
                ddlProductCodeList.Items.Clear();
                TabContainerMainTab.Tabs[1].Visible = true;
                TabContainerAP.Tabs[6].Visible = true;
                txtCustomerCode.ReadOnly = false;
                btnCreateCustomer.Visible = true;
                btnAddAsset.Visible = true;
                //txtOfferDate.Text = "";
                txtTenure.ReadOnly = false;
                ddlSalePersonCodeList.Clear();
                Session.Remove("PricingAssetDetails");
                Session.Remove("AssetCustomer");
                Button btnGetLov = ucCustomerCodeLov.FindControl("btnGetLov") as Button;
                btnGetLov.Visible = true;
            }
            else
            {
                FunPubGetPricingDetails(Convert.ToInt32(ddlBusinessOfferNoList.SelectedValue));
                FunPriSetRateLength();
                btnAddAsset.Visible = false;
                Button btnGetLov = ucCustomerCodeLov.FindControl("btnGetLov") as Button;
                btnGetLov.Visible = false;
                gvAssetDetails.Columns[7].Visible = false;
                txtCustomerCode.ReadOnly = true;
                btnCreateCustomer.Visible = false;
            }
            FunPriSetMaxLength();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriToggleProductBased()
    {
        try
        {
            FunPriClearGrid(gvPaymentRuleDetails);
            hdnPayment.Value = "";
            hdnROIRule.Value = "";
            ddlROIRuleList.ClearSelection();
            div7.Visible = false;

            if (ddlProductCodeList.SelectedIndex > 0)
            {
                FunPriBindPaymentDDL(ddlProductCodeList.SelectedValue);
                //FunPriBindProductCharges(ddlProductCodeList.SelectedValue, ddlLOB.SelectedValue);
            }
            else
            {
                ddlPaymentRuleList.Items.Clear();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    #endregion

    #region Protected Methods

    /// <summary>
    /// Get IRR Details From Global Paramater Setup
    /// </summary>
    protected void FunProGetIRRDetails()
    {
        try
        {
            DataTable dtIRRDetails = Utility.FunPubGetGlobalIRRDetails(intCompanyId, null);
            ViewState["IRRDetails"] = dtIRRDetails;
            if (dtIRRDetails.Rows.Count > 0)
            {
                //Added by Thangam on 19-Jun-2012 to solve modify mode round off issue
                ViewState["hdnRoundOff"] = dtIRRDetails.Rows[0]["Roundoff"].ToString();
                S3GBusEntity.CommonS3GBusLogic.GPSRoundOff = Convert.ToInt32(ViewState["hdnRoundOff"].ToString());

                if (dtIRRDetails.Rows[0]["IsIRRApplicable"].ToString() == "True")
                {
                    txtAccountingIRR.Visible = true;
                    lblAccountingIRR.Visible = true;
                    txtCompanyIRR.Visible = true;
                    lblCompanyIRR.Visible = true;

                    txtCompanyIRR_Repay.Visible = true;
                    lblCompanyIRR_Repay.Visible = true;
                    rfvCompanyIRR.Enabled = true;
                    txtAccountIRR_Repay.Visible = true;
                    lblAccountIRR_Repay.Visible = true;
                    rfvAccountingIRR.Enabled = true;
                }
                else
                {
                    txtAccountingIRR.Visible = false;
                    lblAccountingIRR.Visible = false;
                    txtCompanyIRR.Visible = false;
                    lblCompanyIRR.Visible = false;

                    txtCompanyIRR_Repay.Visible = false;
                    lblCompanyIRR_Repay.Visible = false;
                    rfvCompanyIRR.Enabled = false;
                    txtAccountIRR_Repay.Visible = false;
                    lblAccountIRR_Repay.Visible = false;
                    rfvAccountingIRR.Enabled = false;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void FunProBindAssetGrid()
    {
        DataTable ObjDTAssetDetail = new DataTable();
        try
        {
            if (ViewState["ObjDTAssetDetails"] != null)
                ObjDTAssetDetail = (DataTable)ViewState["ObjDTAssetDetails"];
            decimal intAssetamount = 0;
            foreach (DataRow drrow in ObjDTAssetDetail.Rows)
            {
                string unitvalueAmount = drrow["Noof_Units"].ToString();
                if (unitvalueAmount != "&nbsp;")
                {
                    intAssetamount = intAssetamount + Convert.ToInt32(drrow["Noof_Units"]) * Convert.ToDecimal(drrow["Unit_Value"]);

                    //if (intAssetamount > Convert.ToDouble(lblTotalOutFlowAmount.Text))
                    //{
                    //    Utility.FunShowAlertMsg(this, "Total asset amount cannot be greater than total cash outflow amount");
                    //    //showmessage("Total asset amount can't be greater than total cash outflow amount");
                    //    intAssetamount = intAssetamount - Convert.ToInt32(drrow["Noof_Units"]) * Convert.ToDouble(drrow["Unit_Value"]); ;
                    //    ObjDTAssetDetail.Rows.RemoveAt(ObjDTAssetDetail.Rows.Count - 1);
                    //}
                    //lblTotalAssetAmount.Text = intAssetamount.ToString();

                }
            }

            gvAssetDetails.DataSource = ObjDTAssetDetail;
            gvAssetDetails.DataBind();
            txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
            gvAssetDetails.Visible = true;




        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void FunCalculateIRR(object sender, EventArgs e)
    {
        try
        {
            FunPriCalculateIRR();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    private void funPerSetFirstInstallmentDate(string strApplicationdate, string strTimeValue, string strFrequency)
    {
        DateTime dtStartDate = Utility.StringToDate(txtApplicationDateDate.Text);

        if (strTimeValue == "1")//Adavnce
        {

            txtFirstInstallDate.Text = dtStartDate.ToString(strDateFormat);
        }
        else if (strTimeValue == "2")//Arears
        {
            txtFirstInstallDate.Text = FunPubGetNextDate(strFrequency, dtStartDate, 1).ToString(strDateFormat);
        }
    }
    public DateTime FunPubGetNextDate(string strFrequency, DateTime dtFromDate, int intNoInstalment)
    {
        DateTime dtToDate;
        switch (strFrequency.ToLower())
        {
            //Weekly
            case "2":
                intNoInstalment = intNoInstalment * 7;
                dtToDate = dtFromDate.AddDays(intNoInstalment);
                break;
            //Fortnightly
            case "3":
                intNoInstalment = intNoInstalment * 15;
                dtToDate = dtFromDate.AddDays(intNoInstalment);
                break;
            //Monthly
            case "4":
                dtToDate = dtFromDate.AddMonths(intNoInstalment);
                break;
            //bi monthly
            case "5":
                intNoInstalment = intNoInstalment * 2;
                dtToDate = dtFromDate.AddMonths(intNoInstalment);
                break;
            //quarterly
            case "6":
                intNoInstalment = intNoInstalment * 3;
                dtToDate = dtFromDate.AddMonths(intNoInstalment);
                break;
            // half yearly
            case "7":
                intNoInstalment = intNoInstalment * 6;
                dtToDate = dtFromDate.AddMonths(intNoInstalment);
                break;
            //annually
            case "8":
                intNoInstalment = intNoInstalment * 12;
                dtToDate = dtFromDate.AddMonths(intNoInstalment);
                break;
            //daily
            case "0":
                dtToDate = dtFromDate.AddDays(intNoInstalment);
                break;
            //daily
            case "1":
                dtToDate = dtFromDate.AddDays(intNoInstalment);
                break;
            default:
                dtToDate = dtFromDate.AddMonths(intNoInstalment);
                break;
        }
        return dtToDate;
    }
    protected void FunPriGenerateRepaymentSchedule(ClsRepaymentStructure objRepaymentStructure, DateTime dtStartDate)
    {
        try
        {
            DataSet dsRepayGrid = new DataSet();
            DataTable dtRepayDetails = new DataTable();
            //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 start
            DataTable dtRepayDetailsOthers = new DataTable();
            //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 end
            DataTable dtMoratorium = null;
            Dictionary<string, string> objMethodParameters = new Dictionary<string, string>();
            objMethodParameters.Add("LOB", ddlLOB_SelectedItem_Text.Value);
            objMethodParameters.Add("Tenure", txtTenure.Text);
            objMethodParameters.Add("TenureType", ddlTenureType.SelectedItem.Text);

            if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
            {
                DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                decimal dcmTotalAssetValue = (decimal)(dsAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                objMethodParameters.Add("FinanceAmount", dcmTotalAssetValue.ToString());
            }
            else
            {
                DataRow[] drFinanAmtRow = ((DataTable)ViewState["DtCashFlowOut"]).Select("CashFlow_Flag_ID = 41");
                if (drFinanAmtRow.Length > 0)
                {
                    decimal decToatlFinanceAmt = (decimal)((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 41");

                    if (Convert.ToDecimal(txtFinanceAmount.Text) != decToatlFinanceAmt)
                    {
                        //Utility.FunShowAlertMsg(this, "Total amount financed in Cashoutflow should be equal to amount financed");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege29));
                        FunRepayClear("");
                        return;
                    }
                }
                objMethodParameters.Add("FinanceAmount", txtFinanceAmount.Text);
            }
            objMethodParameters.Add("ReturnPattern", ddl_Return_Pattern.SelectedValue);
            objMethodParameters.Add("MarginPercentage", txtMarginMoneyPer_Cashflow.Text);
            // objMethodParameters.Add("Rate", txtRate.Text);
            objMethodParameters.Add("Rate", hdnRate.Value);
            objMethodParameters.Add("TimeValue", ddl_Time_Value.SelectedValue);
            objMethodParameters.Add("RepaymentMode", ddl_Repayment_Mode.SelectedValue);
            objMethodParameters.Add("CompanyId", intCompanyId.ToString());
            objMethodParameters.Add("LobId", ddlLOB.SelectedValue);
            objMethodParameters.Add("DocumentDate", txtApplicationDateDate.Text);
            objMethodParameters.Add("Frequency", ddl_Frequency.SelectedValue);
            objMethodParameters.Add("RecoveryYear1", txt_Recovery_Pattern_Year1.Text);
            objMethodParameters.Add("RecoveryYear2", txt_Recovery_Pattern_Year2.Text);
            objMethodParameters.Add("RecoveryYear3", txt_Recovery_Pattern_Year3.Text);
            objMethodParameters.Add("RecoveryYear4", txt_Recovery_Pattern_Rest.Text);
            if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
            {
                objMethodParameters.Add("PrincipalMethod", "1");
            }
            else
            {
                objMethodParameters.Add("PrincipalMethod", "0");
            }
            if (ViewState["hdnRoundOff"] != null)
            {
                if (Convert.ToString(ViewState["hdnRoundOff"]) != "")
                    objMethodParameters.Add("Roundoff", ViewState["hdnRoundOff"].ToString());
                else
                    objMethodParameters.Add("Roundoff", "2");
            }
            else
            {
                objMethodParameters.Add("Roundoff", "2");
            }



            //funPerSetFirstInstallmentDate(txtPdcStartDate.Text, ddl_Time_Value.SelectedValue, ddl_Frequency.SelectedValue);

            if (!string.IsNullOrEmpty(txtFirstInstallDate.Text))
                objMethodParameters.Add("FirstInstalldate", txtFirstInstallDate.Text);
            else
                objMethodParameters.Add("FirstInstalldate", null);


            objMethodParameters.Add("InstallmentRoundPosition", ViewState["IntInstallmentRoundofPosition"].ToString());
            if (ddlLifeInsurance.SelectedValue == "2")
            {
                objMethodParameters.Add("decLipCustAmount", txtLifeInsuranceCustomerPremiumAmount.Text);
            }
            else
            {
                objMethodParameters.Add("decLipCustAmount", "0");
            }
            //objMethodParameters.Add("decLipCustAmount", "0");
            DataTable dtOutflow = new DataTable();
            if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
            {
                dtOutflow = ((DataTable)ViewState["DtCashFlowOut"]).Clone();
                DataSet dsOutlfow = (DataSet)ViewState["OutflowDDL"];
                DataRow drOutflow = dtOutflow.NewRow();
                drOutflow["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                drOutflow["CashOutFlow"] = "OL Lease Amount";
                drOutflow["EntityID"] = hdnCustID.Value;
                //drOutflow["Entity"] = S3GCustomerAddress1.CustomerName;
                drOutflow["OutflowFromId"] = "144";
                drOutflow["OutflowFrom"] = "Customer";
                DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                decimal dcmTotalAssetValue = (decimal)(dsAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                drOutflow["Amount"] = dcmTotalAssetValue;
                drOutflow["CashOutFlowID"] = "-1";
                drOutflow["Accounting_IRR"] = true;
                drOutflow["Business_IRR"] = true;
                drOutflow["Company_IRR"] = true;
                drOutflow["CashFlow_Flag_ID"] = "41";
                dtOutflow.Rows.Add(drOutflow);
            }

            //For TL
            ViewState["DtRepayGrid_TL"] = null;

            //Checking if other than normal payment , start date should be last payment date.
            if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
            {
                DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
                dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";
                string strAcctType = dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper();

                if (strAcctType == "PROJECT FINANCE" || strAcctType == "DEFERRED PAYMENT" || strAcctType == "DEFERRED STRUCTURED")
                {
                    DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
                    if (DtCashFlowOut.Rows.Count > 0)
                    {
                        DataRow drOutFlw = DtCashFlowOut.Select("CashFlow_Flag_ID=41").Last();
                        if (drOutFlw != null)
                        {

                            if (Convert.ToDateTime(drOutFlw["Date"]) > Utility.StringToDate(txtFirstInstallDate.Text))
                            {
                                Utility.FunShowAlertMsg(this, "First Installment Date should be greater than or equal to Last Outflow Date");
                                FunRepayClear("");
                                return;
                            }

                            objMethodParameters.Remove("DocumentDate");
                            objMethodParameters.Add("DocumentDate", drOutFlw["Date"].ToString());
                            dtStartDate = Utility.StringToDate(drOutFlw["Date"].ToString());

                            if (!string.IsNullOrEmpty(txtFBDate.Text))
                            {
                                //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation start
                                //DateTime dtDocDate = Utility.StringToDate(txtDate.Text);
                                DateTime dtDocDate = dtStartDate;
                                //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation end

                                DateTimeFormatInfo dtformat = new DateTimeFormatInfo();
                                dtformat.ShortDatePattern = "MM/dd/yy";
                                string strFBDate = "";
                                try
                                {
                                    //strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);
                                    if (dtDocDate.Day > Convert.ToInt32(txtFBDate.Text))
                                        strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).AddMonths(1).ToString(strDateFormat);
                                    else
                                        strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);

                                }
                                catch (Exception ex)
                                {
                                    DateTime lastDayOfCurrentMonth = new DateTime(dtDocDate.Year, dtDocDate.Month,
                                                                      DateTime.DaysInMonth(dtDocDate.Year, dtDocDate.Month));
                                    strFBDate = lastDayOfCurrentMonth.ToString(strDateFormat);
                                }
                                //string strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);
                                dtStartDate = Utility.StringToDate(strFBDate);
                            }

                        }
                    }

                }
            }



            if (ddl_Return_Pattern.SelectedValue == "2")
            {
                if (txtResidualAmt_Cashflow.Text.Trim() != "" && txtResidualAmt_Cashflow.Text.Trim() != "0")
                {
                    objMethodParameters.Add("decResidualAmount", txtResidualAmt_Cashflow.Text);
                }
                else if (txtResidualValue_Cashflow.Text.Trim() != "" && txtResidualValue_Cashflow.Text.Trim() != "0")
                {
                    /*Code commented and added for bug fixing - Kuppu - Jan-07-2012 - Error on Residual% = 0 - Bug_ID - 6099 */
                    //objMethodParameters.Add("decResidualValue", txtResidualValue_Cashflow.TemplateSourceDirectory);
                    objMethodParameters.Add("decResidualValue", txtResidualValue_Cashflow.Text);
                }
                switch (ddl_IRR_Rest.SelectedValue)
                {
                    case "1":
                        objMethodParameters.Add("strIRRrest", "daily");
                        break;
                    case "2":
                        objMethodParameters.Add("strIRRrest", "monthly");
                        break;
                    default:
                        objMethodParameters.Add("strIRRrest", "daily");
                        break;

                }

                objMethodParameters.Add("decLimit", "0.10");

                decimal decRateOut = 0;

                if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
                {
                    dsRepayGrid = objRepaymentStructure.FunPubGenerateRepaymentSchedule(dtStartDate, (DataTable)ViewState["DtCashFlow"], dtOutflow, objMethodParameters, dtMoratorium, out decRateOut, ObjS3GSession.ProGpsSuffixRW);
                }
                else
                {
                    //TrackFlow
                    dsRepayGrid = objRepaymentStructure.FunPubGenerateRepaymentSchedule(dtStartDate, (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"], objMethodParameters, dtMoratorium, out decRateOut, ObjS3GSession.ProGpsSuffixRW);
                }
                ViewState["decRate"] = Math.Round(Convert.ToDouble(decRateOut), 4);
            }
            else
            {
                dsRepayGrid = objRepaymentStructure.FunPubGenerateRepaymentSchedule(dtStartDate, objMethodParameters, dtMoratorium, ObjS3GSession.ProGpsSuffixRW);
            }
            decimal decFinAmount = FunPubGetAmountFinanced(txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text);
            if (dsRepayGrid == null)
            {
                /* It Calculates and displays the Repayment Details for ST-ADHOC */
                grvRepayStructure.DataSource = null;
                grvRepayStructure.DataBind();
                FunPriShowRepaymetDetails(decFinAmount + FunPriGetStructureAdhocInterestAmount());

                if (ddlApplicationNo.SelectedValue != "0" && ddlApplicationNo.SelectedValue != string.Empty)
                {
                    if (ddl_Repayment_Mode.SelectedValue == "2")//SAP
                    {
                        FunPriFillRepaymentDLL("1");
                        FunPriGenerateNewRepayment();
                        DataTable DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];
                        intSlNo = 0;
                        funPriLoadSAPRepaymentFromPDC(DtRepayGrid);
                        btnCalIRR_Click(null, null);
                    }
                }

                gvRepaymentDetails.FooterRow.Visible = true;
                btnReset.Enabled_False();
                return;
            }
            //DtRepayGrid = objRepaymentStructure.FunPubGenerateRepaymentSchedule(Utility.StringToDate(strDocumentDate), objMethodParameters);
            if (dsRepayGrid.Tables[0].Rows.Count > 0)
            {
                gvRepaymentDetails.DataSource = dsRepayGrid.Tables[0];
                gvRepaymentDetails.DataBind();
                ViewState["DtRepayGrid"] = dsRepayGrid.Tables[0];
                //if (ddl_Rate_Type.SelectedItem.Text == "Floating" && string.IsNullOrEmpty(txtFBDate.Text))
                //{
                //    ((TextBox)gvRepaymentDetails.Rows[0].FindControl("txRepaymentFromDate")).Visible = true;
                //    ((Label)gvRepaymentDetails.Rows[0].FindControl("lblfromdate_RepayTab")).Visible = false;
                //}
                //else
                //{
                ((TextBox)gvRepaymentDetails.Rows[0].FindControl("txRepaymentFromDate")).Visible = false;
                ((Label)gvRepaymentDetails.Rows[0].FindControl("lblfromdate_RepayTab")).Visible = true;
                //}
                btnReset.Enabled_False();
                FunPriCalculateSummary(dsRepayGrid.Tables[0], "CashFlow", "TotalPeriodInstall");
                decimal decBreakPercent;// = ((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID = 23"));

                //if (!((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))))
                //{
                //    decBreakPercent = ((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID = 23"));
                //}
                //else
                //{
                //    DataRow[] dr = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23");
                //    if (dr.Length > 0)
                //    {
                //        decBreakPercent = ((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID = 23"));
                //    }
                //    else
                //    {
                //        decBreakPercent = ((decimal)((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID in(35,91)"));
                //    }

                //}
                //if (decBreakPercent != 0)
                //{
                //    if (decBreakPercent != 100)
                //    {
                //        //Utility.FunShowAlertMsg(this, "Total break up percentage should be equal to 100%");
                //        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege30));
                //        return;
                //    }
                //}
                double douAccountingIRR = 0;
                double douBusinessIRR = 0;
                double douCompanyIRR = 0;
                DataTable dtRepaymentStructure = new DataTable();

                try
                {

                    string strStartDte = txtApplicationDateDate.Text;
                    DateTime dtDocFBDate = Utility.StringToDate(strStartDte);
                    int intDeffered = 0;
                    if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
                    {
                        DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
                        dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";
                        string strAcctType = dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper();

                        if (strAcctType == "PROJECT FINANCE" || strAcctType == "DEFERRED PAYMENT" || strAcctType == "DEFERRED STRUCTURED")
                        {
                            intDeffered = 1;//Defferred Payment
                            DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
                            if (DtCashFlowOut.Rows.Count > 0)
                            {
                                DataRow drOutFlw = DtCashFlowOut.Select("CashFlow_Flag_ID=41").Last();
                                if (drOutFlw != null)
                                {
                                    strStartDte = drOutFlw["Date"].ToString();




                                }
                            }

                        }
                    }
                    if (!string.IsNullOrEmpty(txtFBDate.Text))
                    {
                        //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation start
                        //DateTime dtDocDate = Utility.StringToDate(txtDate.Text);
                        DateTime dtDocDate = Utility.StringToDate(strStartDte);
                        //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation end

                        DateTimeFormatInfo dtformat = new DateTimeFormatInfo();
                        dtformat.ShortDatePattern = "MM/dd/yy";
                        string strFBDate = "";
                        try
                        {
                            //strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);
                            if (dtDocDate.Day > Convert.ToInt32(txtFBDate.Text))
                                strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).AddMonths(1).ToString(strDateFormat);
                            else
                                strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);
                        }
                        catch (Exception ex)
                        {
                            DateTime lastDayOfCurrentMonth = new DateTime(dtDocDate.Year, dtDocDate.Month,
                                                                DateTime.DaysInMonth(dtDocDate.Year, dtDocDate.Month));
                            strFBDate = lastDayOfCurrentMonth.ToString(strDateFormat);
                        }
                        //string strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);
                        dtDocFBDate = Utility.StringToDate(strFBDate);
                    }

                    if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
                    {
                        DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                        decimal dcmTotalAssetValue = (decimal)(dsAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                        objRepaymentStructure.FunPubCalculateIRR(strStartDte, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                            , out dtRepaymentStructure
                            //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 start
                            , out dtRepayDetailsOthers
                            //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 end
                            , (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], dtOutflow
                            , dcmTotalAssetValue.ToString(), txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                            // , txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                            , hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                            ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, dtDocFBDate.ToString(), null);
                    }
                    else
                    {
                        if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Return_Pattern.SelectedValue == "6"))
                        {
                            //objRepaymentStructure.FunPubCalculateIRR(strStartDte, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                            //    , out dtRepaymentStructure, out dtRepayDetails
                            //    //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 start
                            //, out dtRepayDetailsOthers
                            //    //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 end
                            //    , (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                            //    , txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                            //    //, txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                            //    , hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                            //    ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, ddl_Interest_Levy.SelectedValue.ToString(), intDeffered, dtDocFBDate.ToString());



                            objRepaymentStructure.FunPubCalculateIRR(strStartDte, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                           , out dtRepaymentStructure
                                //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 start
                       , out dtRepayDetailsOthers
                                //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 end
                           , (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                           , txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                                //, txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                           , hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                           ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, dtDocFBDate.ToString(), null);
                            
                            
                            //intSlNo = 0;
                            //gvRepaymentDetails.DataSource = dtRepayDetails;
                            //gvRepaymentDetails.DataBind();
                            //ViewState["DtRepayGrid_TL"] = ((DataTable)ViewState["DtRepayGrid"]).Copy();
                            //ViewState["DtRepayGrid"] = dtRepayDetails;
                        }
                        else
                        {




                            #region
                            //Dealer Comission Calculation start ---by sathish R
                            if (ddlDealerCommissionApplicable.SelectedValue == "1")
                            {
                                DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                                DataTable dtLoopEntity = new DataTable();

                                if (dsAssetDetails.Rows.Count > 0)
                                {
                                    dtLoopEntity = dsAssetDetails.DefaultView.ToTable(true, "Entity_ID", "Entity_Code");



                                    foreach (DataRow dr3 in dtLoopEntity.Rows)
                                    {
                                        decimal decAssetFinAmount = 0;
                                        int IRowCount = 0;
                                        DataRow[] dr = dsAssetDetails.Select("Entity_ID='" + dr3["Entity_ID"].ToString() + "'");
                                        if (dr.Length > 0)
                                        {
                                            decAssetFinAmount = Convert.ToDecimal(dr.CopyToDataTable().Compute("sum(Finance_Amount_1)", "1=1"));
                                            IRowCount = dr.CopyToDataTable().Rows.Count;
                                            funPriGetDealerCommsissionDetails(dr3["Entity_ID"].ToString(), decAssetFinAmount.ToString(), IRowCount, dr);
                                        }
                                    }
                                    dsAssetDetails.AcceptChanges();
                                }
                            }
                            //Dealer Comission Calculation End
                            #endregion
                            #region
                            //MFC Deal Commission and Insuracne Outflow Insert Start

                            //if (Convert.ToDecimal(txtRate.Text) > 0)
                            if (Convert.ToDecimal(hdnRate.Value) > 0)
                            {
                                if (ddlDealerCommissionApplicable.SelectedValue == "1")
                                {
                                    #region
                                    //Insert DealCommission outflow
                                    FunPriInsertOutflowDealerComission();
                                    #endregion
                                }

                                if (ddlLifeInsurance.SelectedValue == "2")
                                {
                                    #region
                                    //Insert Insurance outflow
                                    //ddlLifeInsuranceEntity_Item_Selected(null, null);
                                    FunPriInsertOutflowInsurance();
                                    #endregion
                                }
                            }


                            //MFC Deal Commission and Insuracne Outflow Insert End
                            #endregion

                            //MFC-HP
                            objRepaymentStructure.FunPubCalculateIRR(strStartDte, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                                , out dtRepaymentStructure
                                //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 start
                            , out dtRepayDetailsOthers
                                //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 end
                                , (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                                , txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                                //, txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                                , hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                                ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, dtDocFBDate.ToString(), null);
                        }


                        //if (Convert.ToDecimal(txtRate.Text) == 0)
                        if (Convert.ToDecimal(hdnRate.Value) == 0)
                        {
                            if (ddlDealerCommissionApplicable.SelectedValue == "1")
                            {
                                #region
                                //Insert DealCommission outflow
                                FunPriInsertOutflowDealerComission();
                                #endregion
                            }

                            if (ddlLifeInsurance.SelectedValue == "2")
                            {
                                #region
                                //Insert Insurance outflow
                                //ddlLifeInsuranceEntity_Item_Selected(null, null);
                                FunPriInsertOutflowInsurance();
                                #endregion
                            }
                        }
                    }

                    #region
                    //Dealer Comission Struct add Start---by sathish R
                    funPriadjFcDiff(dtRepaymentStructure);
                    dtRepaymentStructure.Columns.Add("FINANCE_CHARGE_WIT_INS", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("FINANCE_CHARGE_WITHOUT_INS", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("INSURANCE_AMT", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("INSURANCE_PAYABLE", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("INSURANCE_INCOME", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("Deal_Commission", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("Cash_Flow_Flag_Id", typeof(int));

                    dtRepaymentStructure.Columns.Add("EMI", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("EMI_INS", typeof(decimal));

                    if (ddlDealerCommissionApplicable.SelectedValue == "1")
                    {

                        decimal decSumDealerCommissionAmount = 0;
                        decimal decCommissionPerInstallment = 0;
                        decimal decCommissionPerInstallmentRoundoff = 0;
                        decimal decCommissionDecimalDifference = 0;
                        string strDealCommissionAmount=string.Empty;

                        DataTable dsAssetDetails2 = (DataTable)Session["PricingAssetDetails"];
                        if(dsAssetDetails2!=null)
                        strDealCommissionAmount = dsAssetDetails2.Compute("sum(Dealer_Commission_Amount_1)", "1=1").ToString();

                        if (strDealCommissionAmount != string.Empty)
                        {
                            decSumDealerCommissionAmount = Convert.ToDecimal(strDealCommissionAmount);
                            if (decSumDealerCommissionAmount > 0)
                            {
                                DataTable DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];
                                decCommissionPerInstallment = decSumDealerCommissionAmount / Convert.ToInt32(txtTenure.Text);
                                decCommissionPerInstallmentRoundoff = Math.Round(decCommissionPerInstallment);

                                decCommissionDecimalDifference = decSumDealerCommissionAmount - decCommissionPerInstallmentRoundoff * Convert.ToInt32(txtTenure.Text);

                                decimal decTototalUMFC = Convert.ToDecimal(dtRepaymentStructure.Compute("sum(charge)", "1=1").ToString());



                                if (decTototalUMFC > 0)
                                {
                                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                                    {
                                        //drRepay["Deal_Commission"] = decCommissionPerInstallmentRoundoff;

                                        drRepay["Deal_Commission"] = Math.Round(Convert.ToDecimal(drRepay["Charge"]) / decTototalUMFC * Convert.ToDecimal(strDealCommissionAmount), 3);
                                        drRepay["Cash_Flow_Flag_Id"] = "28";
                                    }
                                    //dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Deal_Commission"] = decCommissionPerInstallmentRoundoff + decCommissionDecimalDifference;
                                    dtRepaymentStructure.AcceptChanges();
                                }
                                else if (decTototalUMFC == 0)
                                {
                                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                                    {
                                        drRepay["Deal_Commission"] = Math.Round(decCommissionPerInstallment, 3);
                                        drRepay["Cash_Flow_Flag_Id"] = "28";
                                    }

                                    dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Deal_Commission"] = Math.Round(decCommissionPerInstallment, 3) + (decSumDealerCommissionAmount - Convert.ToDecimal(dtRepaymentStructure.Compute("sum(Deal_Commission)", "1=1").ToString()));

                                    dtRepaymentStructure.AcceptChanges();
                                }


                                #region



                                #endregion
                            }
                        }
                    #endregion


                    }
                    #region

                    if (ddlLifeInsurance.SelectedValue == "2")//LIPEvent1
                    {
                        funrPriCalculateLIP(dtRepaymentStructure);
                    }

                    #endregion
                    //grvRepayStructure.Columns[10].Visible = false;
                    //grvRepayStructure.Columns[11].Visible = false;
                    //grvRepayStructure.Columns[12].Visible = false;



                    //if (ddlDealerCommissionApplicable.SelectedValue == "1")
                    //{
                    //    #region
                    //    //Insert DealCommission outflow
                    //    FunPriInsertOutflowDealerComission();
                    //    #endregion
                    //}

                    //if (ddlLifeInsurance.SelectedValue == "2")
                    //{
                    //    #region
                    //    //Insert Insurance outflow
                    //    FunPriInsertOutflowInsurance();
                    //    #endregion
                    //}


                    dtRepaymentStructure.Columns["Charge"].ColumnName = "FinanceCharges";
                    ViewState["RepaymentStructure"] = dtRepaymentStructure;

                    FunPriCalculateSummary(dsRepayGrid.Tables[0], "CashFlow", "TotalPeriodInstall");


                    //funPriResetNoofdays(dtRepaymentStructure);
                    grvRepayStructure.DataSource = dtRepaymentStructure;
                    grvRepayStructure.DataBind();

                    grvRepayStructure.Columns[grvRepayStructure.Columns.Count - 1].Visible = false;


                    txtAccountIRR_Repay.Text = douAccountingIRR.ToString(Funsetsuffix());
                    txtAccountingIRR.Text = douAccountingIRR.ToString(Funsetsuffix());

                    txtBusinessIRR_Repay.Text = douBusinessIRR.ToString(Funsetsuffix());
                    txtBusinessIRR.Text = douBusinessIRR.ToString(Funsetsuffix());

                    txtCompanyIRR_Repay.Text = douCompanyIRR.ToString(Funsetsuffix());
                    txtCompanyIRR.Text = douCompanyIRR.ToString(Funsetsuffix());

                    //if (Convert.ToDecimal(txtRate.Text) > 0)
                    //{
                    //    funPriReloadIRR(dtRepaymentStructure, objRepaymentStructure);
                    //}

                    if (dtRepayDetailsOthers != null)
                        ViewState["dtRepayDetailsOthers"] = dtRepayDetailsOthers;
                    //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 end

                    //txtAccountIRR_Repay.Text = douAccountingIRR.ToString(Funsetsuffix());
                    //txtAccountingIRR.Text = douAccountingIRR.ToString(Funsetsuffix());

                    //txtBusinessIRR_Repay.Text = douBusinessIRR.ToString(Funsetsuffix());
                    //txtBusinessIRR.Text = douBusinessIRR.ToString(Funsetsuffix());

                    //txtCompanyIRR_Repay.Text = douCompanyIRR.ToString(Funsetsuffix());
                    //txtCompanyIRR.Text = douCompanyIRR.ToString(Funsetsuffix());

                    if (ddl_Repayment_Mode.SelectedValue != "2")//SAP
                    {
                        Panel2.Visible = false;
                    }
                    else
                    {
                        Panel2.Visible = true;
                    }
                }
                catch (Exception Ex1)
                {
                    FunRepayClear(Ex1.Message);
                }
            }
            else
            {
                gvRepaymentDetails.FooterRow.Visible = true;
                btnReset.Enabled_False();
            }

            if (dsRepayGrid.Tables[0].Rows.Count > 0)
            {
                if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Return_Pattern.SelectedValue == "6"))
                {
                    //FunPriShowRepaymetDetails((decimal)dtRepayDetails.Compute("SUM(TotalPeriodInstall)", "1=1"));
                    //FunPriCalculateSummary(dtRepayDetails, "CashFlow", "TotalPeriodInstall");

                    ////grvRepayStructure.Columns[8].Visible = false;
                    //grvRepayStructure.Columns[9].Visible = false;
                    //grvRepayStructure.Columns[10].Visible = false;

                    FunPriShowRepaymetDetails((decimal)dsRepayGrid.Tables[0].Compute("SUM(TotalPeriodInstall)", "CashFlow_Flag_ID =23"));
                }
                else
                {
                    FunPriShowRepaymetDetails((decimal)dsRepayGrid.Tables[0].Compute("SUM(TotalPeriodInstall)", "CashFlow_Flag_ID =23"));
                }
            }
            else
            {
                /* It Calculates and displays the Repayment Details for ST-ADHOC */
                FunPriShowRepaymetDetails(decFinAmount + FunPriGetStructureAdhocInterestAmount());
            }

            FunPriGenerateNewRepayment();
            FunPriUpdateROIRule();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private DataTable funPriLoadSAPRepaymentFromPDC(DataTable dtRepayment)
    {
        //Sathish R-10-Mar-2020

        ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
        DataTable dtCashFlowTable = objRepaymentStructure.FunPubGetCashFlowDetails(intCompanyId, Convert.ToInt32(ddlLOB.SelectedValue));
        int decInsMupltiplier = 0;
        int IRowCount = 0;
        if (ViewState["PDC"] == null)
        {
            Utility.FunShowAlertMsg(this, "PDC Information not Available");
        }
        DataTable dtPDC = (DataTable)ViewState["PDC"];
        int iSno = 0;

        if (dtRepayment.Rows.Count > 0)
        {
            dtRepayment.Rows.Clear();
        }
        IRowCount = dtPDC.Rows.Count;
        foreach (DataRow dr in dtPDC.Rows)
        {
            DataRow drRepayRow;
            drRepayRow = dtRepayment.NewRow();
            drRepayRow["SLNO"] = iSno;
            drRepayRow["Amount"] = dr["Total_Amount"].ToString();
            drRepayRow["PerInstall"] = dr["Total_Amount"].ToString();
            drRepayRow["Breakup"] = 0;
            drRepayRow["FromInstall"] = dr["Ins_Start"].ToString();
            drRepayRow["ToInstall"] = dr["Ins_End"].ToString();


            decInsMupltiplier = Convert.ToInt32(dr["Ins_End"].ToString()) - Convert.ToInt32(dr["Ins_Start"].ToString()) + 1;

            if (iSno == 0)
            {
                drRepayRow["FromDate"] = Utility.StringToDate(txtPdcStartDate.Text);
                if (IRowCount == 1)
                    drRepayRow["ToDate"] = Utility.StringToDate(Utility.StringToDate(txtPdcStartDate.Text).AddMonths(decInsMupltiplier - 1).ToString(strDateFormat));
                else
                    drRepayRow["ToDate"] = Utility.StringToDate(Utility.StringToDate(txtPdcStartDate.Text).AddMonths(decInsMupltiplier).ToString(strDateFormat));
            }
            else
            {
                if (IRowCount - 1 == iSno)
                {

                    string maxEnddate = dtRepayment.Rows[iSno - 1]["ToDate"].ToString();
                    drRepayRow["FromDate"] = Utility.StringToDate(maxEnddate);
                    drRepayRow["ToDate"] = Utility.StringToDate(Utility.StringToDate(maxEnddate).AddMonths(decInsMupltiplier - 1).ToString(strDateFormat));
                }
                else
                {
                    string maxEnddate = dtRepayment.Rows[iSno - 1]["ToDate"].ToString();
                    drRepayRow["FromDate"] = Utility.StringToDate(maxEnddate);
                    drRepayRow["ToDate"] = Utility.StringToDate(Utility.StringToDate(maxEnddate).AddMonths(decInsMupltiplier).ToString(strDateFormat));
                }
            }

            drRepayRow["TotalPeriodInstall"] = Convert.ToDecimal(dr["Total_Amount"].ToString()) * decInsMupltiplier;
            drRepayRow["CashFlow"] = dtCashFlowTable.Rows[0]["cashflow_description"];
            drRepayRow["CashFlowId"] = dtCashFlowTable.Rows[0]["cashflow_id"];

            drRepayRow["Accounting_IRR"] = Convert.ToBoolean(dtCashFlowTable.Rows[0]["Accounting_IRR"].ToString());
            drRepayRow["business_irr"] = Convert.ToBoolean(dtCashFlowTable.Rows[0]["business_irr"].ToString());
            drRepayRow["company_irr"] = Convert.ToBoolean(dtCashFlowTable.Rows[0]["company_irr"].ToString());
            drRepayRow["CashFlow_Flag_ID"] = 23;
            dtRepayment.Rows.Add(drRepayRow);
            iSno = iSno + 1;
        }
        gvRepaymentDetails.DataSource = dtRepayment;
        gvRepaymentDetails.DataBind();
        FunPriGenerateNewRepayment();
        ((LinkButton)gvRepaymentDetails.Rows[gvRepaymentDetails.Rows.Count - 1].FindControl("lnRemoveRepayment")).Visible = true;
        ViewState["DtRepayGrid"] = dtRepayment;
        return dtRepayment;
    }


    private void funrPriCalculateLIP(DataTable dtRepaymentStructure)
    {

        try
        {


            decimal decTototalUMFC = Convert.ToDecimal(dtRepaymentStructure.Compute("sum(charge)", "1=1").ToString());
            decimal decTotalRepayable = Convert.ToDecimal(dtRepaymentStructure.Compute("sum(InstallmentAmount)", "1=1").ToString());


            //Insurance Start Struct add Start--by sathish R
            decimal decSumInsuranceAmount = 0;
            decimal decInsurancePerInstallment = 0;
            decimal decInsurancePerInstallmentRoundoff = 0;
            decimal decInsuranceDecimalDifference = 0;
            decimal decLIPDiffIncome = 0;
            decLIPDiffIncome = Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmountWT.Text) - Convert.ToDecimal(txtLifeInsuranceCompanyAmountWT.Text);

            decimal decLipAppr = Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmountWT.Text) / decTotalRepayable;

            if (txtLifeInsuranceCustomerPremiumAmountWT.Text != string.Empty)
            {
                decSumInsuranceAmount = Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmountWT.Text);

                decInsurancePerInstallment = decSumInsuranceAmount / dtRepaymentStructure.Rows.Count;
                decInsurancePerInstallmentRoundoff = Math.Round(decInsurancePerInstallment);

                decInsuranceDecimalDifference = decSumInsuranceAmount - decInsurancePerInstallmentRoundoff * dtRepaymentStructure.Rows.Count;


                int iGridRowCount = dtRepaymentStructure.Rows.Count;

                if (decTototalUMFC > 0)
                {

                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    {
                        drRepay["FINANCE_CHARGE_WIT_INS"] = Convert.ToDecimal(drRepay["Charge"]).ToString();
                    }

                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    {
                        drRepay["INSURANCE_AMT"] = Math.Round(Convert.ToDecimal(drRepay["Charge"]) / decTototalUMFC * Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmountWT.Text), 3);
                    }

                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    {
                        drRepay["EMI"] = Math.Round(Convert.ToDecimal(drRepay["InstallmentAmount"]), 3).ToString(Funsetsuffix());
                    }
                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    {
                        drRepay["InstallmentAmount"] = Math.Round(Convert.ToDecimal(drRepay["EMI"]) - Convert.ToDecimal(drRepay["INSURANCE_AMT"]), 3).ToString(Funsetsuffix());
                    }
                    //foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    //{
                    //    drRepay["InstallmentAmount"] = Math.Round(Convert.ToDecimal(drRepay["EMI"]) - Convert.ToDecimal(drRepay["INSURANCE_AMT"]), 3).ToString(Funsetsuffix());
                    //}
                    //foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    //{
                    //    if (Convert.ToDecimal(drRepay["Charge"]) > 0)
                    //    {
                    //        drRepay["Charge"] = Math.Round(Convert.ToDecimal(drRepay["Charge"]) - Convert.ToDecimal(drRepay["INSURANCE_AMT"]), 3).ToString(Funsetsuffix());
                    //    }
                    //    else
                    //    {

                    //        dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Charge"] = Math.Round(Convert.ToDecimal(dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Charge"]) - Convert.ToDecimal(drRepay["INSURANCE_AMT"]), 3).ToString(Funsetsuffix());
                    //    }
                    //}


                    decimal decTotalInsCust = Convert.ToDecimal(dtRepaymentStructure.Compute("sum(INSURANCE_AMT)", "1=1").ToString());
                    decimal decLIPDiff = Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmountWT.Text) - decTotalInsCust;
                    //dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["INSURANCE_AMT"] = Convert.ToDecimal(dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["INSURANCE_AMT"]) + decLIPDiff;
                    //dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Charge"] = Convert.ToDecimal(dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Charge"]) - decLIPDiff;
                    //dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["InstallmentAmount"] = Convert.ToDecimal(dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["InstallmentAmount"]) - decLIPDiff;    

                    //Difference Charge Start





                    //if (ddlInstallmentRoundOff.SelectedValue == "1")
                    //{
                    //    dtRepaymentStructure.Rows[0]["Charge"] = Math.Round(decInsurancePerInstallmentRoundoff, 3) + (Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text) - Convert.ToDecimal(dtRepaymentStructure.Compute("sum(INSURANCE_AMT)", "1=1").ToString()));
                    //    dtRepaymentStructure.AcceptChanges();
                    //}
                    //else
                    //{
                    //    dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Charge"] = Math.Round(decInsurancePerInstallmentRoundoff, 3) + (Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text) - Convert.ToDecimal(dtRepaymentStructure.Compute("sum(INSURANCE_AMT)", "1=1").ToString()));
                    //    dtRepaymentStructure.AcceptChanges();
                    //}


                    //foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    //{
                    //    //drRepay["INSURANCE_AMT"] = Math.Round(decInsurancePerInstallmentRoundoff, 3).ToString(Funsetsuffix());
                    //    drRepay["EMI"] = Math.Round(Convert.ToDecimal(drRepay["InstallmentAmount"]) + Convert.ToDecimal(drRepay["INSURANCE_AMT"]), 3).ToString(Funsetsuffix());
                    //}

                    //if (ddlInstallmentRoundOff.SelectedValue == "1")
                    //{
                    //    dtRepaymentStructure.Rows[0]["INSURANCE_AMT"] = Math.Round(decInsurancePerInstallmentRoundoff, 3) + (Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text) - Convert.ToDecimal(dtRepaymentStructure.Compute("sum(INSURANCE_AMT)", "1=1").ToString()));
                    //    dtRepaymentStructure.AcceptChanges();
                    //}
                    //else
                    //{
                    //    dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["INSURANCE_AMT"] = Math.Round(decInsurancePerInstallmentRoundoff, 3) + (Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text) - Convert.ToDecimal(dtRepaymentStructure.Compute("sum(INSURANCE_AMT)", "1=1").ToString()));
                    //    dtRepaymentStructure.AcceptChanges();
                    //}
                    decTototalUMFC = Convert.ToDecimal(dtRepaymentStructure.Compute("sum(charge)", "1=1").ToString());
                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    {
                        drRepay["INSURANCE_PAYABLE"] = Math.Round(Convert.ToDecimal(drRepay["INSURANCE_AMT"]) / Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmountWT.Text) * Convert.ToDecimal(txtLifeInsuranceCompanyAmountWT.Text), 3);
                        //drRepay["INSURANCE_PAYABLE"] = Math.Round((decLIPDiffIncome * Convert.ToDecimal(drRepay["Charge"])) / (decTototalUMFC), 3);

                        //drRepay["INSURANCE_PAYABLE"] = Math.Round(Convert.ToDecimal(drRepay["Charge"]) / decTototalUMFC * Convert.ToDecimal(txtLifeInsuranceCompanyAmount.Text), 3);
                    }



                    //dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["InstallmentAmount"] = Convert.ToDecimal(dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["InstallmentAmount"]) - decLIPDiff;    



                    //foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    //{
                    //    drRepay["INSURANCE_PAYABLE"] = Convert.ToDecimal(drRepay["INSURANCE_AMT"].ToString()) - Convert.ToDecimal(drRepay["INSURANCE_PAYABLE"]);

                    //}



                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    {
                        drRepay["INSURANCE_INCOME"] = Convert.ToDecimal(drRepay["INSURANCE_AMT"]) - Convert.ToDecimal(drRepay["INSURANCE_PAYABLE"]);
                    }
                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    {
                        drRepay["Charge"] = Convert.ToDecimal(drRepay["Charge"]) - Convert.ToDecimal(drRepay["INSURANCE_AMT"]);
                    }

                    //AdjustDifference Start
                    decimal decTotalInsCompany = Convert.ToDecimal(dtRepaymentStructure.Compute("sum(INSURANCE_PAYABLE)", "1=1").ToString());
                    decimal decLIPDiffCompany = Convert.ToDecimal(txtLifeInsuranceCompanyAmountWT.Text) - decTotalInsCompany;
                    dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["INSURANCE_PAYABLE"] = Convert.ToDecimal(dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["INSURANCE_PAYABLE"]) + decLIPDiffCompany;
                    dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["INSURANCE_AMT"] = Convert.ToDecimal(dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["INSURANCE_AMT"]) + decLIPDiff;

                    //Utility.FunShowAlertMsg(this, "LastCharge" + dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Charge"].ToString() + "<==>" + decLIPDiff.ToString());
                    dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Charge"] = Convert.ToDecimal(dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Charge"]) - decLIPDiff;
                    dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["InstallmentAmount"] = Convert.ToDecimal(dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["InstallmentAmount"]) - decLIPDiff;
                    //AdjustDifference End

                    dtRepaymentStructure.AcceptChanges();


                }
                if (decTototalUMFC == 0)
                {
                    //UMFC Zero Lip Customer
                    #region
                    decimal decLipCustomerPerInstallment = 0;
                    decimal decLipCustomerPerInstallmentRoundoff = 0;
                    decimal decLipCustomerDecimalDifference = 0;

                    decLipCustomerPerInstallment = Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmountWT.Text) / dtRepaymentStructure.Rows.Count;
                    decLipCustomerPerInstallmentRoundoff = Math.Round(decLipCustomerPerInstallment);
                    decLipCustomerDecimalDifference = Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmountWT.Text) - decLipCustomerPerInstallmentRoundoff * dtRepaymentStructure.Rows.Count;

                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    {
                        drRepay["INSURANCE_AMT"] = Math.Round(decLipCustomerPerInstallmentRoundoff, 3).ToString(Funsetsuffix());
                    }
                    dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["INSURANCE_AMT"] = Math.Round(decLipCustomerPerInstallmentRoundoff, 3) + (Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmountWT.Text) - Convert.ToDecimal(dtRepaymentStructure.Compute("sum(INSURANCE_AMT)", "1=1").ToString()));
                    dtRepaymentStructure.AcceptChanges();

                    #endregion



                    //UMFC Zero Lip Company
                    #region
                    decimal decLipCompanyPerInstallment = 0;
                    decimal decLipCompanyPerInstallmentRoundoff = 0;
                    decimal decLipCompanyDecimalDifference = 0;

                    decLipCompanyPerInstallment = Convert.ToDecimal(txtLifeInsuranceCompanyAmountWT.Text ) / dtRepaymentStructure.Rows.Count;
                    decLipCompanyPerInstallmentRoundoff = Math.Round(decLipCompanyPerInstallment);
                    decLipCompanyDecimalDifference = Convert.ToDecimal(txtLifeInsuranceCompanyAmountWT.Text) - decLipCompanyPerInstallmentRoundoff * dtRepaymentStructure.Rows.Count;

                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                    {
                        drRepay["INSURANCE_PAYABLE"] = Math.Round(decLipCompanyPerInstallment, 3);
                    }
                    //dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["INSURANCE_PAYABLE"] = decLipCompanyPerInstallmentRoundoff + decLipCompanyPerInstallment;

                    dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["INSURANCE_PAYABLE"] = Math.Round(decLipCompanyPerInstallment, 3) + (Convert.ToDecimal(txtLifeInsuranceCompanyAmountWT.Text) - Convert.ToDecimal(dtRepaymentStructure.Compute("sum(INSURANCE_PAYABLE)", "1=1").ToString()));

                    dtRepaymentStructure.AcceptChanges();

                    #endregion

                }

            }


    #endregion




        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void funPriGetDealerCommsissionDetails(string strEntityId, string strFinanceAmountAsset, int IDealerRowCount, DataRow[] drEntity)
    {
        try
        {

            decimal decDealerCommissionAmount = 0;
            decimal decDealerCommissionRate = 0;
            decimal decDealerCommissionId = 0;
            decimal decDealerCommissionRateId = 0;

            DataTable dtDealerCommission;
            //if (HttpContext.Current.Session["CONSTITUTION_ID"] == null)
            //{
            //    Utility.FunShowAlertMsg(this, "Constitution not Available");
            //    return;
            //}
            //if (HttpContext.Current.Session["CONTRACT_TYPE"] == null)
            //{
            //    Utility.FunShowAlertMsg(this, "Contract Type not Selected in Application");
            //    return;
            //}
            //if (HttpContext.Current.Session["TSCSMP"] == null)
            //{
            //    Utility.FunShowAlertMsg(this, "TCSMP not Available");
            //    return;
            //}

            //if (strEntityId == "0" || strEntityId == string.Empty)
            //{
            //    Utility.FunShowAlertMsg(this, "Select the Entity");
            //    return;
            //}
            //if (strFinanceAmountAsset == string.Empty || strFinanceAmountAsset == "0")
            //{
            //    Utility.FunShowAlertMsg(this, "Enter the Finance Amount");
            //    return;
            //}


            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@OPTION", "8");
            strProParm.Add("@COMPANYID", intCompanyId.ToString());
            strProParm.Add("@USERID", intUserId.ToString());
            strProParm.Add("@PROGRAMID", "38");
            strProParm.Add("@PAGE_MODE", "C");
            strProParm.Add("@Deal_Comm_Entity_id", strEntityId);
            strProParm.Add("@CONSTITUTION_ID", HttpContext.Current.Session["CONSTITUTION_ID"].ToString());
            strProParm.Add("@CONTRACT_TYPE", HttpContext.Current.Session["CONTRACT_TYPE"].ToString());
            strProParm.Add("@TCSMP_TYPE", HttpContext.Current.Session["TSCSMP"].ToString());
            strProParm.Add("@FinanaceAmount", strFinanceAmountAsset);
            strProParm.Add("@Application_Date", Utility.StringToDate(txtApplicationDateDate.Text).ToString());
            dtDealerCommission = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);
            if (dtDealerCommission.Rows.Count > 0)
            {
                if (dtDealerCommission.Rows[0]["RATE"].ToString() == "")
                {
                    Utility.FunShowAlertMsg(this, "Dealer commission Rate not defined");
                }
                if (dtDealerCommission.Rows[0]["COMMISSION"].ToString() == "")
                {
                    Utility.FunShowAlertMsg(this, "Dealer Commission amount not defined");
                }

                decDealerCommissionRate = Convert.ToDecimal(dtDealerCommission.Rows[0]["RATE"].ToString());
                decDealerCommissionAmount = Convert.ToDecimal(dtDealerCommission.Rows[0]["COMMISSION"].ToString());
                decDealerCommissionId = Convert.ToDecimal(dtDealerCommission.Rows[0]["DEALER_COMM_ID"].ToString());
                decDealerCommissionRateId = Convert.ToDecimal(dtDealerCommission.Rows[0]["DEALER_COMM_RATE_ID"].ToString());

                foreach (DataRow dr in drEntity)
                {
                    dr["Dealer_Commission_Amount"] = decDealerCommissionAmount / IDealerRowCount;
                    dr["Dealer_Commission_Amount_1"] = decDealerCommissionAmount / IDealerRowCount;
                    dr["Dealer_Commission_Rate"] = decDealerCommissionRate / IDealerRowCount;
                    dr["DEALER_COMM_ID"] = decDealerCommissionId;
                    dr["DEALER_COMM_Rate_ID"] = decDealerCommissionRateId;

                }
                ddlDealerCommissionApplicable.SelectedValue = "1";

            }
            else
            {
                foreach (DataRow dr in drEntity)
                {
                    dr["Dealer_Commission_Amount"] = 0;
                    dr["Dealer_Commission_Amount_1"] = 0;
                    dr["Dealer_Commission_Rate"] = 0;
                    dr["DEALER_COMM_ID"] = 0;
                    dr["DEALER_COMM_Rate_ID"] = 0;

                }
                ddlDealerCommissionApplicable.SelectedValue = "0";
                //Utility.FunShowAlertMsg(this, "Dealer Comission Paramaters not Matching or Commission Details not defined in Dealer Comission");
                //Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege31));
                //ddlDealerCommissionApplicable.SelectedValue = "0";
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    //Added by Sathish
    private DataTable FunPriGroupRepayDetails(DataTable dtRepaymentDetails, int intCashFlow, string strCashflowDesc, bool blnAccountingIRR, bool blnBusinessIRR, bool blnCompanyIRR, string strType, string strCashFlowFlagId)
    {
        DataTable dtRepaymentStructure = new DataTable();

        try
        {

            dtRepaymentStructure.Columns.Add("slno");
            dtRepaymentStructure.Columns.Add("CashFlow");
            dtRepaymentStructure.Columns.Add("Amount", typeof(decimal));
            dtRepaymentStructure.Columns.Add("PerInstall", typeof(decimal));
            dtRepaymentStructure.Columns.Add("Breakup", typeof(decimal));
            dtRepaymentStructure.Columns.Add("FromInstall");
            dtRepaymentStructure.Columns.Add("ToInstall");
            dtRepaymentStructure.Columns.Add("FromDate");
            dtRepaymentStructure.Columns.Add("ToDate");
            dtRepaymentStructure.Columns.Add("FlowDesc");
            dtRepaymentStructure.Columns.Add("CashFlowId");
            dtRepaymentStructure.Columns.Add("TotalPeriodInstall", typeof(decimal));
            dtRepaymentStructure.Columns.Add("Accounting_IRR");
            dtRepaymentStructure.Columns.Add("Business_IRR");
            dtRepaymentStructure.Columns.Add("Company_IRR");
            dtRepaymentStructure.Columns.Add("CashFlow_Flag_ID", typeof(Int16));
            dtRepaymentStructure.Columns.Add("Outflow");
            dtRepaymentStructure.Columns.Add("Amort");
            dtRepaymentStructure.Columns.Add("Entity");
            DataRow drRepayRow;

            if (strType == "")
            {
                int counter = 1;
                int iCounter = 1;
                decimal iCurAmt = 0;
                int iToPeriod = 0;
                decimal iPrvAmt = 0;
                int iFromPeriod = 0;

                foreach (DataRow grvReapyRow in dtRepaymentDetails.Rows)
                {
                    if (iCounter == counter)
                    {
                        int i = 1;
                        foreach (DataRow grvNewReapyRow in dtRepaymentDetails.Rows)
                        {

                            if (iCounter == 1)
                            {
                                iCurAmt = Convert.ToDecimal(grvNewReapyRow["Others"].ToString());
                                iPrvAmt = iCurAmt;
                                iFromPeriod = 1;
                                iToPeriod = 1;
                            }
                            else
                            {
                                if (iCounter == i)
                                {
                                    iCurAmt = Convert.ToDecimal(grvNewReapyRow["Others"].ToString());
                                    if (iCurAmt != iPrvAmt)
                                    {
                                        goto L1;
                                    }
                                    else
                                    {
                                        iToPeriod = iToPeriod + 1;
                                    }
                                }
                                else
                                {
                                    goto L2;
                                }
                            }
                            iCounter = iCounter + 1;
                        L2: ++i;
                        }

                    L1: drRepayRow = dtRepaymentStructure.NewRow();
                        drRepayRow["slno"] = "1";
                        drRepayRow["Amount"] = dtRepaymentDetails.Rows[0]["Others"].ToString();
                        if (0 == 0)
                        {
                            drRepayRow["PerInstall"] = Math.Round(iPrvAmt, 2);
                        }
                        else
                        {
                            drRepayRow["PerInstall"] = iPrvAmt;
                        }
                        drRepayRow["Breakup"] = 0;
                        drRepayRow["FromInstall"] = iFromPeriod;
                        drRepayRow["ToInstall"] = iToPeriod;
                        if (dtRepaymentDetails.Rows.Count > 1)
                        {
                            if (counter < dtRepaymentDetails.Rows.Count)
                            {
                                drRepayRow["FromDate"] = dtRepaymentDetails.Rows[counter]["FromDate"].ToString();
                            }
                            else if (counter == dtRepaymentDetails.Rows.Count)
                                drRepayRow["FromDate"] = dtRepaymentDetails.Rows[counter - 1]["FromDate"].ToString();
                        }
                        else
                        {
                            drRepayRow["FromDate"] = dtRepaymentDetails.Rows[0]["FromDate"].ToString();
                        }

                        drRepayRow["ToDate"] = dtRepaymentDetails.Rows[iCounter - 2]["ToDate"].ToString();
                        int intTotalInstall = iToPeriod - iFromPeriod + 1;
                        if (0 == 0)
                        {
                            drRepayRow["TotalPeriodInstall"] = Math.Round(iPrvAmt, 2) * intTotalInstall;
                        }
                        else
                        {
                            drRepayRow["TotalPeriodInstall"] = iPrvAmt * intTotalInstall;
                        }
                        drRepayRow["CashFlow"] = strCashflowDesc;
                        drRepayRow["CashFlowId"] = intCashFlow;
                        drRepayRow["Accounting_IRR"] = blnAccountingIRR;
                        drRepayRow["Business_IRR"] = blnBusinessIRR;
                        drRepayRow["Company_IRR"] = blnCompanyIRR;
                        drRepayRow["CashFlow_Flag_ID"] = strCashFlowFlagId;//Insurance
                        dtRepaymentStructure.Rows.Add(drRepayRow);
                        iPrvAmt = iCurAmt;
                        iFromPeriod = iCounter;
                        iToPeriod = iCounter - 1;
                    }
                    ++counter;
                }

            }
            else
            {


                var query = (from row in dtRepaymentDetails.AsEnumerable()
                             group row by new
                             {
                                 InstallmentAmount = row.Field<decimal>("InstallmentAmount"),
                                 RecoveryYear = row.Field<string>("RecoveryYear")
                             } into grp

                             select new
                             {
                                 PerInstall = grp.Key.InstallmentAmount,
                                 Amount = grp.Select(r => r.Field<decimal>("Amount")),
                                 Breakup = 0,
                                 FromInstall = grp.Min(r => Convert.ToInt32(r.Field<string>("InstallmentNo"))),
                                 ToInstall = grp.Max(r => Convert.ToInt32(r.Field<string>("InstallmentNo"))),
                                 TotalPeriodInstall = grp.Sum(r => Convert.ToInt32(r.Field<decimal>("InstallmentAmount"))),
                                 FromDate = grp.Select(r => r.Field<string>("FromDate")),
                                 ToDate = grp.Select(r => r.Field<string>("ToDate"))

                             }).ToList();

                int SlNo = 0;
                foreach (var x in query)
                {
                    SlNo++;
                    drRepayRow = dtRepaymentStructure.NewRow();
                    drRepayRow["slno"] = SlNo.ToString();
                    drRepayRow["Amount"] = x.Amount.ToArray()[x.Amount.ToArray().Length - 1].ToString();
                    if (0 == 0)
                    {
                        drRepayRow["PerInstall"] = Convert.ToDecimal(((decimal)x.PerInstall).ToString("0.000"));
                    }
                    else
                    {
                        drRepayRow["PerInstall"] = x.PerInstall;
                    }
                    drRepayRow["Breakup"] = Convert.ToDecimal(x.Breakup);
                    drRepayRow["FromInstall"] = x.FromInstall.ToString();
                    drRepayRow["ToInstall"] = x.ToInstall.ToString();
                    drRepayRow["FromDate"] = x.ToDate.ToArray()[0].ToString();
                    drRepayRow["ToDate"] = x.ToDate.ToArray()[x.ToDate.ToArray().Length - 1].ToString();
                    drRepayRow["TotalPeriodInstall"] = x.TotalPeriodInstall;
                    drRepayRow["CashFlow"] = strCashflowDesc;
                    drRepayRow["CashFlowId"] = intCashFlow;
                    drRepayRow["Accounting_IRR"] = blnAccountingIRR;
                    drRepayRow["Business_IRR"] = blnBusinessIRR;
                    drRepayRow["Company_IRR"] = blnCompanyIRR;
                    drRepayRow["CashFlow_Flag_ID"] = 23;
                    dtRepaymentStructure.Rows.Add(drRepayRow);
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return dtRepaymentStructure;
    }
    //Added by Sathish
    private DataTable FunPriGroupRepayDetailsInsurance(DataTable dtRepaymentDetails, int intCashFlow, string strCashflowDesc, bool blnAccountingIRR, bool blnBusinessIRR, bool blnCompanyIRR, string strType, string strCashFlowFlagId)
    {
        DataTable dtRepaymentStructure = new DataTable();
        try
        {


            dtRepaymentStructure.Columns.Add("slno");
            dtRepaymentStructure.Columns.Add("CashFlow");
            dtRepaymentStructure.Columns.Add("Amount", typeof(decimal));
            dtRepaymentStructure.Columns.Add("PerInstall", typeof(decimal));
            dtRepaymentStructure.Columns.Add("Breakup", typeof(decimal));
            dtRepaymentStructure.Columns.Add("FromInstall");
            dtRepaymentStructure.Columns.Add("ToInstall");
            dtRepaymentStructure.Columns.Add("FromDate");
            dtRepaymentStructure.Columns.Add("ToDate");
            dtRepaymentStructure.Columns.Add("FlowDesc");
            dtRepaymentStructure.Columns.Add("CashFlowId");
            dtRepaymentStructure.Columns.Add("TotalPeriodInstall", typeof(decimal));
            dtRepaymentStructure.Columns.Add("Accounting_IRR");
            dtRepaymentStructure.Columns.Add("Business_IRR");
            dtRepaymentStructure.Columns.Add("Company_IRR");
            dtRepaymentStructure.Columns.Add("CashFlow_Flag_ID", typeof(Int16));
            dtRepaymentStructure.Columns.Add("Outflow");
            dtRepaymentStructure.Columns.Add("Amort");
            dtRepaymentStructure.Columns.Add("Entity");
            DataRow drRepayRow;

            if (strType == "")
            {
                int counter = 1;
                int iCounter = 1;
                decimal iCurAmt = 0;
                int iToPeriod = 0;
                decimal iPrvAmt = 0;
                int iFromPeriod = 0;

                foreach (DataRow grvReapyRow in dtRepaymentDetails.Rows)
                {
                    if (iCounter == counter)
                    {
                        int i = 1;
                        foreach (DataRow grvNewReapyRow in dtRepaymentDetails.Rows)
                        {

                            if (iCounter == 1)
                            {
                                iCurAmt = Convert.ToDecimal(grvNewReapyRow["INSURANCE_AMT"].ToString());
                                iPrvAmt = iCurAmt;
                                iFromPeriod = 1;
                                iToPeriod = 1;
                            }
                            else
                            {
                                if (iCounter == i)
                                {
                                    iCurAmt = Convert.ToDecimal(grvNewReapyRow["INSURANCE_AMT"].ToString());
                                    if (iCurAmt != iPrvAmt)
                                    {
                                        goto L1;
                                    }
                                    else
                                    {
                                        iToPeriod = iToPeriod + 1;
                                    }
                                }
                                else
                                {
                                    goto L2;
                                }
                            }
                            iCounter = iCounter + 1;
                        L2: ++i;
                        }

                    L1: drRepayRow = dtRepaymentStructure.NewRow();
                        drRepayRow["slno"] = "1";
                        drRepayRow["Amount"] = dtRepaymentDetails.Rows[0]["INSURANCE_AMT"].ToString();
                        if (0 == 0)
                        {
                            drRepayRow["PerInstall"] = Math.Round(iPrvAmt, 2);
                        }
                        else
                        {
                            drRepayRow["PerInstall"] = iPrvAmt;
                        }
                        drRepayRow["Breakup"] = 0;
                        drRepayRow["FromInstall"] = iFromPeriod;
                        drRepayRow["ToInstall"] = iToPeriod;
                        if (dtRepaymentDetails.Rows.Count > 1)
                        {
                            if (counter < dtRepaymentDetails.Rows.Count)
                            {
                                drRepayRow["FromDate"] = dtRepaymentDetails.Rows[counter]["FromDate"].ToString();
                            }
                            else if (counter == dtRepaymentDetails.Rows.Count)
                                drRepayRow["FromDate"] = dtRepaymentDetails.Rows[counter - 1]["FromDate"].ToString();
                        }
                        else
                        {
                            drRepayRow["FromDate"] = dtRepaymentDetails.Rows[0]["FromDate"].ToString();
                        }

                        drRepayRow["ToDate"] = dtRepaymentDetails.Rows[iCounter - 2]["ToDate"].ToString();
                        int intTotalInstall = iToPeriod - iFromPeriod + 1;
                        if (0 == 0)
                        {
                            drRepayRow["TotalPeriodInstall"] = Math.Round(iPrvAmt, 2) * intTotalInstall;
                        }
                        else
                        {
                            drRepayRow["TotalPeriodInstall"] = iPrvAmt * intTotalInstall;
                        }
                        drRepayRow["CashFlow"] = strCashflowDesc;
                        drRepayRow["CashFlowId"] = intCashFlow;
                        drRepayRow["Accounting_IRR"] = blnAccountingIRR;
                        drRepayRow["Business_IRR"] = blnBusinessIRR;
                        drRepayRow["Company_IRR"] = blnCompanyIRR;
                        drRepayRow["CashFlow_Flag_ID"] = strCashFlowFlagId;//Insurance
                        dtRepaymentStructure.Rows.Add(drRepayRow);
                        iPrvAmt = iCurAmt;
                        iFromPeriod = iCounter;
                        iToPeriod = iCounter - 1;
                    }
                    ++counter;
                }

            }
            else
            {


                var query = (from row in dtRepaymentDetails.AsEnumerable()
                             group row by new
                             {
                                 InstallmentAmount = row.Field<decimal>("InstallmentAmount"),
                                 RecoveryYear = row.Field<string>("RecoveryYear")
                             } into grp

                             select new
                             {
                                 PerInstall = grp.Key.InstallmentAmount,
                                 Amount = grp.Select(r => r.Field<decimal>("Amount")),
                                 Breakup = 0,
                                 FromInstall = grp.Min(r => Convert.ToInt32(r.Field<string>("InstallmentNo"))),
                                 ToInstall = grp.Max(r => Convert.ToInt32(r.Field<string>("InstallmentNo"))),
                                 TotalPeriodInstall = grp.Sum(r => Convert.ToInt32(r.Field<decimal>("InstallmentAmount"))),
                                 FromDate = grp.Select(r => r.Field<string>("FromDate")),
                                 ToDate = grp.Select(r => r.Field<string>("ToDate"))

                             }).ToList();

                int SlNo = 0;
                foreach (var x in query)
                {
                    SlNo++;
                    drRepayRow = dtRepaymentStructure.NewRow();
                    drRepayRow["slno"] = SlNo.ToString();
                    drRepayRow["Amount"] = x.Amount.ToArray()[x.Amount.ToArray().Length - 1].ToString();
                    if (0 == 0)
                    {
                        drRepayRow["PerInstall"] = Convert.ToDecimal(((decimal)x.PerInstall).ToString("0.000"));
                    }
                    else
                    {
                        drRepayRow["PerInstall"] = x.PerInstall;
                    }
                    drRepayRow["Breakup"] = Convert.ToDecimal(x.Breakup);
                    drRepayRow["FromInstall"] = x.FromInstall.ToString();
                    drRepayRow["ToInstall"] = x.ToInstall.ToString();
                    drRepayRow["FromDate"] = x.ToDate.ToArray()[0].ToString();
                    drRepayRow["ToDate"] = x.ToDate.ToArray()[x.ToDate.ToArray().Length - 1].ToString();
                    drRepayRow["TotalPeriodInstall"] = x.TotalPeriodInstall;
                    drRepayRow["CashFlow"] = strCashflowDesc;
                    drRepayRow["CashFlowId"] = intCashFlow;
                    drRepayRow["Accounting_IRR"] = blnAccountingIRR;
                    drRepayRow["Business_IRR"] = blnBusinessIRR;
                    drRepayRow["Company_IRR"] = blnCompanyIRR;
                    drRepayRow["CashFlow_Flag_ID"] = 23;
                    dtRepaymentStructure.Rows.Add(drRepayRow);
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return dtRepaymentStructure;
    }
    private void FunPriInsertOutflowDealerComission()
    {
        try
        {
            DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
            TextBox txtDate_GridOutflow = gvOutFlow.FooterRow.FindControl("txtDate_GridOutflow") as TextBox;
            DropDownList ddlOutflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
            DropDownList ddlPaymentto_OutFlow = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
            //DropDownList ddlEntityName_OutFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_OutFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as UserControls_S3GAutoSuggest;
            TextBox txtAmount_Outflow = gvOutFlow.FooterRow.FindControl("txtAmount_Outflow") as TextBox;

            DataRow dr = DtCashFlowOut.NewRow();

            DataTable dt = ((DataSet)ViewState["OutflowDDL"]).Tables[2];
            DataRow[] dr2 = dt.Select("CASHFLOW_FLAG_ID=28");
            if (dr2.Length > 0)
            {
                DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                DataTable dtLoopEntity = new DataTable();
                dtLoopEntity = dsAssetDetails.DefaultView.ToTable(true, "Entity_ID", "Entity_Code");

                DataRow[] dr5 = DtCashFlowOut.Select("CASHFLOW_FLAG_ID=28");
                if (dr5.Length > 0)
                {
                    foreach (DataRow dr6 in dr5)
                    {
                        dr6.Delete();
                    }
                }
                DtCashFlowOut.AcceptChanges();
                string[] strArrayIds = dr2.CopyToDataTable().Rows[0]["CASHFLOW_ID"].ToString().Split(',');
                foreach (DataRow dr3 in dtLoopEntity.Rows)
                {


                    string strDealCommissionAmount = dsAssetDetails.Compute("sum(Dealer_Commission_Amount_1)", "Entity_ID='" + dr3["Entity_ID"].ToString() + "' and Dealer_Commission_Amount_1>0").ToString();

                    if (strDealCommissionAmount != string.Empty)
                    {

                        if (Convert.ToDecimal(strDealCommissionAmount) > 0)
                        {

                            string[] strCashFlowId = dr2.CopyToDataTable().Rows[0]["CashFlow_ID"].ToString().Split(',');
                            dr = DtCashFlowOut.NewRow();
                            dr["CashOutFlowID"] = strCashFlowId[0];
                            dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                            dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                            dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                            dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                            dr["CashFlow_Flag_ID"] = dr2.CopyToDataTable().Rows[0]["CASHFLOW_FLAG_ID"];
                            dr["CashOutFlow"] = dr2.CopyToDataTable().Rows[0]["CashFlow_Description"];
                            dr["OutflowFrom"] = "Entity";
                            dr["OutflowFromId"] = "145";
                            dr["EntityID"] = dr3["Entity_ID"].ToString();
                            dr["Entity"] = dr3["Entity_Code"].ToString();
                            dr["Amount"] = Convert.ToDecimal(strDealCommissionAmount).ToString(Funsetsuffix());
                            DtCashFlowOut.Rows.Add(dr);
                            ViewState["DtCashFlowOut"] = DtCashFlowOut;
                        }
                        else
                        {
                            ddlDealerCommissionApplicable.SelectedValue = "0";
                            ddlDealerCommissionApplicable_SelectedIndexChanged(null, null);
                        }
                    }
                }

                if (dsAssetDetails.Rows.Count > 0)
                {
                    txtDealerComissionAmount.Text = Convert.ToDecimal(dsAssetDetails.Compute("sum(Dealer_Commission_Amount_1)", "Dealer_Commission_Amount_1 is not null").ToString()).ToString(Funsetsuffix());
                    txtDealerComissionAmount.funPubChangeCurrencyFormat();
                }
            }
            else
            {
                // Utility.FunShowAlertMsg(this, "Dealer Commission Cashflow not Defined");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege32));
                return;
            }



        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriInsertOutflowInsurance()
    {
        try
        {

            DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];

            TextBox txtDate_GridOutflow = gvOutFlow.FooterRow.FindControl("txtDate_GridOutflow") as TextBox;
            DropDownList ddlOutflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
            DropDownList ddlPaymentto_OutFlow = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
            //DropDownList ddlEntityName_OutFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as DropDownList;
            UserControls_S3GAutoSuggest ddlEntityName_OutFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as UserControls_S3GAutoSuggest;
            TextBox txtAmount_Outflow = gvOutFlow.FooterRow.FindControl("txtAmount_Outflow") as TextBox;
            HiddenField hdnCustomerId = ucCustomerCodeLov.FindControl("hdnID") as HiddenField;
            //regin LIC to Customer
            #region
            //DataTable dt2 = ((DataSet)ViewState["OutflowDDL"]).Tables[2];
            //DataRow[] dr3 = dt2.Select("CASHFLOW_FLAG_ID=108");//Insurance Amount
            //if (dr3.Length > 0)
            //{
            //    if (txtLifeInsuranceCompanyAmount.Text != string.Empty)
            //    {
            //        string[] strCashFlowId = dr3.CopyToDataTable().Rows[0]["CashFlow_ID"].ToString().Split(',');
            //        dr["CashOutFlowID"] = strCashFlowId[0];
            //        dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
            //        dr["Accounting_IRR"] = Convert.ToBoolean(0);
            //        dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(0));
            //        dr["Company_IRR"] = Convert.ToBoolean(0);
            //        dr["CashFlow_Flag_ID"] = dr3.CopyToDataTable().Rows[0]["CASHFLOW_FLAG_ID"];
            //        dr["CashOutFlow"] = dr3.CopyToDataTable().Rows[0]["CashFlow_Description"];
            //        dr["OutflowFrom"] = "Entity";
            //        dr["OutflowFromId"] = "145";
            //        dr["EntityID"] = ddlDealerName.SelectedValue;
            //        dr["Entity"] = ddlDealerName.SelectedText;
            //        dr["Amount"] = Convert.ToDecimal(txtLifeInsuranceCompanyAmount.Text);
            //        DtCashFlowOut.Rows.Add(dr);
            //        ViewState["DtCashFlowOut"] = DtCashFlowOut;
            //    }
            //}
            //else
            //{
            //    Utility.FunShowAlertMsg(this, "Life Insurance Company Cashflow not Defined against Application Process");
            //    return;
            //}
            #endregion


            //regin LIC to Company
            #region
            DataRow[] dr5 = DtCashFlowOut.Select("CASHFLOW_FLAG_ID=109");
            if (dr5.Length > 0)
            {
                foreach (DataRow dr6 in dr5)
                {
                    dr6.Delete();
                }
            }
            DtCashFlowOut.AcceptChanges();
            //string[] strArrayIds = ddlOutflowDesc.SelectedValue.Split(',');
            DataTable dt = ((DataSet)ViewState["OutflowDDL"]).Tables[2];
            DataRow[] dr2 = dt.Select("CASHFLOW_FLAG_ID=109");//Insurance Amount
            DataRow dr = DtCashFlowOut.NewRow();
            //DataRow d5 = DtCashFlowOut.NewRow();
            string[] strArrayIds = dr2.CopyToDataTable().Rows[0]["CASHFLOW_ID"].ToString().Split(',');
            if (dr2.Length > 0)
            {
                if (txtLifeInsuranceCompanyAmount.Text != string.Empty)
                {
                    string[] strCashFlowId = dr2.CopyToDataTable().Rows[0]["CashFlow_ID"].ToString().Split(',');
                    dr["CashOutFlowID"] = strCashFlowId[0];
                    dr["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                    dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                    dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                    dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                    dr["CashFlow_Flag_ID"] = dr2.CopyToDataTable().Rows[0]["CASHFLOW_FLAG_ID"];
                    dr["CashOutFlow"] = dr2.CopyToDataTable().Rows[0]["CashFlow_Description"];
                    dr["OutflowFrom"] = "Entity";
                    dr["OutflowFromId"] = "145";
                    dr["EntityID"] = ddlLifeInsuranceEntity.SelectedValue;
                    dr["Entity"] = ddlLifeInsuranceEntity.SelectedText;
                    dr["Amount"] = Convert.ToDecimal(txtLifeInsuranceCompanyAmount.Text).ToString(Funsetsuffix());
                    DtCashFlowOut.Rows.Add(dr);
                    ViewState["DtCashFlowOut"] = DtCashFlowOut;
                }
            }
            else
            {
                // Utility.FunShowAlertMsg(this, "Life Insurance Company Cashflow not Defined against Application Process");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege33));
                return;
            }


            /// Added By Boobalan M on 26-Jun-2021 
            if (Convert.ToDecimal(txtInsuranceCompanyTaxAmount.Text) > 0)
            {
                DataTable dt1 = ((DataSet)ViewState["OutflowDDL"]).Tables[2];
                DataRow[] dr3 = dt1.Select("CASHFLOW_FLAG_ID=534");// VAT Payable
                DataRow drNew = DtCashFlowOut.NewRow();
                //DataRow d5 = DtCashFlowOut.NewRow();
                strArrayIds = null;
                strArrayIds = dr3.CopyToDataTable().Rows[0]["CASHFLOW_ID"].ToString().Split(',');
                if (dr2.Length > 0)
                {
                    if (txtLifeInsuranceCompanyAmount.Text != string.Empty)
                    {
                        string[] strCashFlowId = dr3.CopyToDataTable().Rows[0]["CashFlow_ID"].ToString().Split(',');
                        drNew["CashOutFlowID"] = strCashFlowId[0];
                        drNew["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                        drNew["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                        drNew["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                        drNew["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                        drNew["CashFlow_Flag_ID"] = dr3.CopyToDataTable().Rows[0]["CASHFLOW_FLAG_ID"];
                        drNew["CashOutFlow"] = dr3.CopyToDataTable().Rows[0]["CashFlow_Description"];
                        drNew["OutflowFrom"] = "Entity";
                        drNew["OutflowFromId"] = "145";
                        drNew["EntityID"] = ddlLifeInsuranceEntity.SelectedValue;
                        drNew["Entity"] = ddlLifeInsuranceEntity.SelectedText;
                        drNew["Amount"] = Convert.ToDecimal(txtInsuranceCompanyTaxAmount.Text).ToString(Funsetsuffix());
                        DtCashFlowOut.Rows.Add(drNew);
                        ViewState["DtCashFlowOut"] = DtCashFlowOut;
                    }


                }
                else
                {
                    Utility.FunShowAlertMsg(this, "Define the VAT Payable Cash OutFlow in Cashflow Master");
                    // Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege33));
                    return;
                }
            }
            #endregion
            funPerAutoLoadoutflowfromChecklist(false);
            FunProBindCashFlow();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunRepayClear(string StrErrorMsg)
    {
        try
        {
            grvRepayStructure.DataSource = null;
            grvRepayStructure.DataBind();
            ViewState["RepaymentStructure"] = null;

            txtAccountIRR_Repay.Text = "";
            txtAccountingIRR.Text = "";
            txtBusinessIRR_Repay.Text = "";
            txtBusinessIRR.Text = "";
            txtCompanyIRR_Repay.Text = "";
            txtCompanyIRR.Text = "";
            if (StrErrorMsg != "")
                Utility.FunShowAlertMsg(this, StrErrorMsg);
            ///Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege34));
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    #endregion



    #region Events

    #region Page Event

    //protected new void Page_PreInit(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        FunPriInitializePage();
    //    }
    //    catch (Exception objException)
    //    {
    //        if (Request.QueryString["Popup"] != null)
    //        {
    //            throw objException;
    //        }
    //        else
    //        {
    //            cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix +  "Unable to Initialise the Controls in Page";
    //            cvApplicationProcessing.IsValid = false;
    //        }
    //    }
    //}

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            // WF Initializtion 
            ProgramCode = "038";
            obj_Page = this;




            if (!IsPostBack)
            {
                Session["PricingAssetDetails"] = null;
            }

            FunPriLoadPage();

            ucCustomerCodeLov.strControlID = ucCustomerCodeLov.ClientID.ToString();
            TextBox txtUserName = ((TextBox)ucCustomerCodeLov.FindControl("txtName"));
            txtUserName.ToolTip = txtUserName.Text;

            //txtValidTo_MLA.Attributes.Add("onblur", "fnDoDate(this,'" + txtValidTo_MLA.ClientID + "','" + strDateFormat + "',false,'F');");
            //Code Added by Saranya for Customer Changes
            if (gvGuarantor.FooterRow != null)
            {
                UserControls_CommonSearch ucCustomerLov = gvGuarantor.FooterRow.FindControl("ucCustomerLov") as UserControls_CommonSearch;
                DropDownList ddlGuarantortype_GuarantorTab1 = gvGuarantor.FooterRow.FindControl("ddlGuarantortype_GuarantorTab") as DropDownList;
                TextBox txtName = ucCustomerLov.FindControl("txtName") as TextBox;
                txtName.ToolTip = "Guarantor";
                if (ddlGuarantortype_GuarantorTab1.SelectedIndex > 0)
                {
                    if (ddlGuarantortype_GuarantorTab1.SelectedItem.Text.StartsWith("G") && ddlGuarantortype_GuarantorTab1.SelectedItem.Text.EndsWith("1"))
                    {
                        ucCustomerLov.strLOV_Code = "CUS_GCMD";
                    }
                    else if (ddlGuarantortype_GuarantorTab1.SelectedItem.Text.Contains("G") && ddlGuarantortype_GuarantorTab1.SelectedItem.Text.Contains("2"))
                    {
                        ucCustomerLov.strLOV_Code = "CUS_PCMD";
                    }
                    else
                    {
                        //For Co-Applicant
                        ucCustomerLov.strLOV_Code = "CUS_COAP";
                    }

                }
                else
                {
                    ucCustomerLov.strLOV_Code = "CUS_CMD";

                }
                //ucCustomerLov.strControlID = ucCustomerLov.ClientID;
                //TextBox txt1 = (TextBox)ucCustomerLov.FindControl("txtName");
                //txt1.Attributes.Add("onfocus", "fnLoadCustomerg()");


                ucCustomerLov.strControlID = ucCustomerLov.ClientID;
                TextBox txtCustItemNumberGuar = ((TextBox)ucCustomerLov.FindControl("txtItemName"));
                txtCustItemNumberGuar.Attributes.Add("onfocus", "fnLoadCustomerg()");
                txtCustItemNumberGuar.Style["display"] = "block";
                txtCustItemNumberGuar.Width = 0;
                txtCustItemNumberGuar.TabIndex = -1;
                txtCustItemNumberGuar.BorderStyle = BorderStyle.None;


                //end


                if (ddlLOB.SelectedValue == "1" || ddlLOB.SelectedValue == "2" || ddlLOB.SelectedValue == "3" || ddlLOB.SelectedValue == "7")//HP-V,NV,HP,TL,CC
                {
                    ucCustomerCodeLov.strLOV_Code = "CUS_HPV";
                }
                else if (ddlLOB.SelectedValue == "4" || ddlLOB.SelectedValue == "5")
                {
                    ucCustomerLovFWC.strLOV_Code = "CUS_CLIENTFACAPR";
                }
                else if (ddlLOB.SelectedValue == "6")//TL
                {
                    ucCustomerCodeLov.strLOV_Code = "CUS_TLCLIENT";


                }

            }
            if (grvCustSubLimit.FooterRow != null)
            {
                //UserControls_LOBMasterView ucCustomerLov = grvCustSubLimit.FooterRow.FindControl("ucCustomerLov") as UserControls_LOBMasterView;
                //DropDownList ddlGuarantortype_GuarantorTab1 = grvCustSubLimit.FooterRow.FindControl("ddlGuarantortype_GuarantorTab") as DropDownList;
                //ucCustomerLov.strControlID = ucCustomerLov.ClientID;
                //TextBox txt1 = (TextBox)ucCustomerLov.FindControl("txtName");
                //txt1.Attributes.Add("onfocus", "fnLoadCustomerSubLimit()");

                //UserControls_CommonSearch ucCustomerLovCustomerMapFWC = grvCustSubLimit.FooterRow.FindControl("ucCustomerLovCustomerMapFWC") as UserControls_CommonSearch;
                //ucCustomerLovCustomerMapFWC.strControlID = ucCustomerLovCustomerMapFWC.ClientID.ToString();
                //TextBox txtItemName = ((TextBox)ucCustomerLovCustomerMapFWC.FindControl("txtItemName"));
                //txtItemName.Attributes.Add("onfocus", "fnLoadCustomerSubLimit()");
                //txtItemName.Width = 0;
                //txtItemName.TabIndex = -1;
                //txtItemName.BorderStyle = BorderStyle.None;


            }


            funPriSetAutoFillControlBehaviour();






        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    #endregion

    #region Button Events

    #region Common Control


    private void funPriSetAutoFillControlBehaviour()
    {
        //Sathish R--13-Nov-2018

        TextBox txtItemNameddlSalePersonCodeList = ((TextBox)ddlSalePersonCodeList.FindControl("txtItemName"));
        txtItemNameddlSalePersonCodeList.Attributes.Add("onchange", "fnTrashSuggest('" + ddlSalePersonCodeList.ClientID + "')");

        TextBox txtItemNameddlDealerName = ((TextBox)ddlDealerName.FindControl("txtItemName"));
        txtItemNameddlDealerName.Attributes.Add("onchange", "fnTrashSuggest('" + ddlDealerName.ClientID + "')");

        TextBox txtItemNameddldealerSalesPerson = ((TextBox)ddldealerSalesPerson.FindControl("txtItemName"));
        txtItemNameddldealerSalesPerson.Attributes.Add("onchange", "fnTrashSuggest('" + ddldealerSalesPerson.ClientID + "')");


        TextBox txtItemNameddldc = ((TextBox)ddldc.FindControl("txtItemName"));
        txtItemNameddldc.Attributes.Add("onchange", "fnTrashSuggest('" + ddldc.ClientID + "')");

        TextBox txtItemNameddlLeadSourceName = ((TextBox)ddlLeadSourceName.FindControl("txtItemName"));
        txtItemNameddlLeadSourceName.Attributes.Add("onchange", "fnTrashSuggest('" + ddlLeadSourceName.ClientID + "')");

        TextBox txtIddlLienAccount = ((TextBox)ddlLienAccount.FindControl("txtItemName"));
        txtIddlLienAccount.Attributes.Add("onchange", "fnTrashSuggest('" + ddlLienAccount.ClientID + "')");

        TextBox txtDealTransfer = ((TextBox)ddldealTrasPanum.FindControl("txtItemName"));
        txtDealTransfer.Attributes.Add("onchange", "fnTrashSuggest('" + ddldealTrasPanum.ClientID + "')");





        TextBox ucCustomerCodeLov2 = ((TextBox)ucCustomerCodeLov.FindControl("TxtName"));
        ucCustomerCodeLov2.Attributes.Add("onchange", "fnTrashCommonSuggest('" + ucCustomerCodeLov.ClientID + "');");

        //TextBox ucDealTransferAccountLov2 = ((TextBox)ucDealTransferAccountLov.FindControl("TxtName"));
        //ucDealTransferAccountLov2.Attributes.Add("onchange", "fnTrashCommonSuggest('" + ucDealTransferAccountLov.ClientID + "');");







    }

    protected void btnClear_OnClick(object sender, EventArgs e)
    {
        try
        {
            HttpContext.Current.Session.Remove("DealerId");
            HttpContext.Current.Session.Remove("DealerName");

            FunPriClearPage();
            funPriClearCustomerHoverInfo();

            //TextBox TxtName = ((TextBox)ddlApplicationNo.FindControl("TxtName"));
            //Button btnGetLOV = ((Button)ddlApplicationNo.FindControl("btnGetLOV"));
            //TxtName.Enabled = true;
            //btnGetLOV.Enabled = true;
            funPrishowProposalfromChecklistControls(false);
            ddlLOB.Enabled = true;
            ddlApplicationNo.Enabled = true;
            ddlStartDelayChargesApplicable_SelectedIndexChanged(null, null);
            ddlStartDelayChargesApplicable.SelectedValue = "0";
            ddlExistenceofFirstCharge.SelectedValue = "0";
            ddlExistenceofsecondcharge.SelectedValue = "0";
            btnCreateCustomer.Attributes.Remove("disabled");
            btnCreateCustomer.Attributes.Add("class", "btn_control");  // enab
            cmbSubLocationFWC.ClearSelection();
            ucCustomerLovCustomerMapFWC.Clear();
            txtLimitF.Text = string.Empty;

            ddlLifeInsurance_SelectedIndexChanged(null, null);

            HiddenField hdnCID2 = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
            HiddenField hdnCID = (HiddenField)ucCustomerLovCustomerMapFWC.FindControl("hdnID");
            hdnCID2.Value = "0";
            hdnCID.Value = "0";

            grvTransferDeal.DataSource = null;
            grvTransferDeal.DataBind();
            ViewState["DealTransfer"] = null;
            ddldealTrasPanum.Clear();
            ddlDealTransfer_SelectedIndexChanged(null, null);


            ViewState["CUST_SUBLIMIT"] = null;
            grvCustSubLimit.DataSource = null;
            grvCustSubLimit.DataBind();

            funPriTotalSubLimit();
            if (ddlBranchList.SelectedValue != "0" && ddlBranchList.SelectedValue != "")
            {
                ddlApplicationNo.Enabled = false;
            }
            else
            {
                ddlApplicationNo.Enabled = true;
            }

            if (ddlBranchListFWC.SelectedValue != "0" && ddlBranchListFWC.SelectedValue != "")
            {
                ddlApplicationNo.Enabled = false;
            }
            else
            {
                ddlApplicationNo.Enabled = true;
            }
            ddldealerSalesPerson.Clear();
            txtAMLClasification.Text = string.Empty;
            txtTotalAssetCount.Text = string.Empty;
            txtTotalAssetCost.Text = string.Empty;
            txtTotalFinanceAmount.Text = string.Empty;
            ddlLOB.ClearSelection();
            funPriShowHideMainTabInfo();
            btnViewCustomer.Attributes.Remove("onclick");
            btnViewClient.Attributes.Remove("onclick");
            ddlCovenantsClause.ClearSelection();
            txtCovenantTerms.Text = string.Empty;
            ViewState["NEGATIVELIST_CUSTOMER"] = null;

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>

    private decimal FunPriGetInterestAmountUMCVal()
    {
        /*decimal decFinAmount = FunPriGetAmountFinanced();
        decimal decRate = 0;

        switch (ddl_Return_Pattern.SelectedValue)
        {
            case "1":
                decRate = Convert.ToDecimal(txtRate.Text);
                break;
            case "2":
                if (ViewState["decRate"] != null)
                {
                    decRate = Convert.ToDecimal(ViewState["decRate"].ToString());
                }
                break;
        }
        string strLOB = ddlLob.SelectedItem.Text.Split('-')[0].ToString().Trim().ToLower();
        switch (strLOB)
        {
            case "tl":
            case "te":
                if (ddl_Repayment_Mode.SelectedValue == "5")
                {
                    decRate = 0;
                }
                break;
            case "ft":
            case "wc":
                decRate = 0;
                break;
        }

        return Math.Round(S3GBusEntity.CommonS3GBusLogic.FunPubInterestAmount(ddlTenureType.SelectedItem.Text.ToLower(), decFinAmount, decRate, int.Parse(txtTenure.Text)), 0);
         */


        decimal decFinAmount = FunPriGetAmountFinanced();
        decimal decUMFC = 0;

        try
        {
            if (!string.IsNullOrEmpty(lblTotalAmountData.Text))
            {
                //string strTotalAmount = (lblTotalAmountData.Text.Split(':').Length > 1) ? lblTotalAmountData.Text.Split(':')[1].Trim() : "";
                string strTotalAmount = lblTotalAmountData.Text;
                if (strTotalAmount != "")
                {
                    decimal decTotalRepayable = Convert.ToDecimal(strTotalAmount);
                    decUMFC = decTotalRepayable - Math.Round(decFinAmount, 3);
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return decUMFC;
    }
    protected void btnSave_OnClick(object sender, EventArgs e)
    {
        try
        {
            HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            if (strMode != "Q")
            {
                if (ddlLOB_SelectedItem_Text.Value.ToUpper() == "HP" || ddlLOB_SelectedItem_Text.Value.ToUpper() == "TL")
                {
                    if (funPriCheckCreditLimit(1, hdnCID.Value))
                    {
                        return;
                    }
                }
                else
                {
                    HiddenField hdnCID2 = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
                    if (funPriCheckCreditLimit(1, hdnCID2.Value))
                    {
                        return;
                    }
                }
            }
            if (ViewState["CUSTOMER_TYPE_ID"] != null)
            {
                if (ViewState["CUSTOMER_TYPE_ID"].ToString() == "1")
                {
                    if (!funPriChecCustomerAge())
                    {
                        return;
                    }
                }
            }
            if (ViewState["CUSTOMER_TYPE_ID"] != null)
            {
                if (FunPriValidateDeDuplCustomerDet(Convert.ToInt32(hdnCID.Value), ViewState["CUSTOMER_TYPE_ID"].ToString(), ViewState["NID_CR_RID_NUMBER"].ToString(), ViewState["PASSPORT_NUMBER"].ToString(), ViewState["NRID_NUMBER"].ToString(), "", ViewState["DATEOFBIRTH"].ToString(), ViewState["CUSTOMER_NAME"].ToString()))
                {
                    return;
                }
            }


            if (ViewState["NEGATIVELIST_CUSTOMER"] != null)
            {
                if (ViewState["NEGATIVELIST_CUSTOMER"].ToString() == "1")
                {
                    Utility.FunShowAlertMsg(this, "Customer Black Listed not allowed to Create the Application");
                    return;
                }
            }
            if (ddlLOB_SelectedItem_Text.Value.ToUpper() == "FT")
            {
                if (ViewState["FactoringLimitExpired"] != null)
                {
                    if (ViewState["FactoringLimitExpired"].ToString() == "1")
                    {
                        Utility.FunShowAlertMsg(this, "Factoring Limit Expired");
                    }
                }
            }

            if (ddlLOB_SelectedItem_Text.Value.ToUpper() == "HP")
            {
                //if (txtRate.Text != "0")
                if (hdnRate.Value != "0")
                {
                    if (txtFloorRate.Text != string.Empty)
                    {
                        //if (Convert.ToDecimal(txtRate.Text) < Convert.ToDecimal(txtFloorRate.Text))
                        if (Convert.ToDecimal(hdnRate.Value) < Convert.ToDecimal(txtFloorRate.Text))
                        {
                            //if (ViewState["FLR_RT"].ToString() == "0")
                            //{

                            //    Utility.FunShowAlertMsg(this, "Roi Rate should greater than or equal to Floor Rate (" + txtFloorRate.Text + ")");
                            //    return;
                            //}
                            //else
                            //{
                            //    Utility.FunShowAlertMsg(this, "Roi Rate should greater than or equal to Floor Rate (" + txtFloorRate.Text + ")");

                            //}
                        }
                    }
                }


                DataTable dtCheckManuYr = (DataTable)Session["PricingAssetDetails"];
                if (dtCheckManuYr != null)
                {
                    DataRow[] dr = dtCheckManuYr.Select("MANUFACTORING_YEAR IS NULL");
                    if (dr.Length > 0)
                    {
                        Utility.FunShowAlertMsg(this, "Enter the Manufacturing Year in Asset Tab");
                        return;
                    }
                }

            }

            #region Validation
            #region Entity/Customer ID Check for Asset
            DataTable dtast = (DataTable)Session["PricingAssetDetails"];
            if (dtast != null)
            {
                bool exists = dtast.Select().ToList().Exists(row => row["Pay_To_ID"].ToString() == "0");
                if (exists == true)
                {
                    // Utility.FunShowAlertMsg(this, "Please Select Entity/Customer id from Asset Details");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege35));
                    return;
                }
            }
            #endregion

            #region Round No

            if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("FT"))
            {
                DataTable dt = (DataTable)ViewState["FACCharge"];

                DataRow[] dr2 = dt.Select("Cashflow_Flag_Id=501 and ChargeSequence_id=3");//Service Charge
                if (dr2.Length == 0)
                {
                    Utility.FunShowAlertMsg(this, "Add the Service Charges Per Invoice in Offer Terms Tab");
                    return;
                }


                DataRow[] dr = dt.Select("Cashflow_Flag_Id=36");//Cheq Charges
                if (dr.Length == 0)
                {
                    Utility.FunShowAlertMsg(this, "Add the Cheque Return Charges in Offer Terms Tab");
                    return;
                }

                // Commentted By : Anbuvel.T , Date : 14-MAR-2020 , Description : Due To Narien Confirmation Mail on 13 March 2020 12:28 AM for Factoring Sign Off
                //if (Convert.ToDecimal(txtDebtPurchaseLimitFWC.Text) > Convert.ToDecimal(txtTotalSubLimit.Text))
                //{
                //    Utility.FunShowAlertMsg(this, "Debt Purchase limit should be less than or Equal to Cumulative Sub limit");
                //    return;
                //}
            }

            if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("FT"))
            {
                DataTable dt = (DataTable)ViewState["DiscountRateUtilization"];
                if (dt.Rows.Count == 0)
                {
                    Utility.FunShowAlertMsg(this, "Add at least one row in Discount Rate Grid in Offer Terms Tab");
                    return;
                }

                DataRow[] drDiscountrate = dt.Select("Sno=-1");
                if (drDiscountrate.Length > 0 && dt.Rows.Count == 1)
                {
                    Utility.FunShowAlertMsg(this, "Add at least one row in Discount Rate Tab");
                    return;
                }
            }


            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("FT") && !ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL") && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "TERM LOAN")
            {




                if (ViewState["DtCashFlowOut"] != null)
                {
                    if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count == 0)
                    {
                        FunPriShowScriptManager("Cash Outflow details", "Add atleast one Outflow details");
                        return;
                    }
                }

                ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                if (ViewState["DtCashFlow"] != null)
                {

                    if (((DataTable)ViewState["DtCashFlow"]).Rows.Count > 0)
                    {
                        decimal decUMFC = (decimal)((DataTable)ViewState["DtCashFlow"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 34");

                        if (ddlLifeInsurance.SelectedValue == "2")
                        {
                            if (string.IsNullOrEmpty(txtLifeInsuranceCustomerPremiumAmount.Text))
                                txtLifeInsuranceCustomerPremiumAmount.Text = "0";

                            decimal decInterestAmount = FunPriGetInterestAmountUMCVal() - Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text);


                            if (decUMFC != decInterestAmount)
                            {
                                //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Unmatured Finance Charges (UMFC) should be equal to Interest";
                                //cvApplicationProcessing.IsValid = false;
                                //Utility.FunShowAlertMsg(this, "Unmatured Finance Charges (UMFC) should be equal to Interest");
                                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege36));
                                return;
                            }
                        }
                        else
                        {

                            if (decUMFC != FunPriGetInterestAmountUMCVal())
                            {
                                //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Unmatured Finance Charges (UMFC) should be equal to Interest";
                                //cvApplicationProcessing.IsValid = false;
                                //Utility.FunShowAlertMsg(this, "Unmatured Finance Charges (UMFC) should be equal to Interest");
                                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege36));
                                return;
                            }
                        }
                    }
                    else
                    {
                        //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Recalculate IRR ";
                        //cvApplicationProcessing.IsValid = false;

                        //Utility.FunShowAlertMsg(this, "Recalculate IRR");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege37));
                        return;
                    }

                }
            }
            //return;
            #endregion

            #region Cashflow
            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL") && !ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("FT") && !ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("WC"))
            {
                if (ViewState["DtCashFlowOut"] != null)
                {
                    if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count == 0)
                    {
                        FunPriShowScriptManager("Cash Outflow details", "Add atleast one Outflow details");
                        return;
                    }
                }

                if (FunPriPaymentRuleValidation())
                {
                    return;
                }
                if (ViewState["DtCashFlowOut"] != null)
                {
                    DataRow[] drFinanAmtRow = ((DataTable)ViewState["DtCashFlowOut"]).Select("CashFlow_Flag_ID = 41");
                    if (drFinanAmtRow.Length > 0)
                    {
                        decimal decToatlFinanceAmt = (decimal)((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 41");

                        if (Convert.ToDecimal(txtFinanceAmount.Text) != decToatlFinanceAmt)
                        {
                            //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Total amount financed in Cashoutflow should be equal to amount financed";
                            //cvApplicationProcessing.IsValid = false;
                            //Utility.FunShowAlertMsg(this, "Total amount financed in Cashoutflow should be equal to amount financed");
                            Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege38));
                            return;
                        }
                    }
                    else
                    {
                        //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Payment Cashflow Description not available in Outflow Details";
                        //cvApplicationProcessing.IsValid = false;
                        //Utility.FunShowAlertMsg(this, "Payment Cashflow Description not available in Outflow Details");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege39));
                        return;
                    }
                }
            }

            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL") && !ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("FT") && !ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("WC"))
            {
                DataRow[] drMarginAmountRow = ((DataTable)ViewState["DtCashFlowOut"]).Select("CashFlow_Flag_ID = 43");
                DataRow[] drMarginAmountinflowRow = ((DataTable)ViewState["DtCashFlow"]).Select("CashFlow_Flag_ID = 43"); //To Check margin Amount in inflow
                if (drMarginAmountRow.Length > 0)
                {
                    decimal decToatlMarginAmt = (decimal)((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 43");



                    if (txtMarginAmount.Text == "")
                    {
                        //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Enter the Margin Amount in Asset(s)";
                        //cvApplicationProcessing.IsValid = false;
                        // Utility.FunShowAlertMsg(this, "Enter the Margin Amount in Asset(s)");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege40));
                        return;
                    }
                    if (drMarginAmountinflowRow.Length > 0)
                    {
                        decimal decTotinflowMarginAmt = (decimal)((DataTable)ViewState["DtCashFlow"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 43");//To Get Margin Amount in inflow
                        if (decTotinflowMarginAmt < decToatlMarginAmt)
                        {
                            //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Total Margin Amount in Outflow should be less or equal to Margin Amount in Inflow";
                            //cvApplicationProcessing.IsValid = false;

                            //Utility.FunShowAlertMsg(this, "Total Margin Amount in Outflow should be less or equal to Margin Amount in Inflow");
                            Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege41));
                            return;
                        }
                    }
                }
            }
            #endregion

            #region Repayment
            //added by saranya
            //if (!ddlLOB.SelectedItem.Text.ToUpper().StartsWith("TE") && ddl_Repayment_Mode.SelectedValue != "5")
            //{
            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("FT") && !ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("WC"))
            {
                if (ViewState["DtRepayGrid"] != null)
                {
                    if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
                    {
                        FunPriShowScriptManager("Repayment details", "Add atleast one Repayment details");

                        return;
                    }
                }
            }
            //}
            #endregion

            #region Guarantor
            if (ViewState["dtGuarantorGrid"] != null)
            {
                DataTable dtGuarantor = ViewState["dtGuarantorGrid"] as DataTable;
                HiddenField hdnCustomerId = ucCustomerCodeLov.FindControl("hdnID") as HiddenField;
                if (hdnCustomerId.Value == "")
                {
                    hdnCustomerId.Value = Convert.ToString(ViewState["GuarantorCustomer"]);
                }
                if (hdnCustomerId.Value != string.Empty)
                {
                    DataRow[] drCustomerGuarantor = dtGuarantor.Select("Code = " + hdnCustomerId.Value);
                    if (drCustomerGuarantor.Length > 0)
                    {
                        FunPriShowScriptManager("Guarantor details", "Guarantor should be other than customer");
                        return;
                    }
                }


            }

            #endregion

            #region Non-Mandatory discussed with sudarsan
            //#region Alert
            //if (((DataTable)ViewState["DtAlertDetails"]).Rows.Count == 0)
            //{
            //    FunPriShowScriptManager("Alert details", "Add atleast one Alert details");

            //    return;
            //}
            //#endregion

            //#region Followup
            //if (((DataTable)ViewState["DtFollowUp"]).Rows.Count == 0)
            //{
            //    FunPriShowScriptManager("FollowUp details", "Add atleast one Follow up details");

            //    return;
            //}
            #endregion

            #endregion

            if (strMode != "Q")
            {
                //if (chk_lblMargin.Visible == true) 
                //{
                //    if (chk_lblMargin.Checked)
                //    {
                if (chk_lblMargin.Visible == true && chk_lblMargin.Checked)
                {
                    if (((!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("FT")) && (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("WC")) && (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL"))))
                    {
                        if (gvAssetDetails.Rows.Count <= 0)
                        {
                            //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Asset is Mandatory, If Margin is applicable";
                            //cvApplicationProcessing.IsValid = false;
                            //Utility.FunShowAlertMsg(this, "Asset is Mandatory, If Margin is applicable");
                            Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege42));
                            return;
                            //blnIsValid = false;
                            //return
                            //  Utility.FunShowAlertMsg(this, "Asset is Mandatory, If margin is applicaple ");
                            //  return;
                        }
                    }
                }
                if (!FunPriValidatePage())
                {
                    return;
                }

            }
            //added by saranya
            //if (!ddlLOB.SelectedItem.Text.ToUpper().StartsWith("TE") && ddl_Repayment_Mode.SelectedValue != "5")
            //{
            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("FT") && !ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("WC"))
            {
                if (txtAccountIRR_Repay.Text == "" || txtBusinessIRR_Repay.Text == "" || txtCompanyIRR_Repay.Text == "")
                {
                    FunPriIRRReset();
                    //cvApplicationProcessing.IsValid = false;
                    //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Recalculate IRR ";

                    //Utility.FunShowAlertMsg(this, "Recalculate IRR");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege43));
                    return;

                }
            }
            //}

            FunPriSaveRecord();
        }
        catch (ApplicationException ex)
        {
            cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + ex.Message;
            cvApplicationProcessing.IsValid = false;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private bool FunIsDeferredStructPayment()
    {


        bool blnResult = false;

        try
        {
            DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
            dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";

            if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper() == "DEFERRED STRUCTURED")
            {
                if (!string.IsNullOrEmpty(Convert.ToString(((DataTable)ViewState["DtCashFlowOut"]).Compute("Count(CashFlow_Flag_ID)", "CashFlow_Flag_ID = 41"))))
                {
                    Int32 IntTotalOutflow = (Int32)((DataTable)ViewState["DtCashFlowOut"]).Compute("Count(CashFlow_Flag_ID)", "CashFlow_Flag_ID = 41");
                    if (IntTotalOutflow <= 1)
                    {
                        //Utility.FunShowAlertMsg(this, "Cash Outflow should be More than one for Deferred Structured");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege44));
                        blnResult = true;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

        return blnResult;
    }

    private bool FunPriPaymentRuleValidation()
    {
        bool blnResult = false;

        try
        {
            DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
            dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";
            DataTable dtOutflow = (DataTable)ViewState["DtCashFlowOut"];
            DataRow[] drOutflowDate;

            drOutflowDate = dtOutflow.Select("CashFlow_Flag_ID = 41 and Date < #" + Utility.StringToDate(txtApplicationDateDate.Text) + "#");
            if (drOutflowDate.Length > 0)
            {
                //Utility.FunShowAlertMsg(this, "Outflow date should be greater than or equal to Application date");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege45));
                blnResult = true;
            }

            if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().ToUpper() == "DEFERRED PAYMENT")
            {
                drOutflowDate = dtOutflow.Select("CashFlow_Flag_ID = 41 and Date <= #" + Utility.StringToDate(txtApplicationDateDate.Text) + "#");
                if (drOutflowDate.Length > 0)
                {
                    //Utility.FunShowAlertMsg(this, "Outflow date should be greater than Application date for Deferred Payment");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege46));
                    blnResult = true;
                }

                drOutflowDate = dtOutflow.Select("CashFlow_Flag_ID = 41 and Date <= #" + Utility.StringToDate(txtApplicationDateDate.Text) + "#");
                if (drOutflowDate.Length > 0)
                {
                    //Utility.FunShowAlertMsg(this, "Outflow date should be greater than Application date for Deferred Payment");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege47));
                    blnResult = true;
                }

            }
            if (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().ToUpper() == "TRADE ADVANCE" ||
                dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().ToUpper() == "NORMAL PAYMENT")
            {
                drOutflowDate = dtOutflow.Select("CashFlow_Flag_ID = 41 and Date <> #" + Utility.StringToDate(txtApplicationDateDate.Text) + "#");
                if (drOutflowDate.Length > 0)
                {
                    //Utility.FunShowAlertMsg(this, "Outflow date should be equal to Application date for Normal Payment/Trade Advance");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege48));
                    blnResult = true;
                }
            }
            if ((dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper() == "DEFERRED STRUCTURED") ||
                (dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper() == "PROJECT FINANCE"))
            {
                if (!string.IsNullOrEmpty(Convert.ToString(((DataTable)ViewState["DtCashFlowOut"]).Compute("Count(CashFlow_Flag_ID)", "CashFlow_Flag_ID = 41"))))
                {
                    Int32 IntTotalOutflow = (Int32)((DataTable)ViewState["DtCashFlowOut"]).Compute("Count(CashFlow_Flag_ID)", "CashFlow_Flag_ID = 41");
                    if (IntTotalOutflow <= 1)
                    {
                        //Utility.FunShowAlertMsg(this, "Cash Outflow should be More than one for Deferred Structured/Project finance");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege49));
                        blnResult = true;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return blnResult;

    }




    protected void btnCancel_Click(object sender, EventArgs e)
    {
        try
        {
            if (Request.QueryString["qsCRMID"] != null)
            {
                //ScriptManager.RegisterStartupScript(this, this.GetType(), "Popup", "window.close();", true);
                //ScriptManager.RegisterStartupScript(this, this.GetType(), "Popup", "window.parent.document.getElementById('ctl00_ContentPlaceHolder1_btnFrameCancel').click()", true);

                FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(hdnCustID.Value, false, 0);
                //Response.Redirect("S3GOrgCRM.aspx?qsCustomer=" + FormsAuthentication.Encrypt(Ticket));
                Response.Redirect("~/Credit Admin/S3GOrgCRM_View.aspx?Code=CRM", false);
            }


            // wf cancel
            else if (PageMode == PageModes.WorkFlow)
            {
                ReturnToWFHome();
            }
            else
            {
                FunPriClosePage();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    #endregion

    #region Page Specific
    private void funPriShowHideMainTabInfo()
    {
        try
        {
            //pnlLeaseInputCriteria.Visible = false;
            pnlLeaseInputCriteria.Style.Add("display", "none");
            pnlLeaseMarkettingDetails.Visible = false;
            PnlLeaseFinanceHP.Visible = false;
            //pnlLeaseDealerCommission.Visible = false;
            TbLeaseTabContainerMainTab.Visible = false;
            pnlCustomerMappingfortheAccount.Visible = false;
            pnlApplicationDetailsFWC.Visible = false;
            pnlCustomerMappingfortheAccount.Visible = false;
            //pnlAccountNumberLevelDetails.Visible = false;
            btnConfigure.Visible = false;
            btnPrint.Visible = false;
            pnlExistanceCharges.Visible = false;
            pnlLifeInsurance.Visible = false;
            pnlCustomerCreditDetails.Style.Add("display", "none");
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void btnApplicationCancel_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriCancelApplication();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void btnConfigure_Click(object sender, EventArgs e)
    {
        try
        {
            if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count == 0 || ((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
            {
                cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + " Define the Finance,OfferTerms,Repayment Related Details";
                cvApplicationProcessing.IsValid = false;
                TabContainerAP.ActiveTabIndex = 0;
                return;
            }
            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
            if (objRepaymentStructure.FunPubGetCashFlowDetails(intCompanyId, Convert.ToInt32(ddlLOB.SelectedValue)).Rows.Count == 0)
            {
                //Utility.FunShowAlertMsg(this, "Define Installment Flag in Cashflow Master for selected Line of Business");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege50));
                return;
            }
            txtAccountingIRR.Text = "";
            txtAccountIRR_Repay.Text = "";
            txtBusinessIRR.Text = "";
            txtBusinessIRR_Repay.Text = "";
            txtCompanyIRR.Text = "";
            txtCompanyIRR_Repay.Text = "";
            strRRBDate = strDocumentDate = txtApplicationDateDate.Text;
            FunPriGenerateRepaymentSchedule(objRepaymentStructure, Utility.StringToDate(txtApplicationDateDate.Text));
        }

        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    #endregion

    #region Repayment Tab

    protected void btnReset_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriResetIRRDetails();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void funPriSetFirstInstallmentDate()
    {

    }

    protected void btnGenerateRepay_Click(object sender, EventArgs e)
    {
        try
        {
            if (ViewState["OFFER_DATE"] != null)
            {
                if (txtApplicationDateDate.Text != string.Empty)
                    if (Utility.StringToDate(txtApplicationDateDate.Text) < Utility.StringToDate(ViewState["OFFER_DATE"].ToString()))
                    {
                        Utility.FunShowAlertMsg(this, "Application Date should be greater or Equal to Check List Date(" + ViewState["OFFER_DATE"].ToString() + ")");
                        txtApplicationDateDate.Text = string.Empty;
                        txtApplicationDateDate.Focus();
                        return;
                    }
            }
            if (ViewState["OFFER_DATE"] != null)
            {
                if (txtPdcStartDate.Text != string.Empty)
                    if (Utility.StringToDate(txtPdcStartDate.Text) < Utility.StringToDate(ViewState["OFFER_DATE"].ToString()))
                    {
                        Utility.FunShowAlertMsg(this, "PDC Start Date should be greater or Equal to Check List Date(" + ViewState["OFFER_DATE"].ToString() + ")");
                        txtPdcStartDate.Text = string.Empty;
                        txtPdcStartDate.Focus();
                        return;
                    }
            }
            DataTable dtCheckManuYr = (DataTable)Session["PricingAssetDetails"];
            if (dtCheckManuYr != null)
            {
                DataRow[] dr = dtCheckManuYr.Select("MANUFACTORING_YEAR IS NULL");
                if (dr.Length > 0)
                {
                    Utility.FunShowAlertMsg(this, "Enter the Manufacturing Year in Asset Tab");
                    return;
                }
            }
            if (ddl_Repayment_Mode.SelectedValue != "2")//SAP
            {
                Panel2.Visible = false;
            }
            else
            {
                Panel2.Visible = true;
            }
            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
            funPriDealerComissionandLIPCashFlowValidation();
            //if (Convert.ToDecimal(txtRate.Text) == 0)
            if (Convert.ToDecimal(hdnRate.Value) == 0)
            {
                funpriResetZeroInterestCashoutflow();
            }
            if (ddlLifeInsurance.SelectedValue == "2")
            {
                ddlLifeInsuranceEntity_Item_Selected(null, null);
            }
            if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
            {
                if (objRepaymentStructure.FunPubGetCashFlowDetails_TL_Princ(intCompanyId, Convert.ToInt32(ddlLOB.SelectedValue)).Rows.Count == 0)
                {
                    //Utility.FunShowAlertMsg(this, "Define Principal and Interest Flags in Cashflow Master for selected Line of Business");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege51));
                    return;
                }
            }
            else
            {
                DataTable dtBillCashFlowCheck = objRepaymentStructure.FunPubGetCashFlowDetails(intCompanyId, Convert.ToInt32(ddlLOB.SelectedValue));
                if (dtBillCashFlowCheck.Rows.Count == 0)
                {
                    //Utility.FunShowAlertMsg(this, "Define Installment Flag in Cashflow Master for selected Line of Business");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege52));
                    return;
                }
                else
                {
                    DataRow[] dr = dtBillCashFlowCheck.Select("CashFlow_Flag_ID=23 and Accounting_IRR=true");
                    if (dr.Length == 0)
                    {
                        Utility.FunShowAlertMsg(this, "Accounting IRR Flag should be enabled for Installment Cashflow against Billing Program");
                        return;
                    }
                }

                if (ddlLifeInsurance.SelectedValue == "2")
                {
                    Dictionary<string, string> objProcedureParameter = new Dictionary<string, string>();
                    objProcedureParameter.Add("@Option", "32");//LIP Validation
                    objProcedureParameter.Add("@Company_ID", intCompanyId.ToString());
                    objProcedureParameter.Add("@LOB_ID", ddlLOB.SelectedValue);
                    DataTable dtCashFlowTable = Utility.GetDefaultData(SPNames.S3G_ORG_GetPricing_List, objProcedureParameter);
                    if (dtBillCashFlowCheck.Rows.Count == 0)
                    {

                        Utility.FunShowAlertMsg(this, "Life Insurance Customer Cashflow not defined against Billint Program");
                        return;
                    }

                }

            }
            FunPriIRRReset();
            //strRRBDate = strDocumentDate = txtApplicationDateDate.Text;
            strRRBDate = strDocumentDate = txtPdcStartDate.Text;
            if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL"))
            {
                strRRBDate = strDocumentDate = txtApplicationDateDate.Text;
            }
            else
            {
                if (txtPdcStartDate.Text != string.Empty)
                {
                    strRRBDate = strDocumentDate = txtPdcStartDate.Text;
                }
                else
                {
                    strRRBDate = strDocumentDate = txtApplicationDateDate.Text;
                }
            }
            //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation start
            if (ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
            {
                DataTable dtAssetDtls = new DataTable();
                if (Session["PricingAssetDetails"] != null)
                {
                    dtAssetDtls = (DataTable)Session["PricingAssetDetails"];
                }
                if (dtAssetDtls.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dtAssetDtls.Compute("Max(Required_FromDate)", "Noof_Units > 0").ToString()))
                        strRRBDate = strDocumentDate = strDocumentDate = dtAssetDtls.Compute("Max(Required_FromDate)", "Noof_Units > 0").ToString();
                }

            }

            //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation end

            if (!string.IsNullOrEmpty(txtFBDate.Text))
            {
                //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation start
                //DateTime dtDocDate = Utility.StringToDate(txtDate.Text);
                DateTime dtDocDate = Utility.StringToDate(strDocumentDate);
                //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation end

                DateTimeFormatInfo dtformat = new DateTimeFormatInfo();
                dtformat.ShortDatePattern = "MM/dd/yy";
                string strFBDate = "";
                try
                {
                    // strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);
                    if (dtDocDate.Day > Convert.ToInt32(txtFBDate.Text))
                        strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).AddMonths(1).ToString(strDateFormat);
                    else
                        strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);
                }
                catch (Exception ex)
                {
                    DateTime lastDayOfCurrentMonth = new DateTime(dtDocDate.Year, dtDocDate.Month,
                                                         DateTime.DaysInMonth(dtDocDate.Year, dtDocDate.Month));
                    strFBDate = lastDayOfCurrentMonth.ToString(strDateFormat);
                }
                //string strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);

                //string strFBDate = dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year;
                FunPriGenerateRepaymentSchedule(objRepaymentStructure, Utility.StringToDate(strFBDate));
            }
            else
            {
                //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation start
                //FunPriGenerateRepaymentSchedule(objRepaymentStructure, Utility.StringToDate(txtDate.Text));
                //TrackFlow

                //funPriSetFirstInstallmentDate(Utility.StringToDate(strDocumentDate),);

                FunPriGenerateRepaymentSchedule(objRepaymentStructure, Utility.StringToDate(strDocumentDate));
                //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation end
            }
            /*UMFC has been calculated automatically for other than Product & TermLoan Return Pattern 
             (Also applicable to HP,FL,LN,TE,TL) Updated on 28th Oct 2010*/
            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL") && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "TERM LOAN")
            {
                FunPriInsertUMFC();
            }
            if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT"))
            {
                //grvRepayStructure.Columns[5].Visible = false;
                //grvRepayStructure.Columns[6].Visible = true;
                //grvRepayStructure.Columns[7].Visible = true;

                //grvRepayStructure.Columns[8].Visible = false;
                grvRepayStructure.Columns[9].Visible = false;
                grvRepayStructure.Columns[10].Visible = false;
            }
            else
            {
                //grvRepayStructure.Columns[5].Visible = true;
                //grvRepayStructure.Columns[6].Visible = false;
                //grvRepayStructure.Columns[7].Visible = false;
            }

            txtNumberofInstallments.Text = grvRepayStructure.Rows.Count.ToString();
            funPriCalculateStartDelyCharges();



        }
        catch (Exception ex)
        {
            if (ex.Message.StartsWith("object reference") || ex.Message.StartsWith("Specified cast"))
            {
                //Utility.FunShowAlertMsg(this, "Incorrect cashflow Details,Unable to Generate Repayment Structure/Calculate IRR");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege53));
            }
            else
            {
                //Utility.FunShowAlertMsg(this, ex.Message);
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege54));
            }

        }
    }

    private void funPriadjFcDiff(DataTable dtRepayStruc)
    {
        if (dtRepayStruc != null)
        {
            decimal decPrinAmount = 0;
            decimal decInterest = 0;
            decimal decDiffAmount = 0;

            decPrinAmount = Convert.ToDecimal(dtRepayStruc.Compute("Sum(PrincipalAmount)", "1=1"));
            decInterest = Convert.ToDecimal(dtRepayStruc.Compute("Sum(Charge)", "1=1"));
            if (ddlSubvention.SelectedValue == "1")
            {
                decDiffAmount = decPrinAmount - (Convert.ToDecimal(txtFinanceAmount.Text) - Convert.ToDecimal(txtTotalSubvetionamount.Text));
            }
            else
            {
                decDiffAmount = decPrinAmount - Convert.ToDecimal(txtFinanceAmount.Text);
            }

            dtRepayStruc.Columns["PrincipalAmount"].ReadOnly = false;

            if (decDiffAmount > 0)
            {

                dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"].ToString()) + decDiffAmount;
                dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"].ToString()) - decDiffAmount;

                //if (ddlInstallmentRoundOff.SelectedValue == "1")
                //{

                //    dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"].ToString()) + decDiffAmount;
                //    dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"].ToString()) - decDiffAmount;
                //}
                //else
                //{
                //    dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"].ToString()) + decDiffAmount;
                //    dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"].ToString()) - decDiffAmount;

                //}
            }
            else if (decDiffAmount < 0)
            {
                dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"].ToString()) + decDiffAmount;
                dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"].ToString()) + (-1 * decDiffAmount);

                //if (ddlInstallmentRoundOff.SelectedValue == "1")
                //{

                //    dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"].ToString()) + decDiffAmount;
                //    dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"].ToString()) +(-1*decDiffAmount);
                //}
                //else
                //{
                //    dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["Charge"].ToString()) - decDiffAmount;
                //    dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"] = Convert.ToDecimal(dtRepayStruc.Rows[dtRepayStruc.Rows.Count - 1]["PrincipalAmount"].ToString()) + decDiffAmount;

                //}
            }
        }
        dtRepayStruc.AcceptChanges();
        if (txtAccountIRR_Repay.Text != string.Empty)
        {
            txtOverDueCharges.Text = (Convert.ToDecimal(txtAccountIRR_Repay.Text) + 2).ToString();
        }
    }

    private void funPriCalculateStartDelyCharges()
    {
        DataTable dtRepaymentStructure = (DataTable)ViewState["RepaymentStructure"];
        //Installment_Date

        int intGapDays = 40;
        int iGraceDays = 0;
        int IadjDays = 30;

        intGapDays = 4;
        IadjDays = 2;


        if (txtNoofDaystobeconsidered.Text != string.Empty)
            iGraceDays = Convert.ToInt32(txtNoofDaystobeconsidered.Text);

        if (ddlStartDelayChargesApplicable.SelectedValue == "1")
        {

            string strMinInstallmentDate = dtRepaymentStructure.Rows[0]["Installment_Date"].ToString();
            txtDelayDays.Text = (Utility.StringToDate(strMinInstallmentDate) - Utility.StringToDate(txtApplicationDateDate.Text)).Days.ToString();

            if (txtDelayDays.Text != string.Empty)
            {
                if (Convert.ToDecimal(txtDelayDays.Text) + iGraceDays <= intGapDays)
                {
                    txtStartdelaycharges.Text = "0.000";
                }
                else
                {
                    //txtStartdelaycharges.Text = (((Convert.ToDecimal(lblTotalAmountData.Text) * (Convert.ToDecimal(txtStartDatedelayrate.Text)) * 100 / 100) / 100) * (Convert.ToDecimal(txtDelayDays.Text) - 30)).ToString(Funsetsuffix());
                    txtStartdelaycharges.Text = Utility.funPubChangeCurrencyFormat((Math.Round(((Convert.ToDecimal(lblTotalAmountData.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) * (Convert.ToDecimal(txtDelayDays.Text) + iGraceDays - IadjDays) / (365 * 100)), 3)).ToString(Funsetsuffix()));
                }
            }
        }
        if (dtRepaymentStructure != null)
        {
            if (dtRepaymentStructure.Rows.Count > 0)
            {
                txtFirstInstallmentDueDate.Text = dtRepaymentStructure.Rows[0]["Installment_Date"].ToString();
                txtLastInstallmentDueDate.Text = dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Installment_Date"].ToString();
            }
        }
    }
    private void funPriResetNoofdays(DataTable dtActualRepayStructure)
    {
        try
        {

            //for (Int32 i = 0; i < dtActualRepayStructure.Rows.Count; i++)
            //{

            //foreach (DataRow drIrrRows in dtActualRepayStructure.Rows)
            //{
            //    if (Convert.ToInt32(ddl_IRR_Rest.SelectedValue) == 2)   //Month Wise IRR
            //    {
            //        Int32 intROIFrquency = 0;
            //        intROIFrquency = Convert.ToInt32(ddl_Frequency.SelectedValue);
            //        switch (intROIFrquency)
            //        {
            //            case 5:
            //                dtActualRepayStructure.Rows[i]["NoofDays"] = 60;
            //                break;
            //            case 6:
            //                dtActualRepayStructure.Rows[i]["NoofDays"] = 90;
            //                break;
            //            case 7:
            //                dtActualRepayStructure.Rows[i]["NoofDays"] = 180;
            //                break;
            //            case 8:
            //                dtActualRepayStructure.Rows[i]["NoofDays"] = 365;
            //                break;
            //            default:
            //                {
            //                    if (DateAndTime.DateDiff(DateInterval.Day, Convert.ToDateTime(drIrrRows["FromDate"].ToString()), Convert.ToDateTime(drIrrRows["ToDate"].ToString()), FirstDayOfWeek.Monday, FirstWeekOfYear.Jan1) > 27)
            //                    {
            //                        drIrrRows["NoofDays"] = 30;
            //                    }
            //                    else
            //                    {
            //                        drIrrRows["NoofDays"] = DateAndTime.DateDiff(DateInterval.Day, Convert.ToDateTime(drIrrRows["FromDate"].ToString()), Convert.ToDateTime(drIrrRows["ToDate"].ToString()), FirstDayOfWeek.Monday, FirstWeekOfYear.Jan1);

            //                    }
            //                }
            //                break;

            //        }
            //    }
            //}
            ////}
            //dtActualRepayStructure.AcceptChanges();
            //ViewState["RepaymentStructure"] = dtActualRepayStructure;

            foreach (DataRow drIrrRows in dtActualRepayStructure.Rows)
            {
                if (Convert.ToInt32(ddl_IRR_Rest.SelectedValue) == 2)   //Month Wise IRR
                {
                    Int32 intROIFrquency = 0;
                    intROIFrquency = Convert.ToInt32(ddl_Frequency.SelectedValue);
                    switch (intROIFrquency.ToString())
                    {
                        //Monthly
                        case "4":
                            //if (DateAndTime.DateDiff(DateInterval.Day, Convert.ToDateTime(drIrrRows["FromDate"].ToString()), Convert.ToDateTime(drIrrRows["ToDate"].ToString()), FirstDayOfWeek.Monday, FirstWeekOfYear.Jan1) > 27)
                            if ((Convert.ToDateTime(drIrrRows["ToDate"].ToString()) - Convert.ToDateTime(drIrrRows["FromDate"].ToString())).Days > 27)
                                drIrrRows["NoofDays"] = 30;
                            else
                                drIrrRows["NoofDays"] = (Convert.ToDateTime(drIrrRows["ToDate"].ToString()) - Convert.ToDateTime(drIrrRows["FromDate"].ToString())).Days;
                            break;
                        //bi monthly
                        case "5":

                            //if (DateAndTime.DateDiff(DateInterval.Day, Convert.ToDateTime(drIrrRows["FromDate"].ToString()), Convert.ToDateTime(drIrrRows["ToDate"].ToString()), FirstDayOfWeek.Monday, FirstWeekOfYear.Jan1) > 58)
                            if ((Convert.ToDateTime(drIrrRows["ToDate"].ToString()) - Convert.ToDateTime(drIrrRows["FromDate"].ToString())).Days > 58)
                                drIrrRows["NoofDays"] = 60;
                            else
                                drIrrRows["NoofDays"] = (Convert.ToDateTime(drIrrRows["ToDate"].ToString()) - Convert.ToDateTime(drIrrRows["FromDate"].ToString())).Days;
                            break;
                        //quarterly
                        case "6":

                            if ((Convert.ToDateTime(drIrrRows["ToDate"].ToString()) - Convert.ToDateTime(drIrrRows["FromDate"].ToString())).Days > 88)
                                drIrrRows["NoofDays"] = 90;
                            else
                                drIrrRows["NoofDays"] = (Convert.ToDateTime(drIrrRows["ToDate"].ToString()) - Convert.ToDateTime(drIrrRows["FromDate"].ToString())).Days;
                            break;
                        // half yearly
                        case "7":

                            if ((Convert.ToDateTime(drIrrRows["ToDate"].ToString()) - Convert.ToDateTime(drIrrRows["FromDate"].ToString())).Days > 180)
                                drIrrRows["NoofDays"] = 180;
                            else
                                drIrrRows["NoofDays"] = (Convert.ToDateTime(drIrrRows["ToDate"].ToString()) - Convert.ToDateTime(drIrrRows["FromDate"].ToString())).Days;
                            break;
                        //annually
                        case "8":
                            if ((Convert.ToDateTime(drIrrRows["ToDate"].ToString()) - Convert.ToDateTime(drIrrRows["FromDate"].ToString())).Days > 360)
                                drIrrRows["NoofDays"] = 365;
                            else
                                drIrrRows["NoofDays"] = (Convert.ToDateTime(drIrrRows["ToDate"].ToString()) - Convert.ToDateTime(drIrrRows["FromDate"].ToString())).Days;
                            break;
                    }
                }
            }

            dtActualRepayStructure.AcceptChanges();
            ViewState["RepaymentStructure"] = dtActualRepayStructure;

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void btnCalIRR_Click(object sender, EventArgs e)
    {
        try
        {



            DataTable dtCheckManuYr = (DataTable)Session["PricingAssetDetails"];
            if (dtCheckManuYr != null)
            {
                DataRow[] dr = dtCheckManuYr.Select("MANUFACTORING_YEAR IS NULL");
                if (dr.Length > 0)
                {
                    Utility.FunShowAlertMsg(this, "Enter the Manufacturing Year in Asset Tab");
                    return;
                }
            }
            if (ddl_Repayment_Mode.SelectedValue != "2")//SAP
            {
                Panel2.Visible = false;
            }
            else
            {
                Panel2.Visible = true;
            }

            FunPriIRRReset();
            funPriDealerComissionandLIPCashFlowValidation();
            if (ddlLifeInsurance.SelectedValue == "2")
            {
                ddlLifeInsuranceEntity_Item_Selected(null, null);
            }
            //if (Convert.ToDecimal(txtRate.Text) == 0)
            if (Convert.ToDecimal(hdnRate.Value) == 0)
            {
                funpriResetZeroInterestCashoutflow();
            }
            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
            decimal decTotalAmount = 0;
            decimal decIRRActualAmount = 0;

            if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
            {
                //Utility.FunShowAlertMsg(this, "Add atleast one Repayment Details");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege55));
                return;
            }

            decimal DecRoundOff;
            decimal decBreakPercent = 0;
            if (Convert.ToString(ViewState["hdnRoundOff"]) != "")
                DecRoundOff = Convert.ToDecimal(ViewState["hdnRoundOff"]);
            else
                DecRoundOff = 2;

            //if ((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL") || ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE")) && ddl_Repayment_Mode.SelectedValue == "2")//Only for structure adhoc
            //{
            //int intValidation = objRepaymentStructure.FunPubValidateTotalAmountTL((DataTable)ViewState["DtRepayGrid"], txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue, txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, out decIRRActualAmount, out decTotalAmount, "", DecRoundOff);
            //if (intValidation == 1)
            //{
            //    //Utility.FunShowAlertMsg(this, "Total Amount Should be equal to finance amount + interest (" + decTotalAmount + ")");
            //    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege56));
            //    return;
            //}
            //else if (intValidation == 2)
            //{
            //    //Utility.FunShowAlertMsg(this, "Principal Amount Should be equal to finance amount (" + txtFinanceAmount.Text + ")");
            //    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege57));
            //    return;
            //}
            //else if (intValidation == 3)
            //{
            //    //Utility.FunShowAlertMsg(this, "Interest Amount Should be equal to  (" + (decTotalAmount - Convert.ToDecimal(txtFinanceAmount.Text)).ToString() + ")");
            //    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege58));
            //    return;
            //}
            //else if (intValidation == 6)
            //{
            //    //Utility.FunShowAlertMsg(this, "No Principal and Interest amount entered to calculate");
            //    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege59));
            //    return;
            //}
            //else if (intValidation == 4)
            //{
            //    //Utility.FunShowAlertMsg(this, "No Principal amount entered to calculate");
            //    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege60));
            //    return;
            //}
            //else if (intValidation == 5)
            //{
            //    //Utility.FunShowAlertMsg(this, "No Interest amount entered to calculate");
            //    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege61));
            //    return;
            //}


            //DataRow[] dr = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23");
            //if (dr.Length > 0)
            //{
            //    decBreakPercent = Convert.ToDecimal(((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID in(23)"));
            //}
            //else
            //{
            //    decBreakPercent = Convert.ToDecimal(((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID in(35,91)"));
            //}
            //}
            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))
            {
                //if (!FunPubValidateTotalAmountInner((DataTable)ViewState["DtRepayGrid"], txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue, (ddl_Return_Pattern.SelectedValue == "2") ? ViewState["decRate"].ToString() : txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, out decIRRActualAmount, out decTotalAmount, "", DecRoundOff))
                if (!FunPubValidateTotalAmountInner((DataTable)ViewState["DtRepayGrid"], txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue, (ddl_Return_Pattern.SelectedValue == "2") ? hdnRate.Value.ToString() : hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, out decIRRActualAmount, out decTotalAmount, "", DecRoundOff))
                {
                    // Utility.FunShowAlertMsg(this, "Total Amount Should be equal to finance amount + interest (" + decTotalAmount + ")");
                    Utility.FunShowAlertMsg(this, "Total Amount Should be equal to finance amount + interest (" + decTotalAmount + ")");
                    return;
                }
                //decBreakPercent = Convert.ToDecimal(((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID = 23"));

            }

            DataRow[] dRows = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23");
            if (dRows.Length > 0)
            {
                decBreakPercent = Convert.ToDecimal(((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID in(23)"));
            }
            else
            {
                decBreakPercent = Convert.ToDecimal(((DataTable)ViewState["DtRepayGrid"]).Compute("Sum(Breakup)", "CashFlow_Flag_ID in(35,91)"));
            }

            if (decBreakPercent != 0)
            {
                if (decBreakPercent != 100)
                {
                    //Utility.FunShowAlertMsg(this, "Total break up percentage should be equal to 100%");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege63));
                    return;
                }
            }

            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
            {
                DataRow[] drFinanAmtRow = ((DataTable)ViewState["DtCashFlowOut"]).Select("CashFlow_Flag_ID = 41");
                if (drFinanAmtRow.Length > 0)
                {
                    decimal decToatlFinanceAmt = (decimal)((DataTable)ViewState["DtCashFlowOut"]).Compute("Sum(Amount)", "CashFlow_Flag_ID = 41");

                    if (Convert.ToDecimal(txtFinanceAmount.Text) != decToatlFinanceAmt)
                    {
                        //Utility.FunShowAlertMsg(this, "Total amount financed in Cashoutflow should be equal to amount financed");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege64));
                        FunRepayClear("");
                        return;
                    }
                }
            }
            else
            {

                DataRow[] drFinanAmtRow = ((DataTable)ViewState["DtCashFlowOut"]).Select("CashFlow_Flag_ID = 41");
                if (drFinanAmtRow.Length == 0)
                {
                    DataTable dtOutflow = ((DataTable)ViewState["DtCashFlowOut"]).Clone();

                    DataRow drOutflow = dtOutflow.NewRow();
                    drOutflow["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                    drOutflow["CashOutFlow"] = "OL Lease Amount";
                    drOutflow["EntityID"] = hdnCustID.Value;
                    //drOutflow["Entity"] = S3GCustomerAddress1.CustomerName;
                    drOutflow["OutflowFromId"] = "144";
                    drOutflow["OutflowFrom"] = "Customer";
                    DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                    decimal dcmTotalAssetValue = (decimal)(dsAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                    drOutflow["Amount"] = dcmTotalAssetValue;
                    drOutflow["CashOutFlowID"] = "-1";
                    drOutflow["Accounting_IRR"] = true;
                    drOutflow["Business_IRR"] = true;
                    drOutflow["Company_IRR"] = true;
                    drOutflow["CashFlow_Flag_ID"] = "41";
                    dtOutflow.Rows.Add(drOutflow);
                    ViewState["DtCashFlowOut"] = dtOutflow;
                }
            }
            double douAccountingIRR = 0;
            double douBusinessIRR = 0;
            double douCompanyIRR = 0;
            DataTable dtRepaymentStructure = new DataTable();
            DataTable dtMoratorium = null;
            DataTable dtRepayDetails = new DataTable();
            //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 start
            DataTable dtRepayDetailsOthers = new DataTable();
            //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 end
            try
            {

                //Checking if other than normal payment , start date should be last payment date.
                string strStartDte = txtApplicationDateDate.Text;

                DateTime dtDocFBDate = Utility.StringToDate(strStartDte);
                int intDeffered = 0;
                if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")
                {
                    DataTable dtAcctype = ((DataTable)ViewState["PaymentRules"]);
                    dtAcctype.DefaultView.RowFilter = " FieldName = 'AccountType'";
                    string strAcctType = dtAcctype.DefaultView.ToTable().Rows[0]["FieldValue"].ToString().Trim().ToUpper();

                    if (strAcctType == "PROJECT FINANCE" || strAcctType == "DEFERRED PAYMENT" || strAcctType == "DEFERRED STRUCTURED")
                    {
                        intDeffered = 1;//Defferred Payment
                        DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
                        if (DtCashFlowOut.Rows.Count > 0)
                        {
                            DataRow drOutFlw = DtCashFlowOut.Select("CashFlow_Flag_ID=41").Last();
                            if (drOutFlw != null)
                            {
                                strStartDte = drOutFlw["Date"].ToString();

                            }
                        }

                    }

                }
                if (!string.IsNullOrEmpty(txtFBDate.Text))
                {
                    //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation start
                    //DateTime dtDocDate = Utility.StringToDate(txtDate.Text);
                    DateTime dtDocDate = Utility.StringToDate(strStartDte);
                    //Code commented and added by saran on 18-Jul-2012 for UAT fixing raised in account creation end

                    DateTimeFormatInfo dtformat = new DateTimeFormatInfo();
                    dtformat.ShortDatePattern = "MM/dd/yy";
                    string strFBDate = "";
                    try
                    {
                        strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);
                    }
                    catch (Exception ex)
                    {
                        DateTime lastDayOfCurrentMonth = new DateTime(dtDocDate.Year, dtDocDate.Month,
                                                            DateTime.DaysInMonth(dtDocDate.Year, dtDocDate.Month));
                        strFBDate = lastDayOfCurrentMonth.ToString(strDateFormat);
                    }
                    //string strFBDate = DateTime.Parse(dtDocDate.Month + "/" + txtFBDate.Text + "/" + dtDocDate.Year, dtformat).ToString(strDateFormat);
                    dtDocFBDate = Utility.StringToDate(strFBDate);
                }

                if (ViewState["dtMoratorium"] != null)
                {
                    DataTable dtmor = ((DataTable)ViewState["dtMoratorium"]);

                    foreach (DataRow dr in dtmor.Rows)
                    {
                        dr.Delete();
                    }
                    dtmor.AcceptChanges();
                    ViewState["dtMoratorium"] = dtmor;
                }

                if (((DataTable)ViewState["dtMoratorium"]).Rows.Count == 0)
                {
                    //if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT") && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Contains("ADHOC")))
                    //{
                    //    objRepaymentStructure.FunPubCalculateIRRForTL(strStartDte, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                    //     , out dtRepaymentStructure, (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                    //     , txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                    //     , txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                    //     ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium);
                    //}
                    //else if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Return_Pattern.SelectedValue == "6"))
                    //{
                    //    objRepaymentStructure.FunPubCalculateIRR(strStartDte, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                    //            , out dtRepaymentStructure, out dtRepayDetails
                    //        //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 start
                    //        , out dtRepayDetailsOthers
                    //        //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 end
                    //            , (DataTable)ViewState["DtRepayGrid_TL"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                    //            , txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                    //            , txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                    //            ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, ddl_Interest_Levy.SelectedValue.ToString(), intDeffered, dtDocFBDate.ToString());
                    //}
                    //else
                    //{
                    #region
                    //Dealer Comission Calculation start ---by sathish R
                    if (ddlDealerCommissionApplicable.SelectedValue == "1")
                    {
                        DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                        DataTable dtLoopEntity = new DataTable();

                        if (dsAssetDetails.Rows.Count > 0)
                        {
                            dtLoopEntity = dsAssetDetails.DefaultView.ToTable(true, "Entity_ID", "Entity_Code");



                            foreach (DataRow dr3 in dtLoopEntity.Rows)
                            {
                                decimal decAssetFinAmount = 0;
                                int IRowCount = 0;
                                DataRow[] dr = dsAssetDetails.Select("Entity_ID='" + dr3["Entity_ID"].ToString() + "'");
                                if (dr.Length > 0)
                                {
                                    decAssetFinAmount = Convert.ToDecimal(dr.CopyToDataTable().Compute("sum(Finance_Amount_1)", "1=1"));
                                    IRowCount = dr.CopyToDataTable().Rows.Count;
                                    funPriGetDealerCommsissionDetails(dr3["Entity_ID"].ToString(), decAssetFinAmount.ToString(), IRowCount, dr);
                                }
                            }
                            dsAssetDetails.AcceptChanges();
                        }
                    }
                    //Dealer Comission Calculation End
                    #endregion
                    #region


                    //if (Convert.ToDecimal(txtRate.Text) > 0)
                    if (Convert.ToDecimal(hdnRate.Value) > 0)
                    {

                        //MFC Deal Commission and Insuracne Outflow Insert Start
                        if (ddlDealerCommissionApplicable.SelectedValue == "1")
                        {
                            #region
                            //Insert DealCommission outflow
                            FunPriInsertOutflowDealerComission();
                            #endregion
                        }

                        if (ddlLifeInsurance.SelectedValue == "2")
                        {
                            #region
                            //Insert Insurance outflow
                            //ddlLifeInsuranceEntity_Item_Selected(null, null);
                            FunPriInsertOutflowInsurance();
                            #endregion
                        }
                    }
                    //MFC Deal Commission and Insuracne Outflow Insert End
                    #endregion


                    funPriResetLIPCashFLow((DataTable)ViewState["DtRepayGrid"]);
                    if (ddlSubvention.SelectedValue == "1")
                    {
                        //MFCIRR
                        decimal decNewFinAmountExcludeLMF = Convert.ToDecimal(txtFinanceAmount.Text) - Convert.ToDecimal(txtTotalSubvetionamount.Text);
                        DataTable dtOutFlowTemp = (DataTable)ViewState["DtCashFlowOut"];
                        DataTable dtOutFlowExcludeLMF = dtOutFlowTemp.Copy();
                        DataRow[] dr = dtOutFlowExcludeLMF.Select("CashFlow_Flag_Id=41");
                        foreach (DataRow dr2 in dr)
                        {
                            dr2["Amount"] = decNewFinAmountExcludeLMF;
                        }
                        objRepaymentStructure.FunPubCalculateIRR(strStartDte, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                                                , out dtRepaymentStructure
                                                , out dtRepayDetailsOthers
                                                , (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], dtOutFlowExcludeLMF
                                                , decNewFinAmountExcludeLMF.ToString(), txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                                                , hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                                                ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, dtDocFBDate.ToString(), null);
                    }
                    else
                    {
                        //MFCIRR
                        objRepaymentStructure.FunPubCalculateIRR(strStartDte, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                                                       , out dtRepaymentStructure
                                                       , out dtRepayDetailsOthers
                                                       , (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                                                       , txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                                                       , hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                                                       ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, dtDocFBDate.ToString(), null);
                    }
                    if (Convert.ToDecimal(hdnRate.Value) == 0)
                    {

                        //MFC Deal Commission and Insuracne Outflow Insert Start
                        if (ddlDealerCommissionApplicable.SelectedValue == "1")
                        {
                            #region
                            //Insert DealCommission outflow
                            FunPriInsertOutflowDealerComission();
                            #endregion
                        }

                        if (ddlLifeInsurance.SelectedValue == "2")
                        {
                            #region
                            //Insert Insurance outflow
                            //ddlLifeInsuranceEntity_Item_Selected(null, null);
                            FunPriInsertOutflowInsurance();
                            #endregion
                        }
                    }

                    #region
                    //Dealer Comission Struct add Start---by sathish R
                    funPriadjFcDiff(dtRepaymentStructure);
                    dtRepaymentStructure.Columns.Add("FINANCE_CHARGE_WIT_INS", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("FINANCE_CHARGE_WITHOUT_INS", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("INSURANCE_AMT", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("INSURANCE_PAYABLE", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("INSURANCE_INCOME", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("Deal_Commission", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("Cash_Flow_Flag_Id", typeof(int));

                    dtRepaymentStructure.Columns.Add("EMI", typeof(decimal));
                    dtRepaymentStructure.Columns.Add("EMI_INS", typeof(decimal));


                    if (ddlDealerCommissionApplicable.SelectedValue == "1")
                    {

                        decimal decSumDealerCommissionAmount = 0;
                        decimal decCommissionPerInstallment = 0;
                        decimal decCommissionPerInstallmentRoundoff = 0;
                        decimal decCommissionDecimalDifference = 0;

                        DataTable dsAssetDetails2 = (DataTable)Session["PricingAssetDetails"];
                        string strDealCommissionAmount = dsAssetDetails2.Compute("sum(Dealer_Commission_Amount_1)", "1=1").ToString();
                        decimal decTototalUMFC = Convert.ToDecimal(dtRepaymentStructure.Compute("sum(charge)", "1=1").ToString());
                        if (strDealCommissionAmount != string.Empty)
                        {
                            decSumDealerCommissionAmount = Convert.ToDecimal(strDealCommissionAmount);
                            if (decSumDealerCommissionAmount > 0)
                            {
                                DataTable DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];
                                decCommissionPerInstallment = decSumDealerCommissionAmount / Convert.ToInt32(txtTenure.Text);
                                decCommissionPerInstallmentRoundoff = Math.Round(decCommissionPerInstallment);

                                decCommissionDecimalDifference = decSumDealerCommissionAmount - decCommissionPerInstallmentRoundoff * Convert.ToInt32(txtTenure.Text);



                                if (decTototalUMFC > 0)
                                {
                                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                                    {
                                        //drRepay["Deal_Commission"] = decCommissionPerInstallmentRoundoff;

                                        drRepay["Deal_Commission"] = Math.Round(Convert.ToDecimal(drRepay["Charge"]) / decTototalUMFC * Convert.ToDecimal(strDealCommissionAmount), 3);
                                        drRepay["Cash_Flow_Flag_Id"] = "28";
                                    }
                                    //dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Deal_Commission"] = decCommissionPerInstallmentRoundoff + decCommissionDecimalDifference;

                                    decimal dec = Convert.ToDecimal(dtRepaymentStructure.Compute("sum(Deal_Commission)", "1 = 1")) - decSumDealerCommissionAmount;
                                    if (dec != 0)
                                    {
                                        dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Deal_Commission"] = Convert.ToDecimal(dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Deal_Commission"]) - dec;
                                    }
                                    dtRepaymentStructure.AcceptChanges();
                                }
                                else if (decTototalUMFC == 0)
                                {
                                    foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                                    {
                                        drRepay["Deal_Commission"] = Math.Round(decCommissionPerInstallment, 3);
                                        drRepay["Cash_Flow_Flag_Id"] = "28";
                                    }
                                    dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Deal_Commission"] = Math.Round(decCommissionPerInstallment, 3) + (decSumDealerCommissionAmount - Convert.ToDecimal(dtRepaymentStructure.Compute("sum(Deal_Commission)", "1=1").ToString()));
                                    dtRepaymentStructure.AcceptChanges();
                                }


                                #region



                                #endregion
                            }
                        }


                    }


                    if (ddlLifeInsurance.SelectedValue == "2")//LIPEvent3
                    {
                        funrPriCalculateLIP(dtRepaymentStructure);
                    }
                    else
                    {

                        foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                        {
                            drRepay["EMI"] = Math.Round(Convert.ToDecimal(drRepay["InstallmentAmount"]), 3).ToString(Funsetsuffix());
                        }
                        dtRepaymentStructure.AcceptChanges();
                    }




                    #endregion

                    //}
                }
                else
                {
                    DataRow[] drFirstRow;

                    if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT"))
                    {
                        DataRow[] dr = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23");
                        if (dr.Length > 0)
                        {
                            drFirstRow = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23 and FromInstall=1");
                        }
                        else
                        {
                            drFirstRow = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 91 and FromInstall=1");
                        }
                    }
                    else
                    {
                        drFirstRow = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23 and FromInstall=1");
                    }

                    if (drFirstRow.Length > 0)
                    {
                        if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedValue == "2"))
                        {
                            objRepaymentStructure.FunPubCalculateIRRForTL(DateTime.Parse(drFirstRow[0]["FromDate"].ToString(), CultureInfo.CurrentCulture).ToString(strDateFormat), hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                            , out dtRepaymentStructure, (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                            , txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                                //, txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                            , hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                            ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium);
                        }
                        //else if (((ddlLOB.SelectedItem.Text.ToUpper().Contains("TL")) || (ddlLOB.SelectedItem.Text.ToUpper().Contains("TE"))) && ddl_Repayment_Mode.SelectedValue != "5" && ddl_Return_Pattern.SelectedValue == "6")//Principal
                        //{
                        //     objRepaymentStructure.FunPubCalculateIRR(DateTime.Parse(drFirstRow[0]["FromDate"].ToString(), CultureInfo.CurrentCulture).ToString(strDateFormat), hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                        //       , out dtRepaymentStructure, (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                        //       , txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                        //       , txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                        //       ddl_Time_Value.SelectedValue, ddlLOB.SelectedItem.Text, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium);
                        //}
                        else
                        {
                            #region
                            //Dealer Comission Calculation start ---by sathish R
                            if (ddlDealerCommissionApplicable.SelectedValue == "1")
                            {
                                DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                                DataTable dtLoopEntity = new DataTable();

                                if (dsAssetDetails.Rows.Count > 0)
                                {
                                    dtLoopEntity = dsAssetDetails.DefaultView.ToTable(true, "Entity_ID", "Entity_Code");



                                    foreach (DataRow dr3 in dtLoopEntity.Rows)
                                    {
                                        decimal decAssetFinAmount = 0;
                                        int IRowCount = 0;
                                        DataRow[] dr = dsAssetDetails.Select("Entity_ID='" + dr3["Entity_ID"].ToString() + "'");
                                        if (dr.Length > 0)
                                        {
                                            decAssetFinAmount = Convert.ToDecimal(dr.CopyToDataTable().Compute("sum(Finance_Amount_1)", "1=1"));
                                            IRowCount = dr.CopyToDataTable().Rows.Count;
                                            funPriGetDealerCommsissionDetails(dr3["Entity_ID"].ToString(), decAssetFinAmount.ToString(), IRowCount, dr);
                                        }
                                    }
                                    dsAssetDetails.AcceptChanges();
                                }
                            }

                            //Dealer Comission Calculation End
                            #endregion
                            #region
                            //MFC Deal Commission and Insuracne Outflow Insert Start


                            //if (Convert.ToDecimal(txtRate.Text) > 0)
                            if (Convert.ToDecimal(hdnRate.Value) > 0)
                            {
                                if (ddlDealerCommissionApplicable.SelectedValue == "1")
                                {
                                    #region
                                    //Insert DealCommission outflow
                                    FunPriInsertOutflowDealerComission();
                                    #endregion
                                }

                                if (ddlLifeInsurance.SelectedValue == "2")
                                {
                                    #region
                                    //Insert Insurance outflow
                                    //ddlLifeInsuranceEntity_Item_Selected(null, null);
                                    FunPriInsertOutflowInsurance();
                                    #endregion
                                }
                            }
                            //MFC Deal Commission and Insuracne Outflow Insert End
                            #endregion



                            objRepaymentStructure.FunPubCalculateIRR(DateTime.Parse(drFirstRow[0]["FromDate"].ToString(), CultureInfo.CurrentCulture).ToString(strDateFormat), hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                               , out dtRepaymentStructure
                                //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 start
                            , out dtRepayDetailsOthers
                                //code added by saran in 2-Jul-2014 CR_SISSL12E046_018 end

                               , (DataTable)ViewState["DtRepayGrid"], (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                               , txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                                //, txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                               , hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                               ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, dtDocFBDate.ToString(), null);

                            //if (Convert.ToDecimal(txtRate.Text) == 0)
                            if (Convert.ToDecimal(hdnRate.Value) == 0)
                            {
                                if (ddlDealerCommissionApplicable.SelectedValue == "1")
                                {
                                    #region
                                    //Insert DealCommission outflow
                                    FunPriInsertOutflowDealerComission();
                                    #endregion
                                }

                                if (ddlLifeInsurance.SelectedValue == "2")
                                {
                                    #region
                                    //Insert Insurance outflow
                                    //ddlLifeInsuranceEntity_Item_Selected(null, null);
                                    FunPriInsertOutflowInsurance();
                                    #endregion
                                }
                            }







                            #region
                            //Dealer Comission Struct add Start---by sathish R
                            funPriadjFcDiff(dtRepaymentStructure);
                            dtRepaymentStructure.Columns.Add("FINANCE_CHARGE_WIT_INS", typeof(decimal));
                            dtRepaymentStructure.Columns.Add("FINANCE_CHARGE_WITHOUT_INS", typeof(decimal));
                            dtRepaymentStructure.Columns.Add("INSURANCE_AMT", typeof(decimal));
                            dtRepaymentStructure.Columns.Add("INSURANCE_PAYABLE", typeof(decimal));
                            dtRepaymentStructure.Columns.Add("INSURANCE_INCOME", typeof(decimal));
                            dtRepaymentStructure.Columns.Add("Deal_Commission", typeof(decimal));
                            dtRepaymentStructure.Columns.Add("Cash_Flow_Flag_Id", typeof(int));

                            dtRepaymentStructure.Columns.Add("EMI", typeof(decimal));
                            dtRepaymentStructure.Columns.Add("EMI_INS", typeof(decimal));

                            if (ddlDealerCommissionApplicable.SelectedValue == "1")
                            {

                                decimal decSumDealerCommissionAmount = 0;
                                decimal decCommissionPerInstallment = 0;
                                decimal decCommissionPerInstallmentRoundoff = 0;
                                decimal decCommissionDecimalDifference = 0;

                                DataTable dsAssetDetails2 = (DataTable)Session["PricingAssetDetails"];
                                string strDealCommissionAmount = dsAssetDetails2.Compute("sum(Dealer_Commission_Amount_1)", "1=1").ToString();
                                decimal decTototalUMFC = Convert.ToDecimal(dtRepaymentStructure.Compute("sum(charge)", "1=1").ToString());
                                if (strDealCommissionAmount != string.Empty)
                                {
                                    decSumDealerCommissionAmount = Convert.ToDecimal(strDealCommissionAmount);
                                    if (decSumDealerCommissionAmount > 0)
                                    {
                                        DataTable DtRepayGrid = (DataTable)ViewState["DtRepayGrid"];
                                        decCommissionPerInstallment = decSumDealerCommissionAmount / Convert.ToInt32(txtTenure.Text);
                                        decCommissionPerInstallmentRoundoff = Math.Round(decCommissionPerInstallment);

                                        decCommissionDecimalDifference = decSumDealerCommissionAmount - decCommissionPerInstallmentRoundoff * Convert.ToInt32(txtTenure.Text);


                                        if (decTototalUMFC > 0)
                                        {
                                            foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                                            {
                                                //drRepay["Deal_Commission"] = decCommissionPerInstallmentRoundoff;

                                                drRepay["Deal_Commission"] = Math.Round(Convert.ToDecimal(drRepay["Charge"]) / decTototalUMFC * Convert.ToDecimal(strDealCommissionAmount), 3);
                                                drRepay["Cash_Flow_Flag_Id"] = "28";
                                            }
                                            //dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Deal_Commission"] = decCommissionPerInstallmentRoundoff + decCommissionDecimalDifference;
                                            dtRepaymentStructure.AcceptChanges();
                                        }
                                        else if (decTototalUMFC == 0)
                                        {
                                            foreach (DataRow drRepay in dtRepaymentStructure.Rows)
                                            {
                                                drRepay["Deal_Commission"] = Math.Round(decCommissionPerInstallment, 3);
                                                drRepay["Cash_Flow_Flag_Id"] = "28";
                                            }
                                            dtRepaymentStructure.Rows[dtRepaymentStructure.Rows.Count - 1]["Deal_Commission"] = Math.Round(decCommissionPerInstallment, 3) + (decSumDealerCommissionAmount - Convert.ToDecimal(dtRepaymentStructure.Compute("sum(Deal_Commission)", "1=1").ToString()));
                                            dtRepaymentStructure.AcceptChanges();
                                        }
                                        #region
                                        #endregion
                                    }
                                }


                            }

                            #endregion


                            if (ddlLifeInsurance.SelectedValue == "2")//LIPEvent2
                            {
                                funrPriCalculateLIP(dtRepaymentStructure);
                            }
                        }
                    }
                    else
                    {
                        //Utility.FunShowAlertMsg(this, "Add atleast one Repayment Details");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege65));
                        return;
                    }
                }




                //funPriResetNoofdays(dtRepaymentStructure);
                dtRepaymentStructure.Columns["Charge"].ColumnName = "FinanceCharges";
                ViewState["RepaymentStructure"] = dtRepaymentStructure;
                grvRepayStructure.DataSource = dtRepaymentStructure;
                grvRepayStructure.DataBind();

                DataTable dt = (DataTable)ViewState["DtRepayGrid"];
                FunPriCalculateSummary(dt, "CashFlow", "TotalPeriodInstall");
                txtAccountIRR_Repay.Text = douAccountingIRR.ToString("0.00000");
                txtAccountingIRR.Text = douAccountingIRR.ToString("0.00000");

                txtBusinessIRR_Repay.Text = douBusinessIRR.ToString("0.00000");
                txtBusinessIRR.Text = douBusinessIRR.ToString("0.00000");

                txtCompanyIRR_Repay.Text = douCompanyIRR.ToString("0.00000");
                txtCompanyIRR.Text = douCompanyIRR.ToString("0.00000");

                //if (Convert.ToDecimal(txtRate.Text) > 0)
                //{
                //    funPriReloadIRR(dtRepaymentStructure, objRepaymentStructure);
                //}


                //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 start
                if (dtRepayDetailsOthers != null)
                    ViewState["dtRepayDetailsOthers"] = dtRepayDetailsOthers;
                //code added by saran in 3-Jul-2014 CR_SISSL12E046_018 end

                if (((ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TL")) || (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("TE"))) && (ddl_Repayment_Mode.SelectedItem.Text.ToUpper() != "PRODUCT"))
                {
                    //grvRepayStructure.Columns[5].Visible = false;
                    //grvRepayStructure.Columns[6].Visible = true;
                    //grvRepayStructure.Columns[7].Visible = true;

                    //grvRepayStructure.Columns[8].Visible = false;
                    grvRepayStructure.Columns[9].Visible = false;
                    grvRepayStructure.Columns[10].Visible = false;
                }
                else
                {
                    //grvRepayStructure.Columns[5].Visible = true;
                    //grvRepayStructure.Columns[6].Visible = false;
                    //grvRepayStructure.Columns[7].Visible = false;
                }

                //txtAccountIRR_Repay.Text = douAccountingIRR.ToString(Funsetsuffix());
                //txtAccountingIRR.Text = douAccountingIRR.ToString(Funsetsuffix());

                //txtBusinessIRR_Repay.Text = douBusinessIRR.ToString(Funsetsuffix());
                //txtBusinessIRR.Text = douBusinessIRR.ToString(Funsetsuffix());

                //txtCompanyIRR_Repay.Text = douCompanyIRR.ToString(Funsetsuffix());
                //txtCompanyIRR.Text = douCompanyIRR.ToString(Funsetsuffix());
            }
            catch (Exception Ex1)
            {
                FunRepayClear(Ex1.Message);
            }
            /*UMFC has been calculated automatically for other than Product & TermLoan Return Pattern 
           (Also applicable to HP,FL,LN,TE,TL) Updated on 28th Oct 2010*/
            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL") && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "TERM LOAN")
            {
                FunPriInsertUMFC();
            }
            txtNumberofInstallments.Text = grvRepayStructure.Rows.Count.ToString();
            funPriCalculateStartDelyCharges();
            if (txtAccountIRR_Repay.Text != string.Empty)
            {
                txtOverDueCharges.Text = (Convert.ToDecimal(txtAccountIRR_Repay.Text) + 2).ToString();
            }
        }

        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + ex.Message;
            cvApplicationProcessing.IsValid = false;
            grvRepayStructure.DataSource = null;
            grvRepayStructure.DataBind();
        }
    }

    #endregion

    #region Inflow

    private void funPriResetLIPCashFLow(DataTable DtRepayGridReLoad)
    {
        if (DtRepayGridReLoad != null)
        {
            DataRow[] dr2 = DtRepayGridReLoad.Select("CashFlow_Flag_ID=108");//LIP Customer
            if (dr2.Length > 0)
            {
                foreach (DataRow drDelete in dr2)
                {
                    drDelete.Delete();
                }
            }
            DtRepayGridReLoad.AcceptChanges();
        }

        ViewState["DtRepayGrid"] = DtRepayGridReLoad;
    }

    private void funPriReloadIRR(DataTable dtRepaymentStructure, ClsRepaymentStructure objRepaymentStructure)//Sathish R
    {
        //IRR Re Arrive for LIP and Dealer Commission Start
        #region


        //LIP Start
        DataTable DtRepayGridReLoad = (DataTable)ViewState["DtRepayGrid"];
        #region
        if (ddlLifeInsurance.SelectedValue == "2")
        {


            if (DtRepayGridReLoad != null)
            {
                DataRow[] dr2 = DtRepayGridReLoad.Select("CashFlow_Flag_ID=108");//LIP Customer
                if (dr2.Length > 0)
                {
                    foreach (DataRow drDelete in dr2)
                    {
                        drDelete.Delete();
                    }
                }
                DtRepayGridReLoad.AcceptChanges();
            }

            string[] strCashflow;
            DataTable dtBillInflow = ((DataSet)ViewState["InflowDDL"]).Tables[3];
            DataRow[] drBillCashFlow = dtBillInflow.Select("CASHFLOW_FLAG_ID=108");
            if (drBillCashFlow.Length == 0)
            {
                Utility.FunShowAlertMsg(this, "Billing -LIP Customer Cashflow not defined");
                return;
            }
            else
            {
                strCashflow = drBillCashFlow[0]["CashFlow_ID"].ToString().Split(',');
            }

            int iSno = dtRepaymentStructure.Rows.Count + 1;
            foreach (DataRow drRepaySruct in dtRepaymentStructure.Rows)
            {

                DataRow dr = DtRepayGridReLoad.NewRow();

                dr["slno"] = iSno;
                dr["CashFlow"] = "";
                dr["CashFlow_Flag_ID"] = "108";
                dr["Amount"] = drRepaySruct["Amount"];
                dr["PerInstall"] = drRepaySruct["INSURANCE_AMT"];//LIP Customer
                dr["FromInstall"] = drRepaySruct["InstallmentNo"];
                dr["ToInstall"] = drRepaySruct["InstallmentNo"];
                dr["FromDate"] = drRepaySruct["FromDate"];
                dr["ToDate"] = drRepaySruct["ToDate"];
                dr["CASHFLOW"] = "";
                dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strCashflow[1]));
                dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strCashflow[2]));
                dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strCashflow[3]));
                DtRepayGridReLoad.Rows.Add(dr);

                iSno = iSno + 1;
            }

            //LIP End

            //Dealer Comission Start
            //#region
            //if (ddlDealerCommissionApplicable.SelectedValue == "2")
            //{


            //    if (DtRepayGridReLoad != null)
            //    {
            //        DataRow[] dr2 = DtRepayGridReLoad.Select("CashFlow_Flag_ID=28");
            //        if (dr2.Length > 0)
            //        {
            //            foreach (DataRow drDelete in dr2)
            //            {
            //                drDelete.Delete();
            //            }
            //        }
            //        DtRepayGridReLoad.AcceptChanges();
            //    }

            //    string[] strCashflow2;
            //    DataTable dtBillInflow2 = ((DataSet)ViewState["InflowDDL"]).Tables[3];
            //    DataRow[] drBillCashFlow2 = dtBillInflow2.Select("CASHFLOW_FLAG_ID=28");
            //    if (drBillCashFlow2.Length == 0)
            //    {
            //        Utility.FunShowAlertMsg(this, "Billing -Dealer commission Payable Cashflow not defined");
            //        return;
            //    }
            //    else
            //    {
            //        strCashflow2 = drBillCashFlow2[0]["CashFlow_ID"].ToString().Split(',');
            //    }

            //    int iSno2 = dtRepaymentStructure.Rows.Count + 1;
            //    foreach (DataRow drRepaySruct in dtRepaymentStructure.Rows)
            //    {

            //        DataRow dr = DtRepayGridReLoad.NewRow();

            //        dr["slno"] = iSno2;
            //        dr["CashFlow"] = "";
            //        dr["CashFlow_Flag_ID"] = "109";
            //        dr["Amount"] = drRepaySruct["Amount"];
            //        dr["PerInstall"] = drRepaySruct["INSURANCE_PAYABLE"];
            //        dr["FromInstall"] = drRepaySruct["InstallmentNo"];
            //        dr["ToInstall"] = drRepaySruct["InstallmentNo"];
            //        dr["FromDate"] = drRepaySruct["FromDate"];
            //        dr["ToDate"] = drRepaySruct["ToDate"];
            //        dr["CASHFLOW"] = "";
            //        //dr["CashFlowId"] = "";
            //        //dr["TOTALPERIODINSTALL"] = "";
            //        dr["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strCashflow2[1]));
            //        dr["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strCashflow2[2]));
            //        dr["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strCashflow2[3]));
            //        DtRepayGridReLoad.Rows.Add(dr);

            //        iSno2 = iSno2 + 1;
            //    }
            //}
            //#endregion
            //Dealer Comission End

            DtRepayGridReLoad.AcceptChanges();


            double douAccountingIRR = 0;
            double douBusinessIRR = 0;
            double douCompanyIRR = 0;

            DataTable dtRepayDetailsOthers;
            DataTable dtMoratorium = new System.Data.DataTable();
            string strStartDte = txtApplicationDateDate.Text;
            DateTime dtDocFBDate = Utility.StringToDate(strStartDte);
            DataRow[] drFirstRow2 = ((DataTable)ViewState["DtRepayGrid"]).Select("CashFlow_Flag_ID = 23 and FromInstall=1");
            objRepaymentStructure.FunPubCalculateIRR(txtApplicationDateDate.Text, hdnPLR.Value, ddl_Frequency.SelectedValue, strDateFormat, txtResidualValue.Text, txtResidualValue_Cashflow.Text, out douAccountingIRR, out douBusinessIRR, out douCompanyIRR
                          , out dtRepaymentStructure
                       , out dtRepayDetailsOthers
                          , DtRepayGridReLoad, (DataTable)ViewState["DtCashFlow"], (DataTable)ViewState["DtCashFlowOut"]
                          , txtFinanceAmount.Text, txtMarginMoneyPer_Cashflow.Text, ddl_Return_Pattern.SelectedValue
                //, txtRate.Text, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                          , hdnRate.Value, ddlTenureType.SelectedItem.Text, txtTenure.Text, ddl_IRR_Rest.SelectedValue,
                          ddl_Time_Value.SelectedValue, ddlLOB_SelectedItem_Text.Value, ddl_Repayment_Mode.SelectedValue, "", dtMoratorium, dtDocFBDate.ToString(), null);


        #endregion
            DtRepayGridReLoad = null;
            funPriResetLIPCashFLow((DataTable)ViewState["DtRepayGrid"]);
            //IRR Re Arrive for LIP and Dealer Commission End

            txtAccountIRR_Repay.Text = douAccountingIRR.ToString("0.00000");
            txtAccountingIRR.Text = douAccountingIRR.ToString("0.00000");

            txtBusinessIRR_Repay.Text = douBusinessIRR.ToString("0.00000");
            txtBusinessIRR.Text = douBusinessIRR.ToString("0.00000");

            txtCompanyIRR_Repay.Text = douCompanyIRR.ToString("0.00000");
            txtCompanyIRR.Text = douCompanyIRR.ToString("0.00000");
        }
        #endregion
    }

    protected void btnAddInflow_OnClick(object sender, EventArgs e)
    {
        try
        {
            FunPriInsertInflow();
            FunPriSetMaxLength_gvInflow();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            if (ex.Message.Contains("Column 'Date, CashInFlowID, InflowFromID, EntityID' is constrained to be unique"))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Cash Inflow", "alert('Cash flow cannot be repeated for the same date with same Customer/Entity');", true);
            }
            else
            {
                cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Due to Data Problem,Unable to Add Inflow";
                cvApplicationProcessing.IsValid = false;
            }
        }
    }

    #endregion

    protected void btnAddOutflow_OnClick(object sender, EventArgs e)
    {
        try
        {
            //outflow Entity Validation
            DropDownList ddlEntityName_InFlowFrom = gvOutFlow.FooterRow.FindControl("ddlPaymentto_OutFlow") as DropDownList;
            TextBox txtAmount_Outflow = gvOutFlow.FooterRow.FindControl("txtAmount_Outflow") as TextBox;
            UserControls_S3GAutoSuggest ddlEntityName_InFlow = gvOutFlow.FooterRow.FindControl("ddlEntityName_OutFlow") as UserControls_S3GAutoSuggest;
            //Asset Payto Validation Start 
            if (ddlEntityName_InFlowFrom.SelectedItem.Text.ToUpper() == "ENTITY")
            {
                DropDownList ddlOutflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
                string[] strArrayIds = ddlOutflowDesc.SelectedValue.Split(',');
                DataSet dsDealer = new DataSet();

                if (strArrayIds.Length >= 4)
                {
                    if (strArrayIds[4].ToString() == "41")
                    {

                        if (Session["PricingAssetDetails"] != null)
                        {
                            if (((DataTable)Session["PricingAssetDetails"]).Rows.Count > 0)
                            {
                                DataRow[] dr = ((DataTable)Session["PricingAssetDetails"]).Select("Entity_ID='" + ddlEntityName_InFlow.SelectedValue + "' and PAY_TO_ID=137");//Entity
                                if (dr.Length == 0)
                                {
                                    Utility.FunShowAlertMsg(this, "Selected Dealer/Customer not exists in Asset Details");
                                    return;
                                }
                                else
                                {
                                    decimal decSumFiananceAmount = 0;
                                    decSumFiananceAmount = Convert.ToDecimal(dr.CopyToDataTable().Compute("sum(Finance_Amount_1)", "1=1"));

                                    DataTable dtCashOutFlow = (DataTable)ViewState["DtCashFlowOut"];
                                    decimal decExistsFinAmount = 0;
                                    if (dtCashOutFlow.Rows.Count > 0)
                                    {
                                        DataRow[] dr3 = dtCashOutFlow.Select("CashFlow_Flag_ID=41 and OutflowFromId=145 and EntityID='" + ddlEntityName_InFlow.SelectedValue + "'");
                                        if (dr3.Length > 0)
                                        {
                                            decExistsFinAmount = Convert.ToDecimal(dr3.CopyToDataTable().Compute("sum(Amount)", "1=1").ToString());
                                        }
                                    }
                                    if (Convert.ToDecimal(txtAmount_Outflow.Text) + decExistsFinAmount > decSumFiananceAmount)
                                    {
                                        Utility.FunShowAlertMsg(this, "Finance amount Entered Exceeds for the Dealer/Customer in Asset Details");
                                        return;
                                    }

                                }

                            }
                        }
                        DataRow[] drDealer = ((DataSet)ViewState["OutflowDDL"]).Tables[1].Select("Entity_Type_Name = 'Dealer'");
                        dsDealer.Merge(drDealer);
                    }
                    else
                    {
                        dsDealer.Merge(((DataSet)ViewState["OutflowDDL"]).Tables[1]);
                    }
                }
            }

            if (ddlEntityName_InFlowFrom.SelectedItem.Text.ToUpper() == "CUSTOMER")
            {
                DropDownList ddlOutflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
                string[] strArrayIds = ddlOutflowDesc.SelectedValue.Split(',');
                DataSet dsDealer = new DataSet();

                if (strArrayIds.Length >= 4)
                {
                    if (strArrayIds[4].ToString() == "41")
                    {

                        if (Session["PricingAssetDetails"] != null)
                        {
                            if (((DataTable)Session["PricingAssetDetails"]).Rows.Count > 0)
                            {
                                DataRow[] dr = ((DataTable)Session["PricingAssetDetails"]).Select("Entity_ID='" + ddlEntityName_InFlow.SelectedValue + "' and PAY_TO_ID=138");//Customer
                                if (dr.Length == 0)
                                {
                                    Utility.FunShowAlertMsg(this, "Selected Dealer/Customer not exists in Asset Details");
                                    return;
                                }
                                else
                                {
                                    decimal decSumFiananceAmount = 0;
                                    decSumFiananceAmount = Convert.ToDecimal(dr.CopyToDataTable().Compute("sum(Finance_Amount_1)", "1=1"));



                                    DataTable dtCashOutFlow = (DataTable)ViewState["DtCashFlowOut"];
                                    decimal decExistsFinAmount = 0;
                                    DataRow[] dr3 = dtCashOutFlow.Select("CashFlow_Flag_ID=41 and OutflowFromId=144 and EntityID='" + ddlEntityName_InFlow.SelectedValue + "'");
                                    if (dr3.Length > 0)
                                    {
                                        decExistsFinAmount = Convert.ToDecimal(dr3.CopyToDataTable().Compute("sum(Amount)", "1=1").ToString());
                                    }

                                    if (dtCashOutFlow.Rows.Count > 0)
                                    {
                                        if (Convert.ToDecimal(txtAmount_Outflow.Text) + decExistsFinAmount > decSumFiananceAmount)
                                        {
                                            Utility.FunShowAlertMsg(this, "Finance amount Entered Exceeds for the Dealer/Customer in Asset Details");
                                            return;
                                        }
                                    }
                                }

                            }
                        }
                        DataRow[] drDealer = ((DataSet)ViewState["OutflowDDL"]).Tables[1].Select("Entity_Type_Name = 'Dealer'");
                        dsDealer.Merge(drDealer);
                    }
                    else
                    {
                        dsDealer.Merge(((DataSet)ViewState["OutflowDDL"]).Tables[1]);
                    }
                }
            }



            if (ddlEntityName_InFlowFrom.SelectedItem.Text.ToUpper() == "ENTITY")
            {
                DropDownList ddlOutflowDesc = gvOutFlow.FooterRow.FindControl("ddlOutflowDesc") as DropDownList;
                string[] strArrayIds = ddlOutflowDesc.SelectedValue.Split(',');
                DataSet dsDealer = new DataSet();



                if (strArrayIds.Length >= 4)
                {
                    if (strArrayIds[4].ToString() == "41")
                    {

                        if (Session["PricingAssetDetails"] != null)
                        {
                            if (((DataTable)Session["PricingAssetDetails"]).Rows.Count > 0)
                            {
                                DataRow[] dr = ((DataTable)Session["PricingAssetDetails"]).Select("Entity_ID='" + ddlEntityName_InFlow.SelectedValue + "'");//Entity
                                if (dr.Length == 0)
                                {
                                    Utility.FunShowAlertMsg(this, "Selected Dealer not exists in Asset Details");
                                    return;
                                }

                            }
                        }
                        //Code Added by saran for UAT Fix in round 4 on 18-Jul-2012 end 


                        DataRow[] drDealer = ((DataSet)ViewState["OutflowDDL"]).Tables[1].Select("Entity_Type_Name = 'Dealer'");
                        dsDealer.Merge(drDealer);
                    }
                    else
                    {
                        dsDealer.Merge(((DataSet)ViewState["OutflowDDL"]).Tables[1]);
                    }
                }
                //ddlEntityName_InFlow.BindDataTable(dsDealer.Tables[0]);
            }










            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL"))
            {
                if (ddlPaymentRuleList.SelectedValue == "0" && ddlBusinessOfferNoList.SelectedIndex == 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select Payment Rule');", true);
                    TabContainerAP.ActiveTabIndex = 1;
                    return;
                }
                if ((DataTable)ViewState["PaymentRules"] == null)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", "alert('Select Payment Rule');", true);
                    TabContainerAP.ActiveTabIndex = 1;
                    return;
                }
            }
            FunPriInsertOutflow((DataTable)ViewState["PaymentRules"]);
            //added by saranya
            // Modified by Thalai - Apply condition for Term Loan - Product method too.
            if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC") ||
                ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT") ||
                ((ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TE") ||
                ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL")) &&
                ddl_Repayment_Mode.SelectedItem.Text.ToUpper().StartsWith("PRO")))
            {
                btnGenerateRepay_Click(sender, e);
                TabContainerAP.Tabs[2].Enabled = false;
            }
            else
                TabContainerAP.Tabs[2].Enabled = true;

            FunPriSetMaxLength_gvOutFlow();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Column 'Date, CashOutFlowID' is constrained to be unique"))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Cash Outflow", "alert('Cash flow cannot be repeated for the same date with same Customer/Entity');", true);
            }
            else if (ex.Message.Contains("Column 'Date, CashOutFlowID, OutflowFromID, EntityID' is constrained to be unique"))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Cash Outflow", "alert('Cash flow cannot be repeated for the same date with same Customer/Entity');", true);
            }
            else
            {
                cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + "Due to Data Problem,Unable to Add Outflow";
                cvApplicationProcessing.IsValid = false;
            }
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    protected void btnFetchROI_Click(object sender, EventArgs e)
    {
        try
        {
            chk_lblMargin.Checked = false;
            FunPriFetchROIDetails();
            //chk_lblMargin_CheckedChanged(null, null);
            ddlROIRuleList.Focus();

            if (ddlPaymentRuleList.SelectedValue != "0")
            {
                ddlPaymentRuleList.ClearSelection();
                hdnPayment.Value = "";
            }
            if (ddlDealTransfer.SelectedValue == "1")
            {
                if (ViewState["FUTURE_INT"] != null)
                {
                    hdnRate.Value = txtRate.Text = (Convert.ToDecimal(ViewState["FUTURE_INT"].ToString()) * 1200 / (Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToInt32(txtTenure.Text))).ToString(Funsetsuffix());
                    txtRate.Text = Convert.ToDecimal(hdnRate.Value).ToString("0.000");
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + ex.Message;
            //cvApplicationProcessing.IsValid = false;
        }
    }


    protected void btnAddRepayment_OnClick(object sender, EventArgs e)
    {
        try
        {
            FunPriInsertRepayment();
            FunPriSetMaxLength_gvRepaymentDetails();
            btnReset.Enabled_True();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void btnAddAlert_OnClick(object sender, EventArgs e)
    {
        try
        {
            FunPriInsertAlert();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void btnAddFollowUp_OnClick(object sender, EventArgs e)
    {
        try
        {
            FunPriInsertFollowup();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void btnAddGuarantor_OnClick(object sender, EventArgs e)
    {
        try
        {
            FunPriInsertGuarantor();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void btnAddMoratorium_OnClick(object sender, EventArgs e)
    {
        try
        {
            FunPriInsertMoratorium();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void FunPriGetPricingDetails(int intPricingId)
    {
        try
        {

            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Pricing_ID", intPricingId.ToString());
            Procparam.Add("@COMPANY_ID", intCompanyId.ToString());
            Procparam.Add("@Mode", strMode);
            DataSet ds_PricingDetails = Utility.GetDataset("S3G_OR_GET_PRICGDET_APP", Procparam);
            // ViewState["checklist"] = ds_PricingDetails.Tables[17];
            if (ds_PricingDetails != null)
            {
                if (ds_PricingDetails.Tables[0].Rows.Count > 0)
                {



                    //Temp Commented on 17-Dec-2019 for UAT as Per Narien
                    //if (ds_PricingDetails.Tables[0].Rows[0]["OFFEREXPIRED"].ToString() == "EXPIRED")
                    //{
                    //    Utility.FunShowAlertMsg(this, "Selected Check List Expired");
                    //    ddlApplicationNo.Clear();
                    //    return;
                    //}

                    if (ViewState["CHK_APPDT"].ToString() == "1")
                    {
                        txtApplicationDateDate.Enabled = true;
                        CalendarApplicationDate.Enabled = true;
                        rfvApplicationDate.Enabled = true;
                    }
                    else
                    {
                        Utility.FunShowAlertMsg(this, "User Does not have Special Access Rights for Application Process Application Date Modification");
                    }

                    //ddlApplicationNo.ToolTip = ddlApplicationNo.SelectedText = ds_PricingDetails.Tables[0].Rows[0]["Business_Offer_Number"].ToString();
                    //ddlApplicationNo.SelectedValue = intPricingId.ToString();
                    txtProposalNumber.Text = ds_PricingDetails.Tables[0].Rows[0]["Business_Offer_Number"].ToString();
                    ddlLOB.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["LOB_ID"].ToString();

                    ViewState["OFFER_DATE"] = ds_PricingDetails.Tables[0].Rows[0]["OFFER_DATE"].ToString();

                    ddlLOB_SelectedIndexChanged(null, null);
                    if (hdnLobCode.Value.ToUpper() == "FT" || hdnLobCode.Value.ToUpper() == "WC")
                    {
                        hdnROIRule.Value = "";
                        funPriLoadFWCCheckList(ds_PricingDetails);
                        return;
                    }
                    //ddlLOB_SelectedItem_Text.Value = ds_PricingDetails.Tables[0].Rows[0]["LOB"].ToString();
                    //ddlBranchList.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Location_ID"].ToString();
                    //cmbLocation_SelectedIndexChanged(null, null);
                    //cmbSubLocation.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString();




                    //cmbLocation.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Location_ID"].ToString();

                    if (ddlBranchList.Items.FindByValue(ds_PricingDetails.Tables[0].Rows[0]["Location_ID"].ToString()) != null)
                    {
                        ddlBranchList.Items.FindByValue(ds_PricingDetails.Tables[0].Rows[0]["Location_ID"].ToString()).Selected = true;
                    }
                    else
                    {
                        System.Web.UI.WebControls.ListItem lstitem;
                        lstitem = new System.Web.UI.WebControls.ListItem();
                        lstitem.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Location"]);
                        lstitem.Value = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Location_ID"]);
                        ddlBranchList.Items.Add(lstitem);
                        ddlBranchList.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Location_ID"]);
                    }


                    cmbLocation_SelectedIndexChanged(null, null);




                    //cmbSubLocation.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString();

                    if (cmbSubLocation.Items.FindByValue(ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString()) != null)
                    {
                        cmbSubLocation.Items.FindByValue(ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString()).Selected = true;
                    }
                    else
                    {
                        if (ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString() != string.Empty)
                        {
                            System.Web.UI.WebControls.ListItem lstitem;
                            lstitem = new System.Web.UI.WebControls.ListItem();
                            lstitem.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION"]);
                            lstitem.Value = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"]);
                            cmbSubLocation.Items.Add(lstitem);
                            cmbSubLocation.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"]);
                        }
                    }




                    funCheckGPSMonth();
                    //ddlCustomerType.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["CUSTOMER_TYPE"].ToString();
                    //ddlAppraisalType.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["CONTRACT_TYPE"].ToString();
                    HttpContext.Current.Session["ddlContType"] = ddlContType.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["CONTRACT_TYPE"].ToString();
                    //ddlDealType.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["DEAL_TYPE"].ToString();
                    ddlDealerName.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["DEALER_ID"].ToString();
                    ddlBusinessSource.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["DEAL_TYPE"].ToString();
                    ddlBusinessSource_SelectedIndexChanged(null, null);
                    //ddlDealType_SelectedIndexChanged(null, null);
                    ddlDealerName.SelectedText = ds_PricingDetails.Tables[0].Rows[0]["Dealer_Name"].ToString();
                    ddlSalePersonCodeList.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["SALES_PERSON_ID"].ToString();
                    ddlSalePersonCodeList.SelectedText = ds_PricingDetails.Tables[0].Rows[0]["Sales_Person_Name"].ToString();

                    //ddlProductCodeList.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Product_ID"].ToString();
                    ddlProductCodeList.ClearSelection();
                    if (ddlProductCodeList.Items.FindByValue(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"].ToString()) != null)
                    {
                        ddlProductCodeList.Items.FindByValue(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"].ToString()).Selected = true;
                    }
                    else
                    {
                        ListItem lstitem;
                        lstitem = new ListItem();
                        lstitem.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["PRODUCT"]);
                        lstitem.Value = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"]);
                        ddlProductCodeList.Items.Add(lstitem);
                        ddlProductCodeList.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"]);
                    }
                    ddlProductCodeList_SelectedIndexChanged(null, null);

                    //txtOfferDate.Text = ds_PricingDetails.Tables[0].Rows[0]["Offer_Date"].ToString();
                    txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(ds_PricingDetails.Tables[0].Rows[0]["FACILITY_AMOUNT"].ToString());
                    funPriSetGuarantorAmount();
                    txtTenure.Text = ds_PricingDetails.Tables[0].Rows[0]["Tenure"].ToString();
                    ddlTenureType.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Tenure_Type"].ToString();
                    ddldealerSalesPerson.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["DEALER_SALESPERSON_ID"].ToString();
                    ddldealerSalesPerson.SelectedText = ds_PricingDetails.Tables[0].Rows[0]["Dealer_Sales_Persion"].ToString();

                    txtSellerName.Text = ds_PricingDetails.Tables[0].Rows[0]["SELLER_NAME"].ToString();
                    txtSellerCode.Text = ds_PricingDetails.Tables[0].Rows[0]["SELLER_ID"].ToString();

                    TextBox txtName = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                    txtName.Text = ds_PricingDetails.Tables[0].Rows[0]["customer"].ToString();
                    HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                    hdnCID.Value = ds_PricingDetails.Tables[0].Rows[0]["customer_id"].ToString();
                    ViewState["ConsitutionId"] = ds_PricingDetails.Tables[0].Rows[0]["CONSTITUTION_ID"].ToString();


                    btnLoadCustomer_Click(null, null);
                    //FunPriLoadAddressDetails(Convert.ToInt32(ds_PricingDetails.Tables[0].Rows[0]["customer_id"].ToString()));
                    txtAccountNumber.Text = ds_PricingDetails.Tables[0].Rows[0]["AccountNumber"].ToString();
                    //ddlStatus.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["STATUS_ID"].ToString();
                    hdnCustID.Value = ds_PricingDetails.Tables[0].Rows[0]["customer_id"].ToString();
                    ddlDealerName_Item_Selected(null, null);
                    txtFirstInstallDate.Text = ds_PricingDetails.Tables[0].Rows[0]["PDC_STARTDATE"].ToString();
                    if (ds_PricingDetails.Tables[0].Rows[0]["PDC_STARTDATE"].ToString() != string.Empty)
                        txtPdcStartDate.Text = Utility.StringToDate(ds_PricingDetails.Tables[0].Rows[0]["PDC_STARTDATE"].ToString()).ToString(strDateFormat);
                    txtPDCEndDate.Text = Utility.StringToDate(txtPdcStartDate.Text).AddMonths(Convert.ToInt32(txtTenure.Text)).ToString(strDateFormat);
                    txtPdcStartDate_TextChanged(null, null);

                    ViewState["IntInstallmentRoundofPosition"] = ddlInstallmentRoundOff.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["INS_ROUND_OFF_POS"].ToString();
                    ddlInstallmentRoundOff.ClearDropDownList();

                    txtPdcStartDate.Enabled = true;
                    // ds_PricingDetails.Tables[0].Rows[0]["Business_Offer_Number"].ToString()

                }
                else
                {
                    //Utility.FunShowAlertMsg(this, "Due to data Problem Unnable to Load Proposal Details");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege67));
                    return;
                }
                //txtConstitutionCode.Text = ds_PricingDetails.Tables[0].Rows[0]["Consitution"].ToString();
                if (strMode == "Q")
                {
                    //    btnAddNew.Enabled = false;
                }
                if (ds_PricingDetails.Tables[1].Rows.Count > 0)
                {
                    gvAlert.DataSource = ds_PricingDetails.Tables[1];
                    gvAlert.DataBind();
                    ViewState["DtAlertDetails"] = ds_PricingDetails.Tables[1];
                    //FunPriFill_Alert_Tab(_Edit);
                }
                else
                {
                    //FunPriFill_Alert_Tab(_Add);
                }
                if (ds_PricingDetails.Tables[2].Rows.Count > 0)
                {
                    Session["PricingAssetDetails"] = ds_PricingDetails.Tables[2];
                    gvAssetDetails.DataSource = ds_PricingDetails.Tables[2];
                    gvAssetDetails.DataBind();
                    txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();

                    decimal dcmMarginAmount = (decimal)(ds_PricingDetails.Tables[2].Compute("Sum(Margin_Amount_1)", "Noof_Units > 0"));
                    txtMarginAmount.Text = Utility.funPubChangeCurrencyFormat((dcmMarginAmount == 0) ? "" : dcmMarginAmount.ToString(Funsetsuffix()));
                    decimal dcmAssetFinAmount2 = (decimal)(ds_PricingDetails.Tables[2].Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                    txtFinanceAmount.Text = (dcmAssetFinAmount2 == 0) ? "" : dcmAssetFinAmount2.ToString(Funsetsuffix());
                    txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(txtFinanceAmount.Text);
                    funPriSetGuarantorAmount();
                    if (ViewState["StartDelayRate"] != null)
                    {
                        txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                        //txtStartdelaycharges.Text = ((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix());
                    }

                    txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
                    decimal dcmAssetTradeIn = (decimal)(ds_PricingDetails.Tables[2].Compute("Sum(Trade_In_1)", "Noof_Units > 0"));
                    txtdiscount.Text = (dcmAssetTradeIn == 0) ? "" : dcmAssetTradeIn.ToString(Funsetsuffix());
                    txtdiscount.funPubChangeCurrencyFormat();
                    decimal decUNITVALUE1 = (decimal)(ds_PricingDetails.Tables[2].Compute("Sum(UNIT_VALUE_1)", "Noof_Units > 0"));
                    txtTotalAssetCost.Text = decUNITVALUE1.ToString(Funsetsuffix());
                    txtTotalAssetCost.funPubChangeCurrencyFormat();

                    decimal deTotalFin = (decimal)(ds_PricingDetails.Tables[2].Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                    txtTotalFinanceAmount.Text = deTotalFin.ToString(Funsetsuffix());
                    txtTotalFinanceAmount.funPubChangeCurrencyFormat();
                    //funPriAutoLoadOutflowDetailsfromCheckList();

                    //FunProBindAssetGrid();

                }
                if (ds_PricingDetails.Tables[3].Rows.Count > 0)
                {
                    gvPRDDT.DataSource = ds_PricingDetails.Tables[3];
                    gvPRDDT.DataBind();
                    pnlPreDisbursementDocumentDetails.Visible = true;
                }
                if (ds_PricingDetails.Tables[4].Rows.Count > 0)
                {
                    //GRVPDCDetails.DataSource = ds_PricingDetails.Tables[4];
                    //GRVPDCDetails.DataBind();
                    //ViewState["PDC"] = ds_PricingDetails.Tables[4];
                    //ddlPdcType.SelectedValue = ds_PricingDetails.Tables[4].Rows[0]["IS_SECURITY"].ToString();
                }
                //ddlRepamentMode.SelectedValue = "3";
                if (ddlRepamentMode.Items.FindByValue("3") != null)//PDC by Default
                {
                    ddlRepamentMode.Items.FindByValue("3").Selected = true;//PDC by Default
                }
                ddlLeadSourceName.SelectedValue = ddlDealerName.SelectedValue;
                ddlLeadSourceName.SelectedText = ddlDealerName.SelectedText;
                ddlLeadSource.SelectedValue = "3";

                //Load Risk Details
                ddlRiskRating.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["RISKTEAM_RISK_RATING"].ToString();
                txtRiskRemarks.Text = ds_PricingDetails.Tables[0].Rows[0]["RISK_REMARKS"].ToString();
                txtRiskScore.Text = ds_PricingDetails.Tables[0].Rows[0]["RISK_VALUE"].ToString();
                ddlRiskQualityValue.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["RISK_QLTY_VALUE"].ToString();
                txtRiskDocumentNo.Text = ds_PricingDetails.Tables[0].Rows[0]["RISK_DOC_NO"].ToString();

                if (ds_PricingDetails.Tables[5].Rows.Count > 0)
                {
                    ViewState["dtGuarantorGrid"] = ds_PricingDetails.Tables[5];
                    gvGuarantor.DataSource = (DataTable)ViewState["dtGuarantorGrid"];
                    gvGuarantor.DataBind();
                    FunPriGenerateNewGuarantor();

                }
                if (ds_PricingDetails.Tables[6].Rows.Count > 0)
                {
                    gvGuarantorFromDMS.DataSource = ds_PricingDetails.Tables[6];
                    gvGuarantorFromDMS.DataBind();
                }
                if (ds_PricingDetails.Tables[7].Rows.Count > 0)
                {

                    grvConsDocuments.DataSource = ds_PricingDetails.Tables[7];
                    grvConsDocuments.DataBind();
                }
                //FunPriFill_AssetTab(_Edit);

                if (ds_PricingDetails.Tables[0].Rows[0]["Roi_Id"].ToString() != "0")
                {
                    ddlROIRuleList.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Roi_Id"].ToString();
                    btnFetchROI_Click(null, null);
                }

                if (ds_PricingDetails.Tables[0].Rows[0]["Pay_Rule_Id"].ToString() != "0")
                {
                    ddlPaymentRuleList.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Pay_Rule_Id"].ToString();
                    ViewState["OnloadChecklist"] = "1";
                    btnFetchPayment_Click(null, null);
                }

                ViewState["PDC"] = ds_PricingDetails.Tables[4];
                hdnRate.Value = ds_PricingDetails.Tables[0].Rows[0]["INTEREST_RATE"].ToString();
                txtRate.Text = Convert.ToDecimal(hdnRate.Value).ToString("0.000");
                funPriArriveFlatRateRate();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriSetGuarantorAmount()
    {
        try
        {
            if (gvGuarantor.FooterRow != null)
            {
                if (txtFinanceAmount.Text != string.Empty)
                {
                    TextBox txtGuaranteeamount_GuarantorTab3 = gvGuarantor.FooterRow.FindControl("txtGuaranteeamount_GuarantorTab_Footer") as TextBox;
                    txtGuaranteeamount_GuarantorTab3.Text = Convert.ToDecimal(txtFinanceAmount.Text).ToString(Funsetsuffix());
                    txtGuaranteeamount_GuarantorTab3.funPubChangeCurrencyFormat();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriAutoLoadOutflowDetailsfromCheckList()
    {
        try
        {
            //ddlROIRuleList.SelectedValue == "";
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void funPriLoadFWCCheckList(DataSet ds_PricingDetails)
    {
        try
        {
            ddlBranchListFWC.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["Location_ID"].ToString();
            ddlBranch_SelectedIndexChangedFWC(null, null);
            if (ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString() != string.Empty)
            {
                cmbSubLocationFWC.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString();
            }
            ddlRelationshipManager.SelectedValue = ds_PricingDetails.Tables[0].Rows[0]["SALES_PERSON_ID"].ToString();
            ddlRelationshipManager.SelectedText = ds_PricingDetails.Tables[0].Rows[0]["Sales_Person_Name"].ToString();
            ddlProductCodeListFWC.ClearSelection();
            if (ddlProductCodeListFWC.Items.FindByValue(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"].ToString()) != null)
            {
                ddlProductCodeListFWC.Items.FindByValue(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"].ToString()).Selected = true;
            }
            else
            {
                ListItem lstitem;
                lstitem = new ListItem();
                lstitem.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["PRODUCT"]);
                lstitem.Value = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"]);
                ddlProductCodeListFWC.Items.Add(lstitem);
                ddlProductCodeListFWC.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"]);
            }
            txtDebtPurchaseLimitFWC.Text = txtPrePaymentLimitFWC.Text = ds_PricingDetails.Tables[0].Rows[0]["FACILITY_AMOUNT"].ToString();
            txtPrePaymentLimitFWC.funPubChangeCurrencyFormat();
            txtDebtPurchaseLimitFWC.funPubChangeCurrencyFormat();
            TextBox TxtAccNumber = (TextBox)ucCustomerLovFWC.FindControl("TxtName");
            TextBox txtAccItemNumber = (TextBox)ucCustomerLovFWC.FindControl("txtItemName");
            HiddenField hdnCID = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
            hdnCustID.Value = hdnCID.Value = ds_PricingDetails.Tables[0].Rows[0]["customer_id"].ToString();


            btnLoadCustomerFWC_Click(null, null);
            funPriLoadAppriasalInfo("", ViewState["ConsitutionId"].ToString(), ddlProductCodeList.SelectedValue, ddlLOB.SelectedValue);

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    protected void gvPRDDT_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {




            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                UserInfo ObjUserInfo = new UserInfo();

                UserControls_S3GAutoSuggest ddlCollectedBy = (UserControls_S3GAutoSuggest)e.Row.FindControl("ddlCollectedBy") as UserControls_S3GAutoSuggest;
                UserControls_S3GAutoSuggest ddlCADReceivedBy = (UserControls_S3GAutoSuggest)e.Row.FindControl("ddlCADReceivedBy") as UserControls_S3GAutoSuggest;
                UserControls_S3GAutoSuggest ddlCADVerifiedBy = (UserControls_S3GAutoSuggest)e.Row.FindControl("ddlCADVerifiedBy") as UserControls_S3GAutoSuggest;



                Label lblDocRequired = (Label)e.Row.FindControl("lblDocRequired");
                Label lblPath = (Label)e.Row.FindControl("lblPath");
                DropDownList ddlRequired = (DropDownList)e.Row.FindControl("ddlRequired");
                Label lblDocReceived = (Label)e.Row.FindControl("lblDocReceived");
                DropDownList ddlReceived = (DropDownList)e.Row.FindControl("ddlReceived");
                ddlRequired.SelectedValue = lblDocRequired.Text;
                ddlReceived.SelectedValue = lblDocReceived.Text;

                TextBox txtCollectedDate = (TextBox)e.Row.FindControl("txtCollectedDate");
                TextBox txtCADReceived = (TextBox)e.Row.FindControl("txtCADReceived");
                TextBox txtCADVerifiedDate = (TextBox)e.Row.FindControl("txtCADVerifiedDate");

                txtCollectedDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtCollectedDate.ClientID + "','" + strDateFormat + "',true,  false);");//Future Date False,Back Date False
                txtCADReceived.Attributes.Add("onblur", "fnDoDate(this,'" + txtCADReceived.ClientID + "','" + strDateFormat + "',true,  false);");//Future Date False,Back Date False
                txtCADVerifiedDate.Attributes.Add("onblur", "fnDoDate(this,'" + txtCADVerifiedDate.ClientID + "','" + strDateFormat + "',true,  false);");//Future Date False,Back Date False
                LinkButton Viewdoct = (LinkButton)e.Row.FindControl("hyplnkView");
                Label lblCollectedBy = (Label)e.Row.FindControl("lblCollectedBy");
                Label lblCollectedByName = (Label)e.Row.FindControl("lblCollectedByName");
                Label lblCADVerifiedById = (Label)e.Row.FindControl("lblCADVerifiedById");
                Label lblCADVerifiedByIdName = (Label)e.Row.FindControl("lblCADVerifiedByIdName");
                Label lblCADReceivedById = (Label)e.Row.FindControl("lblCADReceivedById");
                Label lblCADReceivedByIdName = (Label)e.Row.FindControl("lblCADReceivedByIdName");

                TextBox txtCADVerifierRemarks = (TextBox)e.Row.FindControl("txtCADVerifierRemarks");
                TextBox txtCADReceiverRemarks = (TextBox)e.Row.FindControl("txtCADReceiverRemarks");
                TextBox txtRemarks = (TextBox)e.Row.FindControl("txtRemarks");
                TextBox txtCADValue = (TextBox)e.Row.FindControl("txtCADValue");




                if (lblPath.Text == string.Empty)
                {
                    Viewdoct.Enabled_False_Link_Asp();
                }
                else
                {
                    Viewdoct.Enabled_True_Link_Asp();
                }
                //if (lblCollectedByName.Text == string.Empty)
                //{
                //    ddlCollectedBy.SelectedValue = ObjUserInfo.ProUserIdRW.ToString();
                //    ddlCollectedBy.SelectedText = ObjUserInfo.ProUserNameRW;
                //}
                //else
                //{
                //    ddlCollectedBy.SelectedValue = lblCollectedBy.Text;
                //    ddlCollectedBy.SelectedText = lblCollectedByName.Text;
                //}

                //if (ddlCADReceivedBy.SelectedText == string.Empty)
                //{

                //    ddlCADReceivedBy.SelectedValue = ObjUserInfo.ProUserIdRW.ToString();
                //    ddlCADReceivedBy.SelectedText = ObjUserInfo.ProUserNameRW;
                //}
                //else
                //{
                //    ddlCADReceivedBy.SelectedValue = lblCADReceivedById.Text;
                //    ddlCADReceivedBy.SelectedText = lblCADReceivedByIdName.Text;

                //}
                //if (ddlCADVerifiedBy.SelectedText == string.Empty)
                //{
                //    ddlCADVerifiedBy.SelectedValue = ObjUserInfo.ProUserIdRW.ToString();
                //    ddlCADVerifiedBy.SelectedText = ObjUserInfo.ProUserNameRW;
                //}
                //else
                //{
                //    ddlCADVerifiedBy.SelectedValue = lblCADVerifiedById.Text;
                //    ddlCADVerifiedBy.SelectedText = lblCADVerifiedByIdName.Text;
                //}

                ddlCADReceivedBy.Enabled = false;
                ddlCollectedBy.Enabled = false;
                ddlCADVerifiedBy.Enabled = false;

                //Controls to be Disabled
                ddlRequired.Enabled = false;
                ddlReceived.Enabled = false;
                txtCollectedDate.Enabled = false;
                txtCADVerifiedDate.Enabled = false;
                txtCADVerifierRemarks.Enabled = false;
                txtCADReceived.Enabled = false;
                txtCADReceiverRemarks.Enabled = false;
                txtRemarks.Enabled = false;
                txtCADValue.Enabled = false;



                AjaxControlToolkit.CalendarExtender calCollectedDate = (AjaxControlToolkit.CalendarExtender)e.Row.FindControl("calCollectedDate");
                // AjaxControlToolkit.CalendarExtender calScannedDate = (AjaxControlToolkit.CalendarExtender)e.Row.FindControl("calScannedDate");
                AjaxControlToolkit.CalendarExtender calCADReceived = (AjaxControlToolkit.CalendarExtender)e.Row.FindControl("calCADReceived");
                AjaxControlToolkit.CalendarExtender calCADVerified = (AjaxControlToolkit.CalendarExtender)e.Row.FindControl("calCADVerified");

                calCADVerified.Format = calCADReceived.Format = calCollectedDate.Format = strDateFormat;
                TextBox txtColletedDate = (TextBox)e.Row.FindControl("txtCollectedDate");
                //DropDownList ddlScannedby = (DropDownList)e.Row.FindControl("ddlScannedby");
                //TextBox txtScannedDate = (TextBox)e.Row.FindControl("txtScannedDate");
                ////CheckBox Cbx1IsCollected = (CheckBox)e.Row.FindControl("CbxCheck");
                //Label lblScanned2 = (Label)e.Row.FindControl("lblScanned");
                //CheckBox CbxIsscanned = (CheckBox)e.Row.FindControl("CbxIsscanned");
                //Label lblIsCollected = (Label)e.Row.FindControl("lblCollected");
                //Label lblMandatory = (Label)e.Row.FindControl("lblMandatory");

                //if (lblIsCollected.Text == "1")
                //    Cbx1IsCollected.Checked = true;
                //else
                //    Cbx1IsCollected.Checked = false;

                //if (lblScanned2.Text != string.Empty)
                //{
                //    if (lblScanned2.Text == "1")
                //        CbxIsscanned.Checked = true;
                //}

                //if (lblDocReceived.Text != string.Empty)
                //{
                //    if (lblDocReceived.Text == "1")
                //    {

                //    }
                //}

                //Label lblScannedBy = e.Row.FindControl("lblScannedBy") as Label;
                //if (lblCollectedBy.Text != "")
                //{
                //}
                //if (lblScannedBy.Text != "")
                //{
                //}
                //Label lblScanned = e.Row.FindControl("lblScanned") as Label;


                //ObjUserInfo = null;
                //calScannedDate.Enabled = false;
                //txtScannedDate.ReadOnly = true;


                //if (lblCollectedBy.Text.Trim() != "")
                //{
                //    if (Convert.ToInt32(lblCollectedBy.Text) > 0)
                //    {
                //    }
                //    else
                //    {
                //    }
                //}
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    protected void CbxReceivedStatus_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CheckBox CbxReceivedStatus = sender as CheckBox;
            int intCurrentRow = ((GridViewRow)CbxReceivedStatus.Parent.Parent).RowIndex;
            Label lblReceivedStatus = (Label)gvPRDDT.Rows[intCurrentRow].FindControl("lblReceivedStatus");
            if (CbxReceivedStatus.Checked)
            {

                lblReceivedStatus.Text = "1";
            }
            else
            {
                lblReceivedStatus.Text = "0";
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void CbxIsscanned_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CheckBox CbxIsscanned = sender as CheckBox;
            int intCurrentRow = ((GridViewRow)CbxIsscanned.Parent.Parent).RowIndex;
            Label lblScanned = (Label)gvPRDDT.Rows[intCurrentRow].FindControl("lblScanned");
            if (CbxIsscanned.Checked)
            {

                lblScanned.Text = "1";
            }
            else
            {
                lblScanned.Text = "0";
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void CbxMandatory_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CheckBox CbxMandatory = sender as CheckBox;
            int intCurrentRow = ((GridViewRow)CbxMandatory.Parent.Parent).RowIndex;
            Label lblMandatory = (Label)gvPRDDT.Rows[intCurrentRow].FindControl("lblMandatory");
            if (CbxMandatory.Checked)
            {

                lblMandatory.Text = "1";
            }
            else
            {
                lblMandatory.Text = "0";
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void CbxCheck_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CheckBox CbxCheckCollected = sender as CheckBox;
            int intCurrentRow = ((GridViewRow)CbxCheckCollected.Parent.Parent).RowIndex;
            Label lblCollected = (Label)gvPRDDT.Rows[intCurrentRow].FindControl("lblCollected");
            if (CbxCheckCollected.Checked)
            {

                lblCollected.Text = "1";
            }
            else
            {
                lblCollected.Text = "0";
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void hyplnkView_Click(object sender, EventArgs e)
    {
        try
        {
            string strFieldAtt = ((LinkButton)sender).ClientID;
            int gRowIndex = Utility.FunPubGetGridRowID("gvPRDDT", strFieldAtt);
            Label lblPath = gvPRDDT.Rows[gRowIndex].FindControl("lblPath") as Label;
            string strFileName = lblPath.Text.Replace("\\", "/").Trim();
            string strScipt = "window.open('../Common/S3GViewFile.aspx?qsFileName=" + strFileName + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void btnLoadCheckList_OnClick(object sender, EventArgs e)
    {
        try
        {
            string hdnProposalId = string.Empty;
            //HiddenField hdnProposalId = (HiddenField)ddlApplicationNo.FindControl("hdnID");
            hdnProposalId = ddlApplicationNo.SelectedValue;


            if (hdnProposalId != null || hdnProposalId != string.Empty)
            {

                FunPriGetPricingDetails(Convert.ToInt32(hdnProposalId));
                if (ddlApplicationNo.SelectedValue != "0")
                {

                    ddlLOB.Enabled = false;
                    funPrishowProposalfromChecklistControls(false);
                    HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                    if (hdnCID.Value == string.Empty)
                    {
                        Utility.FunShowAlertMsg(this, "Convert the Prospect to Customer or Map the Existing Customer");
                    }
                }
            }
            else
            {
                // Utility.FunShowAlertMsg(this, "Proposal Details not available");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege68));
                return;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }


    private void funPrishowProposalfromChecklistControls(bool bShowHide)
    {
        try
        {
            //TextBox TxtName = ((TextBox)ddlApplicationNo.FindControl("TxtName"));
            //Button btnGetLOV = ((Button)ddlApplicationNo.FindControl("btnGetLOV"));
            ddlApplicationNo.Enabled = bShowHide;
            //TxtName.Enabled = bShowHide;
            //btnGetLOV.Enabled = bShowHide;

            HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            TextBox TxtNameCustomer = ((TextBox)ucCustomerCodeLov.FindControl("TxtName"));
            Button btnGetLOVCustomer = ((Button)ucCustomerCodeLov.FindControl("btnGetLOV"));

            ddlBranchList.Enabled = bShowHide;
            cmbSubLocation.Enabled = bShowHide;
            ddlProductCodeList.Enabled = bShowHide;
            //ddlSalePersonCodeList.Enabled = bShowHide;


            if (hdnCID.Value == string.Empty)
            {
                if (bShowHide)
                {
                    Utility.FunShowAlertMsg(this, "Convert the Prospect to Customer or Map the Existing Customer");
                }

                //btnCreateCustomer.Disabled = false;
                //btnCreateCustomer.Attributes.Remove("disabled");
                //btnCreateCustomer.Attributes.Add("class", "btn_control");  // enab
                //TxtNameCustomer.Enabled = btnGetLOVCustomer.Enabled = false;

                btnCreateCustomer.Disabled = false;
                TxtNameCustomer.Enabled = btnGetLOVCustomer.Enabled = true;
                btnCreateCustomer.Attributes.Remove("disabled");
                btnCreateCustomer.Attributes.Add("class", "btn_control");  // enab
            }
            else
            {
                btnCreateCustomer.Disabled = true;
                btnCreateCustomer.Attributes.Add("disabled", "disabled");
                btnCreateCustomer.Attributes.Add("class", "btn_control_disable");  // enab
                TxtNameCustomer.Enabled = btnGetLOVCustomer.Enabled = false;
            }
            ddlContType.Enabled = bShowHide;
            ddlDealType.Enabled = bShowHide;
            txtFirstInstallDate.Enabled = bShowHide;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    protected void btnLoadCustomer_OnClick(object sender, EventArgs e)
    {
        try
        {

            if (ViewState["Guarantee"] == null)
            {
                if (ViewState["Guarantee"] != "G")
                {
                    HiddenField hdnCustomerId = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                    if (hdnCustomerId != null)
                    {
                        if (hdnCustomerId.Value != "")
                        {
                            hdnCustID.Value = hdnCustomerId.Value;
                            FunPubQueryExistCustomerListEnquiryUpdation(Convert.ToInt32(hdnCustomerId.Value));

                            Dictionary<string, string> Procparam = new Dictionary<string, string>();
                            Procparam.Add("@Is_Active", "1");
                            Procparam.Add("@User_Id", intUserId.ToString());
                            Procparam.Add("@Company_ID", intCompanyId.ToString());
                            Procparam.Add("@Consitution_Id", hdnConstitutionId.Value);
                            Procparam.Add("@Program_Id", "38");
                            ddlLOB.BindDataTable(SPNames.LOBMaster, Procparam, new string[] { "LOB_ID", "LOB_Code", "LOB_Name" });

                            FunPriAssignAssetLink();
                            //txtCustNameAdd_Followup.Text = S3GCustomerAddress1.CustomerName + "\n" + S3GCustomerAddress1.CustomerAddress;

                            //CustomerDetails1.SetCustomerDetails(Convert.ToInt32(hdnCustomerId.Value), true);
                            //txtCustomerName.Text = CustomerDetails1.CustomerName.ToString();
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    #endregion

    #region GridEvents

    #region Asset Tab
    protected void gvAssetDetails_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            FunPriRemoveAsset(sender, e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void grvloanasset_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {

            FunPriRemoveDeleteloanAsset(sender, e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    protected void gvAssetDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            FunPriBindAssetDetails(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void grvloanasset_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            FunPriBindLoanAssetDetails(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    #endregion

    protected void gvInflow_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            FunPriRemoveInflow(e);
            FunPriSetMaxLength_gvInflow();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvInflow_RowCreated(object sender, GridViewRowEventArgs e)
    {
        try
        {
            FunPriAssignInflowDateFormat(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvOutFlow_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            FunPriRemoveOutflow(e);
            FunPriSetMaxLength_gvOutFlow();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvOutFlow_RowCreated(object sender, GridViewRowEventArgs e)
    {
        try
        {
            FunPriAssignOutflowDateFormat(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvRepaymentDetails_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            FunPriRemoveRepayment(e);
            FunPriSetMaxLength_gvRepaymentDetails();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvRepaymentDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            FunPriBindRepaymentDetails(e);
            FunPriSetMaxLength_gvRepaymentDetails();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvRepaymentDetails_RowCreated(object sender, GridViewRowEventArgs e)
    {
        try
        {
            FunPriAssignRepaymentDateFormat(e);
            FunPriSetMaxLength_gvRepaymentDetails();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvAlert_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            FunPriRemoveAlert(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvAlert_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            FunPriBindAlertDetails(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriBindAlertDetails(GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                CheckBox ChkAlertEmail = e.Row.FindControl("ChkEmail") as CheckBox;
                CheckBox ChkAlertSMS = e.Row.FindControl("ChkSMS") as CheckBox;
                ChkAlertEmail.Enabled = ChkAlertSMS.Enabled = false;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvFollowUp_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            FunPriRemoveFollowup(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvFollowUp_RowCreated(object sender, GridViewRowEventArgs e)
    {
        try
        {
            FunPriAssignFollowupDateFormat(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void grvConsDocs_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {

            FunPriBindConstitutionDocuments(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvGuarantor_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            FunPriRemoveGuarantor(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvInvoiceDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            FunPriBindInvoiceDetails(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvGuarantor_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            FunPriBindGuarantorDetails(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvMoratorium_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            FunPriRemoveMoratorium(e);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    //protected void gvPRDDT_RowDataBound(object sender, GridViewRowEventArgs e)
    //{
    //    try
    //    {
    //        FunPriBindPRDD(e);
    //    }
    //    catch (Exception ex)
    //    {
    //        cvApplicationProcessing.ErrorMessage = strErrorMessagePrefix + ex.Message;
    //        cvApplicationProcessing.IsValid = false;
    //    }
    //}

    #endregion

    #region DropDown Events
    private void funPriLoadProduct()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Is_Active", "1");
            Procparam.Add("@Company_ID", intCompanyId.ToString());
            Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
            DataTable dt = Utility.GetDefaultData(SPNames.SYS_ProductMaster, Procparam);
            Utility.FillDataTable(ddlProductCodeList, dt, "Product_ID", "Product_Name");
            if (dt.Rows.Count > 0)
            {


                DataRow[] dr = dt.Select("Product_Code='" + hdnLobCode.Value.Trim() + ddlLOB.SelectedItem.Text.Substring(0, 1).Trim() + "'");
                if (dr.Length > 0)
                {

                    ddlProductCodeList.SelectedValue = dr.CopyToDataTable().Rows[0]["Product_ID"].ToString();

                    ddlProductCodeList_SelectedIndexChanged(null, null);

                }

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void funPriLoadProductFWC()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Is_Active", "1");
            Procparam.Add("@Company_ID", intCompanyId.ToString());
            Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
            DataTable dt = Utility.GetDefaultData(SPNames.SYS_ProductMaster, Procparam);
            Utility.FillDataTable(ddlProductCodeListFWC, dt, "Product_ID", "Product_Name");
            if (dt.Rows.Count > 0)
            {

                DataRow[] dr = dt.Select("Product_Code='" + hdnLobCode.Value.Trim() + ddlLOB.SelectedItem.Text.Substring(0, 1).Trim() + "'");
                if (dr.Length > 0)
                {
                    ddlProductCodeListFWC.SelectedValue = dr.CopyToDataTable().Rows[0]["Product_ID"].ToString();
                    //ddlProduct_SelectedIndexChanged(null, null);
                }

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriVoidShowHideFWC()
    {
        try
        {

            TabContainerAP.Visible = true;
            pnlProposalhdrDisplayDetails.Visible = true;
            //btndiv.Visible = true;
            //btnNextTab.Visible = true;
            if (ddlLOB_SelectedItem_Text.Value.Contains("HP"))//Vehicle//Non Vehicle//Home Plan
            {

                //TabMainPage.Enabled = true;
                //TabFactoringMainPage.Enabled = false;
                //TabContainerAP.ActiveTabIndex = 0;
                //TabContainerAP.Focus();


                //Lease Main Tab Info
                //TbpnlLeaseInputCriteria.Style.Add("display", "block");
                //pnlLeaseInputCriteria.Visible = true;
                pnlLeaseInputCriteria.Style.Add("display", "block");
                pnlLeaseMarkettingDetails.Visible = true;
                PnlLeaseFinanceHP.Visible = true;
                TbLeaseTabContainerMainTab.Visible = true;
                //pnlLeaseDealerCommission.Visible = true;
                btnConfigure.Visible = true;
                btnPrint.Visible = true;

                //FWCMainTabDetails
                pnlCustomerMappingfortheAccount.Visible = false;
                pnlApplicationDetailsFWC.Visible = false;
                //pnlAccountNumberLevelDetails.Visible = false;
                pnlInflow.Visible = true;
                pnlOutflow.Visible = true;
                trTotalOutFlow.Visible = true;



                //FunPriLoadLocation(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                //funPriLoadProduct();



                //FAC
                pnlFinanceDetailsFWC.Visible = false;
                pnlChargesFWC.Visible = false;
                pnlDiscountRateforUtilizationFWC.Visible = false;

                //
                pnlExistanceCharges.Visible = true;
                pnlLifeInsurance.Visible = true;


                //Lease - controls Enabled
                pnlROIRule.Visible = true;
                pnlPaymentRule.Visible = true;
                //ROIPaymenLov.Visible = true;
                divROIRuleInfo.Visible = true;
                divRoiRules.Visible = true;
                pnlLeaseRepayConfiguration.Visible = true;




                txtIncomeBookStartDate.Visible = true;
                txtTentativeAccDate.Visible = true;
                //FunPriBindPaymentDDL(ddlProductCodeList.SelectedValue);
                TabContainerAP.Tabs[2].Enabled = true;


                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;

                //funPriSetUnitTestValuesHPV();
            }
            else if (ddlLOB_SelectedItem_Text.Value.Contains("FT"))//Factoring
            {

                //Set Initial Focus FT
                ucCustomerLovFWC.strControlID = ucCustomerLovFWC.ClientID;
                Button btnGetLOV = ((Button)ucCustomerLovFWC.FindControl("btnGetLOV"));
                //btnGetLOV.Focus();

                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;
                pnlInflow.Visible = false;
                pnlOutflow.Visible = false;
                trTotalOutFlow.Visible = false;

                //Lease Main Tab Info
                //TbpnlLeaseInputCriteria.Style.Add("display", "none");
                //pnlLeaseInputCriteria.Visible = false;
                pnlLeaseInputCriteria.Style.Add("display", "none");
                pnlLeaseMarkettingDetails.Visible = false;
                PnlLeaseFinanceHP.Visible = false;
                TbLeaseTabContainerMainTab.Visible = false;
                //pnlLeaseDealerCommission.Visible = false;
                btnConfigure.Visible = false;
                btnPrint.Visible = false;

                //FWCMainTabDetails
                pnlCustomerMappingfortheAccount.Visible = true;
                pnlApplicationDetailsFWC.Visible = true;
                //pnlAccountNumberLevelDetails.Visible = true;







                //TabMainPage.Enabled = false;
                //TabFactoringMainPage.Enabled = true;
                //TabContainerAP.ActiveTabIndex = 1;
                //TabContainerAP.Focus();
                //funPriLoadProductFWC();
                //FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                //FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


                pnlFinanceDetailsFWC.Visible = true;
                pnlChargesFWC.Visible = true;
                pnlDiscountRateforUtilizationFWC.Visible = true;

                pnlExistanceCharges.Visible = false;
                pnlLifeInsurance.Visible = false;


                txtTentativeAccDate.Visible = false;
                txtIncomeBookStartDate.Visible = false;
                txtTentativeAccDate.Visible = false;


                //FT -Lease controls Disable
                pnlROIRule.Visible = false;
                pnlPaymentRule.Visible = false;
                //ROIPaymenLov.Visible = false;
                divROIRuleInfo.Visible = false;
                divRoiRules.Visible = false;
                pnlLeaseRepayConfiguration.Visible = false;

                //FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);

                TabContainerAP.Tabs[2].Enabled = false;
                //FunProIntializeFacChargeGridData();
                //FunFillFacCharge();



            }
            else if (ddlLOB_SelectedItem_Text.Value.Contains("WC"))//Working Capital - Running Capital
            {
                //TabMainPage.Enabled = false;
                //TabFactoringMainPage.Enabled = true;
                //TabContainerAP.ActiveTabIndex = 1;
                //TabContainerAP.Focus();

                //Lease Main Tab Info
                //TbpnlLeaseInputCriteria.Style.Add("display", "none");

                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;
                pnlInflow.Visible = false;
                pnlOutflow.Visible = false;
                trTotalOutFlow.Visible = false;


                //pnlLeaseInputCriteria.Visible = false;
                pnlLeaseInputCriteria.Style.Add("display", "none");
                pnlLeaseMarkettingDetails.Visible = false;
                PnlLeaseFinanceHP.Visible = false;
                TbLeaseTabContainerMainTab.Visible = false;
                //pnlLeaseDealerCommission.Visible = false;
                btnConfigure.Visible = false;
                btnPrint.Visible = false;

                //FWCMainTabDetails
                pnlCustomerMappingfortheAccount.Visible = true;
                pnlApplicationDetailsFWC.Visible = true;
                //pnlAccountNumberLevelDetails.Visible = true;




                //funPriLoadProductFWC();
                //FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                //FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


                pnlFinanceDetailsFWC.Visible = true;
                pnlChargesFWC.Visible = true;
                pnlDiscountRateforUtilizationFWC.Visible = true;

                pnlExistanceCharges.Visible = false;
                pnlLifeInsurance.Visible = false;


                txtTentativeAccDate.Visible = false;
                txtIncomeBookStartDate.Visible = false;
                txtTentativeAccDate.Visible = false;
                //FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);

                TabContainerAP.Tabs[2].Enabled = false;

            }
            else if (ddlLOB_SelectedItem_Text.Value.Contains("TL"))//Working Capital - Fixed Repayment
            {
                //TabMainPage.Enabled = false;
                //TabFactoringMainPage.Enabled = true;
                //TabContainerAP.ActiveTabIndex = 1;
                //TabContainerAP.Focus();


                //Lease Main Tab Info
                //TbpnlLeaseInputCriteria.Style.Add("display", "none");

                lblTenureFWC.Visible = true;
                txtTenureFWC.Visible = true;
                lblArearAdvanceFWC.Visible = true;
                ddlArearAdvanceFWC.Visible = true;
                rfvtxtTenureFWC.Enabled = true;
                pnlInflow.Visible = true;
                pnlOutflow.Visible = true;
                trTotalOutFlow.Visible = true;

                //pnlLeaseInputCriteria.Visible = false;
                pnlLeaseInputCriteria.Style.Add("display", "none");
                pnlLeaseMarkettingDetails.Visible = false;
                PnlLeaseFinanceHP.Visible = false;
                TbLeaseTabContainerMainTab.Visible = false;
                //pnlLeaseDealerCommission.Visible = false;
                btnConfigure.Visible = false;
                btnPrint.Visible = false;

                //FWCMainTabDetails
                pnlCustomerMappingfortheAccount.Visible = true;
                pnlApplicationDetailsFWC.Visible = true;
                //pnlAccountNumberLevelDetails.Visible = true;



                //funPriLoadProductFWC();
                //FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                //FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


                pnlFinanceDetailsFWC.Visible = true;
                pnlChargesFWC.Visible = true;
                pnlDiscountRateforUtilizationFWC.Visible = true;

                pnlExistanceCharges.Visible = false;
                pnlLifeInsurance.Visible = false;


                //txtTentativeAccDate.Visible = false;
                txtIncomeBookStartDate.Visible = false;
                //txtTentativeAccDate.Visible = false;
                //FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);
                TabContainerAP.Tabs[2].Enabled = true;

            }
            else if (ddlLOB_SelectedItem_Text.Value.Contains("CC"))//Credit Card
            {
                //TabMainPage.Enabled = false;
                //TabFactoringMainPage.Enabled = true;
                //TabContainerAP.ActiveTabIndex = 1;
                //TabContainerAP.Focus();


                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;
                pnlInflow.Visible = true;
                pnlOutflow.Visible = true;
                trTotalOutFlow.Visible = true;


                //funPriLoadProductFWC();
                //FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                //FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


                pnlFinanceDetailsFWC.Visible = true;
                pnlChargesFWC.Visible = true;
                pnlDiscountRateforUtilizationFWC.Visible = true;

                pnlExistanceCharges.Visible = false;
                pnlLifeInsurance.Visible = false;


                txtTentativeAccDate.Visible = false;
                txtIncomeBookStartDate.Visible = false;
                txtTentativeAccDate.Visible = false;
                //FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);

            }

            //funPriLoadROIRule(ddlLOB.SelectedValue);

            //InflowOutFlowGrid

            //FunPriFillGuarantorDLL();
            //FunPriGenerateNewGuarantor();
            //FunPriFillAlertDLL(strAddMode);
            //TabMainPage.Focus();
            //ddlLOB.Focus();
            //FunPriInsertAlert();

            //funPriLoadInflowFWC();
            //LoopLabelboxes();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriClearBalance()
    {
        txtMaximumLendingLimit.Text = string.Empty;
        txtTotalCreditFinanceAmount.Text = string.Empty;
        txtTotalBilledPrinceipal.Text = string.Empty;
        txtAvailableCreditLimit.Text = string.Empty;
    }

    protected void ddlLOB_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            //TabContainerAP.Visible = true;
            //pnlProposalhdrDisplayDetails.Visible = true;
            //btndiv.Visible = true;
            //btnNextTab.Visible = true;
            //btnClear_OnClick(null, null);

            txtPdcStartDate.Enabled = true;
            funPriClearBalance();

            ddlApplicationNo.Enabled = true;
            TabContainerAP.ActiveTabIndex = 0;
            ucCustomerCodeLov.Clear();
            HttpContext.Current.Session.Remove("DealerId");
            HttpContext.Current.Session.Remove("DealerName");

            Session.Remove("PricingAssetDetails");
            Session.Remove("AssetCustomer");


            funPriClearCustomerHoverInfo();
            funPriClearCustomerHoverInfoFWC();
            ddlStartDelayChargesApplicable_SelectedIndexChanged(null, null);
            ddlContType.ClearSelection();
            ddlCreditPurpose.ClearSelection();
            ddlSalePersonCodeList.Clear();
            ddlProductCodeListFWC.ClearSelection();
            ddlDealTransfer.ClearSelection();
            ddlDealTransfer_SelectedIndexChanged(null, null);
            HiddenField hdnCID2 = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
            HiddenField hdnCID = (HiddenField)ucCustomerLovCustomerMapFWC.FindControl("hdnID");
            hdnCID2.Value = "0";
            hdnCID.Value = "0";
            ucCustomerLovCustomerMapFWC.Clear();
            ucCustomerLovFWC.Clear();
            div7.Visible = false;
            DataTable dt = (DataTable)ViewState["LOB"];
            //ddlLOB_SelectedItem_Text.Value 
            DataRow[] dr = dt.Select("LOB_ID='" + ddlLOB.SelectedValue + "'");
            if (dr.Length > 0)
            {
                hdnLobCode.Value = ddlLOB_SelectedItem_Text.Value = dr[0]["LOB_CODE"].ToString();
            }

            chk_lblMargin.Enabled = false;
            txtSellerCode.Text = string.Empty;
            txtSellerName.Text = string.Empty;
            ucCustomerCodeLov.Clear();
            ucCustomerCodeLov.ToolTip = string.Empty;
            pnlCustomerCreditDetails.Style.Add("display", "block");
            if (ddlLOB_SelectedItem_Text.Value.Contains("HP"))//Vehicle//Non Vehicle//Home Plan/Term Loan
            {
                rfvFinanceAmount.Enabled = false;
                ddlBranchList.ClearSelection();
                if (ddlBranchList.SelectedValue != "0" && ddlBranchList.SelectedValue != string.Empty)
                {
                    ddlApplicationNo.Enabled = false;
                }
                else
                {
                    ddlApplicationNo.Enabled = true;
                }


                funPriDisableFactoringWCControls(true);

                //Clear Controls
                //ddlPaymentRuleList.Enabled = true;
                //btnFetchPayment.Enabled = true;
                //lblPaymentRuleList.CssClass = "styleReqFieldLabel";
                //rfvddlPaymentRuleList.Enabled = true;

                ddlPaymentRuleList.Visible = true;
                btnFetchPayment.Visible = true;
                lblPaymentRuleList.CssClass = "styleReqFieldLabel";
                rfvddlPaymentRuleList.Enabled = true;
                lblPaymentRuleList.Visible = true;


                txtApplicationDateDate.Text = string.Empty;
                txtCreditLimit.Text = string.Empty;
                txtConstitution.Text = string.Empty;
                FunPriClearGrid(grvConsDocuments);
                ddlDealerName.Clear();
                ddlDealType.ClearSelection();
                ddlLeadSource.ClearSelection();
                txtLeadOtherSource.Text = string.Empty;
                ddlLeadSourceName.Clear();
                ddlBusinessSource.ClearSelection();
                txtFinanceAmount.Text = string.Empty;
                txtTenure.Text = string.Empty;
                txtFirstInstallDate.Text = string.Empty;
                txtIncomeBookStartDate.Text = string.Empty;
                //ddlRepamentMode.ClearSelection();

                txtAccountingIRR.Text = string.Empty;
                txtCompanyIRR.Text = string.Empty;
                txtBusinessIRR.Text = string.Empty;
                gvAssetDetails.DataSource = null;
                gvAssetDetails.DataBind();
                txtTotalAssetCount.Text = string.Empty;
                cmbSubLocation.ClearSelection();
                ddldealerSalesPerson.Clear();
                ddlLifeInsurance.ClearSelection();
                ddlLifeInsuranceEntity.Clear();
                txtLifeInsuranceCustRate.Text = string.Empty;
                txtLifeInsuranceCompanyRate.Text = string.Empty;
                txtLifeInsuranceCompanyAmount.Text = string.Empty;
                txtLifeInsuranceCustomerPremiumAmount.Text = string.Empty;
                txtInsuranceTaxRate.Text = string.Empty;
                txtInsuranceCompanyTaxAmount.Text = string.Empty;
                txtInsuranceCustomerTaxAmount.Text = string.Empty;
                txtLifeInsuranceCustomerPremiumAmountWT.Text = string.Empty;
                txtLifeInsuranceCompanyAmountWT.Text = string.Empty;
                txtCreditPeriodInDays.Text = string.Empty;
                ddldc.Clear();

                grvTransferDeal.DataSource = null;
                grvTransferDeal.DataBind();
                ViewState["DealTransfer"] = null;
                ddldealTrasPanum.Clear();




                //TabMainPage.Enabled = true;
                //TabFactoringMainPage.Enabled = false;
                //TabContainerAP.ActiveTabIndex = 0;
                //TabContainerAP.Focus();
                //Lease Main Tab Info
                //TbpnlLeaseInputCriteria.Style.Add("display", "block");


                //Main Tab ShowHide Start
                txtFinanceAmount.Enabled = false;
                txtFinanceAmount.TabIndex = -1;
                lblFinanceAmount2.CssClass = "styleDisplayLabel";
                rfvFinanceAmount.Enabled = false;

                //pnlLeaseInputCriteria.Visible = true;
                pnlLeaseInputCriteria.Style.Add("display", "block");
                pnlLeaseMarkettingDetails.Visible = true;
                PnlLeaseFinanceHP.Visible = true;
                pnlExistanceCharges.Visible = true;
                pnlLifeInsurance.Visible = true;

                //Documents Tab &Asset Tab
                TbLeaseTabContainerMainTab.Visible = true;
                //pnlLeaseDealerCommission.Visible = true;
                btnConfigure.Visible = true;
                btnPrint.Visible = true;

                //FWCMainTabDetails
                pnlCustomerMappingfortheAccount.Visible = false;
                pnlApplicationDetailsFWC.Visible = false;
                //pnlAccountNumberLevelDetails.Visible = false;
                pnlInflow.Visible = true;
                pnlOutflow.Visible = true;
                trTotalOutFlow.Visible = true;
                FunPriLoadLocation(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                funPriLoadProduct();
                //FAC
                pnlFinanceDetailsFWC.Visible = false;
                pnlChargesFWC.Visible = false;
                pnlDiscountRateforUtilizationFWC.Visible = false;
                //
                //Main Tab ShowHide End


                //Lease - controls Enabled
                pnlROIRule.Visible = true;
                pnlPaymentRule.Visible = true;
                pnlPaymentRulehd.Visible = true;
                //ROIPaymenLov.Visible = true;
                divROIRuleInfo.Visible = true;
                divRoiRules.Visible = true;
                pnlLeaseRepayConfiguration.Visible = true;



                txtTentativeAccDate.Visible = true;
                txtIncomeBookStartDate.Visible = true;
                txtTentativeAccDate.Visible = true;
                //FunPriBindPaymentDDL(ddlProductCodeList.SelectedValue);
                TabContainerAP.Tabs[2].Enabled = true;


                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;
                TabContainerMainTab.Tabs[1].Enabled = true;
                //funPriSetUnitTestValuesHPV();
                divddlContType.Style.Add("display", "block");





            }
            else if (ddlLOB_SelectedItem_Text.Value.Contains("TL"))//Term Loan
            {
                divtxtdiscount.Visible = false;
                rfvDealType.Enabled = false;
                ddlDealerName.IsMandatory = false;
                divddldealerSalesPerson.Style.Add("display", "none");
                divddlDealType.Style.Add("display", "none");
                divddlDealerName.Style.Add("display", "none");

                divddlDealTransfer.Style.Add("display", "none");
                divddlContType.Style.Add("display", "none");
                lblCustomerName.Text = "Client Name";
                rfvFinanceAmount.Enabled = true;
                ddlBranchList.ClearDropDownList();
                if (ddlBranchList.SelectedValue != "0" && ddlBranchList.SelectedValue != string.Empty)
                {
                    ddlApplicationNo.Enabled = false;
                }
                else
                {
                    ddlApplicationNo.Enabled = true;
                }
                divSBG.Visible = false;
                funPriDisableFactoringWCControls(true);
                rfvToolTip.Enabled = false;
                //ddlPaymentRuleList.Enabled = true;
                //btnFetchPayment.Enabled = true;
                //lblPaymentRuleList.CssClass = "styleReqFieldLabel";
                //rfvddlPaymentRuleList.Enabled = true;


                pnlLifeInsurance.Visible = true;
                ddlPaymentRuleList.Visible = true;
                btnFetchPayment.Visible = true;
                lblPaymentRuleList.CssClass = "styleReqFieldLabel";
                rfvddlPaymentRuleList.Enabled = true;
                lblPaymentRuleList.Visible = true;


                txtApplicationDateDate.Text = string.Empty;
                txtCreditLimit.Text = string.Empty;
                txtConstitution.Text = string.Empty;
                FunPriClearGrid(grvConsDocuments);
                ddlDealerName.Clear();
                ddlDealType.ClearSelection();
                ddlLeadSource.ClearSelection();
                txtLeadOtherSource.Text = string.Empty;
                ddlLeadSourceName.Clear();
                ddlBusinessSource.ClearSelection();
                txtFinanceAmount.Text = string.Empty;
                txtTenure.Text = string.Empty;
                txtFirstInstallDate.Text = string.Empty;
                txtIncomeBookStartDate.Text = string.Empty;
                //ddlRepamentMode.ClearSelection();

                txtAccountingIRR.Text = string.Empty;
                txtCompanyIRR.Text = string.Empty;
                txtBusinessIRR.Text = string.Empty;
                gvAssetDetails.DataSource = null;
                gvAssetDetails.DataBind();
                txtTotalAssetCount.Text = string.Empty;
                cmbSubLocation.ClearSelection();
                ddldealerSalesPerson.Clear();
                ddlLifeInsurance.ClearSelection();
                ddlLifeInsuranceEntity.Clear();
                txtLifeInsuranceCustRate.Text = string.Empty;
                txtLifeInsuranceCompanyRate.Text = string.Empty;
                txtLifeInsuranceCompanyAmount.Text = string.Empty;
                txtLifeInsuranceCustomerPremiumAmount.Text = string.Empty;
                txtInsuranceTaxRate.Text = string.Empty;
                txtInsuranceCompanyTaxAmount.Text = string.Empty;
                txtInsuranceCustomerTaxAmount.Text = string.Empty;
                txtLifeInsuranceCustomerPremiumAmountWT.Text = string.Empty;
                txtLifeInsuranceCompanyAmountWT.Text = string.Empty;
                txtCreditPeriodInDays.Text = string.Empty;
                ddldc.Clear();

                grvTransferDeal.DataSource = null;
                grvTransferDeal.DataBind();
                ViewState["DealTransfer"] = null;
                ddldealTrasPanum.Clear();


                txtFinanceAmount.ReadOnly = false;
                //pnlLeaseInputCriteria.Visible = true;
                pnlLeaseInputCriteria.Style.Add("display", "block");
                PnlLeaseFinanceHP.Visible = true;



                txtFinanceAmount.Enabled = true;
                txtMarginAmount.Enabled = true;

                txtMarginAmount.Attributes.Remove("readonly");


                lblFinanceAmount2.CssClass = "styleReqFieldLabel";
                rfvFinanceAmount.Enabled = true;



                pnlLeaseMarkettingDetails.Visible = false;
                pnlExistanceCharges.Visible = false;
                //Documents Tab &Asset Tab
                TbLeaseTabContainerMainTab.Visible = true;
                TabContainerMainTab.Tabs[1].Enabled = false;
                //pnlLeaseDealerCommission.Visible = true;
                btnConfigure.Visible = true;
                btnPrint.Visible = true;

                //FWCMainTabDetails
                pnlCustomerMappingfortheAccount.Visible = false;
                pnlApplicationDetailsFWC.Visible = false;
                //pnlAccountNumberLevelDetails.Visible = false;
                pnlInflow.Visible = true;
                pnlOutflow.Visible = true;
                trTotalOutFlow.Visible = true;
                FunPriLoadLocation(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                funPriLoadProduct();
                //FAC
                pnlFinanceDetailsFWC.Visible = false;
                pnlChargesFWC.Visible = false;
                pnlDiscountRateforUtilizationFWC.Visible = false;
                //
                //Main Tab ShowHide End


                //Lease - controls Enabled
                pnlROIRule.Visible = true;
                pnlPaymentRule.Visible = true;
                pnlPaymentRulehd.Visible = true;
                //ROIPaymenLov.Visible = true;
                divROIRuleInfo.Visible = true;
                divRoiRules.Visible = true;
                pnlLeaseRepayConfiguration.Visible = true;



                //txtTentativeAccDate.Visible = true;
                txtIncomeBookStartDate.Visible = true;

                //FunPriBindPaymentDDL(ddlProductCodeList.SelectedValue);
                TabContainerAP.Tabs[2].Enabled = true;


                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;


                //funPriSetUnitTestValuesHPV();
            }
            else if (ddlLOB_SelectedItem_Text.Value.Contains("FT") || ddlLOB_SelectedItem_Text.Value.Contains("WC"))//Factoring
            {

                ddlBranchListFWC.ClearSelection();
                if (ddlBranchListFWC.SelectedValue != "0" && ddlBranchListFWC.SelectedValue != string.Empty)
                {
                    ddlApplicationNo.Enabled = false;
                }
                else
                {
                    ddlApplicationNo.Enabled = true;
                }

                funPriDisableFactoringWCControls(false);
                funPriClearFWC();

                //Set Initial Focus FT
                ucCustomerLovFWC.strControlID = ucCustomerLovFWC.ClientID;
                Button btnGetLOV = ((Button)ucCustomerLovFWC.FindControl("btnGetLOV"));
                btnGetLOV.Focus();

                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;
                pnlInflow.Visible = false;
                pnlOutflow.Visible = false;
                trTotalOutFlow.Visible = false;


                //Lease Main Tab Info
                //TbpnlLeaseInputCriteria.Style.Add("display", "none");
                pnlLeaseInputCriteria.Style.Add("display", "none");
                pnlLeaseMarkettingDetails.Visible = false;
                PnlLeaseFinanceHP.Visible = false;
                TbLeaseTabContainerMainTab.Visible = true;
                TabContainerMainTab.Tabs[1].Enabled = false;

                //pnlLeaseDealerCommission.Visible = false;
                btnConfigure.Visible = false;
                btnPrint.Visible = false;

                //FWCMainTabDetails
                pnlCustomerMappingfortheAccount.Visible = true;
                pnlApplicationDetailsFWC.Visible = true;
                //pnlAccountNumberLevelDetails.Visible = true;

                ddlPaymentRuleList.Visible = false;
                btnFetchPayment.Visible = false;
                lblPaymentRuleList.CssClass = "styleDisplayLabel";
                rfvddlPaymentRuleList.Enabled = false;
                lblPaymentRuleList.Visible = false;



                rfvCoventsCondition.Enabled = false;

                //TabMainPage.Enabled = false;
                //TabFactoringMainPage.Enabled = true;
                //TabContainerAP.ActiveTabIndex = 1;
                //TabContainerAP.Focus();
                funPriLoadProductFWC();
                FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


                pnlFinanceDetailsFWC.Visible = true;
                pnlChargesFWC.Visible = true;
                pnlDiscountRateforUtilizationFWC.Visible = true;

                pnlExistanceCharges.Visible = false;
                pnlLifeInsurance.Visible = false;


                txtTentativeAccDate.Visible = false;
                txtIncomeBookStartDate.Visible = false;
                txtTentativeAccDate.Visible = false;


                //FT -Lease controls Disable
                pnlROIRule.Visible = true;
                pnlPaymentRule.Visible = false;
                //ROIPaymenLov.Visible = false;
                divROIRuleInfo.Visible = true;
                divRoiRules.Visible = true;
                pnlLeaseRepayConfiguration.Visible = false;
                pnlPaymentRulehd.Visible = false;

                FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);

                TabContainerAP.Tabs[2].Enabled = false;
                FunProIntializeFacChargeGridData();
                funPriInitializeDiscountRateGrid();
                FunFillFacCharge();
                //FunPriInsertGuarantor();
                //FunPriFillGuarantorDLL();
                rfvLocation.Enabled = false;
                rfvProductCodeList.Enabled = false;
                rfvddlCreditPurpose.Enabled = false;
                rfvApplicationDate.Enabled = false;
                rfvToolTip.Enabled = false;
                ddlSalePersonCodeList.IsMandatory = false;
                rfvcmbCustomer.Enabled = false;
                rfvCustomer.Enabled = false;
                rfvtxtCreditLimit.Enabled = false;

                //ROI
                divddl_Frequency.Visible = false;
                divddl_Time_Value.Visible = false;
                divddl_Repayment_Mode.Visible = false;
                divddl_IRR_Rest.Visible = false;
                divtxt_Recovery_Pattern_Year1.Visible = false;
                divtxt_Recovery_Pattern_Year2.Visible = false;
                divtxt_Recovery_Pattern_Year3.Visible = false;
                divtxt_Recovery_Pattern_Rest.Visible = false;
                divddl_Insurance.Visible = false;
                divddl_Interest_Calculation.Visible = false;
                divddl_Interest_Levy.Visible = false;

                if (ddlLOB_SelectedItem_Text.Value.Contains("WC"))
                {
                    pnlCustomerMappingfortheAccount.Visible = false;

                }
                pnlROIRule.Visible = false;
                div7.Visible = false;
                divROIRuleInfo.Visible = false;
                divRoiRules.Visible = false;

            }
            //else if (ddlLOB_SelectedItem_Text.Value.Contains("WC"))//Working Capital - Running Capital
            //{
            //    //TabMainPage.Enabled = false;
            //    //TabFactoringMainPage.Enabled = true;
            //    //TabContainerAP.ActiveTabIndex = 1;
            //    //TabContainerAP.Focus();

            //    //Lease Main Tab Info
            //    //TbpnlLeaseInputCriteria.Style.Add("display", "none");

            //    lblTenureFWC.Visible = false;
            //    txtTenureFWC.Visible = false;
            //    lblArearAdvanceFWC.Visible = false;
            //    ddlArearAdvanceFWC.Visible = false;
            //    rfvtxtTenureFWC.Enabled = false;
            //    pnlInflow.Visible = false;
            //    pnlOutflow.Visible = false;
            //    trTotalOutFlow.Visible = false;


            //    pnlLeaseInputCriteria.Visible = false;
            //    pnlLeaseMarkettingDetails.Visible = false;
            //    PnlLeaseFinanceHP.Visible = false;
            //    TbLeaseTabContainerMainTab.Visible = false;
            //    //pnlLeaseDealerCommission.Visible = false;
            //    btnConfigure.Visible = false;
            //    btnPrint.Visible = false;

            //    //FWCMainTabDetails
            //    pnlCustomerMappingfortheAccount.Visible = true;
            //    pnlApplicationDetailsFWC.Visible = true;
            //    pnlAccountNumberLevelDetails.Visible = true;


            //    //FT -Lease controls Disable
            //    pnlROIRule.Visible = false;
            //    pnlPaymentRule.Visible = false;
            //    //ROIPaymenLov.Visible = false;
            //    divROIRuleInfo.Visible = false;
            //    divRoiRules.Visible = false;
            //    pnlLeaseRepayConfiguration.Visible = false;



            //    funPriLoadProductFWC();
            //    FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
            //    FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


            //    pnlFinanceDetailsFWC.Visible = true;
            //    pnlChargesFWC.Visible = true;
            //    pnlDiscountRateforUtilizationFWC.Visible = true;

            //    pnlExistanceCharges.Visible = false;
            //    pnlLifeInsurance.Visible = false;


            //    txtTentativeAccDate.Visible = false;
            //    txtIncomeBookStartDate.Visible = false;
            //    txtTentativeAccDate.Visible = false;
            //    FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);

            //    TabContainerAP.Tabs[2].Enabled = false;

            //}

            //Commented on 19-OCT-2018 start 
            /**
        else if (ddlLOB_SelectedItem_Text.Value.Contains("TL"))//Working Capital - Fixed Repayment
        {
            //TabMainPage.Enabled = false;
            //TabFactoringMainPage.Enabled = true;
            //TabContainerAP.ActiveTabIndex = 1;
            //TabContainerAP.Focus();


            //Lease Main Tab Info
            //TbpnlLeaseInputCriteria.Style.Add("display", "none");

            lblTenureFWC.Visible = true;
            txtTenureFWC.Visible = true;
            lblArearAdvanceFWC.Visible = true;
            ddlArearAdvanceFWC.Visible = true;
            rfvtxtTenureFWC.Enabled = true;
            pnlInflow.Visible = true;
            pnlOutflow.Visible = true;
            trTotalOutFlow.Visible = true;

            pnlLeaseInputCriteria.Visible = false;
            pnlLeaseMarkettingDetails.Visible = false;
            PnlLeaseFinanceHP.Visible = false;
            TbLeaseTabContainerMainTab.Visible = false;
            //pnlLeaseDealerCommission.Visible = false;
            btnConfigure.Visible = false;
            btnPrint.Visible = false;

            //FWCMainTabDetails
            pnlCustomerMappingfortheAccount.Visible = true;
            pnlApplicationDetailsFWC.Visible = true;
            pnlAccountNumberLevelDetails.Visible = true;



            funPriLoadProductFWC();
            FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
            FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


            pnlFinanceDetailsFWC.Visible = true;
            pnlChargesFWC.Visible = true;
            pnlDiscountRateforUtilizationFWC.Visible = true;

            pnlExistanceCharges.Visible = false;
            pnlLifeInsurance.Visible = false;


            txtTentativeAccDate.Visible = true;
            txtIncomeBookStartDate.Visible = false;
            FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);
            TabContainerAP.Tabs[2].Enabled = true;

            //Lease - controls Enabled
            pnlROIRule.Visible = true;
            pnlPaymentRule.Visible = true;
            //ROIPaymenLov.Visible = true;
            divROIRuleInfo.Visible = true;
            divRoiRules.Visible = true;
            pnlLeaseRepayConfiguration.Visible = true;



            FunProIntializeFacChargeGridData();
            funPriInitializeDiscountRateGrid();
            FunFillFacCharge();

        }
             * **/
            else if (ddlLOB_SelectedItem_Text.Value.Contains("CC"))//Credit Card
            {
                //TabMainPage.Enabled = false;
                //TabFactoringMainPage.Enabled = true;
                //TabContainerAP.ActiveTabIndex = 1;
                //TabContainerAP.Focus();


                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;
                pnlInflow.Visible = true;
                pnlOutflow.Visible = true;
                trTotalOutFlow.Visible = true;


                funPriLoadProductFWC();
                FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


                pnlFinanceDetailsFWC.Visible = true;
                pnlChargesFWC.Visible = true;
                pnlDiscountRateforUtilizationFWC.Visible = true;

                pnlExistanceCharges.Visible = false;
                pnlLifeInsurance.Visible = false;


                txtTentativeAccDate.Visible = false;
                txtIncomeBookStartDate.Visible = false;
                txtTentativeAccDate.Visible = false;
                FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);

            }
            else
            {

            }

            funPriLoadROIRule(ddlLOB.SelectedValue);

            //InflowOutFlowGrid

            FunPriFillGuarantorDLL();
            FunPriGenerateNewGuarantor();
            FunPriFillAlertDLL(strAddMode);
            //TabMainPage.Focus();
            //ddlLOB.Focus();
            //FunPriInsertAlert();

            //funPriLoadInflowFWC();
            //LoopLabelboxes();

            ddlApplicationNo.Focus();
            if (ddlLOB.SelectedValue == "2")
            {
                pnlPromoter.Visible = true;
            }
            else
            {
                pnlPromoter.Visible = false;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void funPriClearFWC()
    {
        try
        {
            ucCustomerLovFWC.Clear();
            TextBox txtCustomerName = (TextBox)ucCustomerLovFWC.FindControl("txtItemName");
            TextBox TxtName = (TextBox)ucCustomerLovFWC.FindControl("TxtName");
            txtCustomerName.Text = txtCustomerName.Text = string.Empty;
            ddlBranchListFWC.ClearSelection();
            cmbSubLocationFWC.ClearSelection();
            txtApplicationDateFWC.Text = string.Empty;
            txtCreditLimitFWC.Text = string.Empty;
            ddlProductCodeListFWC.ClearSelection();
            txtFacilityStartDate.Text = string.Empty;
            txtFacilityEndDate.Text = string.Empty;
            txtAuditor.Text = string.Empty;
            txtEvaluator.Text = string.Empty;
            ddlRelationshipManager.Clear();
            ViewState["CUST_SUBLIMIT"] = null;
            FunPriGetSubLimitDataTable();
            FunPriFillGrid();
            txtDebtPurchaseLimitFWC.Text = string.Empty;
            txtMarginFWC.Text = string.Empty;
            txtPrePaymentLimitFWC.Text = string.Empty;
            txtInvoiceCapValue.Text = string.Empty;
            txtDiscountRateforLineofCredit.Text = string.Empty;
            txtPenalRate.Text = string.Empty;
            txtCreditPeriodInDays.Text = string.Empty;
            txtGracePeriodInDays.Text = string.Empty;
            txtDisbuteGracePeriodInDays.Text = string.Empty;
            txtResolutionPeriodinDays.Text = string.Empty;
            txtRemarksFWC.Text = string.Empty;
            ViewState["FACCharge"] = null;
            FunProIntializeFacChargeGridData();
            ViewState["DiscountRateUtilization"] = null;
            funPriInitializeDiscountRateGrid();
            ddlROIRuleList.ClearSelection();

            div7.Visible = false;

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void ddlLOB_SelectedIndexChangedModifyEnableDisableControls()
    {
        try
        {

            //TabContainerAP.Visible = true;
            //pnlProposalhdrDisplayDetails.Visible = true;
            //btndiv.Visible = true;
            //btnNextTab.Visible = true;
            pnlCustomerCreditDetails.Style.Add("display", "block");
            chk_lblMargin.Enabled = false;
            DataTable dt = (DataTable)ViewState["LOB"];
            //ddlLOB_SelectedItem_Text.Value 
            DataRow[] dr = dt.Select("LOB_ID='" + ddlLOB.SelectedValue + "'");
            if (dr.Length > 0)
            {
                hdnLobCode.Value = ddlLOB_SelectedItem_Text.Value = dr[0]["LOB_CODE"].ToString();
            }
            if (ddlLOB_SelectedItem_Text.Value.Contains("HP"))//Vehicle//Non Vehicle//Home Plan/Term Loan
            {
                rfvFinanceAmount.Enabled = false;
                //TabMainPage.Enabled = true;
                //TabFactoringMainPage.Enabled = false;
                //TabContainerAP.ActiveTabIndex = 0;
                //TabContainerAP.Focus();
                //Lease Main Tab Info
                //TbpnlLeaseInputCriteria.Style.Add("display", "block");


                //Main Tab ShowHide Start
                if (hdnLobCode.Value == "HP")
                {
                    txtFinanceAmount.ReadOnly = true;
                    txtFinanceAmount.TabIndex = -1;
                }
                else
                {
                    txtFinanceAmount.ReadOnly = false;

                }
                funPriDisableFactoringWCControls(true);
                //pnlLeaseInputCriteria.Visible = true;

                pnlLeaseInputCriteria.Style.Add("display", "block");
                pnlLeaseMarkettingDetails.Visible = true;
                PnlLeaseFinanceHP.Visible = true;
                pnlExistanceCharges.Visible = true;
                pnlLifeInsurance.Visible = true;

                //Documents Tab &Asset Tab
                TbLeaseTabContainerMainTab.Visible = true;
                //pnlLeaseDealerCommission.Visible = true;
                btnConfigure.Visible = true;
                btnPrint.Visible = true;

                //FWCMainTabDetails
                pnlCustomerMappingfortheAccount.Visible = false;
                pnlApplicationDetailsFWC.Visible = false;
                //pnlAccountNumberLevelDetails.Visible = false;
                pnlInflow.Visible = true;
                pnlOutflow.Visible = true;
                trTotalOutFlow.Visible = true;
                //FunPriLoadLocation(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                //funPriLoadProduct();
                //FAC
                pnlFinanceDetailsFWC.Visible = false;
                pnlChargesFWC.Visible = false;
                pnlDiscountRateforUtilizationFWC.Visible = false;
                //
                //Main Tab ShowHide End


                //Lease - controls Enabled
                pnlROIRule.Visible = true;
                pnlPaymentRule.Visible = true;
                pnlPaymentRulehd.Visible = true;
                //ROIPaymenLov.Visible = true;
                divROIRuleInfo.Visible = true;
                divRoiRules.Visible = true;
                pnlLeaseRepayConfiguration.Visible = true;



                txtTentativeAccDate.Visible = true;
                txtIncomeBookStartDate.Visible = true;
                txtTentativeAccDate.Visible = true;
                //FunPriBindPaymentDDL(ddlProductCodeList.SelectedValue);
                TabContainerAP.Tabs[2].Enabled = true;


                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;
                //funPriSetUnitTestValuesHPV();

                divddlContType.Style.Add("display", "block");
            }
            else if (ddlLOB_SelectedItem_Text.Value.Contains("TL"))//TL            
            {
                divtxtdiscount.Visible = false;
                rfvDealType.Enabled = false;
                ddlDealerName.IsMandatory = false;
                divddldealerSalesPerson.Style.Add("display", "none");
                divddlDealType.Style.Add("display", "none");
                divddlDealerName.Style.Add("display", "none");
                divddlDealTransfer.Style.Add("display", "none");
                rfvFinanceAmount.Enabled = true;
                ddlPaymentRuleList.Visible = true;
                btnFetchPayment.Visible = true;
                lblPaymentRuleList.CssClass = "styleReqFieldLabel";
                rfvddlPaymentRuleList.Enabled = true;
                lblPaymentRuleList.Visible = true;

                rfvToolTip.Enabled = false;
                divSBG.Visible = false;
                funPriDisableFactoringWCControls(true);

                divddlContType.Style.Add("display", "none");
                lblCustomerName.Text = "Client Name";


                txtFinanceAmount.ReadOnly = false;
                //pnlLeaseInputCriteria.Visible = true;

                pnlLeaseInputCriteria.Style.Add("display", "block");
                PnlLeaseFinanceHP.Visible = true;
                pnlLifeInsurance.Visible = false;


                txtFinanceAmount.Enabled = true;
                lblFinanceAmount2.CssClass = "styleReqFieldLabel";
                rfvFinanceAmount.Enabled = true;

                txtMarginAmount.Attributes.Remove("readonly");

                pnlLeaseMarkettingDetails.Visible = false;
                pnlExistanceCharges.Visible = false;
                //Documents Tab &Asset Tab
                TbLeaseTabContainerMainTab.Visible = true;
                TabContainerMainTab.Tabs[1].Enabled = false;
                //pnlLeaseDealerCommission.Visible = true;
                btnConfigure.Visible = true;
                btnPrint.Visible = true;

                //FWCMainTabDetails
                pnlCustomerMappingfortheAccount.Visible = false;
                pnlApplicationDetailsFWC.Visible = false;
                //pnlAccountNumberLevelDetails.Visible = false;
                pnlInflow.Visible = true;
                pnlOutflow.Visible = true;
                trTotalOutFlow.Visible = true;
                //FunPriLoadLocation(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                //funPriLoadProduct();
                //FAC
                pnlFinanceDetailsFWC.Visible = false;
                pnlChargesFWC.Visible = false;
                pnlDiscountRateforUtilizationFWC.Visible = false;
                //
                //Main Tab ShowHide End


                //Lease - controls Enabled
                pnlROIRule.Visible = true;
                pnlPaymentRule.Visible = true;
                pnlPaymentRulehd.Visible = true;
                //ROIPaymenLov.Visible = true;
                divROIRuleInfo.Visible = true;
                divRoiRules.Visible = true;
                pnlLeaseRepayConfiguration.Visible = true;



                //txtTentativeAccDate.Visible = true;
                txtIncomeBookStartDate.Visible = true;

                //FunPriBindPaymentDDL(ddlProductCodeList.SelectedValue);
                TabContainerAP.Tabs[2].Enabled = true;


                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;
                //funPriSetUnitTestValuesHPV();



            }
            else if (ddlLOB_SelectedItem_Text.Value.Contains("FT") || ddlLOB_SelectedItem_Text.Value.Contains("WC"))//Factoring
            {

                funPriDisableFactoringWCControls(false);



                //Set Initial Focus FT
                ucCustomerLovFWC.strControlID = ucCustomerLovFWC.ClientID;
                Button btnGetLOV = ((Button)ucCustomerLovFWC.FindControl("btnGetLOV"));
                //btnGetLOV.Focus();

                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;
                pnlInflow.Visible = false;
                pnlOutflow.Visible = false;
                trTotalOutFlow.Visible = false;

                //Lease Main Tab Info
                //TbpnlLeaseInputCriteria.Style.Add("display", "none");
                //pnlLeaseInputCriteria.Visible = false;
                pnlLeaseInputCriteria.Style.Add("display", "block");
                pnlLeaseMarkettingDetails.Visible = false;
                PnlLeaseFinanceHP.Visible = false;
                TbLeaseTabContainerMainTab.Visible = false;
                //pnlLeaseDealerCommission.Visible = false;
                btnConfigure.Visible = false;
                btnPrint.Visible = false;

                //FWCMainTabDetails
                pnlCustomerMappingfortheAccount.Visible = true;
                pnlApplicationDetailsFWC.Visible = true;
                //pnlAccountNumberLevelDetails.Visible = true;





                rfvCoventsCondition.Enabled = false;

                //TabMainPage.Enabled = false;
                //TabFactoringMainPage.Enabled = true;
                //TabContainerAP.ActiveTabIndex = 1;
                //TabContainerAP.Focus();
                //funPriLoadProductFWC();
                // FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                //FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


                pnlFinanceDetailsFWC.Visible = true;
                pnlChargesFWC.Visible = true;
                pnlDiscountRateforUtilizationFWC.Visible = true;

                pnlExistanceCharges.Visible = false;
                pnlLifeInsurance.Visible = false;


                txtTentativeAccDate.Visible = false;
                txtIncomeBookStartDate.Visible = false;
                txtTentativeAccDate.Visible = false;


                //FT -Lease controls Disable
                pnlROIRule.Visible = false;
                pnlPaymentRule.Visible = false;
                //ROIPaymenLov.Visible = false;
                divROIRuleInfo.Visible = false;
                divRoiRules.Visible = false;
                pnlLeaseRepayConfiguration.Visible = false;

                //FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);
                TabContainerAP.Visible = true;
                TabContainerAP.Tabs[2].Enabled = false;

                rfvTimeValue.Enabled = false;
                rfvFrequency.Enabled = false;
                RequiredFieldValidator8.Enabled = false;


                rfvLocation.Enabled = false;
                rfvProductCodeList.Enabled = false;
                rfvddlCreditPurpose.Enabled = false;
                rfvApplicationDate.Enabled = false;
                rfvToolTip.Enabled = false;
                ddlSalePersonCodeList.IsMandatory = false;
                rfvcmbCustomer.Enabled = false;
                rfvCustomer.Enabled = false;
                rfvtxtCreditLimit.Enabled = false;

                //ROI
                divddl_Frequency.Visible = false;
                divddl_Time_Value.Visible = false;
                divddl_Repayment_Mode.Visible = false;
                divddl_IRR_Rest.Visible = false;
                divtxt_Recovery_Pattern_Year1.Visible = false;
                divtxt_Recovery_Pattern_Year2.Visible = false;
                divtxt_Recovery_Pattern_Year3.Visible = false;
                divtxt_Recovery_Pattern_Rest.Visible = false;
                divddl_Insurance.Visible = false;
                divddl_Interest_Calculation.Visible = false;
                divddl_Interest_Levy.Visible = false;


                pnlROIRule.Visible = false;
                divRoiRules.Visible = false;
                div7.Visible = false;
                divROIRuleInfo.Visible = false;

                //FunProIntializeFacChargeGridData();
                //funPriInitializeDiscountRateGrid();
                //FunFillFacCharge();
                //FunPriInsertGuarantor();
                //FunPriFillGuarantorDLL();


            }
            //else if (ddlLOB_SelectedItem_Text.Value.Contains("WC"))//Working Capital - Running Capital
            //{
            //    //TabMainPage.Enabled = false;
            //    //TabFactoringMainPage.Enabled = true;
            //    //TabContainerAP.ActiveTabIndex = 1;
            //    //TabContainerAP.Focus();

            //    //Lease Main Tab Info
            //    //TbpnlLeaseInputCriteria.Style.Add("display", "none");

            //    lblTenureFWC.Visible = false;
            //    txtTenureFWC.Visible = false;
            //    lblArearAdvanceFWC.Visible = false;
            //    ddlArearAdvanceFWC.Visible = false;
            //    rfvtxtTenureFWC.Enabled = false;
            //    pnlInflow.Visible = false;
            //    pnlOutflow.Visible = false;
            //    trTotalOutFlow.Visible = false;


            //    pnlLeaseInputCriteria.Visible = false;
            //    pnlLeaseMarkettingDetails.Visible = false;
            //    PnlLeaseFinanceHP.Visible = false;
            //    TbLeaseTabContainerMainTab.Visible = false;
            //    //pnlLeaseDealerCommission.Visible = false;
            //    btnConfigure.Visible = false;
            //    btnPrint.Visible = false;

            //    //FWCMainTabDetails
            //    pnlCustomerMappingfortheAccount.Visible = true;
            //    pnlApplicationDetailsFWC.Visible = true;
            //    pnlAccountNumberLevelDetails.Visible = true;


            //    //FT -Lease controls Disable
            //    pnlROIRule.Visible = false;
            //    pnlPaymentRule.Visible = false;
            //    //ROIPaymenLov.Visible = false;
            //    divROIRuleInfo.Visible = false;
            //    divRoiRules.Visible = false;
            //    pnlLeaseRepayConfiguration.Visible = false;



            //    funPriLoadProductFWC();
            //    FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
            //    FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


            //    pnlFinanceDetailsFWC.Visible = true;
            //    pnlChargesFWC.Visible = true;
            //    pnlDiscountRateforUtilizationFWC.Visible = true;

            //    pnlExistanceCharges.Visible = false;
            //    pnlLifeInsurance.Visible = false;


            //    txtTentativeAccDate.Visible = false;
            //    txtIncomeBookStartDate.Visible = false;
            //    txtTentativeAccDate.Visible = false;
            //    FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);

            //    TabContainerAP.Tabs[2].Enabled = false;

            //}

            //Commented on 19-OCT-2018 start 
            /**
        else if (ddlLOB_SelectedItem_Text.Value.Contains("TL"))//Working Capital - Fixed Repayment
        {
            //TabMainPage.Enabled = false;
            //TabFactoringMainPage.Enabled = true;
            //TabContainerAP.ActiveTabIndex = 1;
            //TabContainerAP.Focus();


            //Lease Main Tab Info
            //TbpnlLeaseInputCriteria.Style.Add("display", "none");

            lblTenureFWC.Visible = true;
            txtTenureFWC.Visible = true;
            lblArearAdvanceFWC.Visible = true;
            ddlArearAdvanceFWC.Visible = true;
            rfvtxtTenureFWC.Enabled = true;
            pnlInflow.Visible = true;
            pnlOutflow.Visible = true;
            trTotalOutFlow.Visible = true;

            pnlLeaseInputCriteria.Visible = false;
            pnlLeaseMarkettingDetails.Visible = false;
            PnlLeaseFinanceHP.Visible = false;
            TbLeaseTabContainerMainTab.Visible = false;
            //pnlLeaseDealerCommission.Visible = false;
            btnConfigure.Visible = false;
            btnPrint.Visible = false;

            //FWCMainTabDetails
            pnlCustomerMappingfortheAccount.Visible = true;
            pnlApplicationDetailsFWC.Visible = true;
            pnlAccountNumberLevelDetails.Visible = true;



            funPriLoadProductFWC();
            FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
            FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


            pnlFinanceDetailsFWC.Visible = true;
            pnlChargesFWC.Visible = true;
            pnlDiscountRateforUtilizationFWC.Visible = true;

            pnlExistanceCharges.Visible = false;
            pnlLifeInsurance.Visible = false;


            txtTentativeAccDate.Visible = true;
            txtIncomeBookStartDate.Visible = false;
            FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);
            TabContainerAP.Tabs[2].Enabled = true;

            //Lease - controls Enabled
            pnlROIRule.Visible = true;
            pnlPaymentRule.Visible = true;
            //ROIPaymenLov.Visible = true;
            divROIRuleInfo.Visible = true;
            divRoiRules.Visible = true;
            pnlLeaseRepayConfiguration.Visible = true;



            FunProIntializeFacChargeGridData();
            funPriInitializeDiscountRateGrid();
            FunFillFacCharge();

        }
             * **/
            else if (ddlLOB_SelectedItem_Text.Value.Contains("CC"))//Credit Card
            {
                //TabMainPage.Enabled = false;
                //TabFactoringMainPage.Enabled = true;
                //TabContainerAP.ActiveTabIndex = 1;
                //TabContainerAP.Focus();


                lblTenureFWC.Visible = false;
                txtTenureFWC.Visible = false;
                lblArearAdvanceFWC.Visible = false;
                ddlArearAdvanceFWC.Visible = false;
                rfvtxtTenureFWC.Enabled = false;
                pnlInflow.Visible = true;
                pnlOutflow.Visible = true;
                trTotalOutFlow.Visible = true;


                funPriLoadProductFWC();
                FunPriLoadLocationFAC(intCompanyId, intUserId, intProgramID, Convert.ToInt32(ddlLOB.SelectedValue));
                FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);


                pnlFinanceDetailsFWC.Visible = true;
                pnlChargesFWC.Visible = true;
                pnlDiscountRateforUtilizationFWC.Visible = true;

                pnlExistanceCharges.Visible = false;
                pnlLifeInsurance.Visible = false;


                txtTentativeAccDate.Visible = false;
                txtIncomeBookStartDate.Visible = false;
                txtTentativeAccDate.Visible = false;
                //FunPriBindPaymentDDL(ddlProductCodeListFWC.SelectedValue);

            }

            //funPriLoadROIRule(ddlLOB.SelectedValue);

            //InflowOutFlowGrid

            //FunPriFillGuarantorDLL();
            //FunPriGenerateNewGuarantor();
            //FunPriFillAlertDLL(strAddMode);
            TabMainPage.Focus();
            //ddlLOB.Focus();
            //FunPriInsertAlert();

            //funPriLoadInflowFWC();
            //LoopLabelboxes();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriLoadROIRule(string strLobId)
    {
        try
        {
            objProcedureParameter = new Dictionary<string, string>();

            if (strMode.ToUpper().Trim() != "Q")
                objProcedureParameter.Add("@Is_Active", "1");

            //if (strMode.ToUpper().Trim() == "M" && StrRuleID != "")
            //    objProcedureParameter.Add("@Rules_ID", StrRuleID);

            objProcedureParameter.Add("@Company_ID", intCompanyId.ToString());
            objProcedureParameter.Add("@LOB_ID", strLobId);
            objProcedureParameter.Add("@Option", "7");
            ddlROIRuleList.BindDataTable(SPNames.S3G_ORG_GetPricing_List, objProcedureParameter, new string[] { "ROI_Rules_ID", "ROI_Rule_Number", "Model_Description" });
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlProductCodeList_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriToggleProductBased();
            ddlCreditPurpose.Focus();
            //ddlProductCodeList.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void ddlBusinessOfferNoList_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            FunPriToggleOfferNoBased();
            if (ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("WC") ||
              ddlLOB_SelectedItem_Text.Value.ToUpper().Contains("FT") ||
              ((ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TE") ||
              ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("TL")) &&
              ddl_Repayment_Mode.SelectedItem.Text.ToUpper().StartsWith("PRO")))
            {
                btnGenerateRepay_Click(sender, e);
                TabContainerAP.Tabs[2].Enabled = false;
            }
            else
                TabContainerAP.Tabs[2].Enabled = true;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlDealType_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            HttpContext.Current.Session.Remove("DealerId");
            HttpContext.Current.Session.Remove("DealerName");
            System.Web.HttpContext.Current.Session["DealType"] = ddlDealType.SelectedValue;
            ddldealerSalesPerson.Clear();
            if (ddlDealType.SelectedValue == "1")
            {

                //ddlDealerName.Enabled = true;
                ddlDealerName.IsMandatory = true;
                lblDealerName.CssClass = "styleReqFieldLabel";

                ddldealerSalesPerson.IsMandatory = true;
                ddldealerSalesPerson.Enabled = true;
                lblDealerSalesPerson.CssClass = "styleReqFieldLabel";
            }
            else
            {
                ddlDealerName.IsMandatory = false;
                ddlDealerName.Enabled = false;
                ddlDealerName.Clear();
                lblDealerName.CssClass = "styleDisplayLabel";

                ddldealerSalesPerson.IsMandatory = false;
                ddldealerSalesPerson.Enabled = false;
                ddldealerSalesPerson.Clear();
                lblDealerSalesPerson.CssClass = "styleDisplayLabel";

            }



        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlDealerName_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            //ddlPayTo.SelectedValue = "0";
            //ddlPayTo_SelectedIndexChanged(null, null);
            //ddlEntityNameList.SelectedText = ddlDealerName.SelectedText;
            //ddlEntityNameList.SelectedValue = ddlDealerName.SelectedValue;
            //ddlPayTo.ClearDropDownList();
            //ddlDealerName.Focus();
            HttpContext.Current.Session.Remove("DealerId");
            HttpContext.Current.Session.Remove("DealerName");
            HttpContext.Current.Session["DealerId"] = ddlDealerName.SelectedValue;
            HttpContext.Current.Session["DealerName"] = ddlDealerName.SelectedText;
            TextBox txtItemName = (TextBox)ddlDealerName.FindControl("txtItemName");
            //funPriLoadDealerScheme();
            txtItemName.Focus();
            funPriLoadDealerGropu();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriLoadDealerScheme()
    {

        try
        {
            DataTable dtDscheme;
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@OPTION", "15");
            strProParm.Add("@COMPANYID", intCompanyId.ToString());
            strProParm.Add("@USERID", intUserId.ToString());
            strProParm.Add("@PROGRAMID", "38");
            strProParm.Add("@PAGE_MODE", "C");
            strProParm.Add("@Entity_Id", obj_Page.ddlDealerName.SelectedValue);
            dtDscheme = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);
            if (dtDscheme.Rows.Count > 0)
            {
                ddlDealerschemename.FillDataTable(dtDscheme, "Value", "Name");
                if (ddlDealerschemename.Items.Count == 2)
                {
                    ddlDealerschemename.SelectedIndex = 1;
                }
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriLoadDealerGropu()
    {

        try
        {
            DataTable dtDealerGroup;
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@OPTION", "23");
            strProParm.Add("@COMPANYID", intCompanyId.ToString());
            strProParm.Add("@USERID", intUserId.ToString());
            strProParm.Add("@PROGRAMID", "38");
            strProParm.Add("@PAGE_MODE", "C");
            strProParm.Add("@Entity_Id", obj_Page.ddlDealerName.SelectedValue);
            dtDealerGroup = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);
            if (dtDealerGroup.Rows.Count > 0)
            {
                txtSBG.Text = "SBG";
            }
            else
            {
                txtSBG.Text = "Non SBG";
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlBranch_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            //ddlSalePersonCodeList.Clear();
            //if (ddlBranchList.SelectedIndex > 0)
            if (ddlBranchList.SelectedValue != "0")
            {
                //if (ddlBusinessOfferNoList.SelectedIndex == 0)
                //{
                //    //FunPriLoadOfferNo();
                //}
                //txtBranch_Followup.Text = ddlBranchList.SelectedItem.Text;
            }
            cmbSubLocation.ClearSelection();
            FunPriLoadSubLocation(intCompanyId, intUserId, ddlBranchList.SelectedValue, 1);
            funCheckGPSMonth();
            //ddlBranchList.Focus();

            if (ddlBranchList.SelectedValue != "0")
            {
                ddlApplicationNo.Enabled = false;
            }
            else
            {
                ddlApplicationNo.Enabled = true;
            }
            if (ViewState["CHK_APPDT"].ToString() == "1")
            {
                txtApplicationDateDate.Enabled = true;
                CalendarApplicationDate.Enabled = true;
                rfvApplicationDate.Enabled = true;
            }
            else
            {
                txtApplicationDateDate.Enabled = false;
                CalendarApplicationDate.Enabled = false;
                rfvApplicationDate.Enabled = false;
                Utility.FunShowAlertMsg(this, "User Does not have Special Access Rights for Application Process Application Date Modification");
            }
            cmbSubLocation.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlBranch_SelectedIndexChangedFWC(object sender, EventArgs e)
    {
        try
        {
            //ddlSalePersonCodeList.Clear();
            //if (ddlBranchList.SelectedIndex > 0)
            if (ddlBranchListFWC.SelectedValue != "0")
            {
                //if (ddlBusinessOfferNoList.SelectedIndex == 0)
                //{
                //    //FunPriLoadOfferNo();
                //}
                //txtBranch_Followup.Text = ddlBranchList.SelectedItem.Text;
            }
            cmbSubLocationFWC.ClearDropDownList();
            FunPriLoadSubLocationFWC(intCompanyId, intUserId, ddlBranchListFWC.SelectedValue, 1);
            //ddlBranchListFWC.Focus();
            funCheckGPSMonth();
            txtBranch_Followup.Text = ddlBranchListFWC.SelectedItem.Text;
            if (ddlBranchListFWC.SelectedValue != "0")
            {
                ddlApplicationNo.Enabled = false;
            }
            else
            {
                ddlApplicationNo.Enabled = true;
            }
            if (ViewState["CHK_APPDT"].ToString() == "1")
            {
                txtApplicationDateFWC.Enabled = true;
                CEtxtApplicationDateFWC.Enabled = true;
                rfvimgApplicationNumberDateFWC.Enabled = true;
            }
            else
            {
                txtApplicationDateFWC.Enabled = false;
                CEtxtApplicationDateFWC.Enabled = false;
                rfvimgApplicationNumberDateFWC.Enabled = false;
                Utility.FunShowAlertMsg(this, "User Does not have Special Access Rights for Application Process Application Date Modification");
            }
            ddlBranchListFWC.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    protected void ddl_Time_Value_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (ddl_Time_Value.SelectedIndex > 0)
            {
                txtFBDate.Text = "";
                if (ddl_Time_Value.SelectedValue == "1" || ddl_Time_Value.SelectedValue == "2")
                {

                    //txtFBDate.Enabled = false;
                    //rfvFBDate.Enabled = false;
                    //rngFBDate.Enabled = false;
                }
                else
                {
                    //rfvFBDate.Enabled = true;
                    //txtFBDate.Enabled = true;
                    //rngFBDate.Enabled = true;
                }
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void ddlEntityName_InFlowFrom_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriLoadInflowCustomerEntityDLL();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    protected void ddlPaymentto_OutFlow_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriLoadOutflowCustomerEntity();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    protected void ddlRepaymentCashFlow_RepayTab_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlCashFlowDesc = sender as DropDownList;
            FunPriDoCashflowBasedValidation(ddlCashFlowDesc);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    #endregion

    #region TextBox Events

    //protected void txtCollateralTypeRate_OnTextChanged(object sender, EventArgs e)
    //{
    //    if (txtCollateralTypeRate.Text != "" && txtIRRRate.Text != "")
    //        txtRate.Text = Convert.ToString(Convert.ToDecimal(txtIRRRate.Text) + Convert.ToDecimal(txtCollateralTypeRate.Text));
    //}

    protected void cmbCustomer_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriSetDDLFirstitem(ddlBusinessOfferNoList);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void txtCustomerCode_OnTextChanged(object sender, EventArgs e)
    {
        try
        {
            if (string.IsNullOrEmpty(txtCustomerCode.Text))
            {
                //S3GCustomerAddress1.SetCustomerDetails("", "", "", "", "", "", "");
                txtCustNameAdd_Followup.Text = "";
                return;
            }
            FunPriToggleCustomerCodeBased();
            FunPriAssignAssetLink();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void txRepaymentFromDate_TextChanged(object sender, EventArgs e)
    {
        try
        {
            TextBox txtBoxFromdate = (TextBox)sender;
            if (Utility.CompareDates(txtApplicationDateDate.Text, txtBoxFromdate.Text) == -1)
            {
                //Utility.FunShowAlertMsg(this, "From Date should be greater than or equal to Application Date");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege69));
                return;
            }
            ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
            if (objRepaymentStructure.FunPubGetCashFlowDetails(intCompanyId, Convert.ToInt32(ddlLOB.SelectedValue)).Rows.Count == 0)
            {
                //Utility.FunShowAlertMsg(this, "Define Installment Flag in Cashflow Master for selected Line of Business");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege70));
                return;
            }
            FunPriIRRReset();

            FunPriGenerateRepaymentSchedule(objRepaymentStructure, Utility.StringToDate(txtBoxFromdate.Text));
            /*UMFC has been calculated automatically for other than Product & TermLoan Return Pattern 
            (Also applicable to HP,FL,LN,TE,TL) Updated on 28th Oct 2010*/
            if (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL") && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "PRODUCT" && ddl_Repayment_Mode.SelectedItem.Text.ToUpper().Trim() != "TERM LOAN")
            {
                FunPriInsertUMFC();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    #region ROI - Payment

    protected void txtResidualValue_Cashflow_TextChanged(object sender, EventArgs e)
    {
        try
        {
            //Code added by saran for observation raised by RS through mail dated on 18-Jan-2012 start

            if (txtResidualValue_Cashflow.Text.Trim() != "" && (txtResidualValue_Cashflow.Text.Split('.')[0].Length <= 2))
            {
                rfvResidualValue.Enabled = false;
                //txtResidualAmt_Cashflow.ReadOnly = true;
                if (txtFinanceAmount.Text != "")
                {
                    txtResidualAmt_Cashflow.Text =
                        txtResidualValue.Text = Math.Round(((Convert.ToDecimal(txtResidualValue_Cashflow.Text) * Convert.ToDecimal(txtFinanceAmount.Text)) / 100), 0).ToString();
                }
            }
            else
            {
                rfvResidualValue.Enabled = true;
                txtResidualAmt_Cashflow.Text = "";
                //txtResidualAmt_Cashflow.ReadOnly = false;

            }
            //Code added by saran for observation raised by RS through mail dated on 18-Jan-2012 end
            txtResidualValue_Cashflow.Focus();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void txtResidualAmt_Cashflow_TextChanged(object sender, EventArgs e)
    {
        try
        {
            //FunPriToggleResidualAmountBased();
            //Code added by saran for observation raised by RS through mail dated on 18-Jan-2012 start
            if (txtResidualAmt_Cashflow.Text.Trim() != "")
            {
                if (Convert.ToDecimal(txtResidualAmt_Cashflow.Text.Trim()) >
                    Convert.ToDecimal(txtFinanceAmount.Text.Trim())
                    && (!ddlLOB_SelectedItem_Text.Value.ToUpper().StartsWith("OL")))
                {
                    //Utility.FunShowAlertMsg(this, "Residual amount should be less than or equal to Finance amount");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege71));
                    txtResidualAmt_Cashflow.Text = "";
                    txtResidualValue_Cashflow.Text = "";
                    txtResidualAmt_Cashflow.Focus();
                }
                else
                {
                    rfvResidualValue.Enabled = false;
                    txtResidualValue_Cashflow.ReadOnly = true;
                    txtResidualValue_Cashflow.Text = "";
                    txtResidualValue.Text = txtResidualAmt_Cashflow.Text;
                }
            }
            else
            {
                txtResidualAmt_Cashflow.Text = "";
                rfvResidualValue.Enabled = true;
                txtResidualValue_Cashflow.ReadOnly = false;
            }
            //Code added by saran for observation raised by RS through mail dated on 18-Jan-2012 end

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void txt_Margin_Percentage_TextChanged(object sender, EventArgs e)
    {
        try
        {

            FunPriAssignMarginAmount();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    #endregion

    #endregion

    #region Other Control Events
    protected void asyncFileUpload_UploadedComplete(object sender, AjaxControlToolkit.AsyncFileUploadEventArgs e)
    {

    }

    protected void lnkPRDDView_Click(object sender, EventArgs e)
    {
        try
        {
            FunPriShowPRDD(sender);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    #endregion

    #endregion


    private void FunPriDoCashflowBasedValidation(DropDownList ddlCashFlowDesc)
    {
        try
        {

            string[] strvalues = ddlCashFlowDesc.SelectedValue.Split(',');
            TextBox txtFromInstallment_RepayTab1_upd = gvRepaymentDetails.FooterRow.FindControl("txtFromInstallment_RepayTab") as TextBox;
            TextBox txtfromdate_RepayTab1_Upd = gvRepaymentDetails.FooterRow.FindControl("txtfromdate_RepayTab") as TextBox;
            TextBox txtPerInstallmentAmount_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtPerInstallmentAmount_RepayTab") as TextBox;
            TextBox txtBreakup_RepayTab1 = gvRepaymentDetails.FooterRow.FindControl("txtBreakup_RepayTab") as TextBox;

            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_ToDate_RepayTab = gvRepaymentDetails.FooterRow.FindControl("CalendarExtenderSD_ToDate_RepayTab") as AjaxControlToolkit.CalendarExtender;
            AjaxControlToolkit.CalendarExtender CalendarExtenderSD_fromdate_RepayTab = gvRepaymentDetails.FooterRow.FindControl("CalendarExtenderSD_fromdate_RepayTab") as AjaxControlToolkit.CalendarExtender;

            if (!ddlLOB_SelectedItem_Text.Value.Contains("TL") && !ddlLOB_SelectedItem_Text.Value.Contains("TE"))
            {
                if (strvalues[4].ToString() != "23")
                {
                    txtFromInstallment_RepayTab1_upd.Attributes.Remove("readonly");
                    txtFromInstallment_RepayTab1_upd.ReadOnly = false;
                    CalendarExtenderSD_ToDate_RepayTab.Enabled = false;
                    CalendarExtenderSD_fromdate_RepayTab.Enabled = false;
                    txtfromdate_RepayTab1_Upd.Text = "";
                    txtBreakup_RepayTab1.Text = "";
                    txtBreakup_RepayTab1.Attributes.Add("readonly", "readonly");
                }
                else
                {
                    if (ddl_Time_Value.SelectedValue == "2" || ddl_Time_Value.SelectedValue == "4")
                    {
                        //ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                        ////objRepaymentStructure.dtNextDate = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedValue, Utility.StringToDate(DateTime.Now.ToString(strDateFormat)));
                        //objRepaymentStructure.FunPubGetNextRepaydate((DataTable)ViewState["DtRepayGrid"], ddl_Frequency.SelectedValue);
                        ////if (gvRepaymentDetails.Rows.Count > 0 && txtfromdate_RepayTab1_Upd.Text == "")  // 24 Jan 2012 By Rao. Fixed Observation- From Date Overlapping issue while selecting cashflow. 
                        //    txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                        //funPerSetFirstInstallmentDate(txtApplicationDateDate.Text, ddl_Time_Value.SelectedValue, ddl_Frequency.SelectedValue);
                        ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                        //objRepaymentStructure.dtNextDate = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedValue, Utility.StringToDate(DateTime.Now.ToString(strDateFormat)));
                        //if (gvRepaymentDetails.Rows.Count > 0 && txtfromdate_RepayTab1_Upd.Text == "")  // 24 Jan 2012 By Rao. Fixed Observation- From Date Overlapping issue while selecting cashflow. 
                        //    txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);

                        if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
                        {
                            txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(Utility.StringToDate(txtFirstInstallDate.Text).ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                        }
                        //else
                        //{
                        //    txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                        //}




                    }
                    else
                    {
                        //funPerSetFirstInstallmentDate(txtApplicationDateDate.Text, ddl_Time_Value.SelectedValue, ddl_Frequency.SelectedValue);
                        ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                        //objRepaymentStructure.FunPubGetNextRepaydate((DataTable)ViewState["DtRepayGrid"], ddl_Frequency.SelectedValue);
                        //txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(objRepaymentStructure.intNextInstall + 1);
                        //txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                        if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
                        {
                            txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(Utility.StringToDate(txtFirstInstallDate.Text).ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                        }
                        //else
                        //{
                        //    txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                        //}
                    }

                    if (ddl_Rate_Type.SelectedItem.Text.Trim().ToUpper() == "FLOATING")
                    {
                        if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
                        {
                            CalendarExtenderSD_fromdate_RepayTab.Enabled = true;
                            txtfromdate_RepayTab1_Upd.ReadOnly = false;
                        }
                        else
                        {
                            CalendarExtenderSD_fromdate_RepayTab.Enabled = false;
                            txtfromdate_RepayTab1_Upd.ReadOnly = true;
                        }
                    }
                    else
                    {
                        CalendarExtenderSD_fromdate_RepayTab.Enabled = false;
                        txtfromdate_RepayTab1_Upd.ReadOnly = true;
                    }

                    txtFromInstallment_RepayTab1_upd.Attributes.Add("readonly", "readonly");
                    txtBreakup_RepayTab1.Attributes.Remove("readonly");
                    txtFromInstallment_RepayTab1_upd.ReadOnly = true;

                    CalendarExtenderSD_ToDate_RepayTab.Enabled = true;
                    CalendarExtenderSD_ToDate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;


                    CalendarExtenderSD_fromdate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;
                }

            }
            else
            {
                if (strvalues[4].ToString() != "91" && strvalues[4].ToString() != "35")
                {
                    txtFromInstallment_RepayTab1_upd.Attributes.Remove("readonly");
                    txtFromInstallment_RepayTab1_upd.ReadOnly = false;
                    CalendarExtenderSD_ToDate_RepayTab.Enabled = false;
                    CalendarExtenderSD_fromdate_RepayTab.Enabled = true;

                    txtBreakup_RepayTab1.Text = "";
                    txtBreakup_RepayTab1.Attributes.Add("readonly", "readonly");

                    ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                    objRepaymentStructure.FunPubGetNextRepaydateTL((DataTable)ViewState["DtRepayGrid"], ddl_Frequency.SelectedValue, strvalues[4].ToString());
                    txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(objRepaymentStructure.intNextInstall + 1);

                    //funPerSetFirstInstallmentDate(txtApplicationDateDate.Text, ddl_Time_Value.SelectedValue, ddl_Frequency.SelectedValue);
                    if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
                    {
                        txtfromdate_RepayTab1_Upd.Text = "";
                        txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(Utility.StringToDate(txtFirstInstallDate.Text).ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                    }
                    //else
                    //{
                    //    txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                    //}

                }
                else
                {
                    if (ddl_Time_Value.SelectedValue == "2" || ddl_Time_Value.SelectedValue == "4")
                    {
                        ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                        objRepaymentStructure.dtNextDate = S3GBusEntity.CommonS3GBusLogic.FunPubGetNextDate(ddl_Frequency.SelectedValue, Utility.StringToDate(DateTime.Now.ToString(strDateFormat)));
                        if (gvRepaymentDetails.Rows.Count > 0 && txtfromdate_RepayTab1_Upd.Text == "")  // 24 Jan 2012 By Rao. Fixed Observation- From Date Overlapping issue while selecting cashflow. 
                            txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                    }
                    else
                    {
                        ClsRepaymentStructure objRepaymentStructure = new ClsRepaymentStructure();
                        objRepaymentStructure.FunPubGetNextRepaydateTL((DataTable)ViewState["DtRepayGrid"], ddl_Frequency.SelectedValue, strvalues[4].ToString());
                        txtFromInstallment_RepayTab1_upd.Text = Convert.ToString(objRepaymentStructure.intNextInstall + 1);
                        txtfromdate_RepayTab1_Upd.Text = DateTime.Parse(objRepaymentStructure.dtNextDate.ToString(), CultureInfo.CurrentCulture.DateTimeFormat).ToString(strDateFormat);
                    }

                    if (ddl_Rate_Type.SelectedItem.Text.Trim().ToUpper() == "FLOATING")
                    {
                        //if (((DataTable)ViewState["DtRepayGrid"]).Rows.Count == 0)
                        //{
                        CalendarExtenderSD_fromdate_RepayTab.Enabled = true;
                        txtfromdate_RepayTab1_Upd.ReadOnly = false;
                        //}
                        //else
                        //{
                        //    CalendarExtenderSD_fromdate_RepayTab.Enabled = false;
                        //    txtfromdate_RepayTab1_Upd.ReadOnly = true;
                        //}
                    }
                    else
                    {
                        CalendarExtenderSD_fromdate_RepayTab.Enabled = true;
                        txtfromdate_RepayTab1_Upd.ReadOnly = false;
                    }
                }
                //txtFromInstallment_RepayTab1_upd.Attributes.Add("readonly", "readonly");
                //txtBreakup_RepayTab1.Attributes.Remove("readonly");
                //txtFromInstallment_RepayTab1_upd.ReadOnly = true;

                CalendarExtenderSD_ToDate_RepayTab.Enabled = true;
                CalendarExtenderSD_ToDate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;


                CalendarExtenderSD_fromdate_RepayTab.Format = ObjS3GSession.ProDateFormatRW;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    private void FunPriShowRepaymetDetails(decimal decAmountRepayble)
    {

        if (txtTenure.Text != "" || txtTenure.Text != string.Empty)
        {
            //lblTotalAmount.Text = "Total Amount Repayable : " + Math.Round(decAmountRepayble, ObjS3GSession.ProGpsSuffixRW);//5366;
            lblTotalAmount.Text = "Total Amount Repayable ";


            //if (txtLifeInsuranceCustomerPremiumAmount.Text != string.Empty)
            //{
            //    lblTotalAmountData.Text = Math.Round(decAmountRepayble + Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text), ObjS3GSession.ProGpsSuffixRW).ToString();
            //}
            //else
            //{
            lblTotalAmountData.Text = Math.Round(decAmountRepayble, ObjS3GSession.ProGpsSuffixRW).ToString();
            lblTotalAmountData.funPubChangeCurrencyFormat();
            //}



            //lblFrequency_Display.Text = "Tenure &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : " + txtTenure.Text + " " + ddlTenureType.SelectedItem.Text;
            lblFrequency_Display.Text = "Tenure";
            lblFrequencyData.Text = txtTenure.Text;
            txtTenureTypeData.Text = ddlTenureType.SelectedItem.Text;

            if (txtRate.Text.Trim() != "")
            {
                if (ddl_Return_Pattern.SelectedValue == "2")
                {
                    if (ViewState["decRate"] != null)
                    {
                        //lblMarginResidual.Text = "Rate &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : " + ViewState["decRate"].ToString();
                        lblMarginResidual.Text = "Rate";
                        lblMarginResidualData.Text = ViewState["decRate"].ToString();
                    }
                }
                else
                {
                    //lblMarginResidual.Text = "Rate &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : " + txtRate.Text;
                    lblMarginResidual.Text = "Rate";
                    lblMarginResidualData.Text = txtRate.Text;
                }
            }

        }

    }
    private void FunPriLoadFileNameInPRDDT()
    {
        try
        {
            foreach (GridViewRow grvData in gvPRDDT.Rows)
            {
                Label myThrobber = (Label)grvData.FindControl("myThrobber");
                HiddenField hidThrobber = (HiddenField)grvData.FindControl("hidThrobber");

                if (hidThrobber.Value != "")
                {
                    myThrobber.Text = hidThrobber.Value;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    private void FunPriUpdateROIRuleDecRate()//Added on 3/11/2011 by saran for UAT raised mail modify mode not allowing to save forr IRR to flat rate
    {
        try
        {
            DataTable ObjDTROI = new DataTable(); ;
            ObjDTROI = (DataTable)ViewState["ROIRules"];
            decimal decRate = 0;
            switch (ddl_Return_Pattern.SelectedValue)
            {

                case "1":
                    //decRate = Convert.ToDecimal(txtRate.Text);
                    decRate = Convert.ToDecimal(hdnRate.Value);
                    txtRate.Text = Convert.ToDecimal(hdnRate.Value).ToString("0.000");
                    break;
                case "2":
                    //ObjCommonBusLogic.FunPubCalculateFlatRate(dtRepaymentTab, dtCashInflow, dtCashOutflow, ddl_Frequency.SelectedItem.Text, Convert.ToInt32(txtTenure.Text), ddlTenureType.SelectedItem.Text, strDateFormat, Convert.ToDecimal(txtFacilityAmt.Text), Convert.ToDouble(9.6365), strIrrRest, "Empty", strTimeval, Convert.ToDecimal(0.10), IRRType.Accounting_IRR, out decRate, Convert.ToDecimal(10.05), decPLR);
                    if (ViewState["decRate"] != null)
                    {
                        decRate = Convert.ToDecimal(ViewState["decRate"].ToString());
                    }//Hard Coded for testing IRR
                    break;
            }
            ObjDTROI.Rows[0]["IRR_Rate"] = decRate;
            //ObjDTROI.Rows[0]["Collateral_Type_Rate"] = txtCollateralTypeRate.Text;
            ObjDTROI.Rows[0].AcceptChanges();
            ViewState["ROIRules"] = ObjDTROI;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    // Added By R. Manikandan
    // To Fix Repayment Scheduled

    private DataTable FunPubGetAccountActivatingDate()
    {
        DataTable DtGetLastDate = new DataTable();
        try
        {
            DataTable dtOutflow = (DataTable)ViewState["DtCashFlowOut"];
            DataRow[] drOutflowDate = dtOutflow.Select("CashFlow_Flag_ID = 41");
            Dictionary<string, string> Procparam;
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@DateValue", Utility.StringToDate(txtApplicationDateDate.Text).ToString());
            Procparam.Add("@INSTALMENT", txtTenure.Text);
            Procparam.Add("@OutflowCnt", drOutflowDate.Length.ToString());


            DtGetLastDate = Utility.GetDefaultData("S3G_GET_LASTDATE", Procparam);

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return DtGetLastDate;
    }
    private void FunPriLoadLocation(int CompanyId, int UserId, int ProgramId, int LobId)
    {
        try
        {

            DataTable dt = new DataTable();
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@COMPANY_ID", intCompanyId.ToString());
            strProParm.Add("@USER_ID", intUserId.ToString());
            strProParm.Add("@PROGRAM_ID", intProgramID.ToString());
            if (LobId != 0)
            {
                strProParm.Add("@LOB_ID", LobId.ToString());
            }
            strProParm.Add("@OPTION", "1");
            strProParm.Add("@IS_ACTIVE", "1");

            dt = Utility.GetDefaultData("S3G_GET_LOCATION", strProParm);
            ddlBranchList.FillDataTable(dt, "BRANCH_ID", "BRANCH");

            if (dt.Rows.Count == 1)
            {
                ddlBranchList.SelectedValue = dt.Rows[0]["BRANCH_ID"].ToString();
                ddlBranch_SelectedIndexChanged(null, null);
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }
    }
    private void FunPriLoadLocationFAC(int CompanyId, int UserId, int ProgramId, int LobId)
    {
        try
        {
            DataTable dt = new DataTable();
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@COMPANY_ID", intCompanyId.ToString());
            strProParm.Add("@USER_ID", intUserId.ToString());
            strProParm.Add("@PROGRAM_ID", intProgramID.ToString());
            strProParm.Add("@LOB_ID", LobId.ToString());
            strProParm.Add("@IS_ACTIVE", "1");
            strProParm.Add("@OPTION", "1");
            dt = Utility.GetDefaultData("S3G_GET_LOCATION", strProParm);
            ddlBranchListFWC.FillDataTable(dt, "BRANCH_ID", "BRANCH");
            ddlBranchListFWC.AddItemToolTip();
            if (dt.Rows.Count == 1)
            {
                ddlBranchListFWC.SelectedValue = dt.Rows[0]["BRANCH_ID"].ToString();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }
    }
    private void FunPriLoadSubLocation(int CompanyId, int UserId, string Region_Id, int Is_active)
    {
        try
        {
            DataTable dt = new DataTable();
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@COMPANY_ID", HttpContext.Current.Session["Company_Id"].ToString());
            strProParm.Add("@USER_ID", intUserId.ToString());
            if (ddlBranchList.SelectedValue != "0")
                strProParm.Add("@REGION_ID", ddlBranchList.SelectedValue);
            strProParm.Add("@IS_ACTIVE", "1");
            dt = Utility.GetDefaultData("RP_BRN_DET", strProParm);
            cmbSubLocation.FillDataTable(dt, "BRANCH_ID", "BRANCH");
            cmbSubLocation.AddItemToolTip();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {
        }
    }
    private void FunPriLoadSubLocationFWC(int CompanyId, int UserId, string Region_Id, int Is_active)
    {
        try
        {



            DataTable dt = new DataTable();
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@COMPANY_ID", HttpContext.Current.Session["Company_Id"].ToString());
            strProParm.Add("@USER_ID", intUserId.ToString());
            strProParm.Add("@REGION_ID", ddlBranchListFWC.SelectedValue);
            strProParm.Add("@IS_ACTIVE", "1");
            dt = Utility.GetDefaultData("RP_BRN_DET", strProParm);
            cmbSubLocationFWC.FillDataTable(dt, "BRANCH_ID", "BRANCH");
            cmbSubLocationFWC.AddItemToolTip();
            //if (cmbSubLocationFWC.Items.Count == 1)
            //    cmbSubLocationFWC.SelectedIndex = 1;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }
    }
    protected void cmbLocation_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriLoadSubLocation(intCompanyId, intUserId, ddlBranchList.SelectedValue, 1);
            //ddlBranchList.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunProLoadApplicationlovdtls(int intCompany_Id)
    {
        try
        {
            DataSet dsGetCheckListDetails = new DataSet();
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@OPTION", "1");
            strProParm.Add("@COMPANYID", intCompany_Id.ToString());
            strProParm.Add("@USERID", intUserId.ToString());
            strProParm.Add("@PROGRAMID", intProgramID.ToString());
            strProParm.Add("@Page_Mode", "C");
            dsGetCheckListDetails = Utility.GetDataset("S3G_OR_LOAD_LOV_APP", strProParm);
            ViewState["OR_LOAD_LOV"] = dsGetCheckListDetails;
            if (dsGetCheckListDetails.Tables.Count > 0)
            {
                if (dsGetCheckListDetails.Tables[0].Rows.Count > 0)
                {

                    //ddlLOB.BindDataTable(dsGetCheckListDetails.Tables[0], "LOB_ID", "LOB_CODE", "LOB_NAME");
                    ddlLOB.FillDataTable(dsGetCheckListDetails.Tables[0], "LOB_ID", "LOB_NAME");
                    ddlLOB.ToUpper();
                    ViewState["LOB"] = dsGetCheckListDetails.Tables[0];
                    FunPriLoadLocation(intCompanyId, intUserId, intProgramID, 0);
                    //FunPriLoadSubLocation(intCompany_Id, intUserId, ddlBranchList.SelectedValue, 1);
                    funPriLoadProduct();
                    funPriLoadProductFWC();
                    ddlLifeInsurance_SelectedIndexChanged(null, null);
                }
                if (dsGetCheckListDetails.Tables[1].Rows.Count > 0)
                {
                    //ddlAppraisalType.FillDataTable(dsGetCheckListDetails.Tables[1], "VALUE", "NAME");
                }
                if (dsGetCheckListDetails.Tables[2].Rows.Count > 0)
                {
                    ddlContType.FillDataTable(dsGetCheckListDetails.Tables[2], strVaue, strDisplay);
                    ddlContType_SelectedIndexChanged(null, null);
                }
                if (dsGetCheckListDetails.Tables[3].Rows.Count > 0)
                {
                    ddlDealType.FillDataTable(dsGetCheckListDetails.Tables[3], strVaue, strDisplay);
                }
                if (dsGetCheckListDetails.Tables[4].Rows.Count > 0)
                {
                    ViewState["PDCType"] = dsGetCheckListDetails.Tables[4];

                }
                if (dsGetCheckListDetails.Tables[5].Rows.Count > 0)
                {
                    //ddlBank.FillDataTable(dsGetCheckListDetails.Tables[5], "BANK_CODE", "BANK_NAME");
                    ViewState["Bank"] = dsGetCheckListDetails.Tables[5];
                }
                if (dsGetCheckListDetails.Tables[6].Rows.Count > 0)
                {
                    //ddlBankBranch.FillDataTable(dsGetCheckListDetails.Tables[6], "BANKBRANCH_CODE", "BANKBRANCH_NAME");
                    ViewState["BankBranch"] = dsGetCheckListDetails.Tables[6];
                }
                if (dsGetCheckListDetails.Tables[7].Rows.Count > 0)
                {
                    ddlStatus.FillDataTable(dsGetCheckListDetails.Tables[7], strVaue, strDisplay);


                }
                if (intApplicationProcessId == 0)
                    ddlStatus.SelectedValue = "1";//Pending

                if (strMode == "M")
                {
                    DataTable dtstatus = dsGetCheckListDetails.Tables[7];

                    DataRow[] dr = dtstatus.Select("Value not in (1,3)");
                    foreach (DataRow dr2 in dr)
                    {
                        dr2.Delete();
                    }
                    dtstatus.AcceptChanges();
                    ddlStatus.FillDataTable(dtstatus, strVaue, strDisplay);
                    ddlStatus.Enabled = true;

                }


                //if (dsGetCheckListDetails.Tables[8].Rows.Count > 0)
                //{
                //    ddlInsuranceby.FillDataTable(dsGetCheckListDetails.Tables[8], "VALUE", "NAME");

                //}
                //if (dsGetCheckListDetails.Tables[9].Rows.Count > 0)
                //{
                //    ddlInsuranceCoverage.FillDataTable(dsGetCheckListDetails.Tables[9], "VALUE", "NAME");

                //}
                if (dsGetCheckListDetails.Tables[10].Rows.Count > 0)
                {
                    ddlLeadSource.FillDataTable(dsGetCheckListDetails.Tables[10], strVaue, strDisplay);
                }
                if (dsGetCheckListDetails.Tables[11].Rows.Count > 0)
                {
                    ddlBusinessSource.FillDataTable(dsGetCheckListDetails.Tables[11], strVaue, strDisplay);
                }
                if (dsGetCheckListDetails.Tables[12].Rows.Count > 0)
                {
                    //ddlDealerschemename.FillDataTable(dsGetCheckListDetails.Tables[12], strVaue, strDisplay);
                }
                if (dsGetCheckListDetails.Tables[13].Rows.Count > 0)
                {
                    ddlCreditPurpose.FillDataTable(dsGetCheckListDetails.Tables[13], strVaue, strDisplay);
                }
                if (dsGetCheckListDetails.Tables[14].Rows.Count > 0)
                {
                    ddlRepamentMode.FillDataTable(dsGetCheckListDetails.Tables[14], strVaue, strDisplay);
                    ddlRepamentMode.SelectedValue = "3";
                }
                if (dsGetCheckListDetails.Tables[15].Rows.Count > 0)//
                {

                    ViewState["COVENANTSDDL"] = dsGetCheckListDetails.Tables[15];
                    //funPrivLoadCovenantsGrid();
                    ddlCovenantsClause.FillDataTable((DataTable)ViewState["COVENANTSDDL"], "value", "name");
                }
                //if (dsGetCheckListDetails.Tables[16].Rows.Count > 0)//
                //{
                //    ViewState["IntInstallmentRoundofPosition"] = Convert.ToInt32(dsGetCheckListDetails.Tables[16].Rows[0]["INS_ROUND_OFF_POS"].ToString());
                //}
                //else
                //{
                //    Utility.FunShowAlertMsg(this, "Set the Installment Round off Position in Orgination GPS");
                //}

                if (dsGetCheckListDetails.Tables[18].Rows.Count > 0)//
                {
                    ViewState["PromoterIdentification"] = dsGetCheckListDetails.Tables[18];
                }
                if (dsGetCheckListDetails.Tables[19].Rows.Count > 0)//
                {
                    ViewState["SENDSMSEMAIL"] = dsGetCheckListDetails.Tables[19].Rows[0]["IS_SEND_SMS_EMAIL_ALERT"];
                }
                if (dsGetCheckListDetails.Tables[20].Rows.Count > 0)//
                {
                    ddlRiskRating.FillDataTable(dsGetCheckListDetails.Tables[20], "value", "name");
                }
                if (dsGetCheckListDetails.Tables[21].Rows.Count > 0)//
                {
                    ddlRiskQualityValue.FillDataTable(dsGetCheckListDetails.Tables[21], "value", "name");
                }

                funPriLoadPromoterGrid();

            }
            //txtStatus.Text = "Processing";
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }
    }

    protected void ddlLeadSource_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (ddlLeadSource.SelectedValue == "4")
            {
                txtLeadOtherSource.Visible = true;
                ddlLeadSourceName.Visible = false;
                txtLeadOtherSource.Focus();
            }
            else
            {
                txtLeadOtherSource.Visible = false;
                ddlLeadSourceName.Visible = true;
                TextBox txtItemName = ddlLeadSourceName.FindControl("txtItemName") as TextBox;
            }
            ddlLeadSourceName.Clear();
            txtLeadOtherSource.Text = string.Empty;
            HttpContext.Current.Session["LeadSource"] = ddlLeadSource.SelectedValue;
            //ddlLeadSourceName.Clear();
            //if (ddlLeadSource.SelectedValue == "4")
            //    ddlLeadSourceName.EnableAutoCompleteExtender = false;
            //else
            //    ddlLeadSourceName.EnableAutoCompleteExtender = true;
            ddlLeadSource.Focus();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    protected void ChkExistingCustomer_CheckedChanged(object sender, EventArgs e)
    {
        try
        {

            string strLOV = "CMD";
            string strControlId = "ctl00_ContentPlaceHolder1_tcPricing_TabMainPage_ucCustomerCodeLov";
            string strDisplayName = "Name";
            string strQuery = "window.open('../common/GetLOV.aspx?LOV_Code=" + strLOV + "&ControlID=" + strControlId + "&LOBID=" + null + "&RegionID=" + null + "&BranchID=" + null + "&ConstitutionID=" + null + "&DispCont=" + strDisplayName + "&Popup=Yes','newwindow','toolbar=no,location=no,menubar=no,width=500,height=330,resizable=no,scrollbars=yes,top=50,left=150');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Insert", strQuery, true);
            this.Focus();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }
    }




    [System.Web.Services.WebMethod]
    public static string[] GetDealTransferAccountNoList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@COMPANY_ID", System.Web.HttpContext.Current.Session["AutoSuggestCompanyID"].ToString());
        Procparam.Add("@PrefixText", prefixText);
        Procparam.Add("@User_Id", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("SA_GET_Account_AGT", Procparam));

        return suggetions.ToArray();
    }
    [System.Web.Services.WebMethod]
    public static string[] GetCustomerList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@COMPANY_ID", System.Web.HttpContext.Current.Session["AutoSuggestCompanyID"].ToString());
        Procparam.Add("@PrefixText", prefixText);
        Procparam.Add("@LOB_ID", obj_Page.ddlLOB.SelectedValue);
        Procparam.Add("@User_Id", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("SA_GET_CUSTOMER_AGT_APP", Procparam));

        return suggetions.ToArray();

    }
    [System.Web.Services.WebMethod]
    public static string[] GetClientsCustomerList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@COMPANY_ID", System.Web.HttpContext.Current.Session["AutoSuggestCompanyID"].ToString());
        Procparam.Add("@PrefixText", prefixText);
        Procparam.Add("@LOB_ID", obj_Page.ddlLOB.SelectedValue);
        Procparam.Add("@User_Id", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("SA_GET_CLIENT_CUSTOMER_AGT_APP", Procparam));

        return suggetions.ToArray();

    }
    [System.Web.Services.WebMethod]
    public static string[] GetClientList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();

        Procparam.Clear();
        Procparam.Add("@COMPANY_ID", System.Web.HttpContext.Current.Session["AutoSuggestCompanyID"].ToString());
        Procparam.Add("@PrefixText", prefixText);
        Procparam.Add("@User_Id", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("SA_GET_CLIENT_LIST", Procparam));

        return suggetions.ToArray();

    }
    protected void ucDealTransferAccount_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            //Button btnLoadAccount = (Button)ucDealTransferAccountLov.FindControl("btnGetLOV");
            //btnLoadAccount.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void btnDealTransferAccountLov_Click(object sender, EventArgs e)
    {
        try
        {


            //TextBox txtAccItemNumber = (TextBox)ucDealTransferAccountLov.FindControl("txtItemName");
            //HiddenField hdnCID = (HiddenField)ucDealTransferAccountLov.FindControl("hdnID");
            //ucDealTransferAccountLov.SelectedText = txtAccItemNumber.Text;
            //ucDealTransferAccountLov.SelectedValue = hdnCID.Value;
            //Button btnLoadAccount = (Button)ucDealTransferAccountLov.FindControl("btnGetLOV");
            //btnLoadAccount.Focus();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriClearCustomerHoverInfo()
    {
        try
        {
            UserControl CustomerDetails1 = (UserControl)ucCustomerCodeLov.FindControl("S3GCustomerAddress1");
            TextBox txtCustomerCode = (TextBox)CustomerDetails1.FindControl("txtCustomerCode");
            TextBox txtCustomerCode1 = (TextBox)CustomerDetails1.FindControl("txtCustomerCode1");
            TextBox txtCustomerName = (TextBox)CustomerDetails1.FindControl("txtCustomerName");
            TextBox txtCustomerName1 = (TextBox)CustomerDetails1.FindControl("txtCustomerName1");
            TextBox txtMobile = (TextBox)CustomerDetails1.FindControl("txtMobile");
            TextBox txtMobile1 = (TextBox)CustomerDetails1.FindControl("txtMobile1");
            TextBox txtPhone = (TextBox)CustomerDetails1.FindControl("txtPhone");
            TextBox txtPhone1 = (TextBox)CustomerDetails1.FindControl("txtPhone1");
            TextBox txtEmail = (TextBox)CustomerDetails1.FindControl("txtEmail");
            TextBox txtEmail1 = (TextBox)CustomerDetails1.FindControl("txtEmail1");
            TextBox txtWebSite = (TextBox)CustomerDetails1.FindControl("txtWebSite");
            TextBox txtWebSite1 = (TextBox)CustomerDetails1.FindControl("txtWebSite1");
            TextBox txtCusAddress = (TextBox)CustomerDetails1.FindControl("txtCusAddress");
            TextBox txtCusAddress1 = (TextBox)CustomerDetails1.FindControl("txtCusAddress1");
            TextBox TxtAccNumber = (TextBox)ucCustomerCodeLov.FindControl("TxtName");
            TextBox txtAccItemNumber = (TextBox)ucCustomerCodeLov.FindControl("txtItemName");
            HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            txtCustomerCode.Text = txtCustomerCode1.Text = txtCustomerName.Text
            = txtCustomerName1.Text = txtMobile.Text = txtMobile1.Text =
            txtPhone.Text = txtPhone1.Text = txtEmail.Text = txtEmail1.Text = txtWebSite.Text = txtWebSite1.Text
            = txtCusAddress.Text = txtCusAddress1.Text = string.Empty;
            txtCustomerCodeLease.Text = string.Empty;


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }



    }
    private void funPriClearCustomerHoverInfoFWC()
    {
        try
        {
            UserControl CustomerDetails1 = (UserControl)ucCustomerLovFWC.FindControl("S3GCustomerAddress1");
            TextBox txtCustomerCode = (TextBox)CustomerDetails1.FindControl("txtCustomerCode");
            TextBox txtCustomerCode1 = (TextBox)CustomerDetails1.FindControl("txtCustomerCode1");
            TextBox txtCustomerName = (TextBox)CustomerDetails1.FindControl("txtCustomerName");
            TextBox txtCustomerName1 = (TextBox)CustomerDetails1.FindControl("txtCustomerName1");
            TextBox txtMobile = (TextBox)CustomerDetails1.FindControl("txtMobile");
            TextBox txtMobile1 = (TextBox)CustomerDetails1.FindControl("txtMobile1");
            TextBox txtPhone = (TextBox)CustomerDetails1.FindControl("txtPhone");
            TextBox txtPhone1 = (TextBox)CustomerDetails1.FindControl("txtPhone1");
            TextBox txtEmail = (TextBox)CustomerDetails1.FindControl("txtEmail");
            TextBox txtEmail1 = (TextBox)CustomerDetails1.FindControl("txtEmail1");
            TextBox txtWebSite = (TextBox)CustomerDetails1.FindControl("txtWebSite");
            TextBox txtWebSite1 = (TextBox)CustomerDetails1.FindControl("txtWebSite1");
            TextBox txtCusAddress = (TextBox)CustomerDetails1.FindControl("txtCusAddress");
            TextBox txtCusAddress1 = (TextBox)CustomerDetails1.FindControl("txtCusAddress1");
            TextBox TxtAccNumber = (TextBox)ucCustomerLovFWC.FindControl("TxtName");
            TextBox txtAccItemNumber = (TextBox)ucCustomerLovFWC.FindControl("txtItemName");
            HiddenField hdnCID = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
            txtCustomerCode.Text = txtCustomerCode1.Text = txtCustomerName.Text
            = txtCustomerName1.Text = txtMobile.Text = txtMobile1.Text =
            txtPhone.Text = txtPhone1.Text = txtEmail.Text = txtEmail1.Text = txtWebSite.Text = txtWebSite1.Text
            = txtCusAddress.Text = txtCusAddress1.Text = string.Empty;
            txtCusomerCodeFWChidden.Text = string.Empty;


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }



    }
    protected void btnLoadCustomerMaster_Click(object sender, EventArgs e)
    {
        try
        {
            if (Session["EnqNewCustomerId"] != null)
            {
                btnCreateCustomer.Attributes.Add("disabled", "disabled");
                btnCreateCustomer.Attributes.Add("class", "btn_control_disable");  // enab

                intEnqNewCustomerId = Convert.ToInt32(Utility.Load("EnqNewCustomerId", ""));
                HiddenField hdnCustomerId = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                if (hdnCustomerId != null)
                {
                    hdnCustomerId.Value = hdnCustID.Value = intEnqNewCustomerId.ToString();
                    HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                    hdnCID.Value = hdnCID.Value;
                    btnLoadCustomer_Click(null, null);
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void btnLoadCustomerMasterGuarantor_Click(object sender, EventArgs e)
    {
        int iGuarantorId = 0;
        string strCustGuaromerCode = string.Empty;
        string strCustGuaromerName = string.Empty;
        try
        {
            if (Session["CustGurantorId"] != null)
            {
                iGuarantorId = Convert.ToInt32(Utility.Load("CustGurantorId", ""));
                strCustGuaromerCode = (Utility.Load("GurantorCode", "")).ToString();
                strCustGuaromerName = (Utility.Load("GurantorName", "")).ToString();
                if (gvGuarantor != null)
                {
                    UserControls_CommonSearch ucCustomerLovGuar = gvGuarantor.FooterRow.FindControl("ucCustomerLov") as UserControls_CommonSearch;



                    TextBox txt1 = (TextBox)ucCustomerLovGuar.FindControl("txtName");
                    HiddenField hdnCID = (HiddenField)ucCustomerLovGuar.FindControl("hdnID");
                    hdnCID.Value = iGuarantorId.ToString();
                    txt1.Text = strCustGuaromerCode + "-" + strCustGuaromerName;
                    ucCustomerLovGuar.ButtonEnabled = false;
                }

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private bool FunPriValidateDeDuplCustomerDet(int ICustomer_Id, string strCustomerType, string strIdenticolumn, string strPassportNumber, string strNID, string strLabourCardNumber, string strDOB, string strCustomerName)
    {
        bool blnIsDuplicate = false;
        string strAlertMessage = string.Empty;
        string strAlertThird = string.Empty;
        try
        {
            Dictionary<string, string> Procparam = new Dictionary<string, string>();
            Procparam.Add("@OPTION", "1");
            Procparam.Add("@Mode", strMode);
            Procparam.Add("@COMPANYID", intCompanyId.ToString());
            Procparam.Add("@PROGRAM_ID", "45");//Customer Master

            Procparam.Add("@CUSTOMER_ID", Convert.ToString(ICustomer_Id));
            if (strCustomerType.ToUpper() == "1")
            {
                Procparam.Add("@NID_RID_CRID_NUMBER", strIdenticolumn);
            }
            else
            {
                Procparam.Add("@CR_NUMBER", strIdenticolumn);
            }
            if (strPassportNumber != string.Empty)
            {
                Procparam.Add("@PASSPORT_NUMBER", strPassportNumber.Trim());
            }
            if (strNID.Trim() != string.Empty)
            {
                Procparam.Add("@NRID", strNID.Trim());
            }
            if (strLabourCardNumber.Trim() != string.Empty)
            {
                Procparam.Add("@LABOURCARD_NUMBER", strLabourCardNumber.Trim());
            }
            if (strDOB.Trim() != string.Empty)
            {
                Procparam.Add("@DATE_OF_BIRTH", strDOB);
            }

            if (strCustomerName.Trim() != string.Empty)
            {
                Procparam.Add("@CUSTOMER_NAME", strCustomerName.Trim());
            }
            Procparam.Add("@CUSTOMER_TYPE", strCustomerType);
            DataTable dtdedupCheck = Utility.GetDefaultData("S3G_OR_GET_DEDUP_CHECK", Procparam);
            if (Convert.ToInt32(dtdedupCheck.Rows[0]["IS_DUPE"]) > 0)
            {
                if (Convert.ToInt32(dtdedupCheck.Rows[0]["NID"]) == 1)
                {
                    strAlertMessage = "NID" + " has been duplicated"; //N.ID./R.ID Number                   
                }
                if (Convert.ToInt32(dtdedupCheck.Rows[0]["NRID"]) == 1)
                {

                    if (strAlertMessage.Trim() != string.Empty)
                    {
                        strAlertMessage = "\\n" + "NRID has been duplicated";
                    }
                    else
                    {
                        strAlertMessage = "NRID has been duplicated";
                    }
                    //return true;
                }
                if (Convert.ToInt32(dtdedupCheck.Rows[0]["PASSPORT"]) == 1)
                {

                    if (strAlertMessage.Trim() != string.Empty)
                    {
                        strAlertMessage = strAlertMessage + "\\n" + "Passport Number has been duplicated";
                    }
                    else
                    {
                        strAlertMessage = "Passport Number has been duplicated";
                    }
                    //return true;
                }
                if (Convert.ToInt32(dtdedupCheck.Rows[0]["CUSTOMER_NAME"]) == 1)
                {

                    if (strAlertMessage.Trim() != string.Empty)
                    {
                        strAlertMessage = strAlertMessage + "\\n" + "Customer Name has been duplicated";
                    }
                    else
                    {
                        strAlertMessage = "Customer Name has been duplicated";
                    }
                }
                if (Convert.ToInt32(dtdedupCheck.Rows[0]["DOB"]) == 1)
                {
                    if (strAlertMessage.Trim() != string.Empty)
                    {
                        strAlertMessage = strAlertMessage + "\\n" + "Date of Birth has been duplicated";
                    }
                    else
                    {
                        strAlertMessage = "Date of Birth has been duplicated";
                    }
                }
                if (Convert.ToInt32(dtdedupCheck.Rows[0]["CRNO"]) == 1)
                {
                    if (!(strCustomerType.Trim().ToUpper() == "1"))
                    {

                        if (strAlertMessage.Trim() != string.Empty)
                        {
                            strAlertMessage = strAlertMessage + "\\n" + "CR Number has been duplicated";
                        }
                        else
                        {
                            strAlertMessage = "CR Number has been duplicated";
                        }
                    }
                }
                if (Convert.ToInt32(dtdedupCheck.Rows[0]["LABOURCARD"]) == 1)
                {
                    if (strAlertMessage.Trim() != string.Empty)
                    {
                        strAlertMessage = strAlertMessage + "\\n" + "Labour Card Number has been duplicated";
                    }
                    else
                    {
                        strAlertMessage = "Labour Card Number has been duplicated";
                    }
                }





                // Customer Name Check Against HOT/PEP/Terroist
                if (Convert.ToInt32(dtdedupCheck.Rows[0]["CUSTOMER_NAME"]) == 1)
                {
                    if (Convert.ToInt32(dtdedupCheck.Rows[0]["HOT_LIST"]) > 0)
                    {
                        //Utility.FunShowAlertMsg(this, "Customer Name has been duplicated");
                        if (strAlertThird.Trim() != string.Empty)
                        {
                            strAlertThird = strAlertThird + "\\n" + "Customer Marked in Hot List";
                        }
                        else
                        {
                            strAlertThird = "Customer Marked in Hot List";
                        }
                    }

                    if (Convert.ToInt32(dtdedupCheck.Rows[0]["PEP_LIST"]) > 0)
                    {

                        //Utility.FunShowAlertMsg(this, "Customer Name has been duplicated");
                        if (strAlertThird.Trim() != string.Empty)
                        {
                            strAlertThird = strAlertThird + "\\n" + "Customer Marked in Pep List";
                        }
                        else
                        {
                            strAlertThird = "Customer Marked in Pep List";
                        }
                    }
                    if (Convert.ToInt32(dtdedupCheck.Rows[0]["TER_LIST"]) > 0)
                    {

                        if (strAlertThird.Trim() != string.Empty)
                        {
                            strAlertThird = strAlertThird + "\\n" + "Customer Marked in Terrorist List";
                        }
                        else
                        {
                            strAlertThird = "Customer Marked in Terrorist List";
                        }
                    }
                    //return true;
                }

                // NID/RID/CR Number Check in PEP/Terrorist List    
                if (Convert.ToInt32(dtdedupCheck.Rows[0]["HOT_LIST"]) > 0 && Convert.ToInt32(dtdedupCheck.Rows[0]["HOT_NI_LIST"]) > 0)
                {

                    if (strAlertThird.Trim() != string.Empty)
                    {
                        strAlertThird = strAlertThird + "\\n" + " Customer Marked in Hot List"; //N.ID./R.ID Number   
                    }
                    else
                    {
                        strAlertThird = " Customer Marked in Hot List"; //N.ID./R.ID Number   
                    }
                }

                if (Convert.ToInt32(dtdedupCheck.Rows[0]["PEP_LIST"]) > 0 && Convert.ToInt32(dtdedupCheck.Rows[0]["PEP_NI_LIST"]) > 0)
                {

                    if (strAlertThird.Trim() != string.Empty)
                    {
                        strAlertThird = strAlertThird + "\\n" + "Customer Marked in Pep List"; //N.ID./R.ID Number   
                    }
                    else
                    {
                        strAlertThird = " Customer Marked in Pep List"; //N.ID./R.ID Number   
                    }
                }

                if (Convert.ToInt32(dtdedupCheck.Rows[0]["TER_LIST"]) > 0 && Convert.ToInt32(dtdedupCheck.Rows[0]["TER_NI_LIST"]) > 0)
                {

                    if (strAlertThird.Trim() != string.Empty)
                    {
                        strAlertThird = strAlertThird + "\\n" + " Customer Marked in Terrorist List"; //N.ID./R.ID Number   
                    }
                    else
                    {
                        strAlertThird = " Customer Marked in Terrorist List"; //N.ID./R.ID Number   
                    }
                }

                // Check Passport Number in HOT/PEP/Terriost List                             
                if (Convert.ToInt32(dtdedupCheck.Rows[0]["HOT_LIST"]) > 0 && Convert.ToInt32(dtdedupCheck.Rows[0]["HOT_PS_LIST"]) > 0)
                {

                    if (strAlertThird.Trim() != string.Empty)
                    {
                        strAlertThird = strAlertThird + "\\n" + " Customer Marked in Pep List"; //N.ID./R.ID Number   
                    }
                    else
                    {
                        strAlertThird = " Customer Marked in Pep List"; //N.ID./R.ID Number   
                    }
                }

                if (Convert.ToInt32(dtdedupCheck.Rows[0]["PEP_LIST"]) > 0 && Convert.ToInt32(dtdedupCheck.Rows[0]["PEP_PS_LIST"]) > 0)
                {

                    if (strAlertThird.Trim() != string.Empty)
                    {
                        strAlertThird = strAlertThird + "\\n" + " Customer Marked in Terrorist List"; //N.ID./R.ID Number   
                    }
                    else
                    {
                        strAlertThird = "Customer Marked in Terrorist List"; //N.ID./R.ID Number   
                    }
                }


                if (strAlertMessage.Trim() != string.Empty)
                {
                    Utility.FunShowAlertMsg(this, strAlertMessage);
                    return true;
                }

                if (strAlertThird.Trim() != string.Empty)
                {
                    Utility.FunShowAlertMsg(this, strAlertThird);
                    return true;
                }


            }
            else
            {
                blnIsDuplicate = false;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable to Validate Duplicate Documents");
        }
        return blnIsDuplicate;
    }

    protected void btnLoadCustomer_Click(object sender, EventArgs e)
    {
        try
        {
            ViewState["NEGATIVELIST_CUSTOMER"] = null;
            funPriClearBalance();
            if (ddlBranchList.SelectedValue == "0")
            {
                Utility.FunShowAlertMsg(this, "Select the Branch");
                HiddenField hdnCID2 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                hdnCID2.Value = "0";
                //ucCustomerCodeLov.Clear();
                ucCustomerCodeLov.ToolTip = string.Empty;
                funPriClearCustomerHoverInfo();
                txtCustomerCodeLease.Text = string.Empty;
                return;
            }

            string strCustomerAddress = string.Empty;
            StringBuilder strFormAddress = new StringBuilder();
            HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            TextBox txtName = (TextBox)ucCustomerCodeLov.FindControl("txtName");
            txtName.Focus();
            //txtName.Enabled = false;
            if (hdnCID != null && hdnCID.Value != "")
            {

                funPriClearCustomerHoverInfo();
                //CustomerDetails1.ClearCustomerDetails();
                Button btnGetLOV = (Button)ucCustomerCodeLov.FindControl("btnGetLOV");
                //btnGetLOV.Focus();



                ucCustomerCodeLov.SelectedValue = hdnCID.Value;
                ucCustomerCodeLov.ToolTip = ucCustomerCodeLov.SelectedText = txtName.Text;

                hdnCustID.Value = hdnCID.Value;
                DataSet ds = new DataSet();
                Dictionary<string, string> objProcedureParameters = new Dictionary<string, string>();
                objProcedureParameters.Add("@Option", "1");
                objProcedureParameters.Add("@COMPANY_ID", intCompanyId.ToString());
                objProcedureParameters.Add("@CustomerId", hdnCID.Value);
                objProcedureParameters.Add("@Lob_Id", ddlLOB.SelectedValue);
                ds = Utility.GetDataset("S3G_OR_GET_CUSADDRESSAPP", objProcedureParameters);


                if (ds.Tables[5].Rows.Count > 0)
                {
                    if (strMode != "Q")
                    {
                        if (ds.Tables[5].Rows[0]["NEGATIVELIST_CUSTOMER"].ToString() == "1")
                        {
                            ViewState["NEGATIVELIST_CUSTOMER"] = 1;
                            //TextBox txtName2 = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                            //HiddenField hdnCID2 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                            //txtName2.Text = string.Empty;
                            //hdnCID2.Value = "0";
                            //ucCustomerCodeLov.Clear();
                            Utility.FunShowAlertMsg(this, "Customer Black Listed not allowed to Create the Application");
                            //return;

                        }
                    }
                }


                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i <= ds.Tables[0].Columns.Count - 1; i++)
                    {
                        strFormAddress.Append(Environment.NewLine);
                        if (ds.Tables[0].Rows[0][i].ToString() != string.Empty)
                            strFormAddress.Append(ds.Tables[0].Columns[i].ColumnName + " : " + ds.Tables[0].Rows[0][i].ToString());

                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        for (int i = 0; i <= ds.Tables[1].Rows.Count - 1; i++)
                        {
                            strFormAddress.Replace(ds.Tables[1].Rows[i]["COLUMN_NAME"].ToString().ToUpper(), ds.Tables[1].Rows[i]["DISPLAY_TEXT"].ToString());
                        }
                    }
                    funPriSetCustomerAddress(ds.Tables[0], strFormAddress, ucCustomerCodeLov);
                    txtCustNameAdd_Followup.Text = strFormAddress.ToString().Trim().Replace("_", " ");
                    txtLOB_Followup.Text = ddlLOB.SelectedItem.Text;
                    txtBranch_Followup.Text = ddlBranchList.SelectedItem.Text;
                    ViewState["Tax_Applicable"] = ds.Tables[0].Rows[0]["Tax_Applicable"].ToString();
                }
                if (ds.Tables[2].Rows.Count > 0)
                {
                    txtCreditLimit.Text = Utility.funPubChangeCurrencyFormat(ds.Tables[2].Rows[0]["MAX_LEND_AMOUNT"].ToString());
                    txtConstitution.Text = ds.Tables[2].Rows[0]["Constitution"].ToString();
                    ViewState["ConsitutionId"] = hdnConstitutionId.Value = ds.Tables[2].Rows[0]["CONSTITUTION_CODE"].ToString();
                    ViewState["Occupation"] = ds.Tables[3].Rows[0]["Occupation"].ToString();
                    txtCustomerCodeLease.Text = txtName.Text = ds.Tables[2].Rows[0]["customer_name"].ToString();
                    //txtEmployerBankName.Text = ds.Tables[2].Rows[0]["EMPLOYER_NAME"].ToString();
                    FunPriLoadConsitutionBasedCustomer(Convert.ToInt32(hdnCID.Value));
                    HttpContext.Current.Session["LOBID"] = ddlLOB.SelectedValue;
                    HttpContext.Current.Session["Company_Id"] = intCompanyId.ToString();
                    HttpContext.Current.Session["CONSTITUTION_ID"] = ViewState["ConsitutionId"].ToString();
                    HttpContext.Current.Session["CONTRACT_TYPE"] = ddlContType.SelectedValue;
                    HttpContext.Current.Session["TSCSMP"] = ds.Tables[2].Rows[0]["TSCSMP"].ToString();

                    if (ds.Tables[2].Rows[0]["FAC_APPLICABLE"].ToString() == "1" && ds.Tables[2].Rows[0]["COVENANTS_APPLICABLE"].ToString() == "1")
                    {
                        pnlCovenants.Visible = true;
                        pnlCovenants.Style.Add("display", "block");
                        rfvCoventsCondition.Enabled = false;

                    }
                    else
                    {
                        pnlCovenants.Style.Add("display", "none");
                        pnlCovenants.Visible = false;
                        rfvCoventsCondition.Enabled = true;
                    }
                    ViewState["Date_of_Birth"] = ds.Tables[4].Rows[0]["DATEOFBIRTH"];


                    if (ds.Tables[3].Rows.Count > 0)
                    {
                        //txtCreditLimit.Text = ds.Tables[2].Rows[0]["MAX_LEND_AMOUNT"].ToString();
                        //txtConstitution.Text = ds.Tables[2].Rows[0]["Constitution"].ToString();
                        ViewState["Occupation"] = ds.Tables[3].Rows[0]["Occupation"].ToString();
                        ViewState["CUSTOMER_TYPE_ID"] = ds.Tables[3].Rows[0]["CUSTOMER_TYPE_ID"].ToString();
                        ViewState["Max_Lend_Amount"] = ds.Tables[3].Rows[0]["Max_Lend_Amount"].ToString();
                        ViewState["Max_Lend_Limit_Exp"] = ds.Tables[3].Rows[0]["Max_Lend_Limit_Exp"].ToString();
                        ViewState["FAC_APPLICABLE"] = ds.Tables[3].Rows[0]["FAC_APPLICABLE"].ToString();
                        ViewState["FAC_LIMIT"] = ds.Tables[3].Rows[0]["FAC_LIMIT"].ToString();
                        ViewState["FACT_LIMIT_EXP_DATE"] = ds.Tables[3].Rows[0]["FACT_LIMIT_EXP_DATE"].ToString();

                        ViewState["NID_CR_RID_NUMBER"] = ds.Tables[3].Rows[0]["NID_CR_RID_NUMBER"].ToString();
                        ViewState["PASSPORT_NUMBER"] = ds.Tables[3].Rows[0]["PASSPORT_NUMBER"].ToString();
                        ViewState["NRID_NUMBER"] = ds.Tables[3].Rows[0]["NRID_NUMBER"].ToString();
                        ViewState["DATEOFBIRTH"] = ds.Tables[3].Rows[0]["DATEOFBIRTH"].ToString();
                        ViewState["CUSTOMER_NAME"] = ds.Tables[3].Rows[0]["CUSTOMER_NAME"].ToString();
                        ViewState["CUST_DATA_EXCEPTION"] = ds.Tables[3].Rows[0]["CUST_DATA_EXCEPTION"].ToString();


                    }


                    if (ViewState["Max_Lend_Limit_Exp"] != null)
                    {
                        if (intApplicationProcessId == 0)
                        {

                            if (ViewState["Max_Lend_Limit_Exp"].ToString().ToUpper() == "TRUE")
                            {

                                Utility.FunShowAlertMsg(this, "Maximum Lending Limit Expired");
                                Session["AssetCustomerValiMessege"] = "Maximum Lending Limit Expired";
                                //TextBox txtName2 = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                                //HiddenField hdnCID2 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                                //hdnCID2.Value = "0";
                                //funPriClearCustomerHoverInfo();
                                //txtCustomerCodeLease.Text = string.Empty;
                                //ViewState["CUSTOMER_TYPE_ID"] = null;
                                //ViewState["ConsitutionId"] = null;
                                //ViewState["Occupation"] = null;
                                //ViewState["Date_of_Birth"] = null;
                                //ucCustomerCodeLov.ToolTip = string.Empty;
                                //return;
                            }
                        }
                    }

                    if (ViewState["CUST_DATA_EXCEPTION"] != null)
                    {
                        if (intApplicationProcessId == 0)
                        {
                            if (ViewState["CUST_DATA_EXCEPTION"].ToString().ToUpper() == "1")
                            {

                                Utility.FunShowAlertMsg(this, "Some Mandatory Informations not available in Customer Master");
                                Session["AssetCustomerValiMessege"] = "Some Mandatory Informations not available in Customer Master";
                                //TextBox txtName2 = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                                //HiddenField hdnCID2 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                                //hdnCID2.Value = "0";
                                //funPriClearCustomerHoverInfo();
                                //txtCustomerCodeLease.Text = string.Empty;
                                //ViewState["CUSTOMER_TYPE_ID"] = null;
                                //ViewState["ConsitutionId"] = null;
                                //ViewState["Occupation"] = null;
                                //ViewState["Date_of_Birth"] = null;
                                //ucCustomerCodeLov.ToolTip = string.Empty;
                                //return;
                            }
                        }
                    }


                    funComplianceAge();
                    if (ViewState["CUSTOMER_TYPE_ID"] != null)
                    {
                        if (ViewState["CUSTOMER_TYPE_ID"].ToString() == "1")
                        {
                            if (!ddlLOB_SelectedItem_Text.Value.Contains("TL"))
                            {
                                if (strMode == "C")
                                {
                                    ddlLifeInsurance.SelectedValue = "2";
                                }
                            }
                            //ddlLifeInsurance.Enabled = false;
                            if (strMode == "C" || PageMode == PageModes.WorkFlow)
                            {
                                if (!ddlLOB_SelectedItem_Text.Value.Contains("TL"))
                                {
                                    ddlLifeInsurance_SelectedIndexChanged(null, null);
                                }
                            }

                            if (strMode != "Q")
                            {
                                if (!funPriChecCustomerAge())
                                {
                                    //TextBox txtName2 = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                                    //HiddenField hdnCID2 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                                    //hdnCID2.Value = "0";
                                    //funPriClearCustomerHoverInfo();
                                    //txtCustomerCodeLease.Text = string.Empty;
                                    //ViewState["CUSTOMER_TYPE_ID"] = null;
                                    //ViewState["ConsitutionId"] = null;
                                    //ViewState["Occupation"] = null;
                                    //ViewState["Date_of_Birth"] = null;
                                    //ucCustomerCodeLov.ToolTip = string.Empty;

                                }
                            }
                        }

                    }

                }
            }
            if (intApplicationProcessId == 0)
            {
                if (ViewState["ConsitutionId"] != null)
                {
                    funPriLoadAppriasalInfo("", ViewState["ConsitutionId"].ToString(), ddlProductCodeList.SelectedValue, ddlLOB.SelectedValue);
                }
            }
            FunPriAssignAssetLink();






            Session["AssetCustomer"] = Convert.ToString(hdnCID.Value) + ";" + txtName.Text;

            //FunPriLoadPreDisbursementDocument();
            HiddenField hdnCID23 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(hdnCID23.Value, false, 0);
            if (hdnCID23.Value != string.Empty)
            {
                btnViewCustomer.Attributes.Add("onclick", "window.open('../Credit Admin/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes&qsCustomerId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q', 'null','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');return false;");

                if (strMode != "Q")
                {
                    if (ViewState["CUSTOMER_TYPE_ID"] != null)
                    {
                        if (FunPriValidateDeDuplCustomerDet(Convert.ToInt32(hdnCID23.Value), ViewState["CUSTOMER_TYPE_ID"].ToString(), ViewState["NID_CR_RID_NUMBER"].ToString(), ViewState["PASSPORT_NUMBER"].ToString(), ViewState["NRID_NUMBER"].ToString(), "", ViewState["DATEOFBIRTH"].ToString(), ViewState["CUSTOMER_NAME"].ToString()))
                        {
                            //TextBox txtName2 = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                            //HiddenField hdnCID2 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                            //hdnCID2.Value = "0";
                            //funPriClearCustomerHoverInfo();
                            //txtCustomerCodeLease.Text = string.Empty;
                            //ViewState["CUSTOMER_TYPE_ID"] = null;
                            //ViewState["ConsitutionId"] = null;
                            //ViewState["Occupation"] = null;
                            //ViewState["Date_of_Birth"] = null;
                            //ucCustomerCodeLov.ToolTip = string.Empty;
                            //return;
                        }
                    }
                }
            }
            //if (strMode != "Q")
            //{
            funPriCheckCreditLimit(2, hdnCID23.Value);
            //}
            Session["AssetCustomer"] = Convert.ToString(hdnCID.Value) + ";" + txtName.Text;

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private bool funPriCheckCreditLimit(int InVaidation, string strCustId)
    {
        if (InVaidation == 2)
        {
            txtMaximumLendingLimit.Text = "0.000";
            txtTotalBilledPrinceipal.Text = "0.000";
            txtTotalCreditFinanceAmount.Text = "0.000";
            txtAvailableCreditLimit.Text = "0.000";
        }
        decimal dFinanaceAmount = 0;

        bool istrue = false;
        try
        {
            DataTable dtLease = new System.Data.DataTable();

            DataSet ds = new DataSet();
            Dictionary<string, string> objProcedureParameters = new Dictionary<string, string>();
            objProcedureParameters.Add("@COMPANY_ID", intCompanyId.ToString());
            objProcedureParameters.Add("@USER_ID", intUserId.ToString());
            objProcedureParameters.Add("@OPTION", "1");
            objProcedureParameters.Add("@PROGRAM_ID", intProgramID.ToString());
            objProcedureParameters.Add("@CUSTOMER_ID", strCustId);
            objProcedureParameters.Add("@LOB_ID", ddlLOB.SelectedValue);
            objProcedureParameters.Add("@Customer_Type", "1");//Customer Type 1-Leasing,2-Factoring
            objProcedureParameters.Add("@PANUM", txtAccountNumber.Text);
            objProcedureParameters.Add("@Application_Id", intApplicationProcessId.ToString());
            dtLease = Utility.GetDefaultData("S3G_GET_CUST_CREDIT_LIMIT", objProcedureParameters);
            if (dtLease.Rows.Count > 0)
            {





                if (InVaidation == 1)
                {

                    if (ddlLOB_SelectedItem_Text.Value.ToUpper() == "FT")
                    {
                        dFinanaceAmount = Convert.ToDecimal(txtPrePaymentLimitFWC.Text);
                    }
                    else
                    {
                        dFinanaceAmount = Convert.ToDecimal(txtFinanceAmount.Text);
                    }

                    if (dtLease.Rows[0]["GROPU_CREDITLIMIT"].ToString() != string.Empty)
                    {
                        if (dtLease.Rows[0]["GROPU_CREDITLIMIT"].ToString() != "0")
                        {
                            if (Convert.ToDecimal(dtLease.Rows[0]["GROPU_CREDITLIMIT"].ToString()) <= Convert.ToDecimal(dtLease.Rows[0]["TOTAL_OS"].ToString()) - Convert.ToDecimal(dFinanaceAmount))
                            {
                                Utility.FunShowAlertMsg(this, "Customer Credit Limit Exceeded or Reached the Customer Group Limit");
                                istrue = true;
                            }
                        }
                    }


                    if (Convert.ToDecimal(dtLease.Rows[0]["MAX_LEND_AMOUNT"]) < Convert.ToDecimal(dFinanaceAmount))
                    {
                        Utility.FunShowAlertMsg(this, "Finance Amount Exceeded or reached the Customer Maximum Lending Limit");
                        istrue = true;
                    }


                    if ((Convert.ToDecimal(dtLease.Rows[0]["MAX_LEND_AMOUNT"].ToString()) - Convert.ToDecimal(dtLease.Rows[0]["TOTAL_FIN_AMOUNT"].ToString()) + Convert.ToDecimal(dtLease.Rows[0]["NET_OS"].ToString()) - dFinanaceAmount) < 0)
                    {
                        Utility.FunShowAlertMsg(this, "Customer Credit Limit Exceeded or reached the Customer Maximum Lending Limit");
                        istrue = true;
                    }

                    //Temp Commented on 17-Dec-2019 for UAT as Per Narien
                    //if (Utility.StringToDate(dtLease.Rows[0]["MAX_LEND_LIMIT_EXP"].ToString()) < Utility.StringToDate(txtApplicationDateDate.Text))
                    //{
                    //    Utility.FunShowAlertMsg(this, "Maximum Lending Limit Expired");
                    //    istrue = true;

                    //}
                    if (dtLease.Rows[0]["CUST_GROUP_LIMIT_EXP"].ToString() != string.Empty)
                    {
                        if (Utility.StringToDate(dtLease.Rows[0]["CUST_GROUP_LIMIT_EXP"].ToString()) < Utility.StringToDate(txtApplicationDateDate.Text))
                        {
                            Utility.FunShowAlertMsg(this, "Maximum Lending Group Limit Expired");
                            istrue = true;

                        }
                    }

                    //Factoring
                    if (ddlLOB_SelectedItem_Text.Value.ToString().ToUpper() == "FT")
                    {
                        lblTotalBilledPrincipal.Text = "Funds In Use";
                        if (dtLease.Rows[0]["FAC_LIMIT"].ToString() != string.Empty)
                        {
                            if (Convert.ToDecimal(dtLease.Rows[0]["FAC_LIMIT"].ToString()) <= Convert.ToDecimal(dtLease.Rows[0]["TOTAL_OS"].ToString()) - dFinanaceAmount)
                            {
                                Utility.FunShowAlertMsg(this, "Customer Funds in Use Exceeded or reached the Customer Factoring Credit Limit");
                                istrue = true;
                            }
                        }
                        if (dtLease.Rows[0]["FACT_LIMIT_EXP_DATE"].ToString() != string.Empty)
                        {
                            if (Utility.StringToDate(dtLease.Rows[0]["FACT_LIMIT_EXP_DATE"].ToString()) < Utility.StringToDate(txtApplicationDateDate.Text))
                            {
                                Utility.FunShowAlertMsg(this, "Factoring Limit Expired");
                                istrue = true;

                            }
                        }
                    }

                }
                else
                {
                    if (ddlLOB_SelectedItem_Text.Value.ToString().ToUpper() == "FT")
                    {
                        lblTotalBilledPrincipal.Text = "Funds In Use";
                        txtMaximumLendingLimit.Text = Convert.ToDecimal(dtLease.Rows[0]["FAC_LIMIT"].ToString()).ToString(Funsetsuffix());
                        lblMaximumLendingAmount.Text = "Factoring Limit";
                    }
                    else
                    {
                        lblTotalBilledPrincipal.Text = "Total Billed Principal";
                        txtMaximumLendingLimit.Text = Convert.ToDecimal(dtLease.Rows[0]["MAX_LEND_AMOUNT"].ToString()).ToString(Funsetsuffix());
                        lblMaximumLendingAmount.Text = "Maximum Lending Amount";
                    }
                    txtMaximumLendingLimit.funPubChangeCurrencyFormat();
                    txtTotalBilledPrinceipal.Text = Convert.ToDecimal(dtLease.Rows[0]["NET_OS"].ToString()).ToString(Funsetsuffix());
                    txtTotalBilledPrinceipal.funPubChangeCurrencyFormat();
                    txtTotalCreditFinanceAmount.Text = Convert.ToDecimal(dtLease.Rows[0]["TOTAL_FIN_AMOUNT"].ToString()).ToString(Funsetsuffix());
                    txtTotalCreditFinanceAmount.funPubChangeCurrencyFormat();
                    txtAvailableCreditLimit.Text = Convert.ToDecimal(dtLease.Rows[0]["AVAILABLE_CREDIT_LIMIT"].ToString()).ToString(Funsetsuffix());
                    txtAvailableCreditLimit.funPubChangeCurrencyFormat();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

        return istrue;
    }

    private void funPriAdditionalInfor(string strLobId, string strOfferDate)
    {
        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Company_ID", intCompanyId.ToString());
        Procparam.Add("@Program_ID", Convert.ToString(intProgramID));
        Procparam.Add("@TYPE", Convert.ToString(1));
        Procparam.Add("@LOB_ID", strLobId);
        Procparam.Add("@CUST_OFF_DATE", Utility.StringToDate(strOfferDate).ToString());
        //Procparam.Add("@TYPE_ID", Utility.StringToDate(strOfferDate).ToString());


        //Procparam.Add("@TYPE_ID", ddlConstitutionName.SelectedValue);
        DataTable dtdata = Utility.GetDefaultData("S3G_GET_CONSTANT_PARAM_VAL", Procparam);
        if (dtdata.Rows.Count > 0)
        {
            grvAdditionalInfo.DataSource = dtdata;
            grvAdditionalInfo.DataBind();
        }
    }
    private void AdditionalInforFetch(int intPricingId)
    {

        Procparam = new Dictionary<string, string>();
        Procparam.Add("@Company_ID", intCompanyId.ToString());
        Procparam.Add("@Program_ID", Convert.ToString(intProgramID));
        Procparam.Add("@TRAN_ID", Convert.ToString(intPricingId));
        Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
        Procparam.Add("@CUST_OFF_DATE", Utility.StringToDate(txtApplicationDateDate.Text).ToString());



        DataTable dtdata = Utility.GetDefaultData("S3G_GET_CONSTANT_PARAMTRAN_VAL", Procparam);
        if (dtdata.Rows.Count > 0)
        {
            grvAdditionalInfo.DataSource = dtdata;
            grvAdditionalInfo.DataBind();
        }
    }
    private void FunPriLoadLookupTypeData(DropDownList ddlLookup, string strLookupType)
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", intCompanyId.ToString());
            Procparam.Add("@Lookup_Type", strLookupType);
            Procparam.Add("@Table_Name", "S3G_ORG_LOOKUP");
            ddlLookup.BindDataTable("S3G_GET_COMMON_LOOKUP_VAL", Procparam, true, "--Select--", new string[] { "LOOKUP_CODE", "DESCRIPTION" });

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void grvAdditionalInfo_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Label lblParamName = (Label)e.Row.FindControl("lblParamName");
                Label lblParamType = (Label)e.Row.FindControl("lblParamType");
                Label lblLookupType = (Label)e.Row.FindControl("lblLookupType");
                Label lblParamSize = (Label)e.Row.FindControl("lblParamSize");
                TextBox txtValues = (TextBox)e.Row.FindControl("txtValues");
                DropDownList ddlValues = (DropDownList)e.Row.FindControl("ddlValues");
                AjaxControlToolkit.FilteredTextBoxExtender fteValues = (AjaxControlToolkit.FilteredTextBoxExtender)e.Row.FindControl("fteValues");
                AjaxControlToolkit.CalendarExtender calAddValues = (AjaxControlToolkit.CalendarExtender)e.Row.FindControl("calAddValues");
                if (lblParamType.Text.Trim() == "5")//Lookup
                {
                    txtValues.Visible = false;
                    fteValues.Enabled = false;
                    calAddValues.Enabled = false;
                    ddlValues.Visible = true;
                    FunPriLoadLookupTypeData(ddlValues, lblLookupType.Text.Trim().ToUpper());


                    Label lblParamValue = e.Row.FindControl("lblParamValues") as Label;
                    if (!string.IsNullOrEmpty(lblParamValue.Text))
                        ddlValues.SelectedValue = lblParamValue.Text;


                }
                else
                {
                    txtValues.Visible = true;
                    ddlValues.Visible = false;
                    string[] strLength = lblParamSize.Text.Trim().Split(',');
                    txtValues.MaxLength = Convert.ToInt32(strLength[0]);
                    if (lblParamType.Text.Trim() == "4")//Date
                    {
                        calAddValues.Format = strDateFormat;
                        calAddValues.Enabled = true;
                        fteValues.ValidChars = "/-";
                        txtValues.Attributes.Add("onblur", "fnDoDate(this,'" + txtValues.ClientID + "','" + strDateFormat + "',true,  false);");//Future Date False,Back Date False
                        fteValues.FilterType = AjaxControlToolkit.FilterTypes.Custom | AjaxControlToolkit.FilterTypes.Numbers | AjaxControlToolkit.FilterTypes.LowercaseLetters | AjaxControlToolkit.FilterTypes.UppercaseLetters;
                    }
                    else
                    {
                        if (lblParamType.Text.Trim() == "1")//Number
                        {
                            fteValues.ValidChars = " .";
                            fteValues.FilterType = AjaxControlToolkit.FilterTypes.Numbers;
                        }
                        else
                        {
                            fteValues.ValidChars = " -.";
                            fteValues.FilterType = AjaxControlToolkit.FilterTypes.Custom | AjaxControlToolkit.FilterTypes.Numbers | AjaxControlToolkit.FilterTypes.LowercaseLetters | AjaxControlToolkit.FilterTypes.UppercaseLetters;
                        }
                        calAddValues.Enabled = false;
                    }
                }
                if (strMode == "Q")
                {
                    calAddValues.Enabled = false;
                    fteValues.Enabled = false;
                    txtValues.ReadOnly = true;
                    ddlValues.Enabled = false;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void funPriLoadAppriasalInfo(string strCustomerId, string strConstitutionId, string strProductId, string strLobId)
    {
        try
        {
            DataSet ds;
            HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            Dictionary<string, string> objProcedureParameters = new Dictionary<string, string>();
            objProcedureParameters.Add("@Option", "1");
            objProcedureParameters.Add("@Company_ID", intCompanyId.ToString());
            objProcedureParameters.Add("@CUSTOMERID", strCustomerId);
            objProcedureParameters.Add("@CONSTITUTION_ID", strConstitutionId);
            objProcedureParameters.Add("@PRODUCT_ID", strProductId);
            objProcedureParameters.Add("@Lob_Id", strLobId);
            //objProcedureParameters.Add("@Application_Process_Id", intApplicationProcessId.ToString());

            if (Request.QueryString["Is_RiskApvl"] != null)
            {
                objProcedureParameters.Add("@Application_Process_Id", "0");
            }
            else
            {
                objProcedureParameters.Add("@Application_Process_Id", intApplicationProcessId.ToString());
            }

            objProcedureParameters.Add("@ProposalNoDMS", ddlApplicationNo.SelectedText);

            ds = Utility.GetDataset("S3G_OR_GET_APPRAISAL_INFO", objProcedureParameters);

            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    grvApplicanAppraisalInformation.DataSource = ds.Tables[0];
                    grvApplicanAppraisalInformation.EmptyDataText = "No Records Found for the Combination Line of business/Scheme/Constitution";
                    grvApplicanAppraisalInformation.DataBind();
                }
            }
            else
            {
                grvApplicanAppraisalInformation.DataSource = null;
                grvApplicanAppraisalInformation.EmptyDataText = "No Records Found for the Combination Line of business/Scheme/Constitution";
                grvApplicanAppraisalInformation.DataBind();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void funComplianceAge()
    {
        hdnCustAge.Value = string.Empty;
        Dictionary<string, string> Procparam = new Dictionary<string, string>();
        Procparam.Add("@Option", "2");
        Procparam.Add("@Companyid", Convert.ToString(intCompanyId));
        Procparam.Add("@PROGRAM_ID", Convert.ToString(45));
        Procparam.Add("@TRAN_DATE", Utility.StringToDate(txtApplicationDateDate.Text).ToString());


        DataTable dtcheck = Utility.GetDefaultData("S3G_OR_GET_DEDUP_CHECK", Procparam);
        if (dtcheck.Rows.Count > 0)
        {
            if (Convert.ToInt32(dtcheck.Rows[0]["CHECK_AGE"]) > 0)
            {
                hdnCustAge.Value = Convert.ToString(dtcheck.Rows[0]["CHECK_AGE"]);
            }
        }
    }
    public bool funPriChecCustomerAge()
    {
        bool bReturn = true;
        try
        {
            if (ViewState["Date_of_Birth"] != null)
            {
                if (!string.IsNullOrEmpty(ViewState["Date_of_Birth"].ToString()))
                {
                    int intDOBYear = Utility.StringToDate(ViewState["Date_of_Birth"].ToString()).Year;
                    hdnAge.Value = ((DateTime.Now.Year - intDOBYear)).ToString();
                    if (hdnAge.Value.Trim() != string.Empty)
                    {
                        if (Convert.ToInt32(hdnAge.Value) < 18)
                        {
                            Utility.FunShowAlertMsg(this, "Customer Age Should be Between 18 And 65");
                            hdnAge.Value = string.Empty;
                            bReturn = false;

                        }
                        else
                        {
                            if (FunPriValidateAgeComplaince(Convert.ToInt32(hdnAge.Value)))
                            {
                                Utility.FunShowAlertMsg(this, "Customer as Maximum Age borrower");

                                bReturn = false;
                            }

                        }
                    }
                }

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);

        }
        return bReturn;
    }

    private bool FunPriValidateAgeComplaince(int age)
    {
        bool blnIsDuplicate = false;
        try
        {
            if (hdnCustAge.Value != null && hdnCustAge.Value != string.Empty)
            {
                if (!(Convert.ToInt32(hdnCustAge.Value) > age))
                {
                    blnIsDuplicate = true;
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable to Validate dedup Process");
        }
        return blnIsDuplicate;
    }
    private void FunPriLoadPreDisbursementDocument()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@COMPANYID", intCompanyId.ToString());
            Procparam.Add("@USERID", intUserId.ToString());
            //objProcedureParameter.Add("@PROGRAMID", "38");
            if (ddlLOB.SelectedValue != "0")
            {
                Procparam.Add("@LOBID", ddlLOB.SelectedValue);
            }
            if (ViewState["ConsitutionId"] != null)
            {
                Procparam.Add("@CONSTITUTIONID", Convert.ToString(ViewState["ConsitutionId"]));
            }
            if (ddlProductCodeList.SelectedValue != "0")
            {
                Procparam.Add("@PRODUCTID", ddlProductCodeList.SelectedValue);
            }
            Procparam.Add("@CONT_TYPE", ddlContType.SelectedValue);
            if (ViewState["Occupation"] != null)
            {
                Procparam.Add("@OCCUPATION_ID", ViewState["Occupation"].ToString());
            }
            Procparam.Add("@PRICING_ID", "0");
            DataSet dsPDDCustomer = Utility.GetDataset("S3G_OR_GET_LOADCUSTPDD_APP", Procparam);
            gvPRDDT.DataSource = dsPDDCustomer;
            gvPRDDT.DataBind();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void btnLoadCustomerFWC_Click(object sender, EventArgs e)
    {
        try
        {
            ViewState["NEGATIVELIST_CUSTOMER"] = null;
            funPriClearBalance();
            string strCustomerAddress = string.Empty;
            StringBuilder strFormAddress = new StringBuilder();
            HiddenField hdnCID = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
            ViewState["FactoringLimitExpired"] = null;

            funPriClearCustomerHoverInfoFWC();

            if (hdnCID != null && hdnCID.Value != "")
            {
                ucCustomerLovFWC.ShowHideAddressImageButton = true;
                Button btnGetLOV = (Button)ucCustomerLovFWC.FindControl("btnGetLOV");
                //btnGetLOV.Focus();
                hdnCustID.Value = hdnCID.Value;
                TextBox txtCustomerName = (TextBox)ucCustomerLovFWC.FindControl("txtItemName");
                TextBox TxtName = (TextBox)ucCustomerLovFWC.FindControl("TxtName");
                TxtName.Text = txtCusomerCodeFWChidden.Text = txtCustomerName.Text;
                DataSet ds = new DataSet();
                Dictionary<string, string> objProcedureParameters = new Dictionary<string, string>();
                objProcedureParameters.Add("@Option", "1");
                objProcedureParameters.Add("@COMPANY_ID", intCompanyId.ToString());
                objProcedureParameters.Add("@CustomerId", hdnCID.Value);
                objProcedureParameters.Add("@Lob_Id", ddlLOB.SelectedValue);
                ds = Utility.GetDataset("S3G_OR_GET_CUSADDRESS", objProcedureParameters);





                if (ds.Tables[3].Rows.Count > 0)
                {
                    if (ds.Tables[3].Rows[0]["FACT_LIMIT_EXP_DATE"].ToString().ToUpper() == "TRUE")
                    {
                        //TextBox txtName2 = (TextBox)ucCustomerLovFWC.FindControl("txtName");
                        //HiddenField hdnCID2 = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
                        //txtName2.Text = string.Empty;
                        //hdnCID2.Value = "0";
                        //ucCustomerCodeLov.Clear();
                        //txtCreditLimitFWC.Text = string.Empty;
                        ViewState["FactoringLimitExpired"] = "Factoring Limit Expired";
                        Utility.FunShowAlertMsg(this, "Factoring Limit Expired");
                        //return;

                    }
                }


                if (ds.Tables[6].Rows.Count > 0)
                {
                    if (ds.Tables[6].Rows[0]["NEGATIVELIST_CUSTOMER"].ToString() == "1")
                    {
                        //TextBox txtName2 = (TextBox)ucCustomerLovFWC.FindControl("txtName");
                        //HiddenField hdnCID2 = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
                        //txtName2.Text = string.Empty;
                        //hdnCID2.Value = "0";
                        //ucCustomerCodeLov.Clear();
                        ViewState["NEGATIVELIST_CUSTOMER"] = 1;
                        Utility.FunShowAlertMsg(this, "Client Black Listed not allowed to Create the Application");
                        //return;

                    }
                }


                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i <= ds.Tables[0].Columns.Count - 1; i++)
                    {
                        strFormAddress.Append(Environment.NewLine);
                        if (ds.Tables[0].Rows[0][i].ToString() != string.Empty)
                            strFormAddress.Append(ds.Tables[0].Columns[i].ColumnName + " : " + ds.Tables[0].Rows[0][i].ToString());

                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        for (int i = 0; i <= ds.Tables[1].Rows.Count - 1; i++)
                        {
                            strFormAddress.Replace(ds.Tables[1].Rows[i]["COLUMN_NAME"].ToString().ToUpper(), ds.Tables[1].Rows[i]["DISPLAY_TEXT"].ToString());
                        }
                    }
                    funPriSetCustomerAddress(ds.Tables[0], strFormAddress, ucCustomerLovFWC);
                    txtCustNameAdd_Followup.Text = strFormAddress.ToString().Trim().Replace("_", " ");
                }
                if (ds.Tables[2].Rows.Count > 0)
                {
                    txtCreditLimitFWC.Text = Utility.funPubChangeCurrencyFormat(ds.Tables[2].Rows[0]["MAX_LEND_AMOUNT"].ToString());
                    txtConstitution.Text = ds.Tables[2].Rows[0]["Constitution"].ToString();
                    ViewState["Occupation"] = ds.Tables[3].Rows[0]["Occupation"].ToString();
                    ViewState["ConsitutionId"] = hdnConstitutionId.Value = ds.Tables[2].Rows[0]["CONSTITUTION_CODE"].ToString();

                    TxtName.ToolTip = TxtName.Text = txtCusomerCodeFWChidden.Text = ds.Tables[2].Rows[0]["customer_name"].ToString();

                    txtCustNameAdd_Followup.Text = strFormAddress.ToString().Trim().Replace("_", " ");
                    txtLOB_Followup.Text = ddlLOB.SelectedItem.Text;
                    txtBranch_Followup.Text = ddlBranchListFWC.SelectedItem.Text;

                    FunPriLoadConsitutionBasedCustomer(Convert.ToInt32(hdnCID.Value));
                }
                TxtName.Focus();
            }
            funPriLoadAppriasalInfo("", ViewState["ConsitutionId"].ToString(), ddlProductCodeList.SelectedValue, ddlLOB.SelectedValue);
            //FunPriAssignAssetLink();


            HiddenField hdnCID23 = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
            FormsAuthenticationTicket Ticket = new FormsAuthenticationTicket(hdnCID23.Value, false, 0);
            btnViewClient.Attributes.Add("onclick", "window.open('../Credit Admin/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes&qsCustomerId=" + FormsAuthentication.Encrypt(Ticket) + "&qsMode=Q', 'null','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');return false;");

            funPriCheckCreditLimit(2, hdnCID23.Value);

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ucCustomerCodeLovFWC_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            HiddenField hdnCID = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
            TextBox txtCustomerName = (TextBox)ucCustomerLovFWC.FindControl("txtItemName");
            hdnCID.Value = ucCustomerLovFWC.SelectedValue;
            txtCustomerName.Text = txtCustomerName.Text;
            btnLoadCustomerFWC_Click(null, null);
            //ucCustomerLovFWC.Focus();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    protected void btnLoadCustSubLimit_Click(object sender, EventArgs e)
    {
        try
        {
            //UserControls_LOBMasterView ucCustomerLov = grvCustSubLimit.FooterRow.FindControl("ucCustomerLov") as UserControls_LOBMasterView;`
            //DropDownList ddlGuarantortype_GuarantorTab1 = grvCustSubLimit.FooterRow.FindControl("ddlGuarantortype_GuarantorTab") as DropDownList;
            //ucCustomerLov.strControlID = ucCustomerLov.ClientID;
            //TextBox txt1 = (TextBox)ucCustomerLov.FindControl("txtName");
            //txt1.Attributes.Add("onfocus", "fnLoadCustomerSubLimit()");


            //string strCustomerAddress = string.Empty;
            //StringBuilder strFormAddress = new StringBuilder();
            //HiddenField hdnCID = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
            //if (hdnCID != null && hdnCID.Value != "")
            //{
            //    //CustomerDetails1.ClearCustomerDetails();
            //    Button btnGetLOV = (Button)ucCustomerLovFWC.FindControl("btnGetLOV");
            //    btnGetLOV.Focus();
            //    UserControl CustomerDetails1 = (UserControl)ucCustomerLovFWC.FindControl("S3GCustomerAddress1");
            //    TextBox txtCustomerName = (TextBox)CustomerDetails1.FindControl("txtCustomerName");
            //    txtCusomerCodeFWChidden.Text = txtCustomerName.Text;


            //}
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    private void funPriSetCustomerAddress(DataTable dtCustomer, StringBuilder strAddress, UserControl ucCustomerCodeLovDyn)
    {
        try
        {

            DataRow dtrCustomer;
            dtrCustomer = dtCustomer.Rows[0];
            UserControl CustomerDetails1 = (UserControl)ucCustomerCodeLovDyn.FindControl("S3GCustomerAddress1");
            TextBox txtCustomerCode = (TextBox)CustomerDetails1.FindControl("txtCustomerCode");
            TextBox txtCustomerCode1 = (TextBox)CustomerDetails1.FindControl("txtCustomerCode1");
            TextBox txtCustomerName = (TextBox)CustomerDetails1.FindControl("txtCustomerName");
            TextBox txtCustomerName1 = (TextBox)CustomerDetails1.FindControl("txtCustomerName1");
            TextBox txtMobile = (TextBox)CustomerDetails1.FindControl("txtMobile");
            TextBox txtMobile1 = (TextBox)CustomerDetails1.FindControl("txtMobile1");
            TextBox txtPhone = (TextBox)CustomerDetails1.FindControl("txtPhone");
            TextBox txtPhone1 = (TextBox)CustomerDetails1.FindControl("txtPhone1");
            TextBox txtEmail = (TextBox)CustomerDetails1.FindControl("txtEmail");
            TextBox txtEmail1 = (TextBox)CustomerDetails1.FindControl("txtEmail1");
            TextBox txtWebSite = (TextBox)CustomerDetails1.FindControl("txtWebSite");
            TextBox txtWebSite1 = (TextBox)CustomerDetails1.FindControl("txtWebSite1");
            TextBox txtCusAddress = (TextBox)CustomerDetails1.FindControl("txtCusAddress");
            TextBox txtCusAddress1 = (TextBox)CustomerDetails1.FindControl("txtCusAddress1");
            if (dtrCustomer != null)
            {
                if (dtrCustomer.Table.Columns["Customer_Code"] != null)
                    txtCustomerCode1.Text = txtCustomerCode.Text = dtrCustomer["Customer_Code"].ToString();
                if (dtrCustomer.Table.Columns["Title"] != null)
                {
                    txtCustomerName.ToolTip = txtCustomerName1.ToolTip = txtCustomerCodeLease.Text = txtCustomerName.Text = txtCustomerName1.Text = dtrCustomer["Title"].ToString() + " " + dtrCustomer["Customer_Name"].ToString();

                }
                else
                {
                    txtCustomerName.ToolTip = txtCustomerName1.ToolTip = txtCustomerCodeLease.Text = txtCustomerName.Text = txtCustomerName1.Text = dtrCustomer["Customer_Name"].ToString();
                }
                if (dtrCustomer.Table.Columns["MOB_PHONE_NO"] != null) txtMobile.Text = txtMobile1.Text = dtrCustomer["MOB_PHONE_NO"].ToString();
                if (dtrCustomer.Table.Columns.Contains("OFF_PHONE_NO"))
                {
                    txtPhone.Text = txtPhone1.Text = dtrCustomer["OFF_PHONE_NO"].ToString();
                }
                if (dtrCustomer.Table.Columns["CUST_EMAIL"] != null) txtEmail.Text = txtEmail1.Text = dtrCustomer["CUST_EMAIL"].ToString();
                if (dtrCustomer.Table.Columns["Comm_WebSite"] != null) txtWebSite.Text = txtWebSite1.Text = dtrCustomer["Comm_WebSite"].ToString();
                txtCusAddress.Text = txtCusAddress1.Text = strAddress.ToString();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    public static string SetCustomerAddress(string Address1, string Address2, string City, string State, string Country, string Pincode)
    {
        string strAddress = "";
        try
        {

            if (Address1.ToString() != "") strAddress += Address1.ToString() + System.Environment.NewLine;
            if (Address2.ToString() != "") strAddress += Address2.ToString() + System.Environment.NewLine;
            if (City.ToString() != "") strAddress += City.ToString() + System.Environment.NewLine;
            if (State.ToString() != "") strAddress += State.ToString() + System.Environment.NewLine;
            if (Country.ToString() != "") strAddress += Country.ToString() + System.Environment.NewLine;
            if (Pincode.ToString() != "") strAddress += Pincode.ToString();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return strAddress;
    }
    protected void FunProFillgrid(DataTable dtInflowDetails)
    {
        try
        {
            gvInflow.DataSource = ViewState["InflowDetails"] = dtInflowDetails;
            gvInflow.DataBind();
            //FunFillInflowGrid();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    protected void FunProIntializeGridData()
    {
        try
        {
            if (ViewState["InflowDetailsNew"] == null)
            {
                DataTable dtInflowDetails;
                dtInflowDetails = new DataTable("InflowDetails");
                dtInflowDetails.Columns.Add("Sno");
                dtInflowDetails.Columns.Add("Cashflow_ID");
                dtInflowDetails.Columns.Add("Cashinflow");
                dtInflowDetails.Columns.Add("Charge");
                dtInflowDetails.Columns.Add("ChargeType");
                dtInflowDetails.Columns.Add("IS_Active");

                DataRow DRow = dtInflowDetails.NewRow();
                DRow["Sno"] = 0;
                DRow["Cashflow_ID"] = "";
                DRow["Cashinflow"] = "";
                DRow["Charge"] = "";
                DRow["ChargeType"] = "";
                DRow["Is_Active"] = "";


                dtInflowDetails.Rows.Add(DRow);
                gvFACCharges.DataSource = dtInflowDetails;
                gvFACCharges.DataBind();
                gvFACCharges.Rows[0].Visible = false;
                ViewState["InflowDetails"] = dtInflowDetails;
                dtInflowDetails.Rows[0].Delete();
                //funPriCalculateTotalCharge();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void FunProIntializeFacChargeGridData()
    {
        try
        {
            if (ViewState["FACCharge"] == null)
            {
                DataTable dtInflowDetails;
                dtInflowDetails = new DataTable("FACCharge");
                dtInflowDetails.Columns.Add("Sno");
                dtInflowDetails.Columns.Add("Cashflow_ID");
                dtInflowDetails.Columns.Add("Cashinflow");
                dtInflowDetails.Columns.Add("ChargeSequence_id");
                dtInflowDetails.Columns.Add("ChargeSequence");
                dtInflowDetails.Columns.Add("ChargeType_Id");
                dtInflowDetails.Columns.Add("ChargeType");
                dtInflowDetails.Columns.Add("Chargeamount", typeof(decimal));
                dtInflowDetails.Columns.Add("CASHFLOW_FLAG_ID", typeof(decimal));



                DataRow DRow = dtInflowDetails.NewRow();
                DRow["Sno"] = 0;
                DRow["Cashflow_ID"] = "";
                DRow["Cashinflow"] = "";
                DRow["ChargeSequence_id"] = "";
                DRow["ChargeSequence"] = "";
                DRow["ChargeType_Id"] = "";
                DRow["ChargeType"] = "";



                dtInflowDetails.Rows.Add(DRow);
                gvFACCharges.DataSource = dtInflowDetails;
                gvFACCharges.DataBind();
                gvFACCharges.Rows[0].Visible = false;
                ViewState["FACCharge"] = dtInflowDetails;
                dtInflowDetails.Rows[0].Delete();
                //funPriCalculateTotalCharge();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void FunFillFacCharge()
    {
        try
        {
            DataTable dtInflowDetails = (DataTable)ViewState["InflowDetails"];
            DropDownList ddlCashInflow = (DropDownList)gvFACCharges.FooterRow.FindControl("ddlCashInflow");
            TextBox txtAmountF = (TextBox)gvFACCharges.FooterRow.FindControl("txtAmountF");
            CheckBox ChkActiveF = (CheckBox)gvFACCharges.FooterRow.FindControl("ChkActiveF");
            //Added by sathish
            DropDownList ddlchargetype = (DropDownList)gvFACCharges.FooterRow.FindControl("ddlChargeType");
            if (ddlLOB.SelectedIndex > 0)
            {

                Procparm = new Dictionary<string, string>();
                Procparm.Add("@Company_ID", Convert.ToString(intCompanyId));
                if (ddlLOB.SelectedIndex > 0)
                    Procparm.Add("@LOB_ID", ddlLOB.SelectedValue);
                //if (ddlProductCodeListFWC.SelectedValue != "0")
                //    Procparm.Add("@Product_ID", ddlProductCodeListFWC.SelectedValue);
                DataSet dsInflowDtls = Utility.GetDataset("SA_GET_INFLOWFACAPP", Procparm);
                ddlCashInflow.FillDataTable(dsInflowDtls.Tables[0], "Cashflow_Id", "Cashinflow");
                ddlchargetype.BindDataTable(dsInflowDtls.Tables[1], new string[] { "Lookup_Id", "Name" });
            }
            else if (strMode == "M")
            {

                if ((DataSet)ViewState["LobDataset"] != null)
                {
                    DataSet ds = (DataSet)ViewState["LobDataset"];
                    string LobID;
                    LobID = ds.Tables[0].Rows[0]["LOB_ID"].ToString();
                    Procparm = new Dictionary<string, string>();
                    Procparm.Add("@Company_ID", Convert.ToString(intCompanyId));
                    Procparm.Add("@LOB_ID", LobID);
                    DataSet dsInflowDtls = Utility.GetDataset("S3G_SA_GET_INFLOW", Procparm);
                    ddlCashInflow.BindDataTable("S3G_SA_GET_INFLOW", Procparm, new string[] { "Cashflow_Id", "Cashinflow" });
                    ddlchargetype.BindDataTable(dsInflowDtls.Tables[1], new string[] { "Lookup_Id", "Name" });
                }
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    protected void txtChargeAmount_TextChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlChargeType = (DropDownList)gvFACCharges.FooterRow.FindControl("ddlChargeType");
            TextBox txtChargeAmount = (TextBox)gvFACCharges.FooterRow.FindControl("txtChargeAmount");

            if (ddlChargeType.SelectedValue == "10")//Amount
            {

            }
            if (ddlChargeType.SelectedValue == "11")//Percentage
            {
                if (txtChargeAmount.Text != string.Empty)
                {
                    if (Convert.ToInt32(txtChargeAmount.Text) > 100)
                    {
                        //Utility.FunShowAlertMsg(this, "Percentage Should not Exceed 100%");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege72));
                        txtChargeAmount.Text = "0";
                        //txtChargeAmount.Focus();
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlChargeType_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlChargeType = (DropDownList)gvFACCharges.FooterRow.FindControl("ddlChargeType");
            TextBox txtChargeAmount = (TextBox)gvFACCharges.FooterRow.FindControl("txtChargeAmount");

            if (ddlChargeType.SelectedValue == "10")//Amount
            {
                txtChargeAmount.SetPercentagePrefixSuffixInline(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, "Charge Amount");
            }
            if (ddlChargeType.SelectedValue == "11")//Peercentage
            {
                txtChargeAmount.SetPercentagePrefixSuffixInline(3, ObjS3GSession.ProGpsSuffixRW, false, true, "Percentage");
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlCashInflow_SelectedIndexChanged(object sender, EventArgs e)
    {
        DropDownList ddlCashInflow = (DropDownList)sender;
        DropDownList ddlChargeSequence = gvFACCharges.FooterRow.FindControl("ddlChargeSequence") as DropDownList;
        if (ViewState["dsInflowDtls"] != null)
        {
            DataRow[] dr = ((DataTable)ViewState["dsInflowDtls"]).Select("CASHFLOW_ID='" + ddlCashInflow.SelectedValue + "' and Cashflow_Flag_Id=36");
            if (dr.Length > 0)
            {

                ddlChargeSequence.SelectedValue = "4";//per Transaction
                ddlChargeSequence.Enabled = false;
            }
            else
            {
                ddlChargeSequence.Enabled = true;
            }
        }
    }
    protected void btnAssignIValue_Click(object sender, EventArgs e)
    {

    }
    protected void btnAssignFValue_Click(object sender, EventArgs e)
    {

    }
    protected void btnAddfacChargeGrid_Click(object sender, EventArgs e)
    {
        try
        {
            DropDownList ddlCashInflow = gvFACCharges.FooterRow.FindControl("ddlCashInflow") as DropDownList;
            DropDownList ddlChargeSequence = gvFACCharges.FooterRow.FindControl("ddlChargeSequence") as DropDownList;
            DropDownList ddlChargeType = gvFACCharges.FooterRow.FindControl("ddlChargeType") as DropDownList;
            TextBox txtChargeAmount = gvFACCharges.FooterRow.FindControl("txtChargeAmount") as TextBox;

            if (ddlChargeType.SelectedValue == "10")//Amount
            {

            }
            if (ddlChargeType.SelectedValue == "11")//Percentage
            {
                if (txtChargeAmount.Text != string.Empty)
                {
                    if (Convert.ToDecimal(txtChargeAmount.Text) > 100)
                    {
                        //Utility.FunShowAlertMsg(this, "Percentage Should not Exceed 100%");
                        Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege72));
                        txtChargeAmount.Text = "0.000";
                        //txtChargeAmount.Focus();
                        return;
                    }
                }
            }





            int iSno = 0;
            DataTable dt = (DataTable)ViewState["FACCharge"];

            if (dt.Rows.Count > 0)
            {
                DataRow[] drDupCheck = dt.Select("Cashflow_ID='" + ddlCashInflow.SelectedValue + "' and ChargeType_Id='" + ddlChargeType.SelectedValue + "'");
                if (drDupCheck.Length > 0)
                {
                    Utility.FunShowAlertMsg(this, "Selected Combination already Exists");
                    return;
                }
            }


            string strNo = dt.Compute("max(Sno)", "1=1").ToString();
            if (strNo == null)
            {
                iSno = 1;
            }
            else
            {
                iSno = iSno + 1;
            }



            DataRow[] drInflow = ((DataTable)ViewState["dsInflowDtls"]).Select("Cashflow_ID='" + ddlCashInflow.SelectedValue + "'");

            DataRow dr = dt.NewRow();
            dr["Sno"] = iSno;
            dr["Cashflow_ID"] = ddlCashInflow.SelectedValue;
            dr["Cashinflow"] = ddlCashInflow.SelectedItem.Text;
            dr["ChargeSequence_id"] = ddlChargeSequence.SelectedValue;
            dr["ChargeSequence"] = ddlChargeSequence.SelectedItem;
            dr["ChargeType_Id"] = ddlChargeType.SelectedValue;
            dr["ChargeType"] = ddlChargeType.SelectedItem;
            dr["Chargeamount"] = txtChargeAmount.Text;
            dr["CASHFLOW_FLAG_ID"] = drInflow.CopyToDataTable().Rows[0]["Cashflow_Flag_Id"];
            dt.Rows.Add(dr);

            gvFACCharges.DataSource = dt;
            gvFACCharges.DataBind();
            //funPriCalculateTotalCharge();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {
        }
    }
    protected void FunProSetSerielNum(ref DataTable dt)
    {
        for (int i = 0; i <= dt.Rows.Count - 1; i++)
        {
            dt.Rows[i][0] = (i + 1).ToString();
        }
    }
    protected void gvInflow_Deleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DataTable dtDelete;
            dtDelete = (DataTable)ViewState["InflowDetails"];
            DataRow[] drdelete = dtDelete.Select("Sno='" + Convert.ToString(e.RowIndex + 1) + "'");
            DataRow[] drdeletee = dtDelete.Select("Cashflow_ID='" + Convert.ToString(e.RowIndex) + "'");
            string strCasflowid = dtDelete.Rows[e.RowIndex]["Cashflow_ID"].ToString();
            if (drdelete != null && drdelete.Length > 0)
            {
                dtDelete.Rows.RemoveAt(e.RowIndex);
            }
            dtDelete.AcceptChanges();
            FunProSetSerielNum(ref dtDelete);
            FunProFillgrid(dtDelete);

            if (dtDelete.Rows.Count == 0)
            {
                if (strMode == "M")
                {
                    FunProIntializeGridData();
                    FunProIntializeFacChargeGridData();


                }
                else
                {
                    //ddlLOB.SelectedIndex = 0;
                    //cmbProductCode.SelectedIndex = 0;
                    //txtProductDesc.Text = "";

                }
            }

            if (strMode == "M")
            {
                DataTable dt11 = (DataTable)ViewState["dtTempAuthApprover"];
                DataRow[] rowList = dt11.Select("CASHFLOW_ID='" + strCasflowid + "'");
                foreach (DataRow dr in rowList)
                {
                    dr.Delete();
                }
                dt11.AcceptChanges();
            }
            else
            {
                DataTable dt11 = (DataTable)ViewState["dtTempAuthApprover"];
                DataRow[] rowList = dt11.Select("CASHFLOWID='" + strCasflowid + "'");
                foreach (DataRow dr in rowList)
                {
                    dr.Delete();
                }
                dt11.AcceptChanges();
                if (dtDelete.Rows.Count == 0)
                {
                    FunProIntializeFacChargeGridData();
                    FunProIntializeFacChargeGridData();
                }

            }


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void txtEndSlabF_TextChanged(object sender, EventArgs e)
    {
        try
        {
            TextBox txtStartSlabF = grvDiscountRateforUtilization.FooterRow.FindControl("txtStartSlabF") as TextBox;
            TextBox txtEndSlabF = grvDiscountRateforUtilization.FooterRow.FindControl("txtEndSlabF") as TextBox;

            if (txtStartSlabF.Text != string.Empty && txtEndSlabF.Text != string.Empty)
            {
                if (Convert.ToDecimal(txtEndSlabF.Text) < Convert.ToDecimal(txtStartSlabF.Text))
                {
                    //Utility.FunShowAlertMsg(this, "End Slab Amount should be Greater than the Start Slab");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege73));
                    txtEndSlabF.Text = "";
                }
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void btnAddDiscountRate_Click(object sender, EventArgs e)
    {
        try
        {

            TextBox txtStartSlabF = grvDiscountRateforUtilization.FooterRow.FindControl("txtStartSlabF") as TextBox;
            TextBox txtEndSlabF = grvDiscountRateforUtilization.FooterRow.FindControl("txtEndSlabF") as TextBox;
            TextBox txtDiscRateF = grvDiscountRateforUtilization.FooterRow.FindControl("txtDiscRateF") as TextBox;




            if (txtStartSlabF.Text != string.Empty && txtEndSlabF.Text != string.Empty)
            {
                if (Convert.ToDecimal(txtEndSlabF.Text) < Convert.ToDecimal(txtStartSlabF.Text))
                {
                    //Utility.FunShowAlertMsg(this, "End Slab Amount should be Greater than the Start Slab");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege73));
                    txtEndSlabF.Text = "";
                    return;
                }
            }


            if (Convert.ToDecimal(txtDiscRateF.Text) == 0)
            {
                Utility.FunShowAlertMsg(this, "Discount Rate should be greater than the zero");
                return;
            }


            if (Convert.ToDecimal(txtDiscRateF.Text) > 100)
            {
                Utility.FunShowAlertMsg(this, "Discount Rate should be less than or equal to 100");
                return;
            }

            int iSno = 0;
            DataTable dt = (DataTable)ViewState["DiscountRateUtilization"];


            DataRow[] dr3 = dt.Select("Sno=-1");
            if (dr3.Length > 0)
            {
                foreach (DataRow dr4 in dr3)
                {
                    dr4.Delete();

                }
                dt.AcceptChanges();
            }


            string strNo = dt.Compute("max(Sno)", "1=1").ToString();
            if (strNo == string.Empty)
            {
                iSno = 1;
            }
            else
            {
                iSno = Convert.ToInt32(strNo) + 1;
            }

            //if (dt.Rows.Count >= 1)
            //{
            //    Utility.FunShowAlertMsg(this,"More than one row not allowed");

            //    txtEndSlabF.Text = string.Empty;
            //    txtDiscRateF.Text = string.Empty;
            //    return;
            //}

            //string drTotalSum = dt.Compute("max(End_Slab)","1=1").ToString();
            //if (drTotalSum == string.Empty)
            //{
            //    drTotalSum = txtEndSlabF.Text;
            //}
            //drTotalSum = txtEndSlabF.Text;
            //if (drTotalSum != string.Empty)
            //{

            if (Convert.ToDecimal(txtEndSlabF.Text) > Convert.ToDecimal(txtPrePaymentLimitFWC.Text))
            {
                Utility.FunShowAlertMsg(this, "Maximum range amount should not exceed prepayment limit (" + txtPrePaymentLimitFWC.Text + ")");
                return;
            }
            //}

            DataRow dr = dt.NewRow();
            dr["Sno"] = iSno;
            dr["Start_Slab"] = txtStartSlabF.Text;
            dr["End_Slab"] = txtEndSlabF.Text;
            dr["Discount_Rate"] = txtDiscRateF.Text;
            dt.Rows.Add(dr);
            grvDiscountRateforUtilization.DataSource = dt;
            grvDiscountRateforUtilization.DataBind();
            //grvDiscountRateforUtilization.Rows[0].Visible = false;
            ViewState["DiscountRateUtilization"] = dt;
            funPriControlDiscountRateDelete();
            //Utility.FunShowAlertMsg(this, "Record Added Successfully");
            //Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege74));
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }
    }
    private void funPriControlDiscountRateDelete()
    {
        for (int i = 0; i <= grvDiscountRateforUtilization.Rows.Count - 1; i++)
        {
            if (i != grvDiscountRateforUtilization.Rows.Count - 1)
            {
                LinkButton btnRemoveDays = grvDiscountRateforUtilization.Rows[i].FindControl("lnkDelete") as LinkButton;
                btnRemoveDays.Enabled = false;
                btnRemoveDays.OnClientClick = null;
                btnRemoveDays.CssClass = "grid_btn_delete_disabled";


            }
        }
    }
    protected void grvDiscountRateforUtilization_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DataTable dtDelete;
            dtDelete = (DataTable)ViewState["DiscountRateUtilization"];
            dtDelete.Rows.RemoveAt(e.RowIndex);
            dtDelete.AcceptChanges();

            if (dtDelete.Rows.Count == 0)
            {
                ViewState["DiscountRateUtilization"] = null;
                funPriInitializeDiscountRateGrid();
            }
            else
            {
                grvDiscountRateforUtilization.DataSource = dtDelete;
                grvDiscountRateforUtilization.DataBind();
                grvDiscountRateforUtilization.Rows[0].Visible = false;

            }
            funPriControlDiscountRateDelete();
            //Utility.FunShowAlertMsg(this, "Record Removed Successfully");
            //Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege75));
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void lnkDelete_Click(object sender, EventArgs e)
    {
        try
        {


            string strFieldAtt = ((LinkButton)sender).ClientID;
            int gRowIndex = Utility.FunPubGetGridRowID("grvDiscountRateforUtilization", strFieldAtt);


            DataTable dtDelete;
            dtDelete = (DataTable)ViewState["DiscountRateUtilization"];
            dtDelete.Rows.RemoveAt(gRowIndex);
            dtDelete.AcceptChanges();

            if (dtDelete.Rows.Count == 0)
            {
                ViewState["DiscountRateUtilization"] = null;
                funPriInitializeDiscountRateGrid();
            }
            else
            {
                grvDiscountRateforUtilization.DataSource = dtDelete;
                grvDiscountRateforUtilization.DataBind();


            }
            funPriControlDiscountRateDelete();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }


    protected void grvDiscountRateforUtilization_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Label lblEndSlab = (Label)e.Row.FindControl("lblEndSlab");
                Label lblDiscRate = (Label)e.Row.FindControl("lblDiscRate");
                lblEndSlab.funPubChangeCurrencyFormat();
                lblDiscRate.funPubChangeCurrencyFormat();
            }
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                TextBox txtStartSlabF = (TextBox)e.Row.FindControl("txtStartSlabF");
                TextBox txtEndSlabF = (TextBox)e.Row.FindControl("txtEndSlabF");
                TextBox txtDiscRateF = (TextBox)e.Row.FindControl("txtDiscRateF");

                DataTable dt = (DataTable)ViewState["DiscountRateUtilization"];
                if (dt != null)
                {
                    string strSlab = dt.Compute("max(End_Slab)", "1=1").ToString();
                    decimal iSno = 0;

                    if (strSlab == string.Empty)
                    {
                        txtStartSlabF.Text = "0.001";
                    }
                    else
                    {
                        txtStartSlabF.Text = (Convert.ToDecimal(strSlab) + Convert.ToDecimal("0.001")).ToString(Funsetsuffix());
                    }
                    txtStartSlabF.Enabled = false;

                    txtStartSlabF.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, "Start Slab");
                    txtEndSlabF.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, "End Slab");
                    txtDiscRateF.SetDecimalPrefixSuffix(3, ObjS3GSession.ProGpsSuffixRW, false, false, "Disc.Rate");
                    txtDiscRateF.MaxLength = 3;
                    txtStartSlabF.funPubChangeCurrencyFormat();
                    txtEndSlabF.funPubChangeCurrencyFormat();

                }

            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvInflow_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            //modifyddlobload = ddlLOB.SelectedValue;

            if (e.Row.RowType == DataControlRowType.Footer)
            {

                //DropDownList ddlCashInflow = (DropDownList)e.Row.FindControl("ddlCashInflow");
                //TextBox txtAmountF = (TextBox)e.Row.FindControl("txtAmountF");
                //CheckBox ChkActiveF = (CheckBox)e.Row.FindControl("ChkActiveF");
                //Label lblSerialNo = (Label)e.Row.FindControl("lblSerialNo");

                //Procparm = new Dictionary<string, string>();
                //Procparm.Add("@Company_ID", Convert.ToString(intCompanyId));
                //if (ddlLOB.SelectedIndex > 0)
                //{
                //    Procparm.Add("@LOB_ID", ddlLOB.SelectedValue);
                //}
                //if (cmbProductCode.SelectedIndex > 0 && PageMode == PageModes.Modify)
                //{
                //    Procparm.Add("@Product_ID", intProductId.ToString());
                //}

                //DataTable dtInflowDtls = Utility.GetDefaultData("S3G_SA_GET_INFLOW", Procparm);

                // To Load Cash flow
                //ViewState["InflowDetails"] = dtInflowDtls ;
                //ddlCashInflow.BindDataTable("S3G_SA_GET_INFLOW", Procparm, new string[] { "Cashflow_Id", "Cashinflow" });
                //txtAmountF.SetDecimalPrefixSuffix(strPrefixLength, strDecMaxLength, true, "Amount");
            }

            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                //TextBox txtAmount = (TextBox)e.Row.FindControl("txtAmount");
                //CheckBox ChkActive = (CheckBox)e.Row.FindControl("ChkActive");
                //Label lblSerialNo = (Label)e.Row.FindControl("lblSerialNo");
                //LinkButton lnkDelete = (LinkButton)e.Row.FindControl("lnkDelete");
                //if (PageMode != PageModes.Create)
                //{
                //    lnkDelete.Enabled = true;
                //    lnkDelete.OnClientClick = "";
                //    if (PageMode == PageModes.Modify)
                //    {
                //        ChkActive.Enabled = true;
                //    }
                //    else
                //    {
                //        ChkActive.Enabled = false;
                //    }

                //}
                //if (PageMode == PageModes.Query)
                //{
                //    lnkDelete.Enabled = false;
                //    //txtAmount.ReadOnly = true;
                //    ChkActive.Enabled = false;
                //}

            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void gvFACCharges_Deleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            DataTable dtDelete;
            dtDelete = (DataTable)ViewState["FACCharge"];
            dtDelete.Rows.RemoveAt(e.RowIndex);
            dtDelete.AcceptChanges();

            if (dtDelete.Rows.Count == 0)
            {
                ViewState["FACCharge"] = null;
                FunProIntializeFacChargeGridData();
            }
            else
            {
                gvFACCharges.DataSource = dtDelete;
                gvFACCharges.DataBind();


            }
            //funPriCalculateTotalCharge();
            //Utility.FunShowAlertMsg(this, "Record Removed Successfully");
            //Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege76));

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvFACCharges_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            //modifyddlobload = ddlLOB.SelectedValue;

            if (e.Row.RowType == DataControlRowType.Footer)
            {

                DropDownList ddlCashInflow = (DropDownList)e.Row.FindControl("ddlCashInflow");
                DropDownList ddlchargetype = (DropDownList)e.Row.FindControl("ddlchargetype");
                TextBox txtChargeAmount = (TextBox)e.Row.FindControl("txtChargeAmount");

                txtChargeAmount.SetPercentagePrefixSuffixInline(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, "Charge Amount");
                Procparm = new Dictionary<string, string>();
                Procparm.Add("@Company_ID", Convert.ToString(intCompanyId));
                if (ddlLOB.SelectedIndex > 0)
                    Procparm.Add("@LOB_ID", ddlLOB.SelectedValue);
                //if (ddlProductCodeListFWC.SelectedValue != "0")
                //    Procparm.Add("@Product_ID", ddlLOB.SelectedValue);
                DataSet dsInflowDtls = Utility.GetDataset("SA_GET_INFLOWFACAPP", Procparm);
                ViewState["dsInflowDtls"] = dsInflowDtls.Tables[0];
                ddlCashInflow.FillDataTable(dsInflowDtls.Tables[0], "Cashflow_Id", "Cashinflow");
                ddlchargetype.BindDataTable(dsInflowDtls.Tables[1], new string[] { "Lookup_Id", "Name" });



            }

            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Label lblChargeAmount = (Label)e.Row.FindControl("lblChargeAmount");
                //CheckBox ChkActive = (CheckBox)e.Row.FindControl("ChkActive");
                Label lblSerialNo = (Label)e.Row.FindControl("lblSerialNo");
                LinkButton lnkDelete = (LinkButton)e.Row.FindControl("lnkDelete");
                lblChargeAmount.funPubChangeCurrencyFormat();
                if (PageMode != PageModes.Create)
                {
                    lnkDelete.Enabled = true;
                    lnkDelete.OnClientClick = "";
                    if (PageMode == PageModes.Modify)
                    {
                        //ChkActive.Enabled = true;
                    }
                    else
                    {
                        //ChkActive.Enabled = false;
                    }

                }
                if (PageMode == PageModes.Query)
                {
                    lnkDelete.Enabled = false;
                    //txtAmount.ReadOnly = true;
                    //ChkActive.Enabled = false;
                }
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void btnCreateApplicant_Click(object sender, EventArgs e)
    {
        try
        {

            HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
            if (hdnCID.Value == string.Empty)
            {
                string strNewWin = string.Empty;
                strNewWin = "window.open('../Credit Admin/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes& qsMode=C&NewCustomerID=" + ddlApplicationNo.SelectedText + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strNewWin, true);
                this.Focus();
                return;
            }
            else
            {

                string strNewWin = string.Empty;
                strNewWin = "window.open('../Credit Admin/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes& qsMode=C&NewCustomerID=0', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strNewWin, true);
                this.Focus();
                return;
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    protected void btnCreateApplicantGuarantor_Click(object sender, EventArgs e)
    {
        try
        {
            string strNewWin = string.Empty;
            strNewWin = "window.open('../Credit Admin/S3GOrgCustomerMaster_Add.aspx?IsFromApplicationGuarantor=Yes& qsMode=C&NewCustomerID=0', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strNewWin, true);
            this.Focus();
            return;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    protected void btnCreateCustFWC_Click(object sender, EventArgs e)
    {
        try
        {
            string strNewWin = string.Empty;
            strNewWin = "window.open('../Credit Admin/S3GOrgCustomerMaster_Add.aspx?IsFromEnquiry=Yes& qsMode=C&NewCustomerID=0', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
            ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strNewWin, true);
            this.Focus();
            return;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void tbnNextDoc_Click(object sender, EventArgs e)
    {
        try
        {
            TabContainerMainTab.Tabs[1].Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriSetUnitTestValuesHPV()
    {
        try
        {
            ddlBranchList.SelectedValue = "8";
            ddlBranch_SelectedIndexChanged(null, null);
            cmbSubLocation.SelectedValue = "9";
            ddlCreditPurpose.SelectedValue = "1";
            ddlContType.SelectedValue = "1";
            ddlSalePersonCodeList.SelectedText = "Gururaj GK";
            ddlSalePersonCodeList.SelectedValue = "29";
            //txtEmployerBankName.Text = "HDFC";
            //ddlCovenants.SelectedValue = "1";
            txtCreditLimit.Text = "5000";
            ddlDealType.SelectedValue = "1";
            ddlDealerName.SelectedValue = "39";
            ddlDealerName.SelectedText = "TOWELL AUTO CENTRE LLC";
            ddldealerSalesPerson.SelectedValue = "35";
            ddldealerSalesPerson.SelectedText = "ARCEN ENGENHARIA SA";
            ddldc.SelectedValue = "3";
            ddldc.SelectedText = "DC/3-Anbuvel";
            ddlLeadSource.SelectedValue = "1";
            ddlLeadSourceName.SelectedValue = "68";
            ddlLeadSourceName.SelectedText = " YELLOW SEAS ENTERPRISES";
            ddlBusinessSource.SelectedValue = "1";
            ddlDealerschemename.SelectedValue = "1";
            txtSellerName.Text = "SATHISH";
            txtSellerCode.Text = "001";
            ddlDealerCommissionApplicable.SelectedValue = "1";
            txtFinanceAmount.Text = "50000";
            txtTenure.Text = "12";
            ddlRepamentMode.SelectedValue = "2";
            ddlPNTD.SelectedValue = "1";
            txtDelayDays.Text = "100";
            txtStartDatedelayrate.Text = "4";
            txtStartdelaycharges.Text = "5";
            txtOverDueCharges.Text = "100";
            ddlLifeInsurance.SelectedValue = "1";
            ddlLifeInsuranceEntity.SelectedValue = "106";
            ddlLifeInsuranceEntity.SelectedText = "Rakesh";
            txtLifeInsuranceCustRate.Text = "4";
            txtLifeInsuranceCompanyRate.Text = "6";
            txtLifeInsuranceCompanyAmount.Text = "5000";
            txtLifeInsuranceCustomerPremiumAmount.Text = "2000";
            ddlArearAdvance.Text = "1";
            txtdiscount.Text = "0";
            txtNoofDaystobeconsidered.Text = "150";
            txtTentativeAccDate.Text = DateTime.Now.ToString(strDateFormat);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }


    }

    protected void ddlRepamentMode_SelectedIndexChanged(object sender, EventArgs e)
    {
        //ddlEmployerBankName.Clear();
        //HttpContext.Current.Session["EmployerBankName"] = ddlRepamentMode.SelectedValue;
        //if (ddlRepamentMode.SelectedValue == "2" || ddlRepamentMode.SelectedValue == "7" || ddlRepamentMode.SelectedValue == "8")
        //{
        //    ddlEmployerBankName.Enabled = true;
        //    ddlEmployerBankName.IsMandatory = true;
        //}
        //else
        //{
        //    ddlEmployerBankName.Enabled = false;
        //    ddlEmployerBankName.IsMandatory = false;
        //}

        try
        {
            if (ddlRepamentMode.SelectedValue == "2" || ddlRepamentMode.SelectedValue == "7" || ddlRepamentMode.SelectedValue == "8")//2-Bank Transfer,7-Employer Under Taking,8-Standing Instructions
            {
                txtEmployerBankName.Enabled = true;
                DataTable dtEmployerName = new DataTable();
                Dictionary<string, string> strProParm = new Dictionary<string, string>();
                strProParm.Add("@OPTION", "11");
                strProParm.Add("@COMPANYID", intCompanyId.ToString());
                strProParm.Add("@USERID", intUserId.ToString());
                strProParm.Add("@PROGRAMID", intProgramID.ToString());
                strProParm.Add("@PAGE_MODE", "C");
                strProParm.Add("@CUSTOMER_ID", hdnCustID.Value);
                strProParm.Add("@Repayment_Mode", ddlRepamentMode.SelectedValue);

                dtEmployerName = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);
                if (dtEmployerName.Rows.Count > 0)
                {
                    txtEmployerBankName.Text = dtEmployerName.Rows[0]["EMPLOYER_NAME"].ToString();
                }
            }
            else
            {
                txtEmployerBankName.Enabled = false;
            }


            if (ddlRepamentMode.SelectedValue != "3")
            {
                ddlPNTD.SelectedValue = "1";
            }
            else
            {
                ddlPNTD.SelectedValue = "0";
            }
            ddlPNTD.ClearDropDownList();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void ddlDealTransfer_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {



            if (ddlDealTransfer.SelectedValue == "0")
            {
                //TextBox TxtName = ((TextBox)ucDealTransferAccountLov.FindControl("TxtName"));
                //Button btnGetLov = ((Button)ucDealTransferAccountLov.FindControl("btnGetLOV"));
                //TxtName.Enabled = false;
                //btnGetLov.Enabled = false;
                ddldealTrasPanum.Enabled = false;
                pnlDealTransfer.Attributes.Add("style", "display:none");
            }
            else
            {
                //TextBox TxtName = ((TextBox)ucDealTransferAccountLov.FindControl("TxtName"));
                //Button btnGetLov = ((Button)ucDealTransferAccountLov.FindControl("btnGetLOV"));
                //TxtName.Enabled = true;
                //btnGetLov.Enabled = true;\
                ddldealTrasPanum.Enabled = true;
                pnlDealTransfer.Attributes.Add("style", "display:block");
            }
            ddlDealTransfer.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriVoidLoadSetFWCDetails(DataSet dsApplicationProcessDetails)
    {
        try
        {

            //FT Main Tab Information
            TextBox txtName = ucCustomerLovFWC.FindControl("txtName") as TextBox;
            HiddenField hdnCustomerIdFWC = (HiddenField)ucCustomerLovFWC.FindControl("hdnID");
            ucCustomerLovFWC.ButtonEnabled = false;
            txtName.Enabled = false;
            ddlProductCodeListFWC.ClearDropDownList();
            txtFacilityStartDate.Enabled = false;
            txtFacilityEndDate.Enabled = false;
            //ddlRelationshipManager.Enabled = false;
            txtCusomerCodeFWChidden.Text = txtName.Text = txtCustomerCode.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Customer_Code"]);
            hdnCustomerIdFWC.Value = dsApplicationProcessDetails.Tables[0].Rows[0]["Customer_Id"].ToString();
            btnLoadCustomerFWC_Click(null, null);
            ddlBranchListFWC.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["Location_Id"].ToString();
            ddlBranch_SelectedIndexChangedFWC(null, null);
            ddlBranchListFWC.ClearDropDownList();
            cmbSubLocationFWC.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"].ToString();
            txtApplicationDateFWC.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["Offer_Date"].ToString();
            txtAccountNoFWC.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["PANUM"].ToString();
            ddlStatus.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["STATUS_ID"].ToString();
            div7.Visible = true;
            if (strMode != "Q")
            {

                if (dsApplicationProcessDetails.Tables[0].Rows[0]["LOB_CODE"].ToString() == "FT")
                {
                    if (ddlStatus.SelectedValue == "2")
                    {
                        ddlStatus.SelectedValue = ddlStatus.SelectedValue;
                    }
                    else
                    {
                        ddlStatus.SelectedValue = "1";
                    }
                }
                else
                {
                    ddlStatus.SelectedValue = "1";
                }
            }
            txtFacilityStartDate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["MLA_Validity_From"].ToString();
            txtFacilityEndDate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["MLA_Validity_To"].ToString();
            ddlRelationshipManager.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["Sales_Person_ID"].ToString();
            ddlRelationshipManager.SelectedText = dsApplicationProcessDetails.Tables[0].Rows[0]["SALES_PERSON_NAME"].ToString();
            txtEvaluator.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["evaluator"].ToString();
            txtAuditor.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["auditor"].ToString();
            txtAccountStatus.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["ACCOUNT_STATUS"].ToString();

            txtProposalNumber.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Application_Number"]);

            txtAccountNumber.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["PANUM"].ToString();
            ddlProductCodeListFWC.ClearSelection();
            if (ddlProductCodeListFWC.Items.FindByValue(dsApplicationProcessDetails.Tables[0].Rows[0]["Product_ID"].ToString()) != null)
            {
                ddlProductCodeListFWC.Items.FindByValue(dsApplicationProcessDetails.Tables[0].Rows[0]["Product_ID"].ToString()).Selected = true;
            }
            else
            {
                System.Web.UI.WebControls.ListItem lstitem;
                lstitem = new System.Web.UI.WebControls.ListItem();
                lstitem.Text = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["PRODUCT"]);
                lstitem.Value = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Product_ID"]);
                ddlProductCodeListFWC.Items.Add(lstitem);
                ddlProductCodeListFWC.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Product_ID"]);
            }





            if (strMode == "M")
            {
                FunPriBindPaymentDDL(Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Card_Id"]));
            }
            else
            {
                System.Web.UI.WebControls.ListItem
                lstitem = new ListItem(dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Number"].ToString(), dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Card_Id"].ToString());
                ddlPaymentRuleList.Items.Add(lstitem);
            }
            ddlPaymentRuleList.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Card_Id"]);
            hdnPayment.Value = Convert.ToString(dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Card_Id"]);
            if (dsApplicationProcessDetails.Tables[0].Rows[0]["Payment_Rule_Card_Id"].ToString() != "0")
            {
                FunPriLoadPaymentRuleDetails();
            }

            //FT Offer Tab Information
            txtDebtPurchaseLimitFWC.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["debt_purchase_limit"].ToString();
            txtDebtPurchaseLimitFWC.funPubChangeCurrencyFormat();
            txtMarginFWC.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["margin_amount"].ToString();
            txtPrePaymentLimitFWC.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["PrePayment_limit"].ToString();
            txtPrePaymentLimitFWC.funPubChangeCurrencyFormat();
            txtInvoiceCapValue.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["Invoice_cap_value"].ToString();
            txtInvoiceCapValue.funPubChangeCurrencyFormat();
            txtDiscountRateforLineofCredit.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["DISCOUNT_RATE_LOC"].ToString();

            txtPenalRate.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["PENAL_RATE"].ToString();
            txtCreditPeriodInDays.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["credit_period_days"].ToString();
            txtGracePeriodInDays.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["grace_period_days"].ToString();
            txtDisbuteGracePeriodInDays.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["disp_period_days"].ToString();
            txtResolutionPeriodinDays.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["resul_period_days"].ToString();
            txtRemarksFWC.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["FACTORING_REMARKS"].ToString();


            //Risk Rating Tab
            ddlRiskRating.SelectedValue = dsApplicationProcessDetails.Tables[0].Rows[0]["risk_rating"].ToString();
            txtRiskRemarks.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["risk_remarks"].ToString();
            txtRiskScore.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["risk_score"].ToString();
            txtRiskDocumentNo.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["risk_doc_no"].ToString();
            ddlRiskQualityValue.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["risk_quality_value"].ToString();
            txtAMLClasification.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["AMLClasification"].ToString();

            //Term Loan
            txtTenureFWC.Text = dsApplicationProcessDetails.Tables[0].Rows[0]["Tenure"].ToString();
            if (dsApplicationProcessDetails.Tables[7].Rows.Count > 0)
            {
                ddlArearAdvance.SelectedValue = dsApplicationProcessDetails.Tables[7].Rows[0]["Time_Value"].ToString();
            }

            ViewState["CUST_SUBLIMIT"] = dsApplicationProcessDetails.Tables[24];
            grvCustSubLimit.DataSource = dsApplicationProcessDetails.Tables[24];
            grvCustSubLimit.EmptyDataText = "No Records Found";
            grvCustSubLimit.DataBind();
            funPriTotalSubLimit();


            ViewState["FACCharge"] = dsApplicationProcessDetails.Tables[25];
            if (dsApplicationProcessDetails.Tables[25].Rows.Count > 0)
            {
                gvFACCharges.DataSource = dsApplicationProcessDetails.Tables[25];
                gvFACCharges.EmptyDataText = "No Records Found";
                gvFACCharges.DataBind();
                //funPriCalculateTotalCharge();
            }
            else
            {

                FunProIntializeFacChargeGridData();
            }


            if (dsApplicationProcessDetails.Tables[26].Rows.Count > 0)
            {
                ViewState["DiscountRateUtilization"] = dsApplicationProcessDetails.Tables[26];
                grvDiscountRateforUtilization.DataSource = dsApplicationProcessDetails.Tables[26];
                grvDiscountRateforUtilization.EmptyDataText = "No Records Found";
                grvDiscountRateforUtilization.DataBind();
            }
            else
            {
                funPriInitializeDiscountRateGrid();
            }

            ViewState["dtGuarantorGrid"] = dsApplicationProcessDetails.Tables[3];

            if (dsApplicationProcessDetails.Tables[3].Rows.Count > 0)
            {
                ViewState["mode"] = strEditMode;
            }
            else
            {
                ViewState["mode"] = strAddMode;
            }
            FunPriFillGuarantorDLL();
            if (gvGuarantor.Rows.Count == 0)
            {
                funPriLoadGuarantor();
            }

            FunPriFillROIDLL(strAddMode);
            objProcedureParameter = new Dictionary<string, string>();
            if (strMode == "M")
            {
                //Utility.BindDataTable(ddlROIRuleList, dsApplicationProcessDetails.Tables[20], new string[] { "ROI_Rules_ID", "ROI_Rule_Number", "Model_Description" });
            }
            else
            {
                //if (dsApplicationProcessDetails.Tables[7].Rows.Count > 0)
                //{
                //    ListItem lstitem;
                //    lstitem = new ListItem(dsApplicationProcessDetails.Tables[7].Rows[0]["ROI_Number"].ToString(), dsApplicationProcessDetails.Tables[7].Rows[0]["ROI_Rules_Id"].ToString());
                //    ddlROIRuleList.Items.Add(lstitem);
                //}
            }
            if (dsApplicationProcessDetails.Tables[7].Rows.Count > 0)
            {
                //ddlROIRuleList.SelectedValue = Convert.ToString(dsApplicationProcessDetails.Tables[7].Rows[0]["ROI_Rules_Id"]);
                //hdnROIRule.Value = Convert.ToString(dsApplicationProcessDetails.Tables[7].Rows[0]["ROI_Rules_Id"]);
                //ViewState["ROIRules"] = dsApplicationProcessDetails.Tables[7];
            }
            //FunPriLoadROIRuleDetails(strEditMode);
            if (dsApplicationProcessDetails.Tables[2].Rows.Count > 0)
            {
                gvAlert.DataSource = dsApplicationProcessDetails.Tables[2];
                gvAlert.DataBind();
                FunPriFillAlertDLL(strEditMode);
                ViewState["DtAlertDetails"] = dsApplicationProcessDetails.Tables[2];
            }
            else
            {
                FunPriFillAlertDLL(strAddMode);
            }
            if (dsApplicationProcessDetails.Tables[10].Rows.Count > 0)
            {
                ViewState["DtFollowUp"] = dsApplicationProcessDetails.Tables[10];
                FunPriFillFollowupDLL(strEditMode);
            }
            else
            {
                FunPriFillFollowupDLL(strAddMode);
            }
            if (dsApplicationProcessDetails.Tables[29].Rows.Count > 0)
            {
                gvPRDDT.DataSource = dsApplicationProcessDetails.Tables[29];
                gvPRDDT.DataBind();
                pnlPreDisbursementDocumentDetails.Visible = true;
            }
            pnlInvoiceDetails.Style.Add("display", "none");
            //ViewState["InvoiceDetails"] = dsApplicationProcessDetails.Tables[15];
            //gvInvoiceDetails.DataSource = dsApplicationProcessDetails.Tables[15];
            //gvInvoiceDetails.DataBind();

            if (dsApplicationProcessDetails.Tables[30].Rows.Count > 0)
            {
                gvCollateralDetails.DataSource = dsApplicationProcessDetails.Tables[30];
                gvCollateralDetails.DataBind();

            }
            divLife.Visible = false;
            divSubLimitHistory.Visible = true;
            if (dsApplicationProcessDetails.Tables[32].Rows.Count > 0)
            {
                grvSubLimitHistory.DataSource = dsApplicationProcessDetails.Tables[32];
                grvSubLimitHistory.EmptyDataText = "No Records Found";
                grvSubLimitHistory.DataBind();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void funPriTotalSubLimit()
    {
        decimal decTotalSubLimit = 0;
        foreach (GridViewRow gr in grvCustSubLimit.Rows)
        {
            Label lblsubLimit = gr.FindControl("lblLimitAmnt") as Label;
            decTotalSubLimit = decTotalSubLimit + Convert.ToDecimal(lblsubLimit.Text);

        }
        txtTotalSubLimit.Text = decTotalSubLimit.ToString(Funsetsuffix());
        txtTotalSubLimit.funPubChangeCurrencyFormat();

    }
    private void funPriLoadGuarantor()
    {
        try
        {
            OrgMasterMgtServicesReference.OrgMasterMgtServicesClient ObjCustomerService = new OrgMasterMgtServicesReference.OrgMasterMgtServicesClient();
            Dictionary<string, string> objParameters = new Dictionary<string, string>();
            objParameters.Add("@CompanyId", intCompanyId.ToString());
            DataSet dsGuarantor = Utility.GetDataset("S3G_OR_Get_LoadGurantorLov", objParameters);
            ViewState["GuarantorDDL"] = dsGuarantor;

            S3GBusEntity.S3G_Status_Parameters ObjStatus = new S3G_Status_Parameters();
            ObjStatus.Option = 53;
            ObjStatus.Param1 = null;
            DtRepayGrid = ObjCustomerService.FunPub_GetS3GStatusLookUp(ObjStatus);
            gvGuarantor.DataSource = DtRepayGrid;
            gvGuarantor.DataBind();
            FunPriFillGuarantorDLL();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        //gvGuarantor.Rows[0].Visible = false;
    }
    //Transfer Deal

    protected void grvTransferDeal_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void grvTransferDeal_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            //if (e.Row.RowType == DataControlRowType.DataRow)
            //{
            //}
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void grvTransferDeal_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            //if (e.Row.RowType == DataControlRowType.DataRow)
            //{
            //}
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriLoadTransferDealGrid()
    {
        try
        {

            if (ucCustomerCodeLov.SelectedValue == string.Empty || ucCustomerCodeLov.SelectedValue == "0")
            {
                Utility.FunShowAlertMsg(this, "Select the Customer to Proced the Deal Transfer");
                ddldealTrasPanum.SelectedValue = "0";
                return;
            }

            DataTable dtDealTransfer = new DataTable();
            decimal decFutureInterest = 0;
            dtDealTransfer = (DataTable)ViewState["DealTransfer"];
            if (ddldealTrasPanum.SelectedValue == "0")
            {
                //Utility.FunShowAlertMsg(this, "Select the Contract No");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege77));
                return;
            }
            DataTable dtDealTransferAssets = funPriGetDealTransferAsstes(ddldealTrasPanum.SelectedValue);
            if (dtDealTransferAssets.Rows.Count == 0)
            {
                Utility.FunShowAlertMsg(this, "Contract Assets not Exists");
                return;
            }

            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@OPTION", "6");
            strProParm.Add("@COMPANYID", intCompanyId.ToString());
            strProParm.Add("@USERID", intUserId.ToString());
            strProParm.Add("@PROGRAMID", intProgramID.ToString());
            strProParm.Add("@PAGE_MODE", "C");
            strProParm.Add("@PANUM", ddldealTrasPanum.SelectedValue);
            dtGetDealTransfer = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);

            if (dtGetDealTransfer.Rows.Count == 0)
            {
                //Utility.FunShowAlertMsg(this, "Contract Information not Available");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege78));
                return;
            }

            if (dtDealTransfer == null || dtDealTransfer.Columns.Count == 0)
            {
                dtDealTransfer = dtGetDealTransfer.Clone();
            }



            int ISno = 1;
            if (dtDealTransfer.Rows.Count > 0)
            {

                DataRow[] dr2 = dtDealTransfer.Select("Contract_No_Id='" + ddldealTrasPanum.SelectedValue + "'");
                if (dr2.Length > 0)
                {
                    //Utility.FunShowAlertMsg(this, "Contract No Exists");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege79));
                    return;
                }


                ISno = Convert.ToInt32(dtDealTransfer.Compute("max(sno)  ", "sno is not null").ToString()) + 1;
            }

            if (Convert.ToDecimal(dtGetDealTransfer.Rows[0]["OS"]) > 0)
            {

                if (dtDealTransfer.Rows.Count >= 1)
                {
                    Utility.FunShowAlertMsg(this, "More than one deal not allowed to Transfer");
                    return;
                }

                if (dtGetDealTransfer.Rows[0]["CUSTOMER_ID"].ToString() == ucCustomerCodeLov.SelectedValue)
                {
                    Utility.FunShowAlertMsg(this, "Deal Transfer can not be allowed for the same customer Deal");
                    return;
                }

                DataRow dr = dtDealTransfer.NewRow();
                dr["sno"] = ISno;
                dr["Contract_No"] = ddldealTrasPanum.SelectedText;
                dr["Contract_No_Id"] = ddldealTrasPanum.SelectedValue;
                dr["finance_amount"] = dtGetDealTransfer.Rows[0]["finance_amount"];
                dr["tenure"] = dtGetDealTransfer.Rows[0]["tenure"];
                dr["SCHB"] = dtGetDealTransfer.Rows[0]["SCHB"];
                dr["OS"] = dtGetDealTransfer.Rows[0]["OS"];
                dr["OS_DEC"] = dtGetDealTransfer.Rows[0]["OS_DEC"];
                dtDealTransfer.Rows.Add(dr);
                grvTransferDeal.DataSource = dtDealTransfer;
                grvTransferDeal.DataBind();
                grvTransferDeal.FooterRow.Visible = false;
                ViewState["DealTransfer"] = dtDealTransfer;
                decFutureInterest = Convert.ToDecimal(dtGetDealTransfer.Rows[0]["FUTURE_INT"].ToString());

                ViewState["FUTURE_INT"] = decFutureInterest;

                txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(Convert.ToDecimal(dtDealTransfer.Compute("sum(OS)", "OS>0")).ToString(Funsetsuffix()));
                txtFinanceAmount.Enabled = true;


            }
            else
            {
                Utility.FunShowAlertMsg(this, "Outstatnding should be grater than the Zero");
                return;
            }

            funPriLoadDealTransferAssets(ddldealTrasPanum.SelectedValue);
            ddldealTrasPanum.Clear();
            if (ddlDealTransfer.SelectedValue == "1")
            {
                gvAssetDetails.Columns[11].Visible = false;
                btnAddAsset.Enabled_False();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    protected void btnRemoveDealTransfer_Click(object sender, EventArgs e)
    {
        try
        {
            DataTable dtDealTransfer = (DataTable)ViewState["DealTransfer"];

            string strFieldAtt = ((Button)sender).ClientID;
            int gRowIndex = Utility.FunPubGetGridRowID("grvTransferDeal", strFieldAtt);

            Label lblContractNo = grvTransferDeal.Rows[gRowIndex].FindControl("lblContractNo") as Label;


            DataTable dtDelete;
            dtDelete = (DataTable)ViewState["DealTransfer"];
            dtDelete.Rows.RemoveAt(gRowIndex);
            dtDelete.AcceptChanges();

            if (dtDelete.Rows.Count == 0)
            {
                grvTransferDeal.DataSource = null;
                grvTransferDeal.EmptyDataText = "No Records Found..";
                grvTransferDeal.DataBind();
            }
            else
            {
                grvTransferDeal.DataSource = dtDelete;
                grvTransferDeal.DataBind();
                ViewState["DealTransfer"] = dtDelete;


            }

            if (dtDealTransfer.Rows.Count > 0)
            {
                txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(Convert.ToDecimal(dtDealTransfer.Compute("sum(OS)", "OS>0")).ToString(Funsetsuffix()));
            }
            else
            {
                txtFinanceAmount.Text = "0.000";
            }

            if (Session["PricingAssetDetails"] != null)
            {
                DataTable dt = (DataTable)Session["PricingAssetDetails"];
                DataRow[] dr = dt.Select("PANUM='" + lblContractNo.Text + "'");
                if (dr.Length > 0)
                {
                    foreach (DataRow dr2 in dr)
                    {
                        dr2.Delete();
                    }
                }
                Session["PricingAssetDetails"] = dt;
                gvAssetDetails.DataSource = dt;
                gvAssetDetails.DataBind();
                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    //public void ShowMessage(string message)
    //{

    //    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    //    sb.Append("<script type = 'text/javascript'>");
    //    sb.Append("window.onload=function(){");
    //    sb.Append("alert('");
    //    sb.Append(message);
    //    sb.Append("')};");
    //    sb.Append("</script>");
    //    ClientScript.RegisterClientScriptBlock(this.GetType(), "alert", sb.ToString());
    //}
    protected void btnAddDealTransfer_Click(object sender, EventArgs e)
    {
        try
        {
            funPriLoadTransferDealGrid();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void funPriLoadDealTransferAssets(string strPanum)
    {

        try
        {
            DataTable dtAssetDetails = new DataTable();
            if (Session["PricingAssetDetails"] == null || dtAssetDetails.Columns.Count == 0 || dtAssetDetails == null)
            {
                dtAssetDetails.Columns.Add("LeaseType");
                dtAssetDetails.Columns.Add("Required_FromDate");
                dtAssetDetails.Columns.Add("SlNo");
                dtAssetDetails.Columns.Add("Asset_ID");
                dtAssetDetails.Columns.Add("Asset_Code");
                dtAssetDetails.Columns.Add("Unit_Value");
                dtAssetDetails.Columns.Add("Unit_Value_1");
                dtAssetDetails.Columns.Add("Noof_Units");
                dtAssetDetails.Columns.Add("Margin_Percentage");
                dtAssetDetails.Columns.Add("TotalAssetValue");
                dtAssetDetails.Columns.Add("TotalAssetValue_1");
                dtAssetDetails.Columns.Add("Book_depreciation_Percentage");
                dtAssetDetails.Columns.Add("Margin_Amount");
                dtAssetDetails.Columns.Add("Margin_Amount_1");
                dtAssetDetails.Columns.Add("Block_depreciation_Percentage");
                dtAssetDetails.Columns.Add("Finance_Amount", typeof(decimal));
                dtAssetDetails.Columns.Add("NonCapital_Portion");
                dtAssetDetails.Columns.Add("Capital_Portion");
                dtAssetDetails.Columns.Add("Payment_Percentage");
                dtAssetDetails.Columns.Add("Pay_To_ID");
                dtAssetDetails.Columns.Add("Entity_ID");
                dtAssetDetails.Columns.Add("Entity_Code");
                dtAssetDetails.Columns.Add("Proforma_Id");
                dtAssetDetails.Columns.Add("Finance_Amount_1", typeof(decimal));

                dtAssetDetails.Columns["Finance_Amount"].DataType = typeof(decimal);
                dtAssetDetails.Columns["Margin_Amount"].DataType = typeof(decimal);
                dtAssetDetails.Columns["Finance_Amount_1"].DataType = typeof(decimal);
                dtAssetDetails.Columns["Margin_Amount_1"].DataType = typeof(decimal);
                dtAssetDetails.Columns["TotalAssetValue"].DataType = typeof(decimal);
                dtAssetDetails.Columns["Unit_Value_1"].DataType = typeof(decimal);
                dtAssetDetails.Columns.Add("Lease_Asset_No");
                dtAssetDetails.Columns.Add("ManuFactoring_Year", typeof(int));
                //new column added 
                dtAssetDetails.Columns.Add("Discount_Absorbed");
                dtAssetDetails.Columns.Add("Discount_Amount");
                dtAssetDetails.Columns.Add("Security_Type");
                dtAssetDetails.Columns.Add("Security_Type_Identifier");
                dtAssetDetails.Columns.Add("Security_Type_Identifier_Value");
                dtAssetDetails.Columns.Add("Margin_Dealer", typeof(decimal));
                dtAssetDetails.Columns.Add("Margin_MFC", typeof(decimal));
                dtAssetDetails.Columns.Add("Trade_In", typeof(decimal));
                dtAssetDetails.Columns.Add("Margin_Dealer_1", typeof(decimal));
                dtAssetDetails.Columns.Add("Margin_MFC_1", typeof(decimal));
                dtAssetDetails.Columns.Add("Trade_In_1", typeof(decimal));


                //RC
                dtAssetDetails.Columns.Add("Engine_No");
                dtAssetDetails.Columns.Add("Chasis_No");
                dtAssetDetails.Columns.Add("Date_of_Reg");
                dtAssetDetails.Columns.Add("Reg_No");
                dtAssetDetails.Columns.Add("Reg_No2");
                dtAssetDetails.Columns.Add("Reg_Expiry_Date");
                dtAssetDetails.Columns.Add("Model_Year");

                dtAssetDetails.Columns.Add("Registered_Owner");
                dtAssetDetails.Columns.Add("Dealer_Commission_Rate", typeof(decimal));
                dtAssetDetails.Columns.Add("Dealer_Commission_Amount", typeof(decimal));
                dtAssetDetails.Columns.Add("Dealer_Commission_Amount_1", typeof(decimal));
                dtAssetDetails.Columns.Add("DEALER_COMM_ID", typeof(int));
                dtAssetDetails.Columns.Add("DEALER_COMM_Rate_ID", typeof(int));
                dtAssetDetails.Columns.Add("Asset_Type", typeof(int));

                dtAssetDetails.Columns.Add("CLASS", typeof(string));
                dtAssetDetails.Columns.Add("MAKE", typeof(string));
                dtAssetDetails.Columns.Add("MODEL", typeof(string));
                dtAssetDetails.Columns.Add("TYPE", typeof(string));
                dtAssetDetails.Columns.Add("Purpose", typeof(string));
                dtAssetDetails.Columns.Add("PANUM", typeof(string));



            }




            DataRow Dr = dtAssetDetails.NewRow();

            DataTable dtDealTransferAssets = funPriGetDealTransferAsstes(strPanum);
            if (dtDealTransferAssets.Rows.Count == 0)
            {
                Utility.FunShowAlertMsg(this, "Contract Assets not Exists");
                return;
            }
            if (dtDealTransferAssets.Rows.Count > 0)
            {
                foreach (DataRow dr2 in dtDealTransferAssets.Rows)
                {

                    Dr["SlNo"] = dtAssetDetails.Rows.Count + 1;
                    Dr["Asset_Code"] = dr2["Asset_Code"];
                    Dr["Asset_ID"] = dr2["Asset_ID"];
                    Dr["Noof_Units"] = 1;
                    Dr["Finance_Amount"] = dr2["Finance_Amount"];
                    Dr["Finance_Amount_1"] = dr2["Finance_Amount_1"];
                    Dr["Unit_Value"] = dr2["Unit_Value"];
                    Dr["Unit_Value_1"] = dr2["Unit_Value_1"];
                    Dr["Margin_Percentage"] = dr2["Margin_Percentage"];
                    Dr["TotalAssetValue"] = dr2["TotalAssetValue"];
                    Dr["TotalAssetValue_1"] = dr2["TotalAssetValue_1"];
                    Dr["Book_depreciation_Percentage"] = dr2["Book_depreciation_Percentage"];
                    Dr["Margin_Amount"] = dr2["Margin_Amount"];
                    Dr["Margin_Amount_1"] = dr2["Margin_Amount_1"];
                    Dr["Security_Type"] = dr2["Security_Type"];
                    Dr["Security_Type_Identifier"] = dr2["Security_Type_Identifier"];
                    Dr["Security_Type_Identifier_Value"] = dr2["Security_Type_Identifier_Value"];
                    Dr["Pay_To_ID"] = dr2["Pay_To_ID"];
                    Dr["Entity_ID"] = dr2["Entity_ID"];
                    Dr["Entity_Code"] = dr2["Entity_Code"];
                    Dr["Discount_Amount"] = dr2["Discount_Amount"];
                    Dr["Margin_Dealer"] = dr2["Margin_Dealer"];
                    Dr["Margin_Dealer_1"] = dr2["Margin_Dealer"];
                    Dr["Margin_MFC"] = dr2["Margin_MFC"];
                    Dr["Margin_MFC_1"] = dr2["Margin_MFC_1"];
                    Dr["Trade_In"] = dr2["Trade_In"];
                    Dr["Trade_In_1"] = dr2["Trade_In_1"];
                    Dr["Engine_No"] = dr2["Engine_No"];
                    Dr["Chasis_No"] = dr2["Chasis_No"];
                    Dr["Date_of_Reg"] = dr2["Date_of_Reg"];
                    Dr["Reg_No"] = dr2["Reg_No"];
                    Dr["Reg_No2"] = dr2["Reg_No2"];
                    Dr["Reg_Expiry_Date"] = dr2["Reg_Expiry_Date"];
                    Dr["Model_Year"] = dr2["Model_Year"];
                    Dr["ManuFactoring_Year"] = dr2["ManuFactoring_Year"];
                    Dr["Registered_Owner"] = dr2["Registered_Owner"];
                    Dr["Dealer_Commission_Rate"] = dr2["Dealer_Commission_Rate"];
                    Dr["Dealer_Commission_Amount"] = dr2["Dealer_Commission_Amount"];
                    Dr["Dealer_Commission_Amount_1"] = dr2["Dealer_Commission_Amount_1"];
                    Dr["DEALER_COMM_ID"] = dr2["DEALER_COMM_ID"];
                    Dr["Asset_Type"] = dr2["Asset_Type"];
                    Dr["CLASS"] = dr2["CLASS"];
                    Dr["MAKE"] = dr2["MAKE"];
                    Dr["TYPE"] = dr2["TYPE"];
                    Dr["MODEL"] = dr2["MODEL"];
                    Dr["Purpose"] = dr2["Purpose"];
                    Dr["PANUm"] = dr2["PANUm"];
                    dtAssetDetails.Rows.Add(Dr);
                    Session["PricingAssetDetails"] = dtAssetDetails;
                }
            }

            if (Session["PricingAssetDetails"] != null && ddlLOB.Items.Count > 0)
            {
                DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];
                gvAssetDetails.DataSource = dsAssetDetails;
                gvAssetDetails.DataBind();

                if (dsAssetDetails.Rows.Count > 0)
                {
                    //decimal dcmMarginAmount = (decimal)(dsAssetDetails.Compute("Sum(Margin_Amount_1)", "Noof_Units > 0"));
                    //txtMarginAmount.Text = (dcmMarginAmount == 0) ? "" : dcmMarginAmount.ToString(Funsetsuffix());
                    //decimal dcmAssetFinAmount2 = (decimal)(dsAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                    //txtFinanceAmount.Text = (dcmAssetFinAmount2 == 0) ? "" : dcmAssetFinAmount2.ToString(Funsetsuffix());

                    //if (ViewState["StartDelayRate"] != null)
                    //{
                    //    txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                    //    txtStartdelaycharges.Text = ((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix());
                    //}

                    txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
                    //decimal dcmAssetTradeIn = (decimal)(dsAssetDetails.Compute("Sum(Trade_In_1)", "Noof_Units > 0"));
                    //txtdiscount.Text = (dcmAssetTradeIn == 0) ? "" : dcmAssetTradeIn.ToString(Funsetsuffix());



                    //decimal decUNITVALUE1 = (decimal)(dsAssetDetails.Compute("Sum(UNIT_VALUE_1)", "Noof_Units > 0"));
                    //txtTotalAssetCost.Text = decUNITVALUE1.ToString(Funsetsuffix());

                    //decimal deTotalFin = (decimal)(dsAssetDetails.Compute("Sum(Finance_Amount_1)", "Noof_Units > 0"));
                    //txtTotalFinanceAmount.Text = deTotalFin.ToString(Funsetsuffix());


                }
                txtTotalAssetCount.Text = gvAssetDetails.Rows.Count.ToString();
                //FunPriAssignMarginAmount();
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private DataTable funPriGetDealTransferAsstes(string strPanum)
    {
        DataTable dtGetDealTransfer = new System.Data.DataTable();
        try
        {
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@OPTION", "25");
            strProParm.Add("@COMPANYID", intCompanyId.ToString());
            strProParm.Add("@USERID", intUserId.ToString());
            strProParm.Add("@PROGRAMID", intProgramID.ToString());
            strProParm.Add("@PAGE_MODE", "C");
            strProParm.Add("@PANUM", ddldealTrasPanum.SelectedValue);
            dtGetDealTransfer = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return dtGetDealTransfer;
    }
    protected void ddlApplicationNo_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            DataTable dtRisk = new System.Data.DataTable();
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@COMPANY_ID", intCompanyId.ToString());
            strProParm.Add("@CUSTOMER_ID", intUserId.ToString());
            strProParm.Add("@BUSINESS_OFFER_NO", ddlApplicationNo.SelectedText);
            dtRisk = Utility.GetDefaultData("S3G_ORG_PRICING_RISK_VALD", strProParm);
            if (dtRisk != null)
            {
                if (dtRisk.Rows.Count > 0)
                {
                    lblRiskVal.Text = dtRisk.Rows[0]["CUSTOMER_NAME"].ToString() + " This customer already high risk. Do you want to proceed.";
                    pnlRiskVal.Visible = true;
                    mp1.Show();
                }
                else
                {
                    btnLoadCheckList_OnClick(null, null);
                    ddlCreditPurpose.Focus();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    public void funCheckGPSMonth()
    {
        try
        {
            //txtApplicationDateDate.Text = string.Empty;
            //txtApplicationDateFWC.Text = string.Empty;
            txtIncomeBookStartDate.Text = string.Empty;
            DataTable dtCheckPrevMonthClose = new DataTable();
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", intCompanyId.ToString());
            if (ddlLOB_SelectedItem_Text.Value.ToUpper() == "FT" || ddlLOB_SelectedItem_Text.Value.ToUpper() == "WC")
            {
                Procparam.Add("@Location_Id", ddlBranchListFWC.SelectedValue);
            }
            else
            {
                Procparam.Add("@Location_Id", ddlBranchList.SelectedValue);
            }
            Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
            if (txtApplicationDateDate.Text != string.Empty)
            {
                Procparam.Add("@ApplicationDate", Utility.StringToDate(txtApplicationDateDate.Text).ToString());
            }
            Procparam.Add("@User_ID", intUserId.ToString());
            dtCheckPrevMonthClose = Utility.GetDefaultData("LA_VALI_MTH_CLOSR_APP", Procparam);
            if (dtCheckPrevMonthClose.Rows.Count > 0)
            {
                txtApplicationDateDate.Text = dtCheckPrevMonthClose.Rows[0]["APPLICATION_DATE"].ToString();
                txtApplicationDateFWC.Text = dtCheckPrevMonthClose.Rows[0]["APPLICATION_DATE"].ToString();
                txtIncomeBookStartDate.Text = dtCheckPrevMonthClose.Rows[0]["INCOME_BOOK_START_DATE"].ToString();
            }
            funPriAdditionalInfor(ddlLOB.SelectedValue, txtApplicationDateDate.Text);

            DataTable dtOverDueRate = new System.Data.DataTable();
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@OPTION", "21");
            strProParm.Add("@COMPANYID", intCompanyId.ToString());
            strProParm.Add("@USERID", intUserId.ToString());
            strProParm.Add("@PROGRAMID", intProgramID.ToString());
            strProParm.Add("@PAGE_MODE", "C");
            strProParm.Add("@Lob_Id", ddlLOB.SelectedValue);
            strProParm.Add("@PANUM", ddldealTrasPanum.SelectedValue);
            dtOverDueRate = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);
            if (dtOverDueRate.Rows.Count > 0)
            {
                txtOverDueCharges.Text = dtOverDueRate.Rows[0]["GPSODIRATE"].ToString();
            }

            funPriLoadFloorRate();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }


    }


    private void funPriLoadFloorRate()
    {
        DataTable dtFloorRate = new System.Data.DataTable();
        Dictionary<string, string> strProParm2 = new Dictionary<string, string>();
        strProParm2.Add("@OPTION", "22");
        strProParm2.Add("@COMPANYID", intCompanyId.ToString());
        strProParm2.Add("@USERID", intUserId.ToString());
        strProParm2.Add("@PROGRAMID", intProgramID.ToString());
        strProParm2.Add("@PAGE_MODE", "C");
        strProParm2.Add("@Lob_Id", ddlLOB.SelectedValue);
        strProParm2.Add("@PANUM", ddldealTrasPanum.SelectedValue);
        dtFloorRate = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm2);
        if (dtFloorRate.Rows.Count > 0)
        {
            txtFloorRate.Text = dtFloorRate.Rows[0]["FLOOR_RATE"].ToString();
        }
    }

    protected void txtApplicationDateDate_TextChanged(object sender, EventArgs e)
    {
        try
        {

            if (ViewState["OFFER_DATE"] != null)
            {
                if (Utility.StringToDate(txtApplicationDateDate.Text) < Utility.StringToDate(ViewState["OFFER_DATE"].ToString()))
                {
                    Utility.FunShowAlertMsg(this, "Application Date should be greater or Equal to Check List Date(" + ViewState["OFFER_DATE"].ToString() + ")");
                    txtApplicationDateDate.Text = string.Empty;
                    txtApplicationDateDate.Focus();
                    return;
                }
            }
            FunPriResetIRRDetails();
            funPerAutoLoadoutflowfromChecklist(true);
            funCheckGPSMonth();
            // funCheckGPSMonth();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    //Covenants
    protected void grvCovenants_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            //if (e.Row.RowType == DataControlRowType.DataRow)
            //{
            //    TextBox txtdownPaymentAmount = (TextBox)e.Row.FindControl("txtdownPaymentAmount");
            //    txtdownPaymentAmount.ReadOnly = true;
            //    txtdownPaymentAmount.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, true, "Down Payment Amount");
            //}
            if (e.Row.RowType == DataControlRowType.Footer)
            {
                DropDownList ddlCovenantsClause = (DropDownList)e.Row.FindControl("ddlCovenantsClause");
                if (ViewState["COVENANTSDDL"] != null)
                {
                    //ddlCovenantsClause.FillDataTable((DataTable)ViewState["COVENANTSDDL"], "value", "name");
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    //protected void grvCovenants_RowDeleting(object sender, GridViewDeleteEventArgs e)
    //{
    //    try
    //    {
    //        DataTable COVENANTS = (DataTable)ViewState["COVENANTS"];
    //        if (COVENANTS.Rows.Count > 0)
    //        {
    //            COVENANTS.Rows.RemoveAt(e.RowIndex);
    //            COVENANTS.AcceptChanges();

    //            if (COVENANTS.Rows.Count == 0)
    //            {

    //                funPrivLoadCovenantsGrid();
    //                DropDownList t = (DropDownList)(grvCovenants.FooterRow.Cells[1].FindControl("ddlCovenantsClause"));
    //                t.Focus();


    //            }
    //            else
    //            {
    //                grvCovenants.DataSource = COVENANTS;
    //                grvCovenants.DataBind();
    //                ViewState["COVENANTS"] = COVENANTS;

    //            }
    //        }

    //    }
    //    catch (Exception ex)
    //    {
    //        ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
    //    }
    //}
    protected void grvCovenants_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        //TextBox txtdownPaymentAmount = grvDownPaymentReceipt.FooterRow.FindControl("txtdownPaymentAmount") as TextBox;
        //TextBox txtddownPaymentReceipt = grvDownPaymentReceipt.FooterRow.FindControl("txtddownPaymentReceipt") as TextBox;
        //if (e.CommandName == "Addnew")
        //{
        //    var VSo = 0;
        //    if (ViewState["DOWNPAYRECEIPT"] != null)
        //    {
        //        DataTable dt = (DataTable)ViewState["DOWNPAYRECEIPT"];

        //        DataRow[] dr = dt.Select("Sno=-1");
        //        if (dr.Length > 0)
        //        {
        //            foreach (DataRow dr2 in dr)
        //            {
        //                dr2.Delete();
        //            }
        //            dt.AcceptChanges();

        //        }
        //        else
        //        {
        //            if (dt.Rows.Count > 0)
        //            {
        //                VSo = Convert.ToInt32(dt.Compute("max(Sno)", "1=1"));
        //            }
        //            else
        //            {
        //                VSo = 0;
        //            }
        //        }

        //        DataRow dr3 = dt.NewRow();
        //        dr3["Sno"] = VSo + 1;
        //        dr3["DownPayAmount"] = txtdownPaymentAmount.Text;
        //        dr3["DownPayReceipt"] = txtddownPaymentReceipt.Text;
        //        dt.Rows.Add(dr3);
        //        grvDownPaymentReceipt.DataSource = dt;
        //        grvDownPaymentReceipt.DataBind();
        //        ViewState["DOWNPAYRECEIPT"] = dt;
        //    }
        //}
        //txtdownPaymentAmount.Focus();
    }
    //protected void btnAddCovenantsRow_Click(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        DropDownList ddlCovenantsClause = grvCovenants.FooterRow.FindControl("ddlCovenantsClause") as DropDownList;
    //        TextBox txtothCovenantsClauseDescription = grvCovenants.FooterRow.FindControl("txtothCovenantsClauseDescription") as TextBox;

    //        var VSo = 0;
    //        if (ViewState["COVENANTS"] != null)
    //        {
    //            DataTable dt = (DataTable)ViewState["COVENANTS"];

    //            DataRow[] dr = dt.Select("Sno=-1");
    //            if (dr.Length > 0)
    //            {
    //                foreach (DataRow dr2 in dr)
    //                {
    //                    dr2.Delete();
    //                }
    //                dt.AcceptChanges();

    //            }
    //            else
    //            {
    //                if (dt.Rows.Count > 0)
    //                {
    //                    VSo = Convert.ToInt32(dt.Compute("max(Sno)", "1=1"));
    //                }
    //                else
    //                {
    //                    VSo = 0;
    //                }
    //            }


    //            DataRow[] dr4 = dt.Select("Covenants_Clause_ID='" + ddlCovenantsClause .SelectedValue+ "'");
    //            if (dr4.Length > 0)
    //            {
    //                Utility.FunShowAlertMsg(this,"Covenants Clause Exists");
    //                return;
    //            }

    //            DataRow dr3 = dt.NewRow();
    //            dr3["Sno"] = VSo + 1;
    //            dr3["Covenants_Clause_Description"] = ddlCovenantsClause.SelectedItem.Text;
    //            dr3["Covenants_Clause_ID"] = ddlCovenantsClause.SelectedValue;
    //            dr3["Oth_Covenants_Clause_Description"] = txtothCovenantsClauseDescription.Text;
    //            dt.Rows.Add(dr3);
    //            grvCovenants.DataSource = dt;
    //            grvCovenants.DataBind();
    //            ViewState["COVENANTS"] = dt;
    //        }
    //        DropDownList t = (DropDownList)(grvCovenants.FooterRow.Cells[1].FindControl("ddlCovenantsClause"));
    //        t.Focus();
    //    }
    //    catch (Exception ex)
    //    {
    //        ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
    //    }
    //}
    //private void funPrivLoadCovenantsGrid()
    //{
    //    try
    //    {

    //        DataTable dt = new DataTable();
    //        if (dt.Columns.Count == 0)
    //        {
    //            dt.Columns.Add("Sno", typeof(int));
    //            dt.Columns.Add("Covenants_Clause_ID", typeof(int));
    //            dt.Columns.Add("Covenants_Clause_Description", typeof(string));
    //            dt.Columns.Add("Oth_Covenants_Clause_Description", typeof(string));
    //        }
    //        DataRow dr = dt.NewRow();
    //        dr[0] = -1;
    //        dt.Rows.Add(dr);

    //        grvCovenants.DataSource = dt;
    //        grvCovenants.DataBind();
    //        ViewState["COVENANTS"] = dt;
    //        grvCovenants.Rows[0].Visible = false;
    //    }
    //    catch (Exception ex)
    //    {
    //        ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
    //    }
    //    finally
    //    {

    //    }
    //}
    //protected void ddlCovenantsClause_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        DropDownList ddlCovenantsClause = (DropDownList)sender;
    //        TextBox txtothCovenantsClauseDescription = (TextBox)grvCovenants.FooterRow.FindControl("txtothCovenantsClauseDescription");
    //        if (ddlCovenantsClause.SelectedValue == "4")
    //        {
    //            txtothCovenantsClauseDescription.Enabled = true;
    //        }
    //        else
    //        {
    //            txtothCovenantsClauseDescription.Clear();
    //            txtothCovenantsClauseDescription.Enabled = false;
    //        }
    //        DropDownList t = (DropDownList)(grvCovenants.FooterRow.Cells[1].FindControl("ddlCovenantsClause"));
    //        t.Focus();
    //    }
    //    catch (Exception ex)
    //    {
    //        ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
    //    }
    //}
    protected void ddldc_Item_Selected(object Sender, EventArgs e)
    {

    }

    protected void ucCustomerLovCustomerMapFWC_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            //UserControls_CommonSearch ucCustomerLovCustomerMapFWC = grvCustSubLimit.FooterRow.FindControl("ucCustomerLovCustomerMapFWC") as UserControls_CommonSearch;
            HiddenField hdnCID = (HiddenField)ucCustomerLovCustomerMapFWC.FindControl("hdnID");
            TextBox txtCustomerName = (TextBox)ucCustomerLovCustomerMapFWC.FindControl("txtItemName");
            hdnCID.Value = ucCustomerLovCustomerMapFWC.SelectedValue;
            txtCusomerCodeMapFWChidden.Text = txtCustomerCode.Text = ucCustomerLovCustomerMapFWC.SelectedValue;
            txtCustomerName.Text = ucCustomerLovCustomerMapFWC.SelectedText;
            btnLoadCustomerMapFWC_Click(null, null);
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    [System.Web.Services.WebMethod]
    public static string[] GetDealerList(String prefixText, int count)
    {
        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggestions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();
        Procparam.Clear();
        Procparam.Add("@Company_ID", HttpContext.Current.Session["Company_Id"].ToString());
        Procparam.Add("@USERID", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        Procparam.Add("@PrefixText", prefixText);
        suggestions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_GET_DEALER_LIST", Procparam));
        return suggestions.ToArray();

    }
    protected void btnLoadCustomerMapFWC_Click(object sender, EventArgs e)
    {
        try
        {
            string strCustomerAddress = string.Empty;
            StringBuilder strFormAddress = new StringBuilder();
            HiddenField hdnCID = (HiddenField)ucCustomerLovCustomerMapFWC.FindControl("hdnID");
            //TextBox txtCusomerCodeMapFWChidden = (TextBox)ucCustomerLovCustomerMapFWC.FindControl("txtCusomerCodeMapFWChidden");
            if (hdnCID != null && hdnCID.Value != "")
            {
                Button btnGetLOV = (Button)ucCustomerLovCustomerMapFWC.FindControl("btnGetLOV");
                //btnGetLOV.Focus();
                TextBox txtCustomerName = (TextBox)ucCustomerLovCustomerMapFWC.FindControl("txtItemName");
                TextBox TxtName = (TextBox)ucCustomerLovCustomerMapFWC.FindControl("TxtName");
                TxtName.ToolTip = txtCusomerCodeMapFWChidden.Text = TxtName.Text = txtCustomerName.Text;
                DataSet ds = new DataSet();
                Dictionary<string, string> objProcedureParameters = new Dictionary<string, string>();
                objProcedureParameters.Add("@Option", "1");
                objProcedureParameters.Add("@COMPANY_ID", intCompanyId.ToString());
                objProcedureParameters.Add("@CustomerId", hdnCID.Value);
                ds = Utility.GetDataset("S3G_OR_GET_CUSADDRESS", objProcedureParameters);

                if (ds.Tables[6].Rows.Count > 0)
                {
                    if (ds.Tables[6].Rows[0]["NEGATIVELIST_CUSTOMER"].ToString() == "1")
                    {
                        ViewState["NEGATIVELIST_CUSTOMER"] = 1;
                        //TextBox txtName2 = (TextBox)ucCustomerLovCustomerMapFWC.FindControl("txtName");
                        //HiddenField hdnCID2 = (HiddenField)ucCustomerLovCustomerMapFWC.FindControl("hdnID");
                        //txtName2.Text = string.Empty;
                        //hdnCID2.Value = "0";
                        //ucCustomerCodeLov.Clear();
                        Utility.FunShowAlertMsg(this, "Customer Black Listed not allowed to Create the Application");
                        //return;

                    }
                }

                //if (ds.Tables[0].Rows.Count > 0)
                //{
                //    for (int i = 0; i <= ds.Tables[0].Columns.Count - 1; i++)
                //    {
                //        strFormAddress.Append(Environment.NewLine);
                //        strFormAddress.Append(ds.Tables[0].Columns[i].ColumnName + " : " + ds.Tables[0].Rows[0][i].ToString());

                //    }
                //    if (ds.Tables[1].Rows.Count > 0)
                //    {
                //        for (int i = 0; i <= ds.Tables[1].Rows.Count - 1; i++)
                //        {
                //            strFormAddress.Replace(ds.Tables[1].Rows[i]["COLUMN_NAME"].ToString().ToUpper(), ds.Tables[1].Rows[i]["DISPLAY_TEXT"].ToString());
                //        }
                //    }
                //    funPriSetCustomerAddress(ds.Tables[0], strFormAddress, ucCustomerLovFWC);
                //}
                //if (ds.Tables[2].Rows.Count > 0)
                //{
                //    txtCreditLimit.Text = ds.Tables[2].Rows[0]["MAX_LEND_AMOUNT"].ToString();
                //    txtConstitution.Text = ds.Tables[2].Rows[0]["Constitution"].ToString();
                //    //FunPriLoadConsitutionBasedCustomer(Convert.ToInt32(hdnCID.Value));
                //}
                //txtCustomerName.Focus();
            }
            //FunPriAssignAssetLink();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }





    protected void gvFACCharges_RowDataBound1(object sender, GridViewRowEventArgs e)
    {

    }

    private void funPriDealerComissionandLIPCashFlowValidation()
    {

        //Outflow Validation
        #region
        DataTable dt = ((DataSet)ViewState["OutflowDDL"]).Tables[2];



        if (ddlDealerCommissionApplicable.SelectedValue == "1")
        {
            DataRow[] dr = dt.Select("CASHFLOW_FLAG_ID=28");
            if (dr.Length == 0)
            {
                Utility.FunShowAlertMsg(this, "Dealer commission cash outflow not defined against application Program");
                ddlDealerCommissionApplicable.SelectedValue = "0";
            }


        }
        if (ddlLifeInsurance.SelectedValue == "2")
        {
            DataRow[] drLIP = dt.Select("CASHFLOW_FLAG_ID=109");//109
            if (drLIP.Length == 0)
            {
                Utility.FunShowAlertMsg(this, "Life Insurance Company cash outflow not defined against application Program");
                ddlLifeInsurance.SelectedValue = "1";
                ddlLifeInsurance_SelectedIndexChanged(null, null);
            }

            //DataRow[] drLIPCustomer = dt.Select("CASHFLOW_FLAG_ID=108");//108
            //if (drLIPCustomer.Length == 0)
            //{
            //    Utility.FunShowAlertMsg(this, "Life Insurance Customer cash outflow not defined against application Program");
            //    ddlLifeInsurance.SelectedValue = "1";
            //    ddlLifeInsurance_SelectedIndexChanged(null, null);
            //}
        }
        #endregion


        //Inflow LIP Validation
        #region

        DataTable dtInflow = ((DataSet)ViewState["InflowDDL"]).Tables[2];

        if (!ddlLOB_SelectedItem_Text.Value.Contains("TL"))
        {
            if (ddlLifeInsurance.SelectedValue == "2")
            {
                DataRow[] drLIPUMFCIncome = dtInflow.Select("CASHFLOW_FLAG_ID=506");
                if (drLIPUMFCIncome.Length == 0)
                {
                    Utility.FunShowAlertMsg(this, "Un matured LIP income cash inflow not defined against application Program");
                    ddlLifeInsurance.SelectedValue = "1";
                    ddlLifeInsurance_SelectedIndexChanged(null, null);
                }
            }
        }
        #endregion

        #region

        if (!ddlLOB_SelectedItem_Text.Value.Contains("TL"))
        {
            if (ddlLifeInsurance.SelectedValue == "2")
            {
                DataRow[] drLIPUMFCIncome = dtInflow.Select("CASHFLOW_FLAG_ID=515");
                if (drLIPUMFCIncome.Length == 0)
                {
                    Utility.FunShowAlertMsg(this, "LIP Appropriation cash outflow not defined against application Program");
                    ddlLifeInsurance.SelectedValue = "1";
                    ddlLifeInsurance_SelectedIndexChanged(null, null);
                }
            }
        }
        #endregion
        //Inflow Billing Validation
        #region

        DataTable dtInflowBill = ((DataSet)ViewState["InflowDDL"]).Tables[3];


        //if (ddlLifeInsurance.SelectedValue == "2")
        //{
        //    DataRow[] dr = dtInflowBill.Select("CASHFLOW_FLAG_ID=515");//LIP Appropriation
        //    if (dr.Length == 0)
        //    {
        //        Utility.FunShowAlertMsg(this, "LIP Appropriation cash outflow not defined against application Program");
        //        ddlLifeInsurance.SelectedValue = "1";
        //        ddlLifeInsurance_SelectedIndexChanged(null, null);
        //    }


        //}

        if (ddlLifeInsurance.SelectedValue == "2")
        {
            //DataRow[] drInflowBillComp = dtInflow.Select("CASHFLOW_FLAG_ID=109");
            //if (drInflowBillComp.Length == 0)
            //{
            //    Utility.FunShowAlertMsg(this, "Life Insurance Company cash inflow not defined against billing Program");
            //    ddlLifeInsurance.SelectedValue = "1";
            //    ddlLifeInsurance_SelectedIndexChanged(null, null);
            //}

            //DataRow[] drInflowBillCust = dtInflow.Select("CASHFLOW_FLAG_ID=108");
            //if (drInflowBillCust.Length == 0)
            //{
            //    Utility.FunShowAlertMsg(this, "Life Insurance Customer cash inflow not defined against billing Program");
            //    ddlLifeInsurance.SelectedValue = "1";
            //    ddlLifeInsurance_SelectedIndexChanged(null, null);
            //}



        }
        //if (!ddlLOB_SelectedItem_Text.Value.Contains("TL"))
        //{
        //    if (ddlDealerCommissionApplicable.SelectedValue == "1")
        //    {
        //        DataRow[] drInflowBillDealerComission = dtInflowBill.Select("CASHFLOW_FLAG_ID=28");
        //        if (drInflowBillDealerComission.Length == 0)
        //        {
        //            Utility.FunShowAlertMsg(this, "Dealer Comission cash inflow not defined against billing Program");
        //            ddlDealerCommissionApplicable.SelectedValue = "0";
        //        }
        //    }
        //}
        #endregion



    }


    protected void ddlDealerCommissionApplicable_SelectedIndexChanged(object sender, EventArgs e)
    {

        System.Web.HttpContext.Current.Session["Is_Dealer_Commission_Applicable"] = ddlDealerCommissionApplicable.SelectedValue;

        txtAccountingIRR.Text = "";
        txtAccountIRR_Repay.Text = "";
        txtBusinessIRR.Text = "";
        txtBusinessIRR_Repay.Text = "";
        txtCompanyIRR.Text = "";
        txtCompanyIRR_Repay.Text = "";

        DataTable DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
        if (DtCashFlowOut != null)
        {
            DataRow[] dr5 = DtCashFlowOut.Select("CASHFLOW_FLAG_ID=28");
            if (dr5.Length > 0)
            {
                foreach (DataRow dr6 in dr5)
                {
                    dr6.Delete();
                }

                DtCashFlowOut.AcceptChanges();
                ViewState["DtCashFlowOut"] = DtCashFlowOut;

                gvOutFlow.DataSource = DtCashFlowOut;
                gvOutFlow.DataBind();
            }
        }

        ddlDealerCommissionApplicable.Focus();







    }
    protected void ddlLifeInsurance_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            txtAccountingIRR.Text = "";
            txtAccountIRR_Repay.Text = "";
            txtBusinessIRR.Text = "";
            txtBusinessIRR_Repay.Text = "";
            txtCompanyIRR.Text = "";
            txtCompanyIRR_Repay.Text = "";


            ddlLifeInsuranceEntity.Clear();
            txtLifeInsuranceCustRate.Text = string.Empty;
            txtLifeInsuranceCompanyRate.Text = string.Empty;
            txtLifeInsuranceCompanyAmount.Text = string.Empty;
            txtLifeInsuranceCustomerPremiumAmount.Text = string.Empty;
            txtInsuranceTaxRate.Text = string.Empty;
            txtInsuranceCompanyTaxAmount.Text = string.Empty;
            txtInsuranceCustomerTaxAmount.Text = string.Empty;
            txtLifeInsuranceCustomerPremiumAmountWT.Text = string.Empty;
            txtLifeInsuranceCompanyAmountWT.Text = string.Empty;

            if (ddlLifeInsurance.SelectedValue == "2")
            {
                ddlLifeInsuranceEntity.Enabled = true;
                ddlLifeInsuranceEntity.IsMandatory = true;
                lblLifeInsuranceEntity.CssClass = "styleReqFieldLabel";
                lblLifeInsurance.CssClass = "styleReqFieldLabel";
                txtLifeInsuranceCustRate.Enabled = true;
                txtLifeInsuranceCompanyRate.Enabled = true;
                txtLifeInsuranceCompanyAmount.Enabled = true;
                txtLifeInsuranceCustomerPremiumAmount.Enabled = true;
                rfvtxtLifeInsuranceCustomerPremiumAmount.Enabled = false;
                rfvtxtLifeInsuranceCustRate.Enabled = false;
                rfvtxtLifeInsuranceCompanyRate.Enabled = false;
                rfvtxtLifeInsuranceCompanyAmount.Enabled = false;


            }
            else
            {
                ddlLifeInsuranceEntity.Enabled = false;
                ddlLifeInsuranceEntity.IsMandatory = false;
                lblLifeInsuranceEntity.CssClass = "styleDisplayLabel";
                lblLifeInsurance.CssClass = "styleDisplayLabel";
                txtLifeInsuranceCustRate.Enabled = false;
                txtLifeInsuranceCompanyRate.Enabled = false;
                txtLifeInsuranceCompanyAmount.Enabled = false;
                txtLifeInsuranceCustomerPremiumAmount.Enabled = false;
                rfvtxtLifeInsuranceCustomerPremiumAmount.Enabled = false;
                rfvtxtLifeInsuranceCustRate.Enabled = false;
                rfvtxtLifeInsuranceCompanyRate.Enabled = false;
                rfvtxtLifeInsuranceCompanyAmount.Enabled = false;

            }

            DataTable DtCashFlowOut = (DataTable)ViewState["DtCashFlowOut"];
            if (DtCashFlowOut != null)
            {
                DataRow[] dr5 = DtCashFlowOut.Select("CASHFLOW_FLAG_ID=109");
                if (dr5.Length > 0)
                {
                    foreach (DataRow dr6 in dr5)
                    {
                        dr6.Delete();
                    }
                    DtCashFlowOut.AcceptChanges();
                  
                }

                DataRow[] dr7 = DtCashFlowOut.Select("CASHFLOW_FLAG_ID=534");
                if (dr7.Length > 0)
                {
                    foreach (DataRow dr8 in dr7)
                    {
                        dr8.Delete();
                    }
                    DtCashFlowOut.AcceptChanges();
                }

                ViewState["DtCashFlowOut"] = DtCashFlowOut;

                    gvOutFlow.DataSource = DtCashFlowOut;
                gvOutFlow.DataBind();

            }
            ddlLifeInsurance.Focus();
            funPriArriveFlatRateRate();
            // ddlLifeInsurance.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlLeadSource_TextChanged(object sender, EventArgs e)
    {
        try
        {
            ddlLeadSource.Focus();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void btnAssetLoad_Click(object sender, EventArgs e)
    {
        funPriResetOutFlow();
    }

    private void funPriResetOutFlow()
    {
        try
        {
            if (ViewState["DtCashFlowOut"] != null)
            {
                DataTable dtFinAmount = ((DataTable)ViewState["DtCashFlowOut"]);

                DataRow[] drFinanAmtRow = dtFinAmount.Select("CashFlow_Flag_ID = 41");
                if (drFinanAmtRow.Length > 0)
                {


                    foreach (DataRow drFinDelete in dtFinAmount.Rows)
                    {
                        drFinDelete.Delete();
                    }
                    dtFinAmount.AcceptChanges();



                    ViewState["DtCashFlowOut"] = dtFinAmount;
                    gvOutFlow.DataSource = dtFinAmount;
                    gvOutFlow.DataBind();

                    ViewState["DtCashFlowOut"] = dtFinAmount;


                    if (dtFinAmount.Rows.Count == 0)
                    {
                        FunPriFillOutflowDLL(strAddMode);
                        FunPriGenerateNewOutflow();
                        if (((DataTable)ViewState["DtCashFlowOut"]).Rows.Count > 0)
                        {
                            lblTotalOutFlowAmount.Text = ((DataTable)ViewState["DtCashFlowOut"]).
                                Compute("sum(Amount)", "CashOutFlowID > 0").ToString();
                            lblTotalOutFlowAmount.funPubChangeCurrencyFormat();
                        }
                        else
                            lblTotalOutFlowAmount.Text = "0";
                    }

                }
            }
            FunPriResetInflow();
            btnFetchPayment_Click(null, null);

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }


    private void FunPriResetInflow()
    {
        try
        {
            DtCashFlow = (DataTable)ViewState["DtCashFlow"];
            if (DtCashFlow.Rows.Count > 0)
            {
                foreach (DataRow dr in DtCashFlow.Rows)
                {
                    dr.Delete();
                }
                DtCashFlow.AcceptChanges();
            }







            //FunPriIRRReset();
            txtAccountingIRR.Text = "";
            txtAccountIRR_Repay.Text = "";
            txtBusinessIRR.Text = "";
            txtBusinessIRR_Repay.Text = "";
            txtCompanyIRR.Text = "";
            txtCompanyIRR_Repay.Text = "";

            if (DtCashFlow.Rows.Count == 0)
            {
                FunPriFillInflowDLL(strAddMode);
            }
            else
            {
                gvInflow.DataSource = DtCashFlow;
                gvInflow.DataBind();
                FunPriGenerateNewInflow();
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            //throw new ApplicationException("Due to Data Problem, Unable to Remove Inflow");
        }
    }

    protected void ddlLifeInsuranceEntity_Item_Selected(object Sender, EventArgs e)
    {
        try
        {
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@OPTION", "7");
            strProParm.Add("@COMPANYID", intCompanyId.ToString());
            strProParm.Add("@USERID", intUserId.ToString());
            strProParm.Add("@PROGRAMID", intProgramID.ToString());
            strProParm.Add("@Life_Insu_Entity_id", ddlLifeInsuranceEntity.SelectedValue);
            strProParm.Add("@PAGE_MODE", "C");
            strProParm.Add("@PANUM", ddldealTrasPanum.SelectedValue);
            strProParm.Add("@Application_Date", Utility.StringToDate(txtApplicationDateDate.Text).ToString());
            dtGetDealTransfer = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);
            if (dtGetDealTransfer.Rows.Count > 0)
            {
                txtLifeInsuranceCustRate.Text = dtGetDealTransfer.Rows[0]["CUSTOMER_RATE"].ToString();
                txtLifeInsuranceCompanyRate.Text = dtGetDealTransfer.Rows[0]["COMPANY_RATE"].ToString();

                //if (txtFinanceAmount.Text == string.Empty)
                //{
                //    Utility.FunShowAlertMsg(this, "Enter the Finance Amount");
                //    return;
                //}

                //if (txtLifeInsuranceCustRate.Text == string.Empty)
                //{

                //    Utility.FunShowAlertMsg(this, "Enter the Insurance Customer Rate");
                //    return;
                //}

                //if (txtLifeInsuranceCompanyRate.Text == string.Empty)
                //{

                //    Utility.FunShowAlertMsg(this, "Enter the Insurance Company Rate");
                //    return;
                //}


                //if (Convert.ToDecimal(txtLifeInsuranceCustRate.Text) == 0)
                //{
                //    txtLifeInsuranceCustRate.Text = string.Empty;
                //    Utility.FunShowAlertMsg(this, "Customer Rate should be grater than the Zero");
                //    return;
                //}
                //if (Convert.ToDecimal(txtLifeInsuranceCompanyRate.Text) == 0)
                //{
                //    txtLifeInsuranceCompanyRate.Text = string.Empty;
                //    Utility.FunShowAlertMsg(this, "Company Rate should be grater than the Zero");
                //    return;
                //}

                //Amount Part
                //#region


                //if (txtLifeInsuranceCustomerPremiumAmount.Text == string.Empty)
                //{

                //    Utility.FunShowAlertMsg(this, "Enter the Insurance Customer Amount");
                //    return;
                //}

                //if (txtLifeInsuranceCompanyAmount.Text == string.Empty)
                //{

                //    Utility.FunShowAlertMsg(this, "Enter the Insurance Company Amount");
                //    return;
                //}


                //if (Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text) == 0)
                //{
                //    txtLifeInsuranceCustRate.Text = string.Empty;
                //    Utility.FunShowAlertMsg(this, "Customer Amount should be grater than the Zero");
                //    return;
                //}
                //if (Convert.ToDecimal(txtLifeInsuranceCompanyAmount.Text) == 0)
                //{
                //    txtLifeInsuranceCompanyRate.Text = string.Empty;
                //    Utility.FunShowAlertMsg(this, "Company Amount should be grater than the Zero");
                //    return;
                //}
                //#endregion

                //if (txtTenure.Text == string.Empty)
                //{
                //    Utility.FunShowAlertMsg(this, "Enter the Tenor");
                //    return;
                //}

                int ITenor = Convert.ToInt32(txtTenure.Text);


                #region
                if (txtFinanceAmount.Text != string.Empty)
                {
                    decimal decInsuranceCompanyAmount = 0;
                    if (Convert.ToDecimal(txtFinanceAmount.Text) > 0 && ITenor > 0)
                    {
                        //txtLifeInsuranceCompanyAmount.Text = (Math.Round((Convert.ToDecimal(txtFinanceAmount.Text) * ((Convert.ToDecimal(txtLifeInsuranceCompanyRate.Text) / 100) / 1000) * (ITenor)), 3).ToString(Funsetsuffix()));

                        decInsuranceCompanyAmount = Math.Round((Convert.ToDecimal(txtFinanceAmount.Text) * ((Convert.ToDecimal(txtLifeInsuranceCompanyRate.Text) / 100) / 1000) * (ITenor)), 3);
                        txtLifeInsuranceCompanyAmount.Text = decInsuranceCompanyAmount.ToString();
                        txtLifeInsuranceCompanyAmount.funPubChangeCurrencyFormat();
                        //Below code commented and modifed by Praba on 17-03-2021
                        //txtLifeInsuranceCustomerPremiumAmount.Text = (Math.Round((Convert.ToDecimal(txtFinanceAmount.Text) * ((Convert.ToDecimal(txtLifeInsuranceCustRate.Text) / 100) / 1000) * (ITenor)), 0)).ToString(Funsetsuffix());
                        //txtLifeInsuranceCustomerPremiumAmount.funPubChangeCurrencyFormat();

                        //Round off issue Fix Code, Start By Praba on 17-03-2021
                        string strInsCustomerPremAmt = "";
                        decimal decRoundedVal = 0;
                        decimal decDiffValue = 0;
                        decimal decFinalVal = 0;

                        strInsCustomerPremAmt = (Convert.ToDecimal(txtFinanceAmount.Text) * ((Convert.ToDecimal(txtLifeInsuranceCustRate.Text) / 100) / 1000) * ITenor).ToString(Funsetsuffix());

                        decRoundedVal = Math.Round(Convert.ToDecimal(strInsCustomerPremAmt));

                        decDiffValue = decRoundedVal - Convert.ToDecimal(strInsCustomerPremAmt);

                        decFinalVal = decRoundedVal;

                        if (decDiffValue <= 0)
                        {
                            decFinalVal = Convert.ToDecimal(strInsCustomerPremAmt) + (-1 * decDiffValue);
                        }

                        txtLifeInsuranceCustomerPremiumAmount.Text = Convert.ToString(decFinalVal);
                        txtLifeInsuranceCustomerPremiumAmount.funPubChangeCurrencyFormat();

                        //Round off issue Fix Code, End By Praba on 17-03-2021


                        // Tax Rate for LIP -  Added by Boobalan M on 25-Jun-2021
                        decimal decTaxPercentage = 0;
                        decimal decTaxAmount = 0;
                        Procparam = new Dictionary<string, string>();
                        Procparam.Add("@OPTION", "1");
                        Procparam.Add("@CompanyID", CompanyId.ToString());
                        Procparam.Add("@USERID", UserId.ToString());
                        Procparam.Add("@LOB_ID", ddlLOB.SelectedValue);
                        Procparam.Add("@CashFlow_Flag_ID", "515");
                        Procparam.Add("@TYPE", "515");
                        Procparam.Add("@LOCATIONID", ddlBranchList.SelectedValue);
                        Procparam.Add("@DOCUMENT_DATE", Utility.StringToDate(txtApplicationDateDate.Text).ToString());
                        Procparam.Add("@Tax_Applicable", ViewState["Tax_Applicable"].ToString());
                        DataSet dsTaxDetail = Utility.GetDataset("S3G_GET_TAXRATE", Procparam);

                        if (dsTaxDetail.Tables.Count > 0)
                        {
                            if (dsTaxDetail.Tables[0].Rows.Count > 0)
                            {
                                decTaxPercentage = Convert.ToDecimal(dsTaxDetail.Tables[0].Rows[0]["TAXRATE"]);
                            }
                        }

                        // Company LIP Tax Calculation
                        txtInsuranceTaxRate.Text = decTaxPercentage.ToString();
                        decTaxAmount = (decInsuranceCompanyAmount * 0 / 100);
                        txtInsuranceCompanyTaxAmount.Text = decTaxAmount.ToString();
                        txtInsuranceCompanyTaxAmount.funPubChangeCurrencyFormat();
                        txtLifeInsuranceCompanyAmountWT.Text = Convert.ToString(decInsuranceCompanyAmount + decTaxAmount);
                        txtLifeInsuranceCompanyAmountWT.funPubChangeCurrencyFormat();


                        // Customer LIP Tax Calculation

                        if (intUserId.ToString() == "351")
                        {
                            decTaxAmount = 0;
                            decTaxAmount = (decFinalVal * decTaxPercentage / 100);
                        txtInsuranceCustomerTaxAmount.Text = decTaxAmount.ToString();
                        txtInsuranceCustomerTaxAmount.funPubChangeCurrencyFormat();
                            txtLifeInsuranceCustomerPremiumAmountWT.Text = Convert.ToString(decFinalVal + decTaxAmount);
                            txtLifeInsuranceCustomerPremiumAmountWT.funPubChangeCurrencyFormat();
                        }
                        else
                        {
                            decTaxAmount = 0;
                            txtLifeInsuranceCustomerPremiumAmountWT.Text = Convert.ToString(decFinalVal);
                            txtLifeInsuranceCustomerPremiumAmountWT.funPubChangeCurrencyFormat();
                            decTaxAmount = Math.Round((decFinalVal - decTaxPercentage / (100 + decTaxPercentage) * decFinalVal), 3);
                            txtInsuranceCustomerTaxAmount.Text = Math.Round((decFinalVal - decTaxAmount), 3).ToString();
                            txtInsuranceCustomerTaxAmount.funPubChangeCurrencyFormat();
                            txtLifeInsuranceCustomerPremiumAmount.Text = Convert.ToString(decTaxAmount);
                            txtLifeInsuranceCustomerPremiumAmount.funPubChangeCurrencyFormat();
                        }

                    }
                }
                #endregion

               
            }
            else
            {
                //Utility.FunShowAlertMsg(this, "Insurance Company Rate or Customer Rate not Defined in Entity Master");

                ddlLifeInsuranceEntity.Clear();
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege80));


            }
            funPriArriveFlatRateRate();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void txtFinanceAmount_TextChanged(object sender, EventArgs e)
    {
        try
        {
            txtLifeInsuranceCompanyRate.Text = string.Empty;
            txtLifeInsuranceCustRate.Text = string.Empty;
            txtLifeInsuranceCompanyAmount.Text = string.Empty;
            txtLifeInsuranceCustomerPremiumAmount.Text = string.Empty;
            txtInsuranceTaxRate.Text = string.Empty;
            txtInsuranceCompanyTaxAmount.Text = string.Empty;
            txtInsuranceCustomerTaxAmount.Text = string.Empty;
            txtLifeInsuranceCustomerPremiumAmountWT.Text = string.Empty;
            txtLifeInsuranceCompanyAmountWT.Text = string.Empty;
            txtFinanceAmount.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    //protected void btnCheckDealerComission_Click(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        string strEntityId = string.Empty;
    //        funPriGetDealerCommsissionDetails(strEntityId);
    //    }
    //    catch (Exception ex)
    //    {
    //        ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
    //    }
    //}
    //private void funPriGetDealerCommsissionDetails(string strEntityId)
    //{
    //    try
    //    {
    //        DataTable dtDealerCommission;
    //        if (HttpContext.Current.Session["CONSTITUTION_ID"] == null)
    //        {
    //            Utility.FunShowAlertMsg(this, "Constitution not Available");
    //            return;
    //        }
    //        if (HttpContext.Current.Session["CONTRACT_TYPE"] == null)
    //        {
    //            Utility.FunShowAlertMsg(this, "Contract Type not Selected in Application");
    //            return;
    //        }
    //        if (HttpContext.Current.Session["TSCSMP"] == null)
    //        {
    //            Utility.FunShowAlertMsg(this, "TCSMP not Available");
    //            return;
    //        }

    //        if (strEntityId == "0")
    //        {
    //            Utility.FunShowAlertMsg(this, "Select the Entity");
    //            return;
    //        }
    //        if (txtFinanceAmount.Text == string.Empty)
    //        {
    //            Utility.FunShowAlertMsg(this, "Enter the Finance Amount");
    //            return;
    //        }


    //        Dictionary<string, string> strProParm = new Dictionary<string, string>();
    //        strProParm.Add("@OPTION", "8");
    //        strProParm.Add("@COMPANYID", intCompanyId.ToString());
    //        strProParm.Add("@USERID", intUserId.ToString());
    //        strProParm.Add("@PROGRAMID", "38");
    //        strProParm.Add("@PAGE_MODE", "C");
    //        strProParm.Add("@Deal_Comm_Entity_id", strEntityId);
    //        strProParm.Add("@CONSTITUTION_ID", HttpContext.Current.Session["CONSTITUTION_ID"].ToString());
    //        strProParm.Add("@CONTRACT_TYPE", HttpContext.Current.Session["CONTRACT_TYPE"].ToString());
    //        strProParm.Add("@TCSMP_TYPE", HttpContext.Current.Session["TSCSMP"].ToString());
    //        strProParm.Add("@FinanaceAmount", txtFinanceAmount.Text);
    //        dtDealerCommission = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);
    //        if (dtDealerCommission.Rows.Count > 0)
    //        {
    //            //txtDealerCommissionBasisRate.Text = dtDealerCommission.Rows[0]["RATE"].ToString();
    //            //txtDealerCommissionAmount.Text = dtDealerCommission.Rows[0]["COMMISSION"].ToString();
    //            //hdnDealerCommissionId.Value = dtDealerCommission.Rows[0]["DEALER_COMM_ID"].ToString();
    //        }
    //        else
    //        {
    //            Utility.FunShowAlertMsg(this, "Dealer Comission Paramaters not Matching or Commission Details not defined in Dealer Comission");
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
    //    }
    //}


    protected void txtFacilityStartDate_TextChanged(object sender, EventArgs e)
    {
        try
        {



            if (txtFacilityStartDate.Text != string.Empty && txtFacilityEndDate.Text != string.Empty)
            {

                if (Utility.StringToDate(txtFacilityStartDate.Text) < Utility.StringToDate(txtApplicationDateFWC.Text))
                {
                    Utility.FunShowAlertMsg(this, "Facility start date should greater than the application date.");
                    txtFacilityStartDate.Text = string.Empty;
                    return;
                }

                if (Utility.StringToDate(txtFacilityEndDate.Text) < Utility.StringToDate(txtFacilityStartDate.Text))
                {
                    //Utility.FunShowAlertMsg(this, "Facility End Date Should be Greater than or equal to Facility Start Date");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege81));
                    txtFacilityEndDate.Text = string.Empty;
                    return;
                }
            }
            txtFacilityStartDate.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void txtFacilityEndDate_TextChanged(object sender, System.EventArgs e)
    {
        try
        {

            if (txtApplicationDateFWC.Text == string.Empty)
            {
                Utility.FunShowAlertMsg(this, "Enter the Application Date");
                return;
            }

            if (txtFacilityStartDate.Text != string.Empty && txtFacilityEndDate.Text != string.Empty)
            {

                if (Utility.StringToDate(txtFacilityStartDate.Text) < Utility.StringToDate(txtApplicationDateFWC.Text))
                {
                    Utility.FunShowAlertMsg(this, "Facility start date should greater than the application date.");
                    txtFacilityStartDate.Text = string.Empty;
                    return;
                }

                if (Utility.StringToDate(txtFacilityEndDate.Text) < Utility.StringToDate(txtFacilityStartDate.Text))
                {
                    //Utility.FunShowAlertMsg(this, "Facility End Date Should be Greater than or equal to Facility Start Date");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege81));
                    txtFacilityEndDate.Text = string.Empty;
                    return;
                }
            }
            txtFacilityEndDate.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void ddlStartDelayChargesApplicable_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            txtDelayDays.Text = string.Empty;
            txtStartDatedelayrate.Text = string.Empty;
            txtStartdelaycharges.Text = string.Empty;
            //txtOverDueCharges.Text = string.Empty;

            if (ddlStartDelayChargesApplicable.SelectedValue == "1")
            {
                //txtNoofDaystobeconsidered.Enabled = true;
                //txtDelayDays.Enabled = true;
                //txtStartDatedelayrate.Enabled = false;
                ////txtStartdelaycharges.Enabled = true;
                //txtStartdelaycharges.Enabled = false;
                ////txtOverDueCharges.Enabled = true;

                //rfvNoofDaystobeconsidered.Enabled = true;
                ////rfvOverDueCharges.Enabled = true;
                //rfvStartdelaychargesE.Enabled = true;
                //rfvStartDatedelayrate.Enabled = true;
                //rfvDelayDays.Enabled = true;

                //lblStartdelaycharges.CssClass = "styleReqFieldLabel";
                //lblNoDaystobeconsidered.CssClass = "styleReqFieldLabel";
                //lblDelayDays.CssClass = "styleReqFieldLabel";
                //lblStartDatedelayrate.CssClass = "styleReqFieldLabel";
                //lblStartdelaychargesE.CssClass = "styleReqFieldLabel";
                //lblOverDueCharges.CssClass = "styleReqFieldLabel";


                //if (ViewState["StartDelayRate"] != null)
                //{
                //    txtStartDatedelayrate.Text = Convert.ToInt32(ViewState["StartDelayRate"].ToString()).ToString(Funsetsuffix());

                //    txtStartdelaycharges.Text = ((Convert.ToDecimal(txtFinanceAmount.Text) * Convert.ToDecimal(txtStartDatedelayrate.Text)) / 100).ToString(Funsetsuffix());
                //}


                DataTable dtStatDelyCharge = new System.Data.DataTable();
                Dictionary<string, string> strProParm = new Dictionary<string, string>();
                strProParm.Add("@OPTION", "20");
                strProParm.Add("@COMPANYID", intCompanyId.ToString());
                strProParm.Add("@USERID", intUserId.ToString());
                strProParm.Add("@PROGRAMID", intProgramID.ToString());
                strProParm.Add("@LOB_ID", ddlLOB.SelectedValue);

                dtStatDelyCharge = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);

                if (dtStatDelyCharge.Rows.Count > 0)
                {
                    txtStartDatedelayrate.Text = Convert.ToDecimal(dtStatDelyCharge.Rows[0]["START_DELY_RATE"].ToString()).ToString("0.00").ToString();
                }
            }
            else
            {
                //txtNoofDaystobeconsidered.Enabled = false;
                //txtDelayDays.Enabled = false;
                //txtStartDatedelayrate.Enabled = false;
                //txtStartdelaycharges.Enabled = false;
                //rfvNoofDaystobeconsidered.Enabled = false;
                //rfvStartdelaychargesE.Enabled = false;
                //rfvStartDatedelayrate.Enabled = false;
                //rfvDelayDays.Enabled = false;
                //lblStartdelaycharges.CssClass = "styleDisplayLabel";
                //lblNoDaystobeconsidered.CssClass = "styleDisplayLabel";
                //lblDelayDays.CssClass = "styleDisplayLabel";
                //lblStartDatedelayrate.CssClass = "styleDisplayLabel";
                //lblStartdelaychargesE.CssClass = "styleDisplayLabel";


            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }



    protected void grvLienAccount_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {

    }
    protected void grvLienAccount_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblFinanceAmount = (Label)e.Row.FindControl("lblFinanceAmount");
            Label lblScheduleB = (Label)e.Row.FindControl("lblScheduleB");
            lblFinanceAmount.funPubChangeCurrencyFormat();
            lblScheduleB.funPubChangeCurrencyFormat();
        }


    }
    protected void btnAddLien_Click(object sender, EventArgs e)
    {

    }

    protected void btnLienAccount_Click(object sender, EventArgs e)
    {
        try
        {
            funPriLoadLienAcontractGrid();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriLoadLienAcontractGrid()
    {
        try
        {
            DataTable dtLienAccount = new DataTable();
            DataTable dtGetLienAccount = new DataTable();

            if (ViewState["LienAccount"] != null)
            {
                dtLienAccount = (DataTable)ViewState["LienAccount"];
            }

            if (ddlLienAccount.SelectedValue == "0")
            {

                Utility.FunShowAlertMsg(this, "Select the Lien Account");
                return;
            }


            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@OPTION", "17");
            strProParm.Add("@COMPANYID", intCompanyId.ToString());
            strProParm.Add("@USERID", intUserId.ToString());
            strProParm.Add("@PROGRAMID", intProgramID.ToString());
            strProParm.Add("@PAGE_MODE", "C");
            strProParm.Add("@PANUM", ddlLienAccount.SelectedValue);
            dtGetLienAccount = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);

            if (dtGetLienAccount.Rows.Count == 0)
            {
                //Utility.FunShowAlertMsg(this, "Contract Information not Available");
                Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege78));
                return;
            }

            if (dtLienAccount == null || dtLienAccount.Columns.Count == 0)
            {
                dtLienAccount = dtGetLienAccount.Clone();
            }



            int ISno = 1;
            if (dtLienAccount.Rows.Count > 0)
            {

                DataRow[] dr2 = dtLienAccount.Select("Contract_No_Id='" + ddlLienAccount.SelectedValue + "'");
                if (dr2.Length > 0)
                {
                    //Utility.FunShowAlertMsg(this, "Contract No Exists");
                    Utility.FunShowAlertMsg(this, Convert.ToString(Resources.LocalizationResources.Application_Process_Error_Messege79));
                    return;
                }


                ISno = Convert.ToInt32(dtLienAccount.Compute("max(sno)  ", "sno is not null").ToString()) + 1;
            }



            DataRow dr = dtLienAccount.NewRow();
            dr["sno"] = ISno;
            dr["Contract_No"] = ddlLienAccount.SelectedText;
            dr["Contract_No_Id"] = ddlLienAccount.SelectedValue;
            dr["finance_amount"] = Convert.ToDecimal(dtGetLienAccount.Rows[0]["finance_amount"].ToString()).ToString(Funsetsuffix());
            dr["tenure"] = dtGetLienAccount.Rows[0]["tenure"];

            dr["SCHB"] = Convert.ToDecimal(dtGetLienAccount.Rows[0]["SCHB"].ToString()).ToString(Funsetsuffix());

            dtLienAccount.Rows.Add(dr);
            grvLienAccount.DataSource = dtLienAccount;
            grvLienAccount.DataBind();

            ViewState["LienAccount"] = dtLienAccount;
            ddlLienAccount.Clear();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    [System.Web.Services.WebMethod]
    public static string[] GetLienAccountNo(String prefixText, int count)
    {

        Dictionary<string, string> Procparam;
        Procparam = new Dictionary<string, string>();
        List<String> suggetions = new List<String>();
        DataTable dtCommon = new DataTable();
        DataSet Ds = new DataSet();
        Procparam.Add("@COMPANYID", HttpContext.Current.Session["Company_Id"].ToString());
        Procparam.Add("@USERID", System.Web.HttpContext.Current.Session["User_Id"].ToString());
        Procparam.Add("@PREFIX", prefixText);
        Procparam.Add("@OPTION", "16");
        Procparam.Add("@PROGRAMID", "38");
        suggetions = Utility.GetSuggestions(Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", Procparam));
        return suggetions.ToArray();
    }
    protected void btnRemoveDaysLien_Click(object sender, EventArgs e)
    {
        try
        {


            string strFieldAtt = ((LinkButton)sender).ClientID;
            int gRowIndex = Utility.FunPubGetGridRowID("grvLienAccount", strFieldAtt);


            DataTable dtDelete;
            dtDelete = (DataTable)ViewState["LienAccount"];
            dtDelete.Rows.RemoveAt(gRowIndex);
            dtDelete.AcceptChanges();

            if (dtDelete.Rows.Count == 0)
            {
                grvLienAccount.DataSource = null;
                grvLienAccount.EmptyDataText = "No Records Found..";
                grvLienAccount.DataBind();
            }
            else
            {
                grvLienAccount.DataSource = dtDelete;
                grvLienAccount.DataBind();
                ViewState["LienAccount"] = dtDelete;

            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void chk_lblMargin_CheckedChanged(object sender, EventArgs e)
    {
        if (chk_lblMargin.Checked)
        {
            //txt_Margin_Percentage.Text = string.Empty;
            //txtMarginMoneyPer_Cashflow.Text = txtMarginMoneyAmount_Cashflow.Text = "";
            chk_lblMargin.Enabled = false;
            if (chk_lblMargin.Checked)
            {

                txt_Margin_Percentage.Enabled = true;

            }
            else
            {
                txt_Margin_Percentage.Enabled = false;
            }
        }
    }
    private void FunPriBindProductCharges(string StrProductID, string StrLobID)//Sathish R--14-Nov-2018
    {
        try
        {
            TextBox txtName = ucCustomerCodeLov.FindControl("txtName") as TextBox;
            objProcedureParameter = new Dictionary<string, string>();
            objProcedureParameter.Add("@LOB_ID", StrLobID);
            objProcedureParameter.Add("@Product_ID", StrProductID);
            objProcedureParameter.Add("@FinAmount", Convert.ToDecimal(txtFinanceAmount.Text).ToString());
            objProcedureParameter.Add("@Option", "31");
            DataTable dtProductCharge = Utility.GetDefaultData("S3G_OR_Get_PricgLst", objProcedureParameter);


            if (dtProductCharge.Rows.Count > 0)
            {
                DataTable dtInFlow = ((DataTable)ViewState["DtCashFlow"]);
                if (txtApplicationDateDate.Text != string.Empty)
                {
                    foreach (DataRow DrProductCharge in dtProductCharge.Rows)
                    {
                        if (DrProductCharge["Amount"].ToString() != string.Empty)
                        {
                            if (Convert.ToDecimal(DrProductCharge["Amount"].ToString()) > 0)
                            {
                                DataRow drInFlow = dtInFlow.NewRow();
                                drInFlow["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                                drInFlow["CashInFlowID"] = DrProductCharge["Cashflow_Id"];
                                drInFlow["CashInFlow"] = DrProductCharge["Cashinflow"];
                                drInFlow["EntityID"] = hdnCustID.Value;
                                drInFlow["Entity"] = txtName.Text;
                                drInFlow["InflowFromId"] = "144";
                                drInFlow["InflowFrom"] = "Customer";
                                drInFlow["Amount"] = Convert.ToDecimal(DrProductCharge["Amount"]).ToString(Funsetsuffix());
                                drInFlow["Accounting_IRR"] = DrProductCharge["Accounting_Irr"];
                                drInFlow["Business_IRR"] = DrProductCharge["Business_Irr"];
                                drInFlow["Company_IRR"] = DrProductCharge["Company_Irr"];
                                drInFlow["CashFlow_Flag_ID"] = DrProductCharge["CashFlow_Flag_ID"];
                                dtInFlow.Rows.Add(drInFlow);
                            }
                        }
                    }
                    ViewState["DtCashFlow"] = dtInFlow;

                    if (dtInFlow.Rows.Count > 0)
                    {
                        gvInflow.DataSource = dtInFlow;
                        gvInflow.DataBind();
                    }
                    FunPriGenerateNewInflow();
                }
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable to Load scheme charges");
        }
    }
    private void FunPriBindMarginMoneyInflow()//Sathish R--14-Nov-2018
    {
        try
        {

            TextBox txtName2 = (TextBox)ucCustomerCodeLov.FindControl("txtName");
            HiddenField hdnCID2 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");

            DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];

            if (dsAssetDetails != null)
            {

                decimal decTotalDownaymenttoMFC = Convert.ToDecimal(((DataTable)Session["PricingAssetDetails"]).Compute("sum(Margin_MFC_1)", "1=1").ToString());

                if (decTotalDownaymenttoMFC > 0)
                {
                    DtCashFlow = (DataTable)ViewState["DtCashFlow"];
                    DataSet dsUMFC = (DataSet)ViewState["InflowDDL"];
                    string[] strArrayIds = null;
                    string cashflowdesc = "";

                    foreach (DataRow drOut in dsUMFC.Tables[2].Rows)
                    {
                        string[] strCashflow = drOut["CashFlow_ID"].ToString().Split(',');
                        if (strCashflow[4].ToString() == "103")//Margin Money Receivable
                        {
                            strArrayIds = strCashflow;
                            cashflowdesc = drOut["CashFlow_Description"].ToString();
                        }
                    }
                    if (strArrayIds == null)
                    {
                        Utility.FunShowAlertMsg(this, "Margin Money Cashinflow not defined");
                        //return;
                    }

                    if (strArrayIds != null)
                    {
                        DataTable dtInFlow = ((DataTable)ViewState["DtCashFlow"]);
                        if (txtApplicationDateDate.Text != string.Empty)
                        {

                            DataRow drInFlow = dtInFlow.NewRow();
                            drInFlow["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                            drInFlow["CashInFlowID"] = strArrayIds[0];
                            drInFlow["CashInFlow"] = cashflowdesc;
                            drInFlow["EntityID"] = hdnCustID.Value;
                            drInFlow["Entity"] = txtName2.Text;
                            drInFlow["InflowFromId"] = "144";
                            drInFlow["InflowFrom"] = "Customer";
                            drInFlow["Amount"] = Convert.ToDecimal(decTotalDownaymenttoMFC).ToString(Funsetsuffix());
                            drInFlow["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                            drInFlow["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                            drInFlow["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                            drInFlow["CashFlow_Flag_ID"] = "103";//Margin Money Receivable
                            dtInFlow.Rows.Add(drInFlow);

                            ViewState["DtCashFlow"] = dtInFlow;
                            if (dtInFlow.Rows.Count > 0)
                            {
                                gvInflow.DataSource = dtInFlow;
                                gvInflow.DataBind();
                            }
                            FunPriGenerateNewInflow();
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable to Load scheme charges");
        }
    }
    protected void cmbSubLocation_SelectedIndexChanged(object sender, System.EventArgs e)
    {
        cmbSubLocation.Focus();
    }
    protected void ddlBusinessSource_SelectedIndexChanged(object sender, System.EventArgs e)
    {
        try
        {
            if (ddlBusinessSource.SelectedValue == "8")//if Dealer Driven
            {
                ddlDealerCommissionApplicable.SelectedValue = "1";
                ddlDealerCommissionApplicable_SelectedIndexChanged(null, null);
            }
            else
            {
                ddlDealerCommissionApplicable.SelectedValue = "0";
            }
            ddlBusinessSource.Focus();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    protected void gvFACCharges_RowEditing(object sender, GridViewEditEventArgs e)
    {
        try
        {
            int IEditIndex = 0;
            gvFACCharges.EditIndex = e.NewEditIndex;
            DataTable dtCHarge = (DataTable)ViewState["FACCharge"];
            gvFACCharges.DataSource = dtCHarge;
            gvFACCharges.DataBind();
            IEditIndex = e.NewEditIndex;


            DropDownList ddlCashInflowE = (DropDownList)gvFACCharges.Rows[e.NewEditIndex].FindControl("ddlCashInflowE");
            DropDownList ddlChargeSequenceE = (DropDownList)gvFACCharges.Rows[e.NewEditIndex].FindControl("ddlChargeSequenceE");
            DropDownList ddlChargeTypeE = (DropDownList)gvFACCharges.Rows[e.NewEditIndex].FindControl("ddlChargeTypeE");
            TextBox txtChargeAmountE = (TextBox)gvFACCharges.Rows[e.NewEditIndex].FindControl("txtChargeAmountE");






            txtChargeAmountE.SetPercentagePrefixSuffixInline(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, "Charge Amount");
            Procparm = new Dictionary<string, string>();
            Procparm.Add("@Company_ID", Convert.ToString(intCompanyId));
            if (ddlLOB.SelectedIndex > 0)
                Procparm.Add("@LOB_ID", ddlLOB.SelectedValue);
            DataSet dsInflowDtls = Utility.GetDataset("SA_GET_INFLOWFACAPP", Procparm);
            ddlCashInflowE.FillDataTable(dsInflowDtls.Tables[0], "Cashflow_Id", "Cashinflow");
            ddlChargeTypeE.BindDataTable(dsInflowDtls.Tables[1], new string[] { "Lookup_Id", "Name" });







            ddlCashInflowE.SelectedValue = dtCHarge.Rows[IEditIndex]["Cashflow_ID"].ToString();
            ddlChargeSequenceE.SelectedValue = dtCHarge.Rows[IEditIndex]["ChargeSequence_id"].ToString();
            ddlChargeTypeE.SelectedValue = dtCHarge.Rows[IEditIndex]["ChargeType_Id"].ToString();
            txtChargeAmountE.Text = dtCHarge.Rows[0]["Chargeamount"].ToString();



            //funPriCalculateTotalCharge();


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }



    }
    protected void gvFACCharges_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {

        try
        {
            int IEditIndex = 0;
            IEditIndex = e.RowIndex;

            DropDownList ddlCashInflowE = (DropDownList)gvFACCharges.Rows[IEditIndex].FindControl("ddlCashInflowE");
            DropDownList ddlChargeSequenceE = (DropDownList)gvFACCharges.Rows[IEditIndex].FindControl("ddlChargeSequenceE");
            DropDownList ddlChargeTypeE = (DropDownList)gvFACCharges.Rows[IEditIndex].FindControl("ddlChargeTypeE");
            TextBox txtChargeAmountE = (TextBox)gvFACCharges.Rows[IEditIndex].FindControl("txtChargeAmountE");
            DataTable dtCHarge = (DataTable)ViewState["FACCharge"];


            DataTable dt = ((DataTable)ViewState["dsInflowDtls"]);
            DataRow[] dr = dt.Select("Cashflow_ID='" + ddlCashInflowE.SelectedValue + "'  and CASHFLOW_FLAG_ID=36");
            if (dr.Length > 0)
            {
                if (ddlChargeSequenceE.SelectedValue != "4")
                {
                    Utility.FunShowAlertMsg(this, "Charge Sequence Per Transaction  Only Allowed for Cheque Return Charges");
                    return;
                }
            }

            DataRow[] d2 = dt.Select("Cashflow_ID='" + ddlCashInflowE.SelectedValue + "'");



            DataRow drCharge = dtCHarge.Rows[IEditIndex];
            drCharge["Cashflow_ID"] = ddlCashInflowE.SelectedValue;
            drCharge["Cashinflow"] = ddlCashInflowE.SelectedItem.Text;
            drCharge["ChargeSequence_id"] = ddlChargeSequenceE.SelectedValue;
            drCharge["ChargeSequence"] = ddlChargeSequenceE.SelectedItem.Text;
            drCharge["ChargeType_Id"] = ddlChargeTypeE.SelectedValue;
            drCharge["ChargeType"] = ddlChargeTypeE.SelectedItem.Text;
            drCharge["Chargeamount"] = txtChargeAmountE.Text;
            drCharge["CASHFLOW_FLAG_ID"] = d2.CopyToDataTable().Rows[0]["CASHFLOW_FLAG_ID"].ToString();

            dtCHarge.AcceptChanges();

            gvFACCharges.EditIndex = -1;
            gvFACCharges.DataSource = dtCHarge;
            gvFACCharges.DataBind();
            ViewState["FACCharge"] = dtCHarge;
            //funPriCalculateTotalCharge();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void gvFACCharges_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        try
        {
            DataTable dtCHarge;
            gvFACCharges.EditIndex = -1;
            dtCHarge = (DataTable)ViewState["FACCharge"];
            gvFACCharges.DataSource = dtCHarge;
            gvFACCharges.DataBind();
            //funPriCalculateTotalCharge();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    private void funPriCalculateTotalCharge()
    {
        try
        {
            decimal decTotalCharge = 0;

            foreach (GridViewRow gv in gvFACCharges.Rows)
            {
                Label lblChargeAmount = gv.FindControl("lblChargeAmount") as Label;
                decTotalCharge = decTotalCharge + Convert.ToDecimal(lblChargeAmount.Text);
            }
            txtTotalChargeAmount.Text = decTotalCharge.ToString(Funsetsuffix());
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void grvDiscountRateforUtilization_RowEditing(object sender, GridViewEditEventArgs e)
    {
        try
        {

            int IEditIndex = 0;
            IEditIndex = e.NewEditIndex;
            grvDiscountRateforUtilization.EditIndex = IEditIndex;

            DataTable dtDiscountRateUtilization = (DataTable)ViewState["DiscountRateUtilization"];
            grvDiscountRateforUtilization.DataSource = dtDiscountRateUtilization;
            grvDiscountRateforUtilization.DataBind();


            TextBox txtStartSlabE = (TextBox)grvDiscountRateforUtilization.Rows[IEditIndex].FindControl("txtStartSlabE");
            TextBox txtEndSlabE = (TextBox)grvDiscountRateforUtilization.Rows[IEditIndex].FindControl("txtEndSlabE");
            TextBox txtDiscRateE = (TextBox)grvDiscountRateforUtilization.Rows[IEditIndex].FindControl("txtDiscRateE");

            txtStartSlabE.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, "Start Slab");
            txtEndSlabE.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, true, "End Slab");
            txtDiscRateE.SetDecimalPrefixSuffix(3, ObjS3GSession.ProGpsSuffixRW, false, false, "Disc.Rate");





            txtStartSlabE.Text = dtDiscountRateUtilization.Rows[IEditIndex]["Start_Slab"].ToString();
            txtEndSlabE.Text = dtDiscountRateUtilization.Rows[IEditIndex]["End_Slab"].ToString();
            txtDiscRateE.Text = dtDiscountRateUtilization.Rows[IEditIndex]["Discount_Rate"].ToString();

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }




    }
    protected void grvDiscountRateforUtilization_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        try
        {
            grvDiscountRateforUtilization.EditIndex = -1;
            DataTable dtDiscountRateUtilization = (DataTable)ViewState["DiscountRateUtilization"];
            grvDiscountRateforUtilization.DataSource = dtDiscountRateUtilization;
            grvDiscountRateforUtilization.DataBind();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void grvDiscountRateforUtilization_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        try
        {
            int IEditIndex = 0;
            IEditIndex = e.RowIndex;

            DataTable dtDiscountRateUtilization = (DataTable)ViewState["DiscountRateUtilization"];



            TextBox txtStartSlabE = (TextBox)grvDiscountRateforUtilization.Rows[IEditIndex].FindControl("txtStartSlabE");
            TextBox txtEndSlabE = (TextBox)grvDiscountRateforUtilization.Rows[IEditIndex].FindControl("txtEndSlabE");
            TextBox txtDiscRateE = (TextBox)grvDiscountRateforUtilization.Rows[IEditIndex].FindControl("txtDiscRateE");

            if (Convert.ToDecimal(txtEndSlabE.Text) > Convert.ToDecimal(txtPrePaymentLimitFWC.Text))
            {
                Utility.FunShowAlertMsg(this, "Maximum range amount should not exceed prepayment limit (" + txtPrePaymentLimitFWC.Text + ")");
                txtEndSlabE.Text = string.Empty;
                return;
            }


            DataRow drDiscountRate = dtDiscountRateUtilization.Rows[IEditIndex];
            drDiscountRate["Start_Slab"] = Convert.ToDecimal(txtStartSlabE.Text);
            drDiscountRate["End_Slab"] = Convert.ToDecimal(txtEndSlabE.Text);
            drDiscountRate["Discount_Rate"] = Convert.ToDecimal(txtDiscRateE.Text);
            dtDiscountRateUtilization.AcceptChanges();

            grvDiscountRateforUtilization.EditIndex = -1;
            grvDiscountRateforUtilization.DataSource = dtDiscountRateUtilization;
            grvDiscountRateforUtilization.DataBind();
            ViewState["DiscountRateUtilization"] = dtDiscountRateUtilization;


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void funPriLoadPromoterGrid()
    {
        try
        {
            DataTable dt = new System.Data.DataTable();
            dt.Columns.Add("Sno", typeof(int));
            dt.Columns.Add("PromoterName", typeof(string));
            dt.Columns.Add("IdentificatonType", typeof(string));
            dt.Columns.Add("IdentificatonType_Id", typeof(int));
            dt.Columns.Add("IdentificationValue", typeof(string));

            DataRow dr = dt.NewRow();
            dr["Sno"] = "-1";
            dt.Rows.Add(dr);
            dt.AcceptChanges();
            ViewState["PromoterGrid"] = dt;
            grvPropomoter.DataSource = dt;
            grvPropomoter.DataBind();
            grvPropomoter.Rows[0].Visible = false;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }
    protected void grvApplicanAppraisalInformation_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblISGROUP = (Label)e.Row.FindControl("lblISGROUP");
            Label lblAPPRAISALINFONAME = (Label)e.Row.FindControl("lblAPPRAISALINFONAME");
            Label lblAPPRAISALINFOID = (Label)e.Row.FindControl("lblAPPRAISALINFOID");
            Label lblisEditable = (Label)e.Row.FindControl("lblisEditable");
            Label lblisPostbakc = (Label)e.Row.FindControl("lblisPostbakc");

            AjaxControlToolkit.FilteredTextBoxExtender fltlblVaue = (AjaxControlToolkit.FilteredTextBoxExtender)e.Row.FindControl("fltlblVaue");

            TextBox lblVaue = (TextBox)e.Row.FindControl("lblVaue");
            TextBox txtRemarks = (TextBox)e.Row.FindControl("txtRemarks");

            Label lblAPPRAISALINFODATATYPE = (Label)e.Row.FindControl("lblAPPRAISALINFODATATYPE");




            if (lblISGROUP.Text == "1")
            {
                lblAPPRAISALINFONAME.Font.Bold = true;
                lblAPPRAISALINFONAME.Style.Add("text-decoration", "underline");
                lblVaue.Visible = false;
                txtRemarks.Visible = false;

            }

            if (lblAPPRAISALINFODATATYPE.Text == "1" || lblAPPRAISALINFODATATYPE.Text == "2")
            {


                fltlblVaue.Enabled = true;
                lblVaue.Style["text-align"] = "right";
                lblVaue.SetDecimalPrefixSuffix(ObjS3GSession.ProGpsPrefixRW, ObjS3GSession.ProGpsSuffixRW, false, false, lblAPPRAISALINFONAME.Text);
                lblVaue.Text = Convert.ToDecimal(lblVaue.Text).ToString(Funsetsuffix());
                lblVaue.funPubChangeCurrencyFormat();
                lblVaue.Attributes.Add("onchange", "fnthousands_separators('" + lblVaue.ClientID + "',2);");
            }
            else
            {
                lblVaue.Attributes.Add("onkeyup", "maxlengthfortxt(150);");
                fltlblVaue.Enabled = false;
            }

            if (lblisEditable.Text == "0")
            {
                lblVaue.Enabled = false;
                txtRemarks.Enabled = false;
            }
            //if (ddlApplicationNo.SelectedValue != string.Empty && ddlApplicationNo.SelectedValue != "0")
            if ((ddlApplicationNo.SelectedValue != string.Empty && ddlApplicationNo.SelectedValue != "0") && (strMode == "Q"))
            {
                lblVaue.Enabled = false;
                txtRemarks.Enabled = false;
            }


            if (lblisPostbakc.Text == "1")
            {

                lblVaue.AutoPostBack = true;
            }
            else
            {
                lblVaue.AutoPostBack = false;
            }


        }
    }
    protected void lblVaue_TextChanged(object sender, System.EventArgs e)
    {
        try
        {
            decimal decNDI = 0;
            decimal decProposedInstallment = 0;
            decimal decMONTHLY_PAYMENT_COMMITMENTS = 0;
            int ICount = 0;
            int IGridCount = grvApplicanAppraisalInformation.Rows.Count;

            TextBox txtDyanValue = (TextBox)sender;
            int intRowIndex = Utility.FunPubGetGridRowID("grvApplicanAppraisalInformation", ((TextBox)sender).ClientID);
            Label lblAPPRAISALINFOID = grvApplicanAppraisalInformation.Rows[intRowIndex].FindControl("lblAPPRAISALINFOID") as Label;


            if (lblAPPRAISALINFOID.Text == "OTHI" || lblAPPRAISALINFOID.Text == "PI")
            {
                foreach (GridViewRow gv in grvApplicanAppraisalInformation.Rows)
                {
                    ICount = ICount + 1;
                    TextBox txttxtDyanValueR = gv.FindControl("lblVaue") as TextBox;
                    Label lblAPPRAISALINFOID2 = gv.FindControl("lblAPPRAISALINFOID") as Label;
                    if (lblAPPRAISALINFOID2.Text == "NMIFEMP" || lblAPPRAISALINFOID2.Text == "MOI" || lblAPPRAISALINFOID2.Text == "OTHI")
                    {
                        if (txttxtDyanValueR.Text != string.Empty)
                        {
                            decNDI = decNDI + Convert.ToDecimal(txttxtDyanValueR.Text);
                        }
                    }

                    if (lblAPPRAISALINFOID2.Text == "NDI")
                    {
                        txttxtDyanValueR.Text = decNDI.ToString(Funsetsuffix());
                    }
                    if (lblAPPRAISALINFOID2.Text == "PI")
                    {
                        decProposedInstallment = Convert.ToDecimal(txttxtDyanValueR.Text);
                    }

                    if (lblAPPRAISALINFOID2.Text == "MPC")
                    {
                        decMONTHLY_PAYMENT_COMMITMENTS = Convert.ToDecimal(txttxtDyanValueR.Text);
                    }


                    if (lblAPPRAISALINFOID2.Text == "NDIP")
                    {
                        if (decNDI > 0)
                        {
                            txttxtDyanValueR.Text = ((decProposedInstallment / decNDI) * 100).ToString(Funsetsuffix());
                        }
                    }

                    if (IGridCount == ICount)
                    {
                        if (decMONTHLY_PAYMENT_COMMITMENTS > 0)
                        {

                            if (txttxtDyanValueR.Text != string.Empty)
                            {
                                decNDI = decNDI - decMONTHLY_PAYMENT_COMMITMENTS;
                                TextBox lblVaueF = grvApplicanAppraisalInformation.Rows[19].FindControl("lblVaue") as TextBox;
                                lblVaueF.Text = decNDI.ToString(Funsetsuffix());
                            }
                            if (decNDI > 0)
                            {
                                TextBox lblVaueFNDIP = grvApplicanAppraisalInformation.Rows[21].FindControl("lblVaue") as TextBox;
                                lblVaueFNDIP.Text = ((decProposedInstallment / decNDI) * 100).ToString(Funsetsuffix());
                            }

                        }
                    }
                }

            }
        }
        catch (Exception ex)
        {

        }
    }

    protected void grvApplicanAppraisalInformation_RowCommand(object sender, GridViewCommandEventArgs e)
    {

    }
    protected void grvApplicanAppraisalInformation_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {

    }
    protected void grvApplicanAppraisalInformation_RowEditing(object sender, GridViewEditEventArgs e)
    {

    }
    protected void grvApplicanAppraisalInformation_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {

    }
    protected void grvApplicanAppraisalInformation_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {

    }
    protected void grvPropomoter_RowEditing(object sender, GridViewEditEventArgs e)
    {

    }
    protected void grvPropomoter_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {

    }
    protected void grvPropomoter_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {

    }
    protected void grvPropomoter_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.Footer)
        {

            DataTable dtPromoIdentification = (DataTable)ViewState["PromoterIdentification"];
            DropDownList ddlIdentificationType = e.Row.FindControl("ddlIdentificationType") as DropDownList;
            ddlIdentificationType.FillDataTable(dtPromoIdentification, "ID", "NAME");

        }
    }
    protected void grvPropomoter_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        DataTable dtPromoterGrid = (DataTable)ViewState["PromoterGrid"];
        if (dtPromoterGrid.Rows.Count > 0)
        {
            dtPromoterGrid.Rows[e.RowIndex].Delete();
            grvPropomoter.DataSource = dtPromoterGrid;
            grvPropomoter.EmptyDataText = "No Records Found";
            grvPropomoter.DataBind();
            dtPromoterGrid.AcceptChanges();
            ViewState["PromoterGrid"] = dtPromoterGrid;

            if (dtPromoterGrid.Rows.Count == 0)
            {
                funPriLoadPromoterGrid();
            }

        }

    }
    protected void btnAdd_Click(object sender, System.EventArgs e)
    {

    }

    protected void btnAddPromoter_Click(object sender, System.EventArgs e)//Sathish R--24-Jan-2019
    {

        try
        {
            DataTable dtPromo = (DataTable)ViewState["PromoterGrid"];

            TextBox txtPromoter = grvPropomoter.FooterRow.FindControl("txtPromoter") as TextBox;
            DropDownList ddlIdentificationType = grvPropomoter.FooterRow.FindControl("ddlIdentificationType") as DropDownList;
            TextBox txtIdenValue = grvPropomoter.FooterRow.FindControl("txtIdenValue") as TextBox;

            if (dtPromo == null)
            {
                funPriLoadPromoterGrid();
            }

            DataRow[] dr = dtPromo.Select("Sno=-1");
            if (dr.Length > 0)
            {
                foreach (DataRow dr2 in dr)
                {
                    dr2.Delete();
                }
            }
            dtPromo.AcceptChanges();
            DataRow dr3 = dtPromo.NewRow();

            dr3["Sno"] = grvPropomoter.Rows.Count + 1;
            dr3["PromoterName"] = txtPromoter.Text;
            dr3["IdentificatonType"] = ddlIdentificationType.SelectedItem.Text;
            dr3["IdentificatonType_Id"] = ddlIdentificationType.SelectedValue;
            dr3["IdentificationValue"] = txtIdenValue.Text;

            dtPromo.Rows.Add(dr3);
            dtPromo.AcceptChanges();
            ViewState["PromoterGrid"] = dtPromo;
            grvPropomoter.DataSource = dtPromo;
            grvPropomoter.EmptyDataText = "No Records Found";
            grvPropomoter.DataBind();
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void btnViewCustomer_Click(object sender, System.EventArgs e)
    {




    }
    protected void ddlSalePersonCodeList_Item_Selected(object Sender, System.EventArgs e)
    {
        TextBox txtName2 = (TextBox)ucCustomerCodeLov.FindControl("TxtName");
        txtName2.Focus();
    }
    protected void txtOverDueCharges_TextChanged(object sender, System.EventArgs e)
    {
        try
        {
            if (txtOverDueCharges.Text != string.Empty)
            {

                if (Convert.ToDecimal(txtOverDueCharges.Text) == 0)
                {
                    Utility.FunShowAlertMsg(this, "Over Due Rate should be greater than Zero");
                    txtOverDueCharges.Text = string.Empty;
                    return;
                }

                if (Convert.ToDecimal(txtOverDueCharges.Text) > 100)
                {
                    Utility.FunShowAlertMsg(this, "Over Due Rate should not be greater than 100");
                    txtOverDueCharges.Text = string.Empty;
                    ddlLifeInsurance.Focus();
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }
    protected void btnGuar_Click(object sender, System.EventArgs e)
    {
        try
        {
            HtmlButton btnCreateCustomerGuarantor = (HtmlButton)gvGuarantor.FooterRow.FindControl("btnCreateCustomerGuarantor");
            btnCreateCustomerGuarantor.Disabled = true;



            UserControls_CommonSearch ucCustomerLov = gvGuarantor.FooterRow.FindControl("ucCustomerLov") as UserControls_CommonSearch;
            DropDownList ddlGuarantortype_GuarantorTab1 = gvGuarantor.FooterRow.FindControl("ddlGuarantortype_GuarantorTab") as DropDownList;
            TextBox txtName = ucCustomerLov.FindControl("txtName") as TextBox;
            TextBox txtItemName = ucCustomerLov.FindControl("txtItemName") as TextBox;
            HiddenField hdnCID2 = (HiddenField)ucCustomerLov.FindControl("hdnID");

            //if (txtName.Text == string.Empty)
            //{
            txtName.Text = txtItemName.Text;
            //}





        }
        catch (Exception ex)
        {

        }


    }
    protected void ddlStatus_SelectedIndexChanged(object sender, System.EventArgs e)
    {
        if (ddlStatus.SelectedValue != "1" && ddlStatus.SelectedValue != "3")
        {
            Utility.FunShowAlertMsg(this, "Status not allowed");

            if (ViewState["App_Status"] != null)
            {
                ddlStatus.SelectedValue = ViewState["App_Status"].ToString();
            }
            return;
        }

        if (ddlStatus.SelectedValue == "3")
        {
            rfvGenRemarks.Enabled = true;
            lblGeneralRemarks.CssClass = "styleReqFieldLabel";
        }
        else
        {
            lblGeneralRemarks.CssClass = "styleDisplayLabel";
        }
    }


    protected void txtFloorRate_TextChanged(object sender, System.EventArgs e)
    {

    }
    protected void txtGracePeriodInDays_TextChanged(object sender, System.EventArgs e)
    {
        if (txtGracePeriodInDays.Text != string.Empty)
        {
            if (Convert.ToDecimal(txtGracePeriodInDays.Text) > Convert.ToDecimal(txtCreditPeriodInDays.Text))
            {
                Utility.FunShowAlertMsg(this, lblGracePeriodInDays.Text + " Should be greater than or equal to " + lblCreditPeriodInDays.Text);
                txtGracePeriodInDays.Text = string.Empty;
                return;
            }
        }
        txtGracePeriodInDays.Focus();
    }
    protected void txtDisbuteGracePeriodInDays_TextChanged(object sender, System.EventArgs e)
    {
        if (txtDisbuteGracePeriodInDays.Text != string.Empty)
        {
            if (Convert.ToDecimal(txtDisbuteGracePeriodInDays.Text) > Convert.ToDecimal(txtCreditPeriodInDays.Text))
            {
                Utility.FunShowAlertMsg(this, lblDisbuteGracePeriodInDays.Text + " Should be greater than or equal to " + lblCreditPeriodInDays.Text);
                txtDisbuteGracePeriodInDays.Text = string.Empty;
                return;
            }
        }
        txtDisbuteGracePeriodInDays.Focus();

    }
    protected void ddlInstallmentRoundOff_SelectedIndexChanged(object sender, System.EventArgs e)
    {
        txtBusinessIRR_Repay.Text = string.Empty;
        ViewState["IntInstallmentRoundofPosition"] = ddlInstallmentRoundOff.SelectedValue;
    }


    protected void chkStageStatus_CheckedChanged(object sender, System.EventArgs e)
    {
        if (chkDataEntryStage.Checked)
        {
            //TabContainerAP.Tabs[8].Enabled = false;
            //ChkDataEntryRootback.Checked = false;
        }
        else
        {
            //TabContainerAP.Tabs[8].Enabled = false;
            //ChkDataEntryRootback.Checked = true;
        }
    }

    protected void ChkDataEntryRootback_CheckedChanged(object sender, System.EventArgs e)
    {
        //if (ChkDataEntryRootback.Checked)
        //{
        //    chkDataEntryStage.Checked = false;
        //    chkRiskStage.Checked = false;
        //}
        //else
        //{
        //    chkDataEntryStage.Checked = true;
        //    //chkRiskStage.Checked = true;
        //}
    }

    protected void chkRiskStage_CheckedChanged(object sender, System.EventArgs e)
    {
        //if (chkRiskStage.Checked)
        //{
        //    lblRiskRating.CssClass = "styleReqFieldLabel";
        //    lblRiskRemarks.CssClass = "styleReqFieldLabel";
        //    lblRiskScore.CssClass = "styleReqFieldLabel";
        //    lblRiskDocumentNo.CssClass = "styleReqFieldLabel";
        //    lblRiskQualityValue.CssClass = "styleReqFieldLabel";
        //    lblAMLCalsification.CssClass = "styleReqFieldLabel";

        //    rfvddlRiskRating.Enabled = true;
        //    rfvtxtRiskRemarks.Enabled = true;
        //    rfvtxtRiskScore.Enabled = true;
        //    rfvtxtRiskDocumentNo.Enabled = true;
        //    rfvddlRiskQualityValue.Enabled = true;
        //    rfvtxtAMLClasification.Enabled = true;
        //}
        //else
        //{
        //    lblRiskRating.CssClass = "styleDisplayLabel";
        //    lblRiskRemarks.CssClass = "styleDisplayLabel";
        //    lblRiskScore.CssClass = "styleDisplayLabel";
        //    lblRiskDocumentNo.CssClass = "styleDisplayLabel";
        //    lblRiskQualityValue.CssClass = "styleDisplayLabel";
        //    lblAMLCalsification.CssClass = "styleDisplayLabel";

        //    rfvddlRiskRating.Enabled = false;
        //    rfvtxtRiskRemarks.Enabled = false;
        //    rfvtxtRiskScore.Enabled = false;
        //    rfvtxtRiskDocumentNo.Enabled = false;
        //    rfvddlRiskQualityValue.Enabled = false;
        //    rfvtxtAMLClasification.Enabled = false;
        //}
    }

    protected void chkRiskStageRootback_CheckedChanged(object sender, System.EventArgs e)
    {
        try
        {

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }
    }
    protected void ddlUserType_SelectedIndexChanged(object sender, System.EventArgs e)
    {

    }

    protected void grvRepayStructure_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.Footer)
        {
            try
            {
                //grvRepayStructure.FooterRow.Cells[1].Text = "Total";
            }
            catch (Exception ex)
            {
            }
        }
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            try
            {
                e.Row.Cells[5].Text = Utility.funPubChangeCurrencyFormat(e.Row.Cells[5].Text);
                e.Row.Cells[6].Text = Utility.funPubChangeCurrencyFormat(e.Row.Cells[6].Text);
                e.Row.Cells[7].Text = Utility.funPubChangeCurrencyFormat(e.Row.Cells[7].Text);
                e.Row.Cells[8].Text = Utility.funPubChangeCurrencyFormat(e.Row.Cells[8].Text);
                e.Row.Cells[9].Text = Utility.funPubChangeCurrencyFormat(e.Row.Cells[9].Text);
                e.Row.Cells[10].Text = Utility.funPubChangeCurrencyFormat(e.Row.Cells[10].Text);
                e.Row.Cells[11].Text = Utility.funPubChangeCurrencyFormat(e.Row.Cells[11].Text);
                e.Row.Cells[12].Text = Utility.funPubChangeCurrencyFormat(e.Row.Cells[12].Text);
                e.Row.Cells[13].Text = Utility.funPubChangeCurrencyFormat(e.Row.Cells[13].Text);
                //grvRepayStructure.FooterRow.Cells[1].Text = "Total";
            }
            catch (Exception ex)
            {
            }
        }
    }
    protected void ddlCode_GuarantorTab_Click(object sender, System.EventArgs e)
    {
        try
        {
            int intRowIndex = Utility.FunPubGetGridRowID("gvGuarantorFromDMS", ((LinkButton)sender).ClientID);

            Label lblstgGuarAutoId = gvGuarantorFromDMS.Rows[intRowIndex].FindControl("lblstgGuarAutoId") as Label;

            if (gvGuarantorFromDMS.FooterRow != null)
            {
                UserControls_CommonSearch ucCustomerLov = gvGuarantor.FooterRow.FindControl("ucCustomerLov") as UserControls_CommonSearch;
                ucCustomerLov.SelectedText = ((LinkButton)sender).Text;



                string strNewWin = string.Empty;
                strNewWin = "window.open('../Credit Admin/S3GOrgCustomerMaster_Add.aspx?IsFromApplicationGuarantor=Yes& qsMode=C&NewCustomerID=" + lblstgGuarAutoId.Text + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
                ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strNewWin, true);
                this.Focus();
                return;
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
    }

    private void FunPriLoadRiskApprovalDetails()
    {
        try
        {
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_ID", Convert.ToString(intCompanyId));
            Procparam.Add("@PRICING_ID", Convert.ToString(intApplicationProcessId));

            DataSet ds_PricingDetails = Utility.GetDataset("S3G_ORG_GET_RISKPROPINFO", Procparam);

            if (ds_PricingDetails != null)
            {
                txtProposalNumber.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Business_Offer_Number"]);

                ViewState["LOB"] = ds_PricingDetails.Tables[2];

                if (ddlLOB.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["LOB_ID"])) != null)
                {
                    ddlLOB.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["LOB_ID"])).Selected = true;
                }
                else
                {
                    System.Web.UI.WebControls.ListItem lstitem = new System.Web.UI.WebControls.ListItem();
                    lstitem.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["LOB_DESC"]);
                    lstitem.Value = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["LOB_ID"]);
                    ddlLOB.Items.Add(lstitem);
                    ddlLOB.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["LOB_ID"]);
                }

                if (hdnLobCode.Value.ToUpper() == "FT" || hdnLobCode.Value.ToUpper() == "WC")
                {
                    funPriLoadFWCCheckList(ds_PricingDetails);
                    return;
                }
                if (ddlBranchList.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Location_ID"])) != null)
                {
                    ddlBranchList.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Location_ID"])).Selected = true;
                }
                else
                {
                    System.Web.UI.WebControls.ListItem lstitem = new System.Web.UI.WebControls.ListItem();
                    lstitem.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Location"]);
                    lstitem.Value = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Location_ID"]);
                    ddlBranchList.Items.Add(lstitem);
                    ddlBranchList.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Location_ID"]);
                }

                cmbLocation_SelectedIndexChanged(null, null);

                if (cmbSubLocation.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"])) != null)
                {
                    cmbSubLocation.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"])).Selected = true;
                }
                else
                {
                    System.Web.UI.WebControls.ListItem lstitem = new System.Web.UI.WebControls.ListItem();
                    lstitem.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION"]);
                    lstitem.Value = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"]);
                    cmbSubLocation.Items.Add(lstitem);
                    cmbSubLocation.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SUB_LOCATION_ID"]);
                }

                HttpContext.Current.Session["ddlContType"] = ddlContType.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["CONTRACT_TYPE"]);
                ddlDealType.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["DEAL_TYPE"]);
                ddlDealerName.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["DEALER_ID"]);
                ddlDealerName.SelectedText = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Dealer_Name"]);
                ddlSalePersonCodeList.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SALES_PERSON_ID"]);
                ddlSalePersonCodeList.SelectedText = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Sales_Person_Name"]);

                ddlProductCodeList.ClearSelection();
                if (ddlProductCodeList.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"])) != null)
                {
                    ddlProductCodeList.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"])).Selected = true;
                }
                else
                {
                    ListItem lstitem = new ListItem();
                    lstitem.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["PRODUCT"]);
                    lstitem.Value = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"]);
                    ddlProductCodeList.Items.Add(lstitem);
                    ddlProductCodeList.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Product_ID"]);
                }
                ddlProductCodeList_SelectedIndexChanged(null, null);

                txtFinanceAmount.Text = Utility.funPubChangeCurrencyFormat(Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["FACILITY_AMOUNT"]));
                txtTenure.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Tenure"]);
                ddlTenureType.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Tenure_Type"]);
                ddldealerSalesPerson.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["DEALER_SALESPERSON_ID"]);
                ddldealerSalesPerson.SelectedText = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["Dealer_Sales_Persion"]);

                txtSellerName.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SELLER_NAME"]);
                txtSellerCode.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["SELLER_ID"]);

                TextBox txtName = (TextBox)ucCustomerCodeLov.FindControl("txtName");
                txtName.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["customer"]);
                HiddenField hdnCID = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");
                hdnCID.Value = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["customer_id"]);
                ViewState["ConsitutionId"] = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["CONSTITUTION_ID"]);

                btnLoadCustomer_Click(null, null);
                txtAccountNumber.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["AccountNumber"]);
                hdnCustID.Value = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["customer_id"]);
                ddlDealerName_Item_Selected(null, null);
                txtFirstInstallDate.Text = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["PDC_STARTDATE"]);
                if (Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["PDC_STARTDATE"]) != string.Empty)
                    txtPdcStartDate.Text = Utility.StringToDate(ds_PricingDetails.Tables[0].Rows[0]["PDC_STARTDATE"].ToString()).ToString(strDateFormat);
                txtPDCEndDate.Text = Utility.StringToDate(txtPdcStartDate.Text).AddMonths(Convert.ToInt32(txtTenure.Text)).ToString(strDateFormat);

                ViewState["IntInstallmentRoundofPosition"] = ddlInstallmentRoundOff.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[0].Rows[0]["INS_ROUND_OFF_POS"]);
                ddlInstallmentRoundOff.ClearDropDownList();

                ddlLOB_SelectedIndexChangedModifyEnableDisableControls();

                //Risk Details Starts here

                if (ddlRiskRating.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISKTEAM_RISK_RATING"])) != null)
                {
                    ddlRiskRating.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISKTEAM_RISK_RATING"])).Selected = true;
                }
                else
                {
                    ListItem lstitem = new ListItem();
                    lstitem.Text = Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["Risk_Quality_Desc"]);
                    lstitem.Value = Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISKTEAM_RISK_RATING"]);
                    ddlRiskRating.Items.Add(lstitem);
                    ddlRiskRating.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISKTEAM_RISK_RATING"]);
                }

                if (ddlRiskQualityValue.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISK_QLTY_VALUE"])) != null)
                {
                    ddlRiskQualityValue.Items.FindByValue(Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISK_QLTY_VALUE"])).Selected = true;
                }
                else
                {
                    ListItem lstitem = new ListItem();
                    lstitem.Text = Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["Risk_Quality_Desc"]);
                    lstitem.Value = Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISK_QLTY_VALUE"]);
                    ddlRiskQualityValue.Items.Add(lstitem);
                    ddlRiskQualityValue.SelectedValue = Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISK_QLTY_VALUE"]);
                }

                txtRiskRemarks.Text = Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISK_REMARKS"]);
                txtRiskScore.Text = Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISK_VALUE"]);
                txtRiskDocumentNo.Text = Convert.ToString(ds_PricingDetails.Tables[1].Rows[0]["RISK_DOC_NO"]);

                //Risk Details Ends here

                funPriLoadAppriasalInfo("", ViewState["ConsitutionId"].ToString(), ddlProductCodeList.SelectedValue, ddlLOB.SelectedValue);

            }

        }
        catch (Exception objException)
        {
            throw objException;
        }
    }


    protected void btnKYCPDFPrint_ServerClick(object sender, System.EventArgs e)
    {
        try
        {

            if (ddlTemplateType.SelectedValue == "1")
            {
                int intTemplateType = 0;
                String strHTML = String.Empty;
                string strReportType = string.Empty;
                var filepaths = new List<string>();
                var outputfilepaths = new List<string>();
                string FileName = "";
                string FilePath = "";
                string DownFile = "";

                Dictionary<string, string> dictParam;
                dictParam = new Dictionary<string, string>();
                dictParam.Add("@Company_Id", Convert.ToString(intCompanyId));
                dictParam.Add("@User_Id", Convert.ToString(intUserId));
                dictParam.Add("@APPLICATION_PROCESS_ID", Convert.ToString(intApplicationProcessId));
                DataSet dsHeader = new DataSet();
                dsHeader = Utility.GetDataset("GET_APP_KYC_PRINT", dictParam);
                Session["ApplicationKYCDetails"] = dsHeader;
                if (dsHeader.Tables[0].Rows.Count > 0)
                {
                    strHTML = string.Empty;
                    if (dsHeader.Tables[0].Rows[0]["CUSTOMER_TYPE_ID"].ToString() == "1")
                    {
                        intTemplateType = 107;

                        strHTML = PDFPageSetup.FunPubGetTemplateContent(intCompanyId, intProgramID, 1 /*English*/, intTemplateType, intApplicationProcessId.ToString());
                        if (strHTML == "")
                        {
                            Utility.FunShowAlertMsg(this.Page, ValidationMsgs.PMTPRT1);//107
                            return;
                        }
                        FileName = PDFPageSetup.FunPubGetFileName(intApplicationProcessId + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss"));
                        FilePath = Server.MapPath(".") + "\\PDF Files\\";
                        DownFile = FilePath + FileName + ".pdf";
                        SaveDocument(strHTML, txtApplication_Followup.Text, FilePath, FileName, "1");
                        filepaths.Add(DownFile);
                    }
                    if (dsHeader.Tables[0].Rows[0]["CUSTOMER_TYPE_ID"].ToString() == "2")
                    {
                        intTemplateType = 108;

                        strHTML = PDFPageSetup.FunPubGetTemplateContent(intCompanyId, intProgramID, 1 /*English*/, intTemplateType, intApplicationProcessId.ToString());
                        if (strHTML == "")
                        {
                            Utility.FunShowAlertMsg(this.Page, ValidationMsgs.PMTPRT1);//107
                            return;
                        }
                        FileName = PDFPageSetup.FunPubGetFileName(intApplicationProcessId + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss"));
                        FilePath = Server.MapPath(".") + "\\PDF Files\\";
                        DownFile = FilePath + FileName + ".pdf";
                        SaveDocument(strHTML, txtApplication_Followup.Text, FilePath, FileName, "1");
                        filepaths.Add(DownFile);
                    }
                }
                FilePath = FilePath + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss") + ".pdf";
                Utility.FunPriGenerateFilesCheckList(filepaths, FilePath, "P");
                FunPriDownloadFile(FilePath, txtApplication_Followup.Text);
                //string strScipt = "";
                //strScipt = "window.open('../Common/S3GViewFileKYC.aspx?qsFileName=" + FilePath + "', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
                //ScriptManager.RegisterStartupScript(this, this.GetType(), strKey, strScipt, true);
                ////FunPriGenerateFiles(filepaths, FilePath, "P");
                ////FunPriDownloadFile(FilePath, txtApplication_Followup.Text);
            }
            else if (ddlTemplateType.SelectedValue == "2")
            {
                if (ddlTemplateType.SelectedIndex == 0)
                {
                    Utility.FunShowAlertMsg(this.Page, "Select Template Type");
                    return;
                }
                if (ddlStatus.SelectedValue == "2")
                {
                    if (ddlRepamentMode.SelectedValue == "3")
                    {
                        if (funPriCheckPDC())
                        {
                            Utility.FunShowAlertMsg(this, "LPO Print not allowed,PDC not Captured");
                            return;
                        }
                    }
                    FunPriGenerateLOP();
                }
                else
                {
                    Utility.FunShowAlertMsg(this, "LPO Print applicable only for approved application");
                    return;
                }
            }
            else if (ddlTemplateType.SelectedValue == "4")
            {
                if (ddlTemplateType.SelectedIndex == 0)
                {
                    Utility.FunShowAlertMsg(this.Page, "Select Template Type");
                    return;
                }
                if (ddlLOB.SelectedValue == "4" || ddlLOB.SelectedValue == "5")
                {
                    Utility.FunShowAlertMsg(this, "ODI Print not applicable for Factoring/Working Capital - Running Capital");
                    return;
                }
                if (ddlStatus.SelectedValue != "2")
                {
                    Utility.FunShowAlertMsg(this.Page, "ODI Print applicable only for approved application");
                    return;
                }
                GenerateOverDueIntrestCalculation();
            }
            else
            {
                if (ddlStatus.SelectedValue == "2")
                {
                    if (ddlLOB.SelectedValue == "4" || ddlLOB.SelectedValue == "5")
                    {
                        Utility.FunShowAlertMsg(this, "Welcome Letter not applicable for Factoring/Working Capital - Running Capital");
                        return;
                    }
                    FunPriGenerateWelcomeLetter();
                }
                else
                {
                    Utility.FunShowAlertMsg(this, "Welcome Letter Print applicable only for approved application");
                    return;
                }
            }
        }

        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            Utility.FunShowAlertMsg(this, "Template not defined in Template Master");//107
            return;
        }
    }
    private bool funPriCheckPDC()
    {
        bool bIsFm13 = false;
        try
        {

            DataTable dtIsFloorRateApprovalRequired = new DataTable();
            Dictionary<string, string> strProParm = new Dictionary<string, string>();
            strProParm.Add("@OPTION", "27");
            strProParm.Add("@COMPANYID", intCompanyId.ToString());
            strProParm.Add("@USERID", intUserId.ToString());
            strProParm.Add("@PROGRAMID", intProgramID.ToString());
            strProParm.Add("@PAGE_MODE", "C");
            strProParm.Add("@Application_Process_Id", intApplicationProcessId.ToString());
            dtIsFloorRateApprovalRequired = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProParm);
            if (dtIsFloorRateApprovalRequired.Rows.Count == 0)
            {
                bIsFm13 = true;
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        return bIsFm13;
    }
    private void FunPriGenerateLOP()
    {
        try
        {

            System.Data.DataTable dttmp = new System.Data.DataTable();
            Dictionary<string, string> Procpam;
            Procpam = new Dictionary<string, string>();
            Procpam.Add("@Company_Id", intCompanyId.ToString());
            //Procparam.Add("@USER_ID", intUserID.ToString());
            Procpam.Add("@Lob_Id", ddlLOB.SelectedValue);
            Procpam.Add("@Location_ID", "");
            Procpam.Add("@language", "1");
            Procpam.Add("@Template_Type_Code", "111");
            dttmp = Utility.GetDefaultData("S3G_Get_TemplateCont", Procpam);
            if (dttmp == null)
            {
                Utility.FunShowAlertMsg(this, "Template not defined in Template Master");//111
                return;
            }
            else
            {
                if (dttmp.Rows.Count == 0)
                {
                    Utility.FunShowAlertMsg(this, "Template not defined in Template Master");//111
                    return;
                }
            }

            Dictionary<string, string> dictParam;
            dictParam = new Dictionary<string, string>();
            dictParam.Add("@Company_Id", Convert.ToString(intCompanyId));
            dictParam.Add("@User_Id", Convert.ToString(intUserId));
            dictParam.Add("@APPLICATION_PROCESS_ID", Convert.ToString(intApplicationProcessId));
            dictParam.Add("@Vendor_ID", "");
            dictParam.Add("@Flag_Id", "");
            DataSet dsHeader = new DataSet();
            dsHeader = Utility.GetDataset("GET_APP_LPO_PRINT", dictParam);
            Session["ApplicationLPODetails"] = dsHeader;

            DataTable dtHeader = new System.Data.DataTable();
            DataTable dt = new System.Data.DataTable();
            dtHeader = dsHeader.Tables[0];

            if (dtHeader != null)
            {
                if (dtHeader.Rows.Count > 0)
                {
                    dt = dsHeader.Tables[1];
                    String strHTML = String.Empty;

                    object oMissing = System.Reflection.Missing.Value;
                    object readOnly = false;
                    object oFalse = false;
                    string strPONumber = "";
                    string PO_Header_ID = "";
                    string strhtmlFile = string.Empty;
                    var filepaths = new List<string>();
                    var outputfilepaths = new List<string>();

                    string OutputFile = Server.MapPath(".") + "\\PDF Files\\" + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss");
                    string FilePath = Server.MapPath(".") + "\\PDF Files\\";

                    foreach (DataRow dr1 in dtHeader.Rows)
                    {
                        PO_Header_ID = dr1["VENDOR_ID"].ToString();
                        if (PO_Header_ID.ToString() != null)
                        {
                            //ViewState["ASSETPRINT"] = dt1;
                            strHTML = PDFPageSetup.FunPubGetTemplateContent(intCompanyId, intProgramID, 1 /*English*/, 111, intApplicationProcessId.ToString());

                            if (strHTML == "")
                            {
                                Utility.FunShowAlertMsg(this, "Template Master not defined");
                                return;
                            }

                            string FileName = PDFPageSetup.FunPubGetFileName(strPONumber + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss"));
                            string DownFile = string.Empty;
                            DownFile = FilePath + FileName + ".pdf";
                            OutputFile = Server.MapPath(".") + "\\PDF Files\\" + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss") + ".pdf";

                            FunPriGetLPODetailsPrintOnSave(Convert.ToInt32(PO_Header_ID));

                            DataTable dtHeaderDetails = (DataTable)ViewState["PRINTHEADER"];



                            if (ViewState["ASSETPRINT"] == null)
                            {
                                Utility.FunShowAlertMsg(this, "LPO Print available only hire purchase");
                                return;
                            }
                            strFooterNote = dtHeaderDetails.Rows[0]["FOOTER_NOTE"].ToString();

                            if (dsHeader.Tables[0].Rows.Count > 0)
                                strHTML = PDFPageSetup.FunPubBindCommonVariables(strHTML, dtHeaderDetails);

                            int iRowCount = 0;
                            if (ViewState["ASSETPRINT"] != null)
                            {
                                DataTable dtASSETPRINT = (DataTable)ViewState["ASSETPRINT"];
                                iRowCount = dtASSETPRINT.Rows.Count;
                                if (dtASSETPRINT.Rows.Count > 0)
                                {

                                    FileName = PDFPageSetup.FunPubGetFileName(strPONumber + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss"));
                                    FilePath = Server.MapPath(".") + "\\PDF Files\\";
                                    DownFile = FilePath + FileName + ".pdf";

                                    SaveLPODocument(strHTML, PO_Header_ID, FilePath, FileName, "0", "0");
                                    if (!File.Exists(DownFile))
                                    {
                                        Utility.FunShowAlertMsg(this, "File not exists");
                                        return;
                                    }
                                    filepaths.Add(DownFile);
                                    //}
                                }
                                else
                                {
                                    Utility.FunShowAlertMsg(this, "LPO Details not Available unnable to Print LPO");
                                    return;
                                }
                            }
                        }
                        //}
                    }

                    if (filepaths.Count == 0)
                    {
                        Utility.FunShowAlertMsg(this.Page, "Select LPO one record");
                        return;
                    }
                    else
                    {
                        FilePath = FilePath + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss") + ".pdf";
                        Utility.FunPriGenerateFilesCheckList(filepaths, FilePath, "P");
                        FunPriDownloadLPOFile(FilePath, txtApplication_Followup.Text);
                    }
                }
                else
                {
                    Utility.FunShowAlertMsg(this, "Unnable to Print LPO Due to Invalid Data");

                    return;
                }
            }
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this.Page, "Error: Unable to Print" + ex.ToString());
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, "Error: Unable to Print");
            return;

        }
    }
    private void FunPriGetLPODetailsPrintOnSave(int intVendor_ID)
    {
        try
        {

            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_Id", Convert.ToString(intCompanyId));
            Procparam.Add("@User_Id", Convert.ToString(intUserId));
            Procparam.Add("@APPLICATION_PROCESS_ID", Convert.ToString(intApplicationProcessId));
            Procparam.Add("@Vendor_ID", Convert.ToString(intVendor_ID));
            Procparam.Add("@Flag_Id", "A");

            DataSet ds_AssetDetails = Utility.GetDataset("GET_APP_LPO_PRINT", Procparam);

            if (ds_AssetDetails != null)
            {
                if (ds_AssetDetails.Tables[0].Rows.Count > 0)
                {
                    ViewState["PRINTHEADER"] = ds_AssetDetails.Tables[0];
                }
            }
            else
            {
                Utility.FunShowAlertMsg(this, "LPO Print available only hire purchase");
                return;
            }
            if (ds_AssetDetails != null)
            {
                if (ds_AssetDetails.Tables[1].Rows.Count > 0)
                {
                    ViewState["ASSETPRINT"] = ds_AssetDetails.Tables[1];
                }
            }

        }
        catch (Exception ex)
        {
            ClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Error in getting data from application");
        }
    }
    protected void SaveLPODocument(string strHTML, string ReferenceNumber, string FilePath, string FileName, string strEntityId, string strNooUnits)
    {
        try
        {
            List<string> listImageName = new List<string>();
            listImageName.Add("~CompanyLogo~");

            List<string> listImagePath = new List<string>();
            listImagePath.Add(Server.MapPath("../Images/TemplateImages/" + CompanyId + "/CompanyLogo.png"));

            strHTML = PDFPageSetup.FunPubBindImages(listImageName, listImagePath, strHTML);
            if (strHTML == "")
            {
                Utility.FunShowAlertMsg(this, "Template not defined in Template Master");//30
                return;
            }
            DataTable dt = (DataTable)ViewState["ASSETPRINT"];
            if (strHTML.Contains("~DetailsTable~"))
            {
                strHTML = PDFPageSetup.FunPubBindTable("~DetailsTable~", strHTML, dt);
            }
            PDFPageSetup.FunPubSaveDocument(strHTML.Trim(), FilePath, FileName, "P", 1, strDateFormat, "", strFooterNote);
        }
        catch (Exception ex)
        {

            return;
        }
    }
    //private void FunPriDownloadFile(string OutputFile)
    //{
    //    string strnewFile = OutputFile;
    //    string strScipt = "window.open('../Common/S3GViewFileKYC.aspx?qsFileName=" + strnewFile.Replace(@"\", "/") + "&qsNeedPrint=yes', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";

    //    ScriptManager.RegisterStartupScript(this, this.GetType(), "CheckList", strScipt, true);
    //}
    protected void SaveDocument(string strHTML, string ReferenceNumber, string FilePath, string FileName, string strReportType)
    {
        try
        {
            DataSet dsApplicationKYCDetails = (DataSet)Session["ApplicationKYCDetails"];

            if (strReportType == "1")
            {
                if (dsApplicationKYCDetails.Tables[0].Rows.Count > 0)
                {
                    //strHTML = strHTML.Replace("~COMPANY_NAME~", ObjUserInfo.ProCompanyNameRW);
                    strHTML = PDFPageSetup.FunPubBindCommonVariables(strHTML, dsApplicationKYCDetails.Tables[0]);
                }
                if (dsApplicationKYCDetails.Tables[1].Rows.Count > 0)
                {
                    strHTML = PDFPageSetup.FunPubBindCommonVariables(strHTML, dsApplicationKYCDetails.Tables[1]);
                    DataTable dt = new System.Data.DataTable();
                    dt = dsApplicationKYCDetails.Tables[1];

                    if (dt.Rows.Count > 0)
                    {
                        strHTML = strHTML.Replace("~GNAME1~", dt.Rows[0]["CUSTOMER_NAME"].ToString());
                        strHTML = strHTML.Replace("~NID_CR_RID_NUMBER1~", dt.Rows[0]["NID_CR_RID_NUMBER"].ToString());
                        strHTML = strHTML.Replace("~DOI1~", dt.Rows[0]["DOI"].ToString());
                        strHTML = strHTML.Replace("~EFF_DATE1~", dt.Rows[0]["EFF_DATE"].ToString());
                        strHTML = strHTML.Replace("~DOB1~", dt.Rows[0]["DOB"].ToString());
                        strHTML = strHTML.Replace("~DOI1~", dt.Rows[0]["DOI"].ToString());
                        strHTML = strHTML.Replace("~DOE1~", dt.Rows[0]["DOE"].ToString());
                        strHTML = strHTML.Replace("~RES_CARD_NO1~", dt.Rows[0]["RES_CARD_NO"].ToString());
                        strHTML = strHTML.Replace("~GUR_GENDER1~", dt.Rows[0]["GUR_GENDER"].ToString());
                        strHTML = strHTML.Replace("~POST_BOX_NO1~", dt.Rows[0]["POST_BOX_NO"].ToString());
                        strHTML = strHTML.Replace("~POSTAL_CODE1~", dt.Rows[0]["POSTAL_CODE"].ToString());
                        strHTML = strHTML.Replace("~HOUSE_NO1~", dt.Rows[0]["HOUSE_NO"].ToString());
                        strHTML = strHTML.Replace("~WAY_NO1~", dt.Rows[0]["WAY_NO"].ToString());
                        strHTML = strHTML.Replace("~EMPLOYER_NAME1~", dt.Rows[0]["EMPLOYER_NAME"].ToString());
                        strHTML = strHTML.Replace("~CPOSTALCODE1~", dt.Rows[0]["CPOSTALCODE"].ToString());
                        strHTML = strHTML.Replace("~TELNO1~", dt.Rows[0]["TELNO"].ToString());
                        strHTML = strHTML.Replace("~MONTHILY_INCOME1~", dt.Rows[0]["MONTHILY_INCOME"].ToString());
                        strHTML = strHTML.Replace("~RELATIONSHIP1~", dt.Rows[0]["RELATIONSHIP"].ToString());
                        strHTML = strHTML.Replace("~GUAR_LOCATION1~", dt.Rows[0]["GUAR_LOCATION"].ToString());
                        strHTML = strHTML.Replace("~RES_PHONE1~", dt.Rows[0]["RES_PHONE_NO"].ToString());
                        strHTML = strHTML.Replace("~GUAR_DESIGNATION1~", dt.Rows[0]["GUAR_DESIGNATION"].ToString());



                    }
                    //else
                    //{
                    //    strHTML = strHTML.Replace("~GNAME1~", "");
                    //    strHTML = strHTML.Replace("~NID_CR_RID_NUMBER1~", "");
                    //    strHTML = strHTML.Replace("~DOI1~", "");
                    //    strHTML = strHTML.Replace("~EFF_DATE1~", "");
                    //    strHTML = strHTML.Replace("~DOB1~", "");
                    //    strHTML = strHTML.Replace("~DOI1~", "");
                    //    strHTML = strHTML.Replace("~DOE1~", "");
                    //    strHTML = strHTML.Replace("~GUR_GENDER1~", "");
                    //    strHTML = strHTML.Replace("~POST_BOX_NO1~", "");
                    //    strHTML = strHTML.Replace("~POSTAL_CODE1~", "");
                    //    strHTML = strHTML.Replace("~HOUSE_NO1~", "");
                    //    strHTML = strHTML.Replace("~WAY_NO1~", "");
                    //    strHTML = strHTML.Replace("~EMPLOYER_NAME1~", "");
                    //    strHTML = strHTML.Replace("~CPOSTALCODE1~", "");
                    //    strHTML = strHTML.Replace("~TELNO1~", "");
                    //    strHTML = strHTML.Replace("~MONTHILY_INCOME1~", "");
                    //    strHTML = strHTML.Replace("~RELATIONSHIP1~", "");
                    //}
                    if (dt.Rows.Count > 1)
                    {
                        if (dt.Rows[1]["CUSTOMER_NAME"].ToString() != null)
                        {
                            strHTML = strHTML.Replace("~GNAME2~", dt.Rows[1]["CUSTOMER_NAME"].ToString());
                            strHTML = strHTML.Replace("~NID_CR_RID_NUMBER2~", dt.Rows[1]["NID_CR_RID_NUMBER"].ToString());
                            strHTML = strHTML.Replace("~DOI2~", dt.Rows[1]["DOI"].ToString());
                            strHTML = strHTML.Replace("~EFF_DATE2~", dt.Rows[1]["EFF_DATE"].ToString());
                            strHTML = strHTML.Replace("~DOB2~", dt.Rows[1]["DOB"].ToString());
                            strHTML = strHTML.Replace("~DOI2~", dt.Rows[1]["DOI"].ToString());
                            strHTML = strHTML.Replace("~DOE2~", dt.Rows[1]["DOE"].ToString());
                            strHTML = strHTML.Replace("~RES_CARD_NO2~", dt.Rows[1]["RES_CARD_NO"].ToString());
                            strHTML = strHTML.Replace("~GUR_GENDER2~", dt.Rows[1]["GUR_GENDER"].ToString());
                            strHTML = strHTML.Replace("~POST_BOX_NO2~", dt.Rows[1]["POST_BOX_NO"].ToString());
                            strHTML = strHTML.Replace("~POSTAL_CODE2~", dt.Rows[1]["POSTAL_CODE"].ToString());
                            strHTML = strHTML.Replace("~HOUSE_NO2~", dt.Rows[1]["HOUSE_NO"].ToString());
                            strHTML = strHTML.Replace("~WAY_NO2~", dt.Rows[1]["WAY_NO"].ToString());
                            strHTML = strHTML.Replace("~EMPLOYER_NAME2~", dt.Rows[1]["EMPLOYER_NAME"].ToString());
                            strHTML = strHTML.Replace("~CPOSTALCODE2~", dt.Rows[1]["CPOSTALCODE"].ToString());
                            strHTML = strHTML.Replace("~TELNO2~", dt.Rows[1]["TELNO"].ToString());
                            strHTML = strHTML.Replace("~MONTHILY_INCOME2~", dt.Rows[1]["MONTHILY_INCOME"].ToString());
                            strHTML = strHTML.Replace("~RELATIONSHIP2~", dt.Rows[1]["RELATIONSHIP"].ToString());
                            strHTML = strHTML.Replace("~GUAR_LOCATION2~", dt.Rows[1]["GUAR_LOCATION"].ToString());
                            strHTML = strHTML.Replace("~RES_PHONE2~", dt.Rows[1]["RES_PHONE_NO"].ToString());
                            strHTML = strHTML.Replace("~GUAR_DESIGNATION2~", dt.Rows[1]["GUAR_DESIGNATION"].ToString());
                        }
                    }
                    else
                    {
                        strHTML = strHTML.Replace("~GNAME2~", "____________________");
                        strHTML = strHTML.Replace("~NID_CR_RID_NUMBER2~", "__________");
                        strHTML = strHTML.Replace("~DOI2~", "________");
                        strHTML = strHTML.Replace("~EFF_DATE2~", "");
                        strHTML = strHTML.Replace("~DOB2~", "________");
                        strHTML = strHTML.Replace("~DOI2~", "________");
                        strHTML = strHTML.Replace("~DOE2~", "________");
                        strHTML = strHTML.Replace("~RES_CARD_NO2~", "__________");
                        strHTML = strHTML.Replace("~GUR_GENDER2~", "_____");
                        strHTML = strHTML.Replace("~POST_BOX_NO2~", "_____");
                        strHTML = strHTML.Replace("~POSTAL_CODE2~", "_____");
                        strHTML = strHTML.Replace("~HOUSE_NO2~", "_____");
                        strHTML = strHTML.Replace("~WAY_NO2~", "_____");
                        strHTML = strHTML.Replace("~EMPLOYER_NAME2~", "____________________");
                        strHTML = strHTML.Replace("~CPOSTALCODE2~", "_____");
                        strHTML = strHTML.Replace("~TELNO2~", "_____");
                        strHTML = strHTML.Replace("~MONTHILY_INCOME2~", "__________");
                        strHTML = strHTML.Replace("~RELATIONSHIP2~", "_______________");
                        strHTML = strHTML.Replace("~GUAR_LOCATION2~", "__________");
                        strHTML = strHTML.Replace("~RES_PHONE2~", "_____");
                        strHTML = strHTML.Replace("~GUAR_DESIGNATION2~", "________");
                    }
                    if (dt.Rows.Count > 2)
                    {
                        if (dt.Rows[2]["CUSTOMER_NAME"].ToString() != null)
                        {
                            strHTML = strHTML.Replace("~GNAME3~", dt.Rows[2]["CUSTOMER_NAME"].ToString());
                            strHTML = strHTML.Replace("~NID_CR_RID_NUMBER3~", dt.Rows[2]["NID_CR_RID_NUMBER"].ToString());
                            strHTML = strHTML.Replace("~DOI3~", dt.Rows[2]["DOI"].ToString());
                            strHTML = strHTML.Replace("~EFF_DATE3~", dt.Rows[2]["EFF_DATE"].ToString());
                            strHTML = strHTML.Replace("~DOB3~", dt.Rows[2]["DOB"].ToString());
                            strHTML = strHTML.Replace("~DOI3~", dt.Rows[2]["DOI"].ToString());
                            strHTML = strHTML.Replace("~DOE3~", dt.Rows[2]["DOE"].ToString());
                            strHTML = strHTML.Replace("~RES_CARD_NO3~", dt.Rows[2]["RES_CARD_NO"].ToString());
                            strHTML = strHTML.Replace("~GUR_GENDER3~", dt.Rows[2]["GUR_GENDER"].ToString());
                            strHTML = strHTML.Replace("~POST_BOX_NO3~", dt.Rows[2]["POST_BOX_NO"].ToString());
                            strHTML = strHTML.Replace("~POSTAL_CODE3~", dt.Rows[2]["POSTAL_CODE"].ToString());
                            strHTML = strHTML.Replace("~HOUSE_NO3~", dt.Rows[2]["HOUSE_NO"].ToString());
                            strHTML = strHTML.Replace("~WAY_NO3~", dt.Rows[2]["WAY_NO"].ToString());
                            strHTML = strHTML.Replace("~EMPLOYER_NAME3~", dt.Rows[2]["EMPLOYER_NAME"].ToString());
                            strHTML = strHTML.Replace("~CPOSTALCODE3~", dt.Rows[2]["CPOSTALCODE"].ToString());
                            strHTML = strHTML.Replace("~TELNO3~", dt.Rows[2]["TELNO"].ToString());
                            strHTML = strHTML.Replace("~MONTHILY_INCOME3~", dt.Rows[2]["MONTHILY_INCOME"].ToString());
                            strHTML = strHTML.Replace("~RELATIONSHIP3~", dt.Rows[2]["RELATIONSHIP"].ToString());
                            strHTML = strHTML.Replace("~GUAR_LOCATION3~", dt.Rows[2]["GUAR_LOCATION"].ToString());
                            strHTML = strHTML.Replace("~RES_PHONE3~", dt.Rows[2]["RES_PHONE_NO"].ToString());
                            strHTML = strHTML.Replace("~GUAR_DESIGNATION3~", dt.Rows[2]["GUAR_DESIGNATION"].ToString());
                        }
                    }
                    else
                    {
                        strHTML = strHTML.Replace("~GNAME3~", "____________________");
                        strHTML = strHTML.Replace("~NID_CR_RID_NUMBER3~", "__________");
                        strHTML = strHTML.Replace("~DOI3~", "________");
                        strHTML = strHTML.Replace("~EFF_DATE3~", "________");
                        strHTML = strHTML.Replace("~DOB3~", "________");
                        strHTML = strHTML.Replace("~DOI3~", "________");
                        strHTML = strHTML.Replace("~DOE3~", "________");
                        strHTML = strHTML.Replace("~RES_CARD_NO3~", "__________");
                        strHTML = strHTML.Replace("~GUR_GENDER3~", "_____");
                        strHTML = strHTML.Replace("~POST_BOX_NO3~", "_____");
                        strHTML = strHTML.Replace("~POSTAL_CODE3~", "_____");
                        strHTML = strHTML.Replace("~HOUSE_NO3~", "_____");
                        strHTML = strHTML.Replace("~WAY_NO3~", "_____");
                        strHTML = strHTML.Replace("~EMPLOYER_NAME3~", "____________________");
                        strHTML = strHTML.Replace("~CPOSTALCODE3~", "_____");
                        strHTML = strHTML.Replace("~TELNO3~", "_____");
                        strHTML = strHTML.Replace("~MONTHILY_INCOME3~", "__________");
                        strHTML = strHTML.Replace("~RELATIONSHIP3~", "_______________");
                        strHTML = strHTML.Replace("~GUAR_LOCATION3~", "_______________");
                        strHTML = strHTML.Replace("~RES_PHONE3~", "_____");
                        strHTML = strHTML.Replace("~GUAR_DESIGNATION3~", "________");
                    }
                    if (dt.Rows.Count > 3)
                    {
                        if (dt.Rows[3]["CUSTOMER_NAME"].ToString() != null)
                        {
                            strHTML = strHTML.Replace("~GNAME4~", dt.Rows[3]["CUSTOMER_NAME"].ToString());
                            strHTML = strHTML.Replace("~NID_CR_RID_NUMBER4~", dt.Rows[3]["NID_CR_RID_NUMBER"].ToString());
                            strHTML = strHTML.Replace("~DOI4~", dt.Rows[3]["DOI"].ToString());
                            strHTML = strHTML.Replace("~EFF_DATE4~", dt.Rows[3]["EFF_DATE"].ToString());
                            strHTML = strHTML.Replace("~DOB4~", dt.Rows[3]["DOB"].ToString());
                            strHTML = strHTML.Replace("~DOI4~", dt.Rows[3]["DOI"].ToString());
                            strHTML = strHTML.Replace("~DOE4~", dt.Rows[3]["DOE"].ToString());
                            strHTML = strHTML.Replace("~RES_CARD_NO4~", dt.Rows[3]["RES_CARD_NO"].ToString());
                            strHTML = strHTML.Replace("~GUR_GENDER4~", dt.Rows[3]["GUR_GENDER"].ToString());
                            strHTML = strHTML.Replace("~POST_BOX_NO4~", dt.Rows[3]["POST_BOX_NO"].ToString());
                            strHTML = strHTML.Replace("~POSTAL_CODE4~", dt.Rows[3]["POSTAL_CODE"].ToString());
                            strHTML = strHTML.Replace("~HOUSE_NO4~", dt.Rows[3]["HOUSE_NO"].ToString());
                            strHTML = strHTML.Replace("~WAY_NO4~", dt.Rows[3]["WAY_NO"].ToString());
                            strHTML = strHTML.Replace("~EMPLOYER_NAME4~", dt.Rows[3]["EMPLOYER_NAME"].ToString());
                            strHTML = strHTML.Replace("~CPOSTALCODE4~", dt.Rows[3]["CPOSTALCODE"].ToString());
                            strHTML = strHTML.Replace("~TELNO4~", dt.Rows[3]["TELNO"].ToString());
                            strHTML = strHTML.Replace("~MONTHILY_INCOME4~", dt.Rows[3]["MONTHILY_INCOME"].ToString());
                            strHTML = strHTML.Replace("~RELATIONSHIP4~", dt.Rows[3]["RELATIONSHIP"].ToString());
                            strHTML = strHTML.Replace("~GUAR_LOCATION4~", dt.Rows[3]["GUAR_LOCATION"].ToString());
                            strHTML = strHTML.Replace("~RES_PHONE4~", dt.Rows[3]["RES_PHONE_NO"].ToString());
                            strHTML = strHTML.Replace("~GUAR_DESIGNATION4~", dt.Rows[3]["GUAR_DESIGNATION"].ToString());
                        }
                    }
                    else
                    {
                        strHTML = strHTML.Replace("~GNAME4~", "__________");
                        strHTML = strHTML.Replace("~NID_CR_RID_NUMBER4~", "__________");
                        strHTML = strHTML.Replace("~DOI4~", "________");
                        strHTML = strHTML.Replace("~EFF_DATE4~", "________");
                        strHTML = strHTML.Replace("~DOB4~", "________");
                        strHTML = strHTML.Replace("~DOI4~", "________");
                        strHTML = strHTML.Replace("~DOE4~", "________");
                        strHTML = strHTML.Replace("~RES_CARD_NO4~", "__________");
                        strHTML = strHTML.Replace("~GUR_GENDER4~", "_____");
                        strHTML = strHTML.Replace("~POST_BOX_NO4~", "_____");
                        strHTML = strHTML.Replace("~POSTAL_CODE4~", "_____");
                        strHTML = strHTML.Replace("~HOUSE_NO4~", "_____");
                        strHTML = strHTML.Replace("~WAY_NO4~", "_____");
                        strHTML = strHTML.Replace("~EMPLOYER_NAME4~", "____________________");
                        strHTML = strHTML.Replace("~CPOSTALCODE4~", "");
                        strHTML = strHTML.Replace("~TELNO4~", "_______");
                        strHTML = strHTML.Replace("~MONTHILY_INCOME4~", "________");
                        strHTML = strHTML.Replace("~RELATIONSHIP4~", "________");
                        strHTML = strHTML.Replace("~GUAR_LOCATION4~", "_______________");
                        strHTML = strHTML.Replace("~RES_PHONE4~", "________");
                        strHTML = strHTML.Replace("~GUAR_DESIGNATION4~", "________");
                    }
                    if (dt.Rows.Count > 4)
                    {
                        if (dt.Rows[4]["CUSTOMER_NAME"].ToString() != null)
                        {
                            strHTML = strHTML.Replace("~GNAME5~", dt.Rows[4]["CUSTOMER_NAME"].ToString());
                            strHTML = strHTML.Replace("~NID_CR_RID_NUMBER5~", dt.Rows[4]["NID_CR_RID_NUMBER"].ToString());
                            strHTML = strHTML.Replace("~DOI5~", dt.Rows[4]["DOI"].ToString());
                            strHTML = strHTML.Replace("~EFF_DATE5~", dt.Rows[4]["EFF_DATE"].ToString());
                            strHTML = strHTML.Replace("~DOB5~", dt.Rows[4]["DOB"].ToString());
                            strHTML = strHTML.Replace("~DOI5~", dt.Rows[4]["DOI"].ToString());
                            strHTML = strHTML.Replace("~DOE5~", dt.Rows[4]["DOE"].ToString());
                            strHTML = strHTML.Replace("~RES_CARD_NO5~", dt.Rows[4]["RES_CARD_NO"].ToString());
                            strHTML = strHTML.Replace("~GUR_GENDER5~", dt.Rows[4]["GUR_GENDER"].ToString());
                            strHTML = strHTML.Replace("~POST_BOX_NO5~", dt.Rows[4]["POST_BOX_NO"].ToString());
                            strHTML = strHTML.Replace("~POSTAL_CODE5~", dt.Rows[4]["POSTAL_CODE"].ToString());
                            strHTML = strHTML.Replace("~HOUSE_NO5~", dt.Rows[4]["HOUSE_NO"].ToString());
                            strHTML = strHTML.Replace("~WAY_NO5~", dt.Rows[4]["WAY_NO"].ToString());
                            strHTML = strHTML.Replace("~EMPLOYER_NAME5~", dt.Rows[4]["EMPLOYER_NAME"].ToString());
                            strHTML = strHTML.Replace("~CPOSTALCODE5~", dt.Rows[4]["CPOSTALCODE"].ToString());
                            strHTML = strHTML.Replace("~TELNO5~", dt.Rows[4]["TELNO"].ToString());
                            strHTML = strHTML.Replace("~MONTHILY_INCOME5~", dt.Rows[4]["MONTHILY_INCOME"].ToString());
                            strHTML = strHTML.Replace("~RELATIONSHIP5~", dt.Rows[4]["RELATIONSHIP"].ToString());
                            strHTML = strHTML.Replace("~GUAR_LOCATION5~", dt.Rows[4]["GUAR_LOCATION"].ToString());
                            strHTML = strHTML.Replace("~RES_PHONE5~", dt.Rows[4]["RES_PHONE_NO"].ToString());
                            strHTML = strHTML.Replace("~GUAR_DESIGNATION5~", dt.Rows[4]["GUAR_DESIGNATION"].ToString());
                        }
                    }
                    else
                    {
                        strHTML = strHTML.Replace("~GNAME5~", "__________");
                        strHTML = strHTML.Replace("~NID_CR_RID_NUMBER5~", "__________");
                        strHTML = strHTML.Replace("~DOI5~", "________");
                        strHTML = strHTML.Replace("~EFF_DATE5~", "________");
                        strHTML = strHTML.Replace("~DOB5~", "________");
                        strHTML = strHTML.Replace("~DOI5~", "________");
                        strHTML = strHTML.Replace("~DOE5~", "________");
                        strHTML = strHTML.Replace("~RES_CARD_NO5~", "__________");
                        strHTML = strHTML.Replace("~GUR_GENDER5~", "_____");
                        strHTML = strHTML.Replace("~POST_BOX_NO5~", "_____");
                        strHTML = strHTML.Replace("~POSTAL_CODE5~", "_____");
                        strHTML = strHTML.Replace("~HOUSE_NO5~", "_____");
                        strHTML = strHTML.Replace("~WAY_NO5~", "_____");
                        strHTML = strHTML.Replace("~EMPLOYER_NAME5~", "____________________");
                        strHTML = strHTML.Replace("~CPOSTALCODE5~", "");
                        strHTML = strHTML.Replace("~TELNO5~", "_______");
                        strHTML = strHTML.Replace("~MONTHILY_INCOME5~", "________");
                        strHTML = strHTML.Replace("~RELATIONSHIP5~", "________");
                        strHTML = strHTML.Replace("~GUAR_LOCATION5~", "_______________");
                        strHTML = strHTML.Replace("~RES_PHONE5~", "________");
                        strHTML = strHTML.Replace("~GUAR_DESIGNATION5~", "________");
                    }

                }
                else
                {
                    strHTML = strHTML.Replace("~GNAME1~", "____________________");
                    strHTML = strHTML.Replace("~NID_CR_RID_NUMBER1~", "__________");
                    strHTML = strHTML.Replace("~DOI1~", "________");
                    strHTML = strHTML.Replace("~EFF_DATE1~", "");
                    strHTML = strHTML.Replace("~DOB1~", "________");
                    strHTML = strHTML.Replace("~DOI1~", "________");
                    strHTML = strHTML.Replace("~DOE1~", "________");
                    strHTML = strHTML.Replace("~RES_CARD_NO1~", "__________");
                    strHTML = strHTML.Replace("~GUR_GENDER1~", "_____");
                    strHTML = strHTML.Replace("~POST_BOX_NO1~", "_____");
                    strHTML = strHTML.Replace("~POSTAL_CODE1~", "_____");
                    strHTML = strHTML.Replace("~HOUSE_NO1~", "_____");
                    strHTML = strHTML.Replace("~WAY_NO1~", "_____");
                    strHTML = strHTML.Replace("~EMPLOYER_NAME1~", "____________________");
                    strHTML = strHTML.Replace("~CPOSTALCODE1~", "_____");
                    strHTML = strHTML.Replace("~TELNO1~", "_____");
                    strHTML = strHTML.Replace("~MONTHILY_INCOME1~", "__________");
                    strHTML = strHTML.Replace("~RELATIONSHIP1~", "__________");

                    strHTML = strHTML.Replace("~GUAR_LOCATION1~", "_______________");
                    strHTML = strHTML.Replace("~RES_PHONE1~", "_____");
                    strHTML = strHTML.Replace("~GUAR_DESIGNATION1~", "________");



                    strHTML = strHTML.Replace("~GNAME2~", "__________");
                    strHTML = strHTML.Replace("~NID_CR_RID_NUMBER2~", "__________");
                    strHTML = strHTML.Replace("~DOI2~", "________");
                    strHTML = strHTML.Replace("~EFF_DATE2~", "________");
                    strHTML = strHTML.Replace("~DOB2~", "________");
                    strHTML = strHTML.Replace("~DOI2~", "________");
                    strHTML = strHTML.Replace("~DOE2~", "________");
                    strHTML = strHTML.Replace("~RES_CARD_NO2~", "__________");
                    strHTML = strHTML.Replace("~GUR_GENDER2~", "_____");
                    strHTML = strHTML.Replace("~POST_BOX_NO2~", "_____");
                    strHTML = strHTML.Replace("~POSTAL_CODE2~", "_____");
                    strHTML = strHTML.Replace("~HOUSE_NO2~", "_____");
                    strHTML = strHTML.Replace("~WAY_NO2~", "_____");
                    strHTML = strHTML.Replace("~EMPLOYER_NAME2~", "____________________");
                    strHTML = strHTML.Replace("~CPOSTALCODE2~", "__________");
                    strHTML = strHTML.Replace("~TELNO2~", "_____");
                    strHTML = strHTML.Replace("~MONTHILY_INCOME2~", "________");
                    strHTML = strHTML.Replace("~RELATIONSHIP2~", "_____");
                    strHTML = strHTML.Replace("~GUAR_LOCATION2~", "_______________");
                    strHTML = strHTML.Replace("~RES_PHONE2~", "_____");
                    strHTML = strHTML.Replace("~GUAR_DESIGNATION2~", "________");

                    strHTML = strHTML.Replace("~GNAME3~", "__________");
                    strHTML = strHTML.Replace("~NID_CR_RID_NUMBER3~", "__________");
                    strHTML = strHTML.Replace("~DOI3~", "________");
                    strHTML = strHTML.Replace("~EFF_DATE3~", "________");
                    strHTML = strHTML.Replace("~DOB3~", "________");
                    strHTML = strHTML.Replace("~DOI3~", "________");
                    strHTML = strHTML.Replace("~DOE3~", "________");
                    strHTML = strHTML.Replace("~RES_CARD_NO3~", "__________");
                    strHTML = strHTML.Replace("~GUR_GENDER3~", "_____");
                    strHTML = strHTML.Replace("~POST_BOX_NO3~", "_____");
                    strHTML = strHTML.Replace("~POSTAL_CODE3~", "_____");
                    strHTML = strHTML.Replace("~HOUSE_NO3~", "_____");
                    strHTML = strHTML.Replace("~WAY_NO3~", "_____");
                    strHTML = strHTML.Replace("~EMPLOYER_NAME3~", "____________________");
                    strHTML = strHTML.Replace("~CPOSTALCODE3~", "");
                    strHTML = strHTML.Replace("~TELNO3~", "_______");
                    strHTML = strHTML.Replace("~MONTHILY_INCOME3~", "________");
                    strHTML = strHTML.Replace("~RELATIONSHIP3~", "________");
                    strHTML = strHTML.Replace("~GUAR_LOCATION3~", "_______________");
                    strHTML = strHTML.Replace("~RES_PHONE3~", "________");
                    strHTML = strHTML.Replace("~GUAR_DESIGNATION3~", "________");

                    strHTML = strHTML.Replace("~GNAME4~", "__________");
                    strHTML = strHTML.Replace("~NID_CR_RID_NUMBER4~", "__________");
                    strHTML = strHTML.Replace("~DOI4~", "________");
                    strHTML = strHTML.Replace("~EFF_DATE4~", "________");
                    strHTML = strHTML.Replace("~DOB4~", "________");
                    strHTML = strHTML.Replace("~DOI4~", "________");
                    strHTML = strHTML.Replace("~DOE4~", "________");
                    strHTML = strHTML.Replace("~RES_CARD_NO4~", "__________");
                    strHTML = strHTML.Replace("~GUR_GENDER4~", "_____");
                    strHTML = strHTML.Replace("~POST_BOX_NO4~", "_____");
                    strHTML = strHTML.Replace("~POSTAL_CODE4~", "_____");
                    strHTML = strHTML.Replace("~HOUSE_NO4~", "_____");
                    strHTML = strHTML.Replace("~WAY_NO4~", "_____");
                    strHTML = strHTML.Replace("~EMPLOYER_NAME4~", "____________________");
                    strHTML = strHTML.Replace("~CPOSTALCODE4~", "");
                    strHTML = strHTML.Replace("~TELNO4~", "_______");
                    strHTML = strHTML.Replace("~MONTHILY_INCOME4~", "________");
                    strHTML = strHTML.Replace("~RELATIONSHIP4~", "________");
                    strHTML = strHTML.Replace("~GUAR_LOCATION4~", "_______________");
                    strHTML = strHTML.Replace("~RES_PHONE4~", "________");
                    strHTML = strHTML.Replace("~GUAR_DESIGNATION4~", "________");

                    strHTML = strHTML.Replace("~GNAME5~", "__________");
                    strHTML = strHTML.Replace("~NID_CR_RID_NUMBER5~", "__________");
                    strHTML = strHTML.Replace("~DOI5~", "________");
                    strHTML = strHTML.Replace("~EFF_DATE5~", "________");
                    strHTML = strHTML.Replace("~DOB5~", "________");
                    strHTML = strHTML.Replace("~DOI5~", "________");
                    strHTML = strHTML.Replace("~DOE5~", "________");
                    strHTML = strHTML.Replace("~RES_CARD_NO5~", "__________");
                    strHTML = strHTML.Replace("~GUR_GENDER5~", "_____");
                    strHTML = strHTML.Replace("~POST_BOX_NO5~", "_____");
                    strHTML = strHTML.Replace("~POSTAL_CODE5~", "_____");
                    strHTML = strHTML.Replace("~HOUSE_NO5~", "_____");
                    strHTML = strHTML.Replace("~WAY_NO5~", "_____");
                    strHTML = strHTML.Replace("~EMPLOYER_NAME5~", "____________________");
                    strHTML = strHTML.Replace("~CPOSTALCODE5~", "");
                    strHTML = strHTML.Replace("~TELNO5~", "_______");
                    strHTML = strHTML.Replace("~MONTHILY_INCOME5~", "________");
                    strHTML = strHTML.Replace("~RELATIONSHIP5~", "________");
                    strHTML = strHTML.Replace("~GUAR_LOCATION5~", "_______________");
                    strHTML = strHTML.Replace("~RES_PHONE5~", "________");
                    strHTML = strHTML.Replace("~GUAR_DESIGNATION5~", "________");

                }
                if (dsApplicationKYCDetails.Tables[2].Rows.Count > 0)
                {
                    strHTML = PDFPageSetup.FunPubBindCommonVariables(strHTML, dsApplicationKYCDetails.Tables[2]);
                }
                else
                {
                    strHTML = strHTML.Replace("~LISTPRICE~", "");
                    strHTML = strHTML.Replace("~DISCOUNT~", "");
                    strHTML = strHTML.Replace("~COSTOFASSET~", "");
                    strHTML = strHTML.Replace("~DEAL_TYPE~", "");
                    strHTML = strHTML.Replace("~INSURANCE_PREM_AMOUNT~", "");
                    strHTML = strHTML.Replace("~MARGIN_PERCENTAGE~", "");
                    strHTML = strHTML.Replace("~TRADE_IN~", "");
                    strHTML = strHTML.Replace("~TOTAL~", "");
                    strHTML = strHTML.Replace("~FINANCE_AMOUNT~", "");
                    strHTML = strHTML.Replace("~RATE~", "");
                    strHTML = strHTML.Replace("~FINANCE_CHARGE~", "");
                    strHTML = strHTML.Replace("~PROCESSING_FEE~", "");
                    strHTML = strHTML.Replace("~TOTAL_DUES~", "");
                    strHTML = strHTML.Replace("~NO_OF_INSTALMENTS~", "");
                    strHTML = strHTML.Replace("~BANK~", "");
                    strHTML = strHTML.Replace("~ACCOUNT_NO~", "");
                    strHTML = strHTML.Replace("~NOOFCHEQUES~", "");
                    strHTML = strHTML.Replace("~MIDATE~", "");
                    strHTML = strHTML.Replace("~MIMONTH~", "");
                    strHTML = strHTML.Replace("~MIYEAR~", "");
                    strHTML = strHTML.Replace("~MAXDATE~", "");
                    strHTML = strHTML.Replace("~MAXMONTH~", "");
                    strHTML = strHTML.Replace("~MAXYEAR~", "");
                    strHTML = strHTML.Replace("~ENTITY_NAME~", "____________________");
                    strHTML = strHTML.Replace("~LOCATION_DESC~", "__________");
                    strHTML = strHTML.Replace("~SALES_EXECUTIVE~", "__________");
                    strHTML = strHTML.Replace("~REGN_NUMBER~", "");
                    strHTML = strHTML.Replace("~REGN_NUMBER_DET~", "_______________");
                }
                if (dsApplicationKYCDetails.Tables[3].Rows.Count > 0)
                {
                    strHTML = PDFPageSetup.FunPubBindCommonVariables(strHTML, dsApplicationKYCDetails.Tables[3]);
                }
                else
                {
                    strHTML = strHTML.Replace("~MODEL~", "");
                    strHTML = strHTML.Replace("~MODEL_YEAR~", "");
                    strHTML = strHTML.Replace("~REGN_NUMBER~", "");
                    strHTML = strHTML.Replace("~ENGINE_NUMBER~", "");
                    strHTML = strHTML.Replace("~CHASIS_NUMBER~", "");
                    strHTML = strHTML.Replace("~USAGE~", "");
                    strHTML = strHTML.Replace("~DEALERNAME~", "");
                    strHTML = strHTML.Replace("~INVOICE_DATE~", "");
                    strHTML = strHTML.Replace("~INVOICE_NUMBER~", "");
                    strHTML = strHTML.Replace("~REMARKS~", "");
                    strHTML = strHTML.Replace("~REGN_NUMBER_DET~", "_______________");
                }
                //strHTML = strHTML.Replace("~PREPAREDBY~", ObjUserInfo.ProUserNameRW);
                List<string> listImageName = new List<string>();
                listImageName.Add("~CompanyLogo~");
                List<string> listImagePath = new List<string>();
                listImagePath.Add(Server.MapPath("../Images/TemplateImages/" + CompanyId + "/CompanyLogo.png"));
                strHTML = PDFPageSetup.FunPubBindImages(listImageName, listImagePath, strHTML);

                if (dsApplicationKYCDetails.Tables[0].Rows[0]["INDUSTRY_ID"].ToString() == "1")
                {
                    List<string> listImageName1 = new List<string>();
                    listImageName1.Add("~T~");
                    List<string> listImagePath1 = new List<string>();
                    listImagePath1.Add(Server.MapPath("../Images/TemplateImages/Tick.png"));
                    strHTML = PDFPageSetup.FunPubBindImages(listImageName1, listImagePath1, strHTML);
                    strHTML = strHTML.Replace("~C~", "");
                    strHTML = strHTML.Replace("~S~", "");
                    strHTML = strHTML.Replace("~I~", "");
                    strHTML = strHTML.Replace("~M~", "");
                    strHTML = strHTML.Replace("~P~", "");
                }
                else if (dsApplicationKYCDetails.Tables[0].Rows[0]["INDUSTRY_ID"].ToString() == "2")
                {
                    List<string> listImageName1 = new List<string>();
                    listImageName1.Add("~C~");
                    List<string> listImagePath1 = new List<string>();
                    listImagePath1.Add(Server.MapPath("../Images/TemplateImages/Tick.png"));
                    strHTML = PDFPageSetup.FunPubBindImages(listImageName1, listImagePath1, strHTML);
                    strHTML = strHTML.Replace("~T~", "");
                    strHTML = strHTML.Replace("~S~", "");
                    strHTML = strHTML.Replace("~I~", "");
                    strHTML = strHTML.Replace("~M~", "");
                    strHTML = strHTML.Replace("~P~", "");
                }
                else if (dsApplicationKYCDetails.Tables[0].Rows[0]["INDUSTRY_ID"].ToString() == "3")
                {
                    List<string> listImageName1 = new List<string>();
                    listImageName1.Add("~M~");
                    List<string> listImagePath1 = new List<string>();
                    listImagePath1.Add(Server.MapPath("../Images/TemplateImages/Tick.png"));
                    strHTML = PDFPageSetup.FunPubBindImages(listImageName1, listImagePath1, strHTML);
                    strHTML = strHTML.Replace("~T~", "");
                    strHTML = strHTML.Replace("~S~", "");
                    strHTML = strHTML.Replace("~I~", "");
                    strHTML = strHTML.Replace("~C~", "");
                    strHTML = strHTML.Replace("~P~", "");
                }
                else if (dsApplicationKYCDetails.Tables[0].Rows[0]["INDUSTRY_ID"].ToString() == "4")
                {
                    List<string> listImageName1 = new List<string>();
                    listImageName1.Add("~S~");
                    List<string> listImagePath1 = new List<string>();
                    listImagePath1.Add(Server.MapPath("../Images/TemplateImages/Tick.png"));
                    strHTML = PDFPageSetup.FunPubBindImages(listImageName1, listImagePath1, strHTML);
                    strHTML = strHTML.Replace("~T~", "");
                    strHTML = strHTML.Replace("~M~", "");
                    strHTML = strHTML.Replace("~I~", "");
                    strHTML = strHTML.Replace("~C~", "");
                    strHTML = strHTML.Replace("~P~", "");
                }
                else if (dsApplicationKYCDetails.Tables[0].Rows[0]["INDUSTRY_ID"].ToString() == "5")
                {
                    List<string> listImageName1 = new List<string>();
                    listImageName1.Add("~P~");
                    List<string> listImagePath1 = new List<string>();
                    listImagePath1.Add(Server.MapPath("../Images/TemplateImages/Tick.png"));
                    strHTML = PDFPageSetup.FunPubBindImages(listImageName1, listImagePath1, strHTML);
                    strHTML = strHTML.Replace("~T~", "");
                    strHTML = strHTML.Replace("~M~", "");
                    strHTML = strHTML.Replace("~I~", "");
                    strHTML = strHTML.Replace("~C~", "");
                    strHTML = strHTML.Replace("~S~", "");
                }
                else
                {
                    List<string> listImageName1 = new List<string>();
                    listImageName1.Add("~I~");
                    List<string> listImagePath1 = new List<string>();
                    listImagePath1.Add(Server.MapPath("../Images/TemplateImages/Tick.png"));
                    strHTML = PDFPageSetup.FunPubBindImages(listImageName1, listImagePath1, strHTML);
                    strHTML = strHTML.Replace("~T~", "");
                    strHTML = strHTML.Replace("~M~", "");
                    strHTML = strHTML.Replace("~S~", "");
                    strHTML = strHTML.Replace("~C~", "");
                    strHTML = strHTML.Replace("~P~", "");
                }

                if (dsApplicationKYCDetails.Tables[2].Rows.Count > 0)
                {
                    if (dsApplicationKYCDetails.Tables[2].Rows[0]["MARGIN_TO_DEALER"].ToString() == "1")
                    {
                        List<string> listImageName1 = new List<string>();
                        listImageName1.Add("~MARTODEL~");
                        List<string> listImagePath1 = new List<string>();
                        listImagePath1.Add(Server.MapPath("../Images/TemplateImages/Tick.png"));
                        strHTML = PDFPageSetup.FunPubBindImages(listImageName1, listImagePath1, strHTML);
                        strHTML = strHTML.Replace("~MARTOCOMP~", "           ");
                    }
                    else if (dsApplicationKYCDetails.Tables[2].Rows[0]["MARGIN_TO_COMPANY"].ToString() == "1")
                    {
                        List<string> listImageName1 = new List<string>();
                        listImageName1.Add("~MARTOCOMP~");
                        List<string> listImagePath1 = new List<string>();
                        listImagePath1.Add(Server.MapPath("../Images/TemplateImages/Tick.png"));
                        strHTML = PDFPageSetup.FunPubBindImages(listImageName1, listImagePath1, strHTML);
                        strHTML = strHTML.Replace("~MARTODEL~", "            ");
                    }
                    else
                    {
                        strHTML = strHTML.Replace("~MARTOCOMP~", "           ");
                        strHTML = strHTML.Replace("~MARTODEL~", "            ");
                        strHTML = strHTML.Replace("~TYPE~", "");
                    }
                }
                else
                {
                    strHTML = strHTML.Replace("~MARTOCOMP~", "           ");
                    strHTML = strHTML.Replace("~MARTODEL~", "            ");
                    strHTML = strHTML.Replace("~INSTALMENT_AMOUNT~", "");
                    strHTML = strHTML.Replace("~TYPE~", "");
                }

                PDFPageSetup.FunPubSaveDocument(strHTML.Trim(), FilePath, FileName, "P", 1, ObjS3GSession.ProDateFormatRW);
            }
        }
        catch (Exception ex)
        {
            return;
        }
    }
    public static string FunPubBindCheckedImages(List<string> listImageName, List<string> listImagePath, string strHTML)
    {
        try
        {
            for (int i = 0; i < listImageName.Count; i++)
            {
                string ImageTag = "<img src='" + listImagePath[i].ToString() + "' alt='Image'>";
                if (strHTML.Contains(listImageName[i].ToString()))
                    strHTML = strHTML.Replace(listImageName[i].ToString(), ImageTag);
            }
            return strHTML;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw ex;
        }
    }
    //private void FunPriGenerateFiles(List<string> filepaths, string OutputFile, string DocumentType)
    //{
    //    try
    //    {
    //        object fileFormat = null;
    //        object file = null;
    //        object oMissing = System.Reflection.Missing.Value;
    //        object readOnly = false;
    //        object oFalse = false;
    //        string[] filesToMerge = filepaths.ToArray();

    //        if (DocumentType == "P")
    //        {
    //            PDFPageSetup.MergePDFs(filesToMerge, OutputFile);

    //            for (int i = 0; i < filesToMerge.Length; i++)
    //            {
    //                if (File.Exists(filesToMerge[i]) == true)
    //                {
    //                    File.Delete(filesToMerge[i]);
    //                }
    //            }
    //        }
    //        else if (DocumentType == "W")
    //        {
    //            fileFormat = Microsoft.Office.Interop.Word.WdSaveFormat.wdFormatDocument;
    //            file = OutputFile;
    //            Microsoft.Office.Interop.Word._Application wordApplication = new Microsoft.Office.Interop.Word.Application();
    //            Microsoft.Office.Interop.Word._Document wordDocument = wordApplication.Documents.Add(ref oMissing, ref oMissing, ref oMissing, ref oMissing);
    //            Microsoft.Office.Interop.Word.Selection selection = wordApplication.Selection;
    //            int temp = 0;
    //            foreach (string file1 in filesToMerge)
    //            {
    //                temp++;
    //                Microsoft.Office.Interop.Word._Document CurrentDocument = wordApplication.Documents.Add(file1);
    //                //PDFPageSetup.CopyPageSetupForWord(CurrentDocument.PageSetup, wordDocument.Sections.Last.PageSetup);
    //                CurrentDocument.Range().Copy();
    //                selection.PasteAndFormat(Microsoft.Office.Interop.Word.WdRecoveryType.wdFormatOriginalFormatting);
    //                if (temp != filesToMerge.Length)
    //                    selection.InsertBreak(Microsoft.Office.Interop.Word.WdBreakType.wdSectionBreakNextPage);
    //            }
    //            wordDocument.ActiveWindow.ActivePane.View.SeekView = Microsoft.Office.Interop.Word.WdSeekView.wdSeekCurrentPageFooter;
    //            wordDocument.SaveAs(ref file, ref fileFormat, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing
    //                , ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing, ref oMissing);
    //            wordDocument.Close(ref oFalse, ref oMissing, ref oMissing);
    //            wordApplication.Quit(ref oMissing, ref oMissing, ref oMissing);

    //            for (int i = 0; i < filesToMerge.Length; i++)
    //            {
    //                if (File.Exists(filesToMerge[i]) == true)
    //                {
    //                    File.Delete(filesToMerge[i]);
    //                }
    //            }
    //        }

    //    }
    //    catch (System.IO.IOException ex)
    //    {
    //        Utility.FunShowAlertMsg(this.Page, "Error: Unable to Print");
    //    }
    //}

    private void FunPriDownloadFile(string OutputFile, string strNumber)
    {
        Session["LPO_File"] = null;
        Session["WELCOME_File"] = null;
        if (txtApplication_Followup.Text.Trim() != string.Empty)
        {
            Session["KYC_File"] = "KYCPrint_" + txtApplication_Followup.Text.Replace("/", "_").Replace(" ", "").Replace(":", "");
        }
        else
        {
            if (strNumber.Trim() != string.Empty)
            {
                Session["KYC_File"] = "KYCPrint_" + strNumber + "_" + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss");
            }
            else
            {
                Session["KYC_File"] = "KYCPrint_" + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss");
            }
        }
        string strnewFile = OutputFile;
        string strScipt = "window.open('../Common/S3GViewFileKYC.aspx?qsFileName=" + strnewFile.Replace(@"\", "/") + "&qsNeedPrint=yes', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
        ScriptManager.RegisterStartupScript(this, this.GetType(), "KYC", strScipt, true);
    }

    private void FunPriDownloadLPOFile(string OutputFile, string strNumber)
    {
        Session["KYC_File"] = null;
        Session["WELCOME_File"] = null;
        if (txtApplication_Followup.Text.Trim() != string.Empty)
        {
            Session["LPO_File"] = "LPOPrint_" + txtApplication_Followup.Text.Replace("/", "_").Replace(" ", "").Replace(":", "");
        }
        else
        {
            if (strNumber.Trim() != string.Empty)
            {
                Session["LPO_File"] = "LPOPrint_" + strNumber + "_" + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss");
            }
            else
            {
                Session["LPO_File"] = "LPOPrint_" + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss");
            }
        }
        string strnewFile = OutputFile;
        string strScipt = "window.open('../Common/S3GViewFileKYC.aspx?qsFileName=" + strnewFile.Replace(@"\", "/") + "&qsNeedPrint=yes', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
        ScriptManager.RegisterStartupScript(this, this.GetType(), "LPO", strScipt, true);
    }

    private void FunPriDownloadWelcomeFile(string OutputFile, string strNumber)
    {
        Session["KYC_File"] = null;
        Session["LPO_File"] = null;
        Session["PMC_FILE"] = null;
        Session["BATCH_File"] = null;
        Session["CHEQUE_PRINT"] = null;
        if (txtApplication_Followup.Text.Trim() != string.Empty)
        {
            Session["WELCOME_File"] = "WELCOMEPrint_" + txtApplication_Followup.Text.Replace("/", "_").Replace(" ", "").Replace(":", "");
        }
        else
        {
            if (strNumber.Trim() != string.Empty)
            {
                Session["WELCOME_File"] = "WELCOMEPrint_" + strNumber + "_" + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss");
            }
            else
            {
                Session["WELCOME_File"] = "WELCOMEPrint_" + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss");
            }
        }
        string strnewFile = OutputFile;
        string strScipt = "window.open('../Common/S3GViewFileKYC.aspx?qsFileName=" + strnewFile.Replace(@"\", "/") + "&qsNeedPrint=yes', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
        ScriptManager.RegisterStartupScript(this, this.GetType(), "LPO", strScipt, true);
    }

    public string FunPubBindTable(string strtblName, string strHTML, DataTable dtHeader)
    {
        try
        {
            string row = "";
            string newtr = String.Empty;
            var startTag = "";
            var endTag = "";
            int startIndex = 0;
            int endIndex = 0;
            string strrow = "";
            string strTable;

            startTag = strtblName;
            endTag = "</table>";
            startIndex = strHTML.LastIndexOf("<table", strHTML.IndexOf(startTag) + startTag.Length);
            endIndex = strHTML.IndexOf(endTag, startIndex) + endTag.Length;
            strTable = strHTML.Substring(startIndex, endIndex - startIndex);
            string strtempTable = strTable;


            startTag = "<tr";
            endTag = "</tr>";
            startIndex = strtempTable.IndexOf(startTag);
            endIndex = strtempTable.IndexOf(endTag, startIndex) + endTag.Length;
            strrow = strtempTable.Substring(startIndex, endIndex - startIndex);
            strtempTable = strtempTable.Replace(strrow, "");
            strHTML = strHTML.Replace(strTable, strtempTable);

            startTag = "<tr";
            endTag = "</tr>";
            startIndex = strtempTable.IndexOf(startTag);
            endIndex = strtempTable.IndexOf(endTag, startIndex) + endTag.Length;
            strrow = strtempTable.Substring(startIndex, endIndex - startIndex);
            strtempTable = strtempTable.Replace(strrow, "");

            startTag = "<tr";
            endTag = "</tr>";
            startIndex = strtempTable.IndexOf(startTag);
            endIndex = strtempTable.IndexOf(endTag, startIndex) + endTag.Length;
            row = strtempTable.Substring(startIndex, endIndex - startIndex);

            for (int i = 0; i < dtHeader.Rows.Count; i++)
            {
                string tr = row;
                DataRow dr = dtHeader.NewRow();
                foreach (DataColumn dcol in dtHeader.Columns)
                {
                    dr = dtHeader.Rows[i];
                    string ColName1 = string.Empty;
                    ColName1 = "~" + dcol.ColumnName + "~";
                    if (tr.Contains(ColName1))
                        tr = tr.Replace(ColName1, dr[dcol].ToString());
                }
                newtr = newtr + " " + tr;
            }
            strHTML = strHTML.Replace(row, newtr);
            return strHTML;
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw ex;
        }
    }

    protected void txtDebtPurchaseLimitFWC_TextChanged(object sender, System.EventArgs e)
    {
        txtDebtPurchaseLimitFWC.Focus();
    }
    protected void txtMarginFWC_TextChanged(object sender, System.EventArgs e)
    {
        txtMarginFWC.Focus();
    }
    protected void txtInvoiceCapValue_TextChanged(object sender, System.EventArgs e)
    {
        txtInvoiceCapValue.funPubChangeCurrencyFormat();
        txtInvoiceCapValue.Focus();

    }
    protected void txtDiscountRateforLineofCredit_TextChanged(object sender, System.EventArgs e)
    {
        txtDiscountRateforLineofCredit.Focus();
    }
    protected void txtPenalRate_TextChanged(object sender, System.EventArgs e)
    {
        txtPenalRate.Focus();
    }
    protected void txtCreditPeriodInDays_TextChanged(object sender, System.EventArgs e)
    {
        txtCreditPeriodInDays.Focus();
    }
    protected void txtResolutionPeriodinDays_TextChanged(object sender, System.EventArgs e)
    {
        txtResolutionPeriodinDays.Focus();
    }
    protected void txtRemarksFWC_TextChanged(object sender, System.EventArgs e)
    {
        txtRemarksFWC.Focus();
    }
    protected void txtSellerName_TextChanged(object sender, System.EventArgs e)
    {
        txtSellerName.Focus();
    }
    protected void txtSellerCode_TextChanged(object sender, System.EventArgs e)
    {
        txtSellerCode.Focus();
    }
    protected void ddlDealType_TextChanged(object sender, System.EventArgs e)
    {
        ddlDealType.Focus();
    }
    public decimal FunPubGetAmountFinanced(string strFinanceAmount, string strMarginPercentage)
    {
        decimal decFinanaceAmt = 0;
        if (strFinanceAmount != "")
            decFinanaceAmt = Convert.ToDecimal(strFinanceAmount); //- FunPubGetMarginAmout(strFinanceAmount, strMarginPercentage);
        return Math.Round(decFinanaceAmt, 3);

    }
    private void FunPriGenerateWelcomeLetter()
    {
        try
        {

            System.Data.DataTable dttmp = new System.Data.DataTable();
            Dictionary<string, string> Procpam;
            Procpam = new Dictionary<string, string>();
            Procpam.Add("@Company_Id", intCompanyId.ToString());
            Procpam.Add("@Lob_Id", ddlLOB.SelectedValue);
            Procpam.Add("@Location_ID", "");
            Procpam.Add("@language", "1");
            Procpam.Add("@Template_Type_Code", "127");
            dttmp = Utility.GetDefaultData("S3G_Get_TemplateCont", Procpam);
            if (dttmp == null)
            {
                Utility.FunShowAlertMsg(this, "Template not defined in Template Master");//127
                return;
            }
            else
            {
                if (dttmp.Rows.Count == 0)
                {
                    Utility.FunShowAlertMsg(this, "Template not defined in Template Master");//127
                    return;
                }
            }

            System.Data.DataTable dttemp = new System.Data.DataTable();
            Dictionary<string, string> Procparam;
            Procparam = new Dictionary<string, string>();
            Procparam.Add("@Company_Id", intCompanyId.ToString());
            Procparam.Add("@Lob_Id", ddlLOB.SelectedValue);
            Procparam.Add("@Location_ID", "");
            Procparam.Add("@language", "1");
            Procparam.Add("@Template_Type_Code", "128");
            dttemp = Utility.GetDefaultData("S3G_Get_TemplateCont", Procparam);
            if (dttemp == null)
            {
                Utility.FunShowAlertMsg(this, "Template not defined for Welcome Letter Guarantor in Template Master");//128
                return;
            }
            else
            {
                if (dttemp.Rows.Count == 0)
                {
                    Utility.FunShowAlertMsg(this, "Template not defined for Welcome Letter Guarantor in Template Master");//128
                    return;
                }
            }

            int intTemplateType = 127;
            String strHTML = String.Empty;
            string strReportType = string.Empty;
            var filepaths = new List<string>();
            var outputfilepaths = new List<string>();
            string FileName = "";
            string FilePath = "";
            string DownFile = "";
            Session["WelcomeLetterDetails"] = null;
            Dictionary<string, string> dictParam;
            dictParam = new Dictionary<string, string>();
            dictParam.Add("@Company_Id", Convert.ToString(intCompanyId));
            dictParam.Add("@APPLICATION_PROCESS_ID", Convert.ToString(intApplicationProcessId));
            dictParam.Add("@User_Id", Convert.ToString(intUserId));
            DataSet dsHeader = new DataSet();
            dsHeader = Utility.GetDataset("GET_WELCOMELETTER_PRINT", dictParam);
            Session["WelcomeLetterDetails"] = dsHeader;
            if (dsHeader.Tables[0].Rows.Count == 0 || dsHeader.Tables[0].Rows.Count == null)
            {
                Utility.FunShowAlertMsg(this, "Invalid Data or Template not defined for this application");//127
                return;
            }
            if (dsHeader.Tables[0].Rows.Count > 0)
            {
                strHTML = string.Empty;
                strReportType = "1";
                strHTML = PDFPageSetup.FunPubGetTemplateContent(intCompanyId, Convert.ToInt32(intProgramID), 1 /*English*/, intTemplateType, intApplicationProcessId.ToString());
                if (strHTML == "")
                {
                    Utility.FunShowAlertMsg(this.Page, ValidationMsgs.PMTPRT1);//107
                    return;
                }
                FileName = PDFPageSetup.FunPubGetFileName(intApplicationProcessId + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss"));
                FilePath = Server.MapPath(".") + "\\PDF Files\\";
                DownFile = FilePath + FileName + ".pdf";
                SaveDocumentWelcomeLetter(strHTML, txtAccountNumber.Text, FilePath, FileName, "1");
                filepaths.Add(DownFile);
            }
            DataTable dt = new System.Data.DataTable();
            dt = dsHeader.Tables[1];
            if (dt.Rows.Count > 0)
            {
                String strGuaHTML = String.Empty;
                String strGuaHTMLMain = String.Empty;
                strHTML = string.Empty;
                int intGuraTemplateType = 128;
                strReportType = "2";
                strGuaHTMLMain = PDFPageSetup.FunPubGetTemplateContent(intCompanyId, Convert.ToInt32(intProgramID), 1 /*English*/, intGuraTemplateType, intApplicationProcessId.ToString());
                if (strGuaHTMLMain == "")
                {
                    Utility.FunShowAlertMsg(this.Page, ValidationMsgs.PMTPRT1);//107
                    return;
                }
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    strGuaHTML = strGuaHTMLMain;
                    DataRow dr = dt.Rows[i];
                    DataTable dt1 = dt.Clone();
                    dt1.Rows.Add(dr.ItemArray);
                    if (dt1.Rows.Count > 0)
                        strGuaHTML = PDFPageSetup.FunPubBindCommonVariables(strGuaHTML, dt1);
                    List<string> listImageName = new List<string>();
                    listImageName.Add("~CompanyLogo~");
                    List<string> listImagePath = new List<string>();
                    listImagePath.Add(Server.MapPath("../Images/TemplateImages/" + CompanyId + "/CompanyLogo.png"));
                    strGuaHTML = PDFPageSetup.FunPubBindImages(listImageName, listImagePath, strGuaHTML);
                    FileName = PDFPageSetup.FunPubGetFileName(intApplicationProcessId + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss"));
                    FilePath = Server.MapPath(".") + "\\PDF Files\\";
                    DownFile = FilePath + FileName + ".pdf";
                    SaveDocumentWelcomeLetter(strGuaHTML, txtAccountNumber.Text, FilePath, FileName, "2");
                    filepaths.Add(DownFile);
                }
            }
            FilePath = FilePath + intUserId + DateTime.Now.ToString("ddMMMyyyyHHmmss") + ".pdf";
            Utility.FunPriGenerateFilesCheckList(filepaths, FilePath, "P");
            FunPriDownloadWelcomeFile(FilePath, txtAccountNumber.Text);
        }
        catch (Exception ex)
        {
            Utility.FunShowAlertMsg(this.Page, "Error: Unable to Print" + ex.ToString());
        }
    }
    protected void SaveDocumentWelcomeLetter(string strHTML, string ReferenceNumber, string FilePath, string FileName, string strReportType)
    {
        try
        {
            string strHTMLHeader = string.Empty;
            DataSet dsWelcomeLetterDetails = (DataSet)Session["WelcomeLetterDetails"];
            if (strReportType == "1")
            {
                if (dsWelcomeLetterDetails.Tables[0].Rows.Count > 0)
                {
                    List<string> listImageName = new List<string>();
                    listImageName.Add("~CompanyLogo~");
                    List<string> listImagePath = new List<string>();
                    listImagePath.Add(Server.MapPath("../Images/TemplateImages/" + intCompanyId + "/CompanyLogo.png"));
                    strHTML = PDFPageSetup.FunPubBindImages(listImageName, listImagePath, strHTML);
                    strHTML = PDFPageSetup.FunPubBindCommonVariables(strHTML, dsWelcomeLetterDetails.Tables[0]);
                }
                PDFPageSetup.FunPubSaveDocument(strHTML.Trim(), FilePath, FileName, "P", 1, ObjS3GSession.ProDateFormatRW, "", strHTMLHeader);
            }
            if (strReportType == "2")
            {
                if (dsWelcomeLetterDetails.Tables[0].Rows.Count > 0)
                {
                    List<string> listImageName = new List<string>();
                    listImageName.Add("~CompanyLogo~");
                    List<string> listImagePath = new List<string>();
                    listImagePath.Add(Server.MapPath("../Images/TemplateImages/" + intCompanyId + "/CompanyLogo.png"));
                    strHTML = PDFPageSetup.FunPubBindImages(listImageName, listImagePath, strHTML);
                    strHTML = PDFPageSetup.FunPubBindCommonVariables(strHTML, dsWelcomeLetterDetails.Tables[0]);
                }
                PDFPageSetup.FunPubSaveDocument(strHTML.Trim(), FilePath, FileName, "P", 1, ObjS3GSession.ProDateFormatRW, "", strHTMLHeader);
            }
        }
        catch (Exception ex)
        {
            return;
        }
    }
    public void GenerateOverDueIntrestCalculation()
    {
        String strHTML = String.Empty;
        strHTML = PDFPageSetup.FunPubGetTemplateFromMaster(intCompanyId, 0, "", 142, "0", 1);

        if (strHTML == "")
        {
            Utility.FunShowAlertMsg(this, "Template not defined in Template Master");//30
            return;
        }

        string strReportType = string.Empty;
        var filepaths = new List<string>();
        var outputfilepaths = new List<string>();
        Session["ODIDetails"] = null;
        Dictionary<string, string> dictParam;
        dictParam = new Dictionary<string, string>();
        dictParam.Add("@Company_Id", Convert.ToString(intCompanyId));
        dictParam.Add("@APPLICATION_PROCESS_ID", Convert.ToString(intApplicationProcessId));
        dictParam.Add("@User_Id", Convert.ToString(intUserId));
        DataSet dsHeader = new DataSet();
        dsHeader = Utility.GetDataset("LA_GET_ODI_INST_CAL_PRINT", dictParam);
        Session["ODIDetails"] = dsHeader;

        List<string> listImageName = new List<string>();
        listImageName.Add("~CompanyLogo~");
        List<string> listImagePath = new List<string>();
        listImagePath.Add(Server.MapPath("../Images/TemplateImages/" + CompanyId + "/CompanyLogo.png"));

        strHTML = PDFPageSetup.FunPubBindImages(listImageName, listImagePath, strHTML);
        if (dsHeader.Tables[0].Rows.Count == 0)
        {
            strHTML = strHTML.Replace("~TOTALINSTALAMOUNT~", "");
            strHTML = strHTML.Replace("~TOTPENALINTEREST~", "");
            strHTML = strHTML.Replace("~TOTALAFCDUE~", "");
            strHTML = strHTML.Replace("~AFCRECEIVED~", "");
            strHTML = strHTML.Replace("~BALANCEAFCDUE~", "");
        }
        if (dsHeader.Tables[1].Rows.Count > 0)
            strHTML = PDFPageSetup.FunPubBindCommonVariables(strHTML, dsHeader.Tables[1]);
        if (strHTML.Contains("~CREATED_BY~"))
            strHTML = strHTML.Replace("~CREATED_BY~", ObjUserInfo.ProUserNameRW.ToString());
        if (strHTML.Contains("~tblodi~"))
            strHTML = PDFPageSetup.FunPubBindTable("~tblodi~", strHTML, dsHeader.Tables[0]);
        string filePath = "";
        string StrFinalPath = "ODI";

        PDFPageSetup.FunPrintTemplate(strHTML, "P", StrFinalPath, Server.MapPath("."), UserId.ToString(), "", "", true, out filePath);
    }

    public bool FunPubValidateTotalAmountInner(DataTable DtRepayGrid,
        string strFinanceAmount, string strMarginPercentage, string strReturnPattern,
        string strRate, string strTenureType, string strTenure, out decimal decActualAmount,
        out decimal decTotalAmount, string strOption, decimal decRoundOff)
    {
        decimal decFinAmount = FunPubGetAmountFinanced(strFinanceAmount, strMarginPercentage);
        decimal decRate = 0;

        if (strRate == "")
            strRate = "0";
        decRate = Convert.ToDecimal(strRate);

        switch (strReturnPattern)
        {
            case "3":
                if (decRoundOff == 0)//Added by Kali tolsove divide by zero error on 15-Jun-2012
                    decTotalAmount = (Math.Round(((decFinAmount / 1000) * decRate), 0)) * Convert.ToInt32(strTenure);
                else
                    decTotalAmount = (Math.Round(((decFinAmount / 1000) * decRate) / decRoundOff, 0) * decRoundOff) * Convert.ToInt32(strTenure);
                break;
            case "4":
                if (decRoundOff == 0)
                    decTotalAmount = (Math.Round(((decFinAmount / 100000) * decRate), 0)) * Convert.ToInt32(strTenure);
                else
                    decTotalAmount = (Math.Round(((decFinAmount / 100000) * decRate) / decRoundOff, 0) * decRoundOff) * Convert.ToInt32(strTenure);
                break;
            case "5":
                if (decRoundOff == 0)
                    decTotalAmount = (Math.Round(((decFinAmount / 1000000) * decRate), 0)) * Convert.ToInt32(strTenure);
                else
                    decTotalAmount = (Math.Round(((decFinAmount / 1000000) * decRate) / decRoundOff, 0) * decRoundOff) * Convert.ToInt32(strTenure);
                break;
            default:
                decTotalAmount = decFinAmount +
                   Math.Round(FunPubInterestAmount
                   (strTenureType, decFinAmount, decRate, Convert.ToInt32(strTenure)), 3);

                if (ddlLifeInsurance.SelectedValue == "2")
                {
                    decTotalAmount = decTotalAmount + Convert.ToDecimal(txtLifeInsuranceCustomerPremiumAmount.Text);
                }
                break;
        }

        decActualAmount = 0;

        decActualAmount = (decimal)(DtRepayGrid).Compute("Sum(TotalPeriodInstall)", "CashFlow_Flag_ID = 23  or CashFlow_Flag_ID = '23'");




        if (strOption == "1") /* Oprion 1 - Check Whether the total installment 
                               * amount exceed the Total repay amount when add 
                               * the repay details ( Structure Adhoc Method) */
        {
            if (decActualAmount > decTotalAmount)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        else /* strOption == "" - Check the total installment amount is equal to the Total repay amount when Re-Calculate the IRR */
        {
            if (decActualAmount == decTotalAmount)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
    public decimal FunPubInterestAmount(string strTenureType, decimal decPrincipleAmount, decimal decRateofInt, int intTenure)
    {
        decimal decInterestAmount = 0;
        switch (strTenureType.ToLower())
        {
            case "monthly":
                decInterestAmount = Math.Round(decPrincipleAmount * decRateofInt * intTenure / 1200, 5);
                break;
            case "weeks":
                decInterestAmount = Math.Round(decPrincipleAmount * decRateofInt * intTenure / 5200, 4);
                break;
            case "days":
                decInterestAmount = Math.Round(decPrincipleAmount * decRateofInt * intTenure / 36500, 4);
                break;
        }
        return decInterestAmount;
    }

    protected void txtPdcStartDate_TextChanged(object sender, System.EventArgs e)
    {
        try
        {
            if (txtPdcStartDate.Text != string.Empty)
            {
                if (txtTenure.Text == string.Empty)
                {
                    txtPdcStartDate.Text = string.Empty;
                    Utility.FunShowAlertMsg(this, "Enter the Tenure");
                    return;
                }

                if (ViewState["OFFER_DATE"] != null)
                {
                    if (txtPdcStartDate.Text != string.Empty)
                        if (Utility.StringToDate(txtPdcStartDate.Text) < Utility.StringToDate(ViewState["OFFER_DATE"].ToString()))
                        {
                            Utility.FunShowAlertMsg(this, "PDC Start Date should be greater or Equal to Check List Date(" + ViewState["OFFER_DATE"].ToString() + ")");
                            txtPdcStartDate.Text = string.Empty;
                            txtPdcStartDate.Focus();
                            return;
                        }
                }

                txtFirstInstallmentDueDate.Text = txtFirstInstallDate.Text = txtPdcStartDate.Text;
                txtPDCEndDate.Text = txtLastInstallmentDueDate.Text = Utility.StringToDate(txtFirstInstallDate.Text).AddMonths(Convert.ToInt32(txtTenure.Text) - 1).ToString(strDateFormat);
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }

    }

    protected void gvRepaymentSummary_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            string TotalPeriodInstall = DataBinder.Eval(e.Row.DataItem, "TotalPeriodInstall").ToString();
            e.Row.Cells[1].Text = Utility.funPubChangeCurrencyFormat(TotalPeriodInstall);
        }

    }

    protected void ddlSubvention_SelectedIndexChanged(object sender, System.EventArgs e)
    {
        try
        {
            if (ddlSubvention.SelectedValue == "1")
            {
                if (Session["PricingAssetDetails"] == null)
                {
                    Utility.FunShowAlertMsg(this, "Checklist Asset Details not Exists");
                    ddlSubvention.SelectedValue = "0";
                }
                DataTable dtPriAsset = (DataTable)Session["PricingAssetDetails"];
                if (dtPriAsset.Rows[0]["MANUFACTORING_YEAR"].ToString() == string.Empty)
                {
                    Utility.FunShowAlertMsg(this, "Enter the Manufacturing Year in Asset Tab");
                    ddlSubvention.SelectedValue = "0";
                }
                Dictionary<string, string> strProparm = new System.Collections.Generic.Dictionary<string, string>();
                strProparm.Add("@OPTION", "28");
                strProparm.Add("@COMPANYID", intCompanyId.ToString());
                strProparm.Add("@USERID", intUserId.ToString());
                strProparm.Add("@LOB_ID", ddlLOB.SelectedValue);
                strProparm.Add("@DEALERID", ddlDealerName.SelectedValue);
                strProparm.Add("@ASSET_TYPE", dtPriAsset.Rows[0]["ASSET_TYPE"].ToString());
                strProparm.Add("@ASSET_ID", dtPriAsset.Rows[0]["ASSET_ID"].ToString());
                strProparm.Add("@MODEL_YEAR", dtPriAsset.Rows[0]["MANUFACTORING_YEAR"].ToString());
                strProparm.Add("@Scheme_Id", ddlProductCodeList.SelectedValue);
                strProparm.Add("@Tenor", txtTenure.Text);
                strProparm.Add("@LOCATION_ID", ddlBranchList.SelectedValue);

                DataTable dt = Utility.GetDefaultData("S3G_OR_LOAD_LOV_APP", strProparm);
                if (dt.Rows[0]["FLAT_RATE"].ToString() == "0")
                {
                    Utility.FunShowAlertMsg(this, "Parameters(Lob/Scheme/Dealer/Asset/Asset Mode year/Tenor) not matching Check the Deal Special Scheme Rate Master ");
                    ddlSubvention.SelectedValue = "0";
                    return;
                }
                else
                {
                    int IDivdeTenor = Convert.ToInt32(txtTenure.Text) / 12;
                    decimal decTotaRate = Convert.ToDecimal(dt.Rows[0]["FLAT_RATE"].ToString()) * IDivdeTenor;
                    decimal TotaSubventionamount = Convert.ToDecimal(txtFinanceAmount.Text) * decTotaRate / 100;
                    txtTotalSubvetionamount.Text = TotaSubventionamount.ToString(Funsetsuffix());
                }
            }


        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
        }
        finally
        {

        }
    }
    private void FunPriBindMarginMoneyOutflow()//Magesh A 23-08-2021
    {
        try
        {

            TextBox txtName2 = (TextBox)ucCustomerCodeLov.FindControl("txtName");
            HiddenField hdnCID2 = (HiddenField)ucCustomerCodeLov.FindControl("hdnID");

            DataTable dsAssetDetails = (DataTable)Session["PricingAssetDetails"];

            DataTable dtLoopEntity = new DataTable();
            dtLoopEntity = dsAssetDetails.DefaultView.ToTable(true, "Entity_ID", "Entity_Code");

            if (dsAssetDetails != null)
            {

                decimal decTotalDownaymenttoMFC = Convert.ToDecimal(((DataTable)Session["PricingAssetDetails"]).Compute("sum(Margin_MFC_1)", "1=1").ToString());

                if (decTotalDownaymenttoMFC > 0)
                {
                    foreach (DataRow dr3 in dtLoopEntity.Rows)
                    {
                        string strMorginAmountE = dsAssetDetails.Compute("sum(Margin_MFC_1)", "Entity_ID='" + dr3["Entity_ID"].ToString() + "' and Margin_MFC_1>0 and Pay_To_Id=137").ToString();
                        if (strMorginAmountE != string.Empty)
                        {
                            DtCashFlow = (DataTable)ViewState["DtCashFlowOut"];
                            DataSet dsDownpayment = (DataSet)ViewState["OutflowDDL"];
                            string[] strArrayIds = null;
                            string cashflowdesc = "";

                            foreach (DataRow drOut in dsDownpayment.Tables[2].Rows)
                            {
                                string[] strCashflow = drOut["CashFlow_ID"].ToString().Split(',');
                                if (strCashflow[4].ToString() == "43")//Margin Money Payable
                                {
                                    strArrayIds = strCashflow;
                                    cashflowdesc = drOut["CashFlow_Description"].ToString();
                                }
                            }
                            if (strArrayIds == null)
                            {
                                Utility.FunShowAlertMsg(this, "Margin Money Cashinflow not defined");
                                //return;
                            }

                            if (strArrayIds != null)
                            {
                                DataTable dtOutFlow = ((DataTable)ViewState["DtCashFlowOut"]);
                                if (txtApplicationDateDate.Text != string.Empty)
                                {

                                    DataRow drOutFlow = dtOutFlow.NewRow();
                                    drOutFlow["Date"] = Utility.StringToDate(txtApplicationDateDate.Text);
                                    drOutFlow["CashOutFlowID"] = strArrayIds[0];
                                    drOutFlow["CashOutFlow"] = cashflowdesc;
                                    drOutFlow["EntityID"] = dr3["Entity_ID"].ToString();
                                    drOutFlow["Entity"] = dr3["Entity_Code"].ToString();
                                    drOutFlow["OutflowFromId"] = "145";
                                    drOutFlow["OutflowFrom"] = "Entity";
                                    drOutFlow["Amount"] = Convert.ToDecimal(decTotalDownaymenttoMFC).ToString(Funsetsuffix());
                                    drOutFlow["Accounting_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[1]));
                                    drOutFlow["Business_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[2]));
                                    drOutFlow["Company_IRR"] = Convert.ToBoolean(Convert.ToByte(strArrayIds[3]));
                                    drOutFlow["CashFlow_Flag_ID"] = "43";//Margin Money Payable
                                    dtOutFlow.Rows.Add(drOutFlow);

                                    ViewState["DtCashFlowOut"] = dtOutFlow;
                                    if (dtOutFlow.Rows.Count > 0)
                                    {
                                        gvOutFlow.DataSource = dtOutFlow;
                                        gvOutFlow.DataBind();
                                    }
                                    FunPriGenerateNewOutflow();
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex, strPageName);
            throw new ApplicationException("Unable to Load scheme charges");
        }
    }
    protected void btnyes_Click(object sender, System.EventArgs e)
    {
        progress.Visible = true;
        mp1.Hide();
        pnlRiskVal.Visible = false;
        
        btnLoadCheckList_OnClick(null, null);
        ddlCreditPurpose.Focus();

    }
    protected void btnNo_Click(object sender, System.EventArgs e)
    {
        mp1.Hide();
        pnlRiskVal.Visible = false;
    }
}

public static class ControlsExtend
{
    public static void ToUpper(this DropDownList dropDown)
    {
        foreach (ListItem t in dropDown.Items)
            t.Text = t.ToString().ToUpper();
    }
    public static void SetPercentagePrefixSuffixInline(this TextBox txtBox, int intPrefix, int intSuffix, bool IsZeroCheckReq, bool IsNegativeRequired, string strFieldName)
    {
        DataTable dtTable = new DataTable();
        Dictionary<string, string> Procparam = new Dictionary<string, string>();
        try
        {
            txtBox.MaxLength = intPrefix + intSuffix + 1;
            if (IsNegativeRequired)
            {
                txtBox.Attributes.Add("onkeypress", "fnAllowNumbersOnly(true,true,this);");
            }
            else
            {
                txtBox.Attributes.Add("onkeypress", "fnAllowNumbersOnly(true,false,this);");
            }
            txtBox.Attributes.Add("onkeyup", "funCutDecimal(this,'" + intSuffix + "')");
            if (IsZeroCheckReq)
            {
                txtBox.Attributes.Add("onblur", "funChkDecimial(this,'" + intPrefix.ToString() + "','" + intSuffix.ToString() + "','" + strFieldName + "',true);");
            }
            else
            {
                txtBox.Attributes.Add("onblur", "funChkDecimial(this,'" + intPrefix.ToString() + "','" + intSuffix.ToString() + "','" + strFieldName + "',false);");
            }

            txtBox.Style.Add("text-align", "right");
            txtBox.Attributes.Add("onpaste", "return false;");
        }
        catch (Exception ex)
        {
            ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw ex;
        }

    }

    public static void Enabled_False_Link_Asp(this LinkButton btn)
    {
        btn.Enabled = false;
        btn.CssClass = "grid_btn_delete_disabled";
    }

    public static void Enabled_True_Link_Asp(this LinkButton btn)
    {
        btn.Enabled = true;
        btn.CssClass = "grid_btn";
    }

    public static void Enabled_True_Asp(this LinkButton btn)
    {
        btn.Enabled = true;
        btn.CssClass = "grid_btn";
    }

    //public static string UppercaseFirst(string s)
    //{
    //    if (string.IsNullOrEmpty(s))
    //        return string.Empty;

    //    return char.ToUpper(s[0]) + s.Substring(1);
    //}
}
interface Iapplication
{

}