#region Page Header
/// © 2010 SUNDARAM INFOTECH SOLUTIONS P LTD . All rights reserved
/// 
/// <Program Summary>
/// Module Name			: System Admin  
/// Screen Name			: Location Master add
/// Created By			: Tamilselvan.S
/// Created Date		: 04 May 2011
/// Purpose	            : 
#endregion

#region [Namespace]

using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using S3GBusEntity;
using System.Collections.Generic;
using System.Text;

#endregion [Namespace]

public partial class System_Admin_S3GSysAdminLocationMaster_Add : ApplyThemeForProject
{
    #region Initialization

    static string[] strarrControlsID = new string[0];
    int intCompanyId = 0;
    int intUserId = 0;
    static string strPageName = "Location Master";
    int intErrorCode = 0;
    int intLocationCat_ID = 0;
    int intLocationMap_ID = 0;
    SerializationMode SerMode = SerializationMode.Binary;

    ApplyThemeForProject ATFP = new ApplyThemeForProject();
    UserInfo usrInfo = new UserInfo();
    //User Authorization
    string strType = "Cate";
    string strMode = string.Empty;
    bool bCreate = false;
    bool bModify = false;
    bool bQuery = false;
    bool bDelete = false;
    bool bMakerChecker = false;
    bool bClearList = false;
    static DataTable dtHierarchyWidth = new DataTable();
    //Code end

    S3GSession ObjS3GSession = new S3GSession();
    S3GAdminServicesReference.S3GAdminServicesClient objAdminService;
    S3GBusEntity.SystemAdmin.S3G_SYSAD_LocationCategoryDataTable objLocationCategory_DataTable = new SystemAdmin.S3G_SYSAD_LocationCategoryDataTable();
    S3GBusEntity.SystemAdmin.S3G_SYSAD_LocationCategoryRow objLocationCategory_DataRow;
    S3GBusEntity.SystemAdmin.S3G_SYSAD_LocationMasterDataTable objLocationMaster_DataTable = new SystemAdmin.S3G_SYSAD_LocationMasterDataTable();
    S3GBusEntity.SystemAdmin.S3G_SYSAD_LocationMasterRow objLocationMaster_DataRow;

    string strRedirectPageView = "window.location.href='../System Admin/S3GSysAdminLocationMaster_View.aspx';";
    string strRedirectPageAdd = "window.location.href='../System Admin/S3GSysAdminLocationMaster_Add.aspx';";
    string strRedirectPage = "~/System Admin/S3GSysAdminLocationMaster_View.aspx";
    string strErrorMessage = @"Correct the following validation(s):<ul><li> ";
    string strErrorMsgLast = @"</ul></li>";

    #endregion Initialization

    #region [Page Event's]

    protected void Page_PreInit(object sender, EventArgs e)
    {

        if (usrInfo.ProCompanyIdRW == 0)
            HttpContext.Current.Response.Redirect("../SessionExpired.aspx");

        if (Request.QueryString["qsMode"] != null)
        {
            //_pageMode = Request.QueryString["qsMode"];             
            SetPageMode(Request.QueryString["qsMode"].ToString());
        }

        if (Request.QueryString["qsViewId"] != null)
        {
            FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsViewId"));
            if (fromTicket.Name != null)
                PageIdValue = fromTicket.Name;
        }
        if (Request.QueryString["qsWorkFlow"] != null)
        {
            FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsWorkFlow"));
            if (fromTicket.Name != null)
                isWorkFlowTraveler = true;
            WorkFlowId = fromTicket.Name;

            SetPageMode("w");
        }

        // CPT Setup Master Page 
        //if (Request.QueryString["Popup"] != null)
        //    Page.MasterPageFile = "~/Common/MasterPage.master";
        //else if (Request.QueryString["IsFromAccount"] != null)
        //    Page.MasterPageFile = "~/Common/MasterPage.master";
        //else
        //    Page.MasterPageFile = "~/Common/S3GMasterPageCollapse.master";


        // Setup Page Theme
        Page.Theme = usrInfo.ProUserThemeRW;

        // Initialize from User Information
        CompanyId = usrInfo.ProCompanyIdRW.ToString();
        UserId = usrInfo.ProUserIdRW.ToString();
        // Initialize Date Formate
        DateFormate = ObjS3GSession.ProDateFormatRW; //"dd/MM/yyyy";

        DropDownList d = (DropDownList)Page.Master.FindControl("ddlTheme");
        if (d != null)
            d.SelectedValue = usrInfo.ProUserThemeRW;

        if (!String.IsNullOrEmpty(Request.Form["__EVENTTARGET"]))
        {
            PostBackControlId = Request.Form["__EVENTTARGET"];
        }
        //KeepSessionAlive();


        FunPubLoadActiveHierarchy();
        FunPubLoadHierarchyForMapping();
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            usrInfo = new UserInfo();
            intCompanyId = usrInfo.ProCompanyIdRW;
            intUserId = usrInfo.ProUserIdRW;
            //User Authorization
            bCreate = usrInfo.ProCreateRW;
            bModify = usrInfo.ProModifyRW;
            bQuery = usrInfo.ProViewRW;
            bClearList = Convert.ToBoolean(ConfigurationManager.AppSettings.Get("ClearListValues"));
            //Code end

            if (Request.QueryString["qsMode"] != null)
                strMode = Request.QueryString["qsMode"];
            if (Request.QueryString["Type"] != null)
                strType = Request.QueryString["Type"];
            if (Request.QueryString["qsLocCatId"] != null && strType == "Cate")
            {
                FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsLocCatId"));
                intLocationCat_ID = Convert.ToInt32(fromTicket.Name.ToString());
            }
            else if (Request.QueryString["qsLocMapId"] != null && strType == "Map")
            {
                FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString.Get("qsLocMapId"));
                intLocationMap_ID = Convert.ToInt32(fromTicket.Name.ToString());
            }
            lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Details);
            if (!IsPostBack)
            {
                if (strType == "Cate")
                {
                    Dictionary<string, string> dictParam = new Dictionary<string, string>();
                    dictParam.Add("@Company_ID", "1");
                    if (strMode != "Q" && strMode != "M")
                        dictParam.Add("@IsActive", "1");
                    DataTable dtHierarchy = Utility.GetDefaultData("S3G_SYSAD_GetHierachyMasterDetails", dictParam);
                    rblHierarchy.DataTextField = "Location_Description";
                    rblHierarchy.DataValueField = "Hierachy";
                    rblHierarchy.DataSource = dtHierarchy;
                    rblHierarchy.DataBind();
                    if (dtHierarchy.Rows.Count == 0)
                    {
                        Utility.FunShowAlertMsg(this.Page, "Define Hierarchy Master.");
                        Response.Redirect(strRedirectPage);
                    }
                    if (intLocationCat_ID > 0)
                    {
                        FunPubLoadLocationCategoryDetails();
                    }
                    pnlLocationMapping.Visible = false;
                    if (tcLocCategory.ActiveTab != null && strMode != "M" && strMode != "Q")
                    {
                        DataRow[] drow = dtHierarchyWidth.Select("Location_Description='" + tcLocCategory.ActiveTab.HeaderText + "'");
                        if (drow != null && drow.Count() > 0)
                            txtLocationCode.MaxLength = Convert.ToInt32(drow[0]["Width"]);
                        lblLocationCode.Text = "Location " + tcLocCategory.ActiveTab.HeaderText + " Code";
                        lblLocationDescription.Text = "Location " + tcLocCategory.ActiveTab.HeaderText + " Description";
                    }
                }
                else if (strType == "Map")
                {
                    pnlHierarchyType.Visible = pnlLocationCatDetails.Visible = false;
                    if (intLocationMap_ID > 0)
                    {
                        FunPubLoadLocationMappingDetails();
                    }
                }
            }
            if (strType == "Cate" && strMode != "M" && strMode != "Q")
            {
                //FunPubLoadlocationDetailsBasedOnHierarchy();
                //ContentPlaceHolder CPH = (ContentPlaceHolder)Page.Master.FindControl("ContentPlaceHolder1");
                //AjaxControlToolkit.TabContainer tcDefCat = (AjaxControlToolkit.TabContainer)CPH.FindControl("tcLocCategory");
                //string strHText = tcDefCat.ActiveTab.HeaderText;
                //AjaxControlToolkit.TabPanel tp = (AjaxControlToolkit.TabPanel)tcDefCat.FindControl("tpLocDef" + strHText);
                //GridView gv = ((GridView)tp.FindControl("gv" + strHText));
            }
            if (strType == "Map" && strMode != "M" && strMode != "Q")
            {
                txtLocationMappingCode.Text = "";
                txtMappingDescription.Text = "";
                string strCodes = string.Empty;
                string strSaveCodes = string.Empty;
                string strDescriptions = string.Empty;
                int intCount = 0;
                foreach (string str in strarrControlsID)
                {
                    DropDownList ddlList = new DropDownList();
                    ContentPlaceHolder CPH = (ContentPlaceHolder)Page.Master.FindControl("ContentPlaceHolder1");
                    AjaxControlToolkit.TabContainer tcDefMap = (AjaxControlToolkit.TabContainer)CPH.FindControl("tcLocationMapping");
                    AjaxControlToolkit.TabPanel tpLocDef = (AjaxControlToolkit.TabPanel)tcDefMap.FindControl("tpLocDef" + str);
                    if (tpLocDef != null)
                    {
                        ddlList = ((DropDownList)tpLocDef.FindControl("ddlHierarchy" + str));
                        if (ddlList != null && ddlList.SelectedIndex > 0)
                        {
                            if (intCount == 0)
                            {
                                if (strCodes == string.Empty)
                                {
                                    strCodes += ddlList.SelectedValue;
                                    strSaveCodes += ddlList.SelectedValue;
                                    strDescriptions = ddlList.SelectedItem.Text;
                                }
                                else
                                {
                                    strCodes += ddlList.SelectedValue;  // "|" +
                                    strSaveCodes += "|" + ddlList.SelectedValue;
                                    strDescriptions = ddlList.SelectedItem.Text;
                                }
                            }
                            else
                                ddlList.SelectedIndex = 0;
                        }
                        else
                            intCount++;
                    }
                }
                hdnMappingCode.Value = strSaveCodes;
                txtLocationMappingCode.Text = strCodes;
                txtMappingDescription.Text = strDescriptions;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            cvLocationMaster.IsValid = false;
            cvLocationMaster.ErrorMessage = strErrorMessage + "Unable to load the page." + strErrorMsgLast;
        }
    }

    #endregion [Page Event's]

    #region [Button Event's]

    protected void btnCategoryGo_Click(object sender, EventArgs e)
    {
        try
        {
            DataTable dtLocation = ((DataTable)ViewState["dt_Location"]);
            if (dtLocation == null || dtLocation.Columns.Count != 7)
            {
                dtLocation = FunPubCreateLocationTableStructure();
            }
            if (dtLocation.Rows.Count == 0)
            {
                DataRow drNew = dtLocation.NewRow();
                drNew["SNo"] = dtLocation.Rows.Count + 1;
                drNew["Location_Code"] = txtLocationCode.Text;
                drNew["Location_Description"] = txtLocationName.Text;
                drNew["Hierarchy_Description"] = tcLocCategory.ActiveTab.HeaderText;
                drNew["Hierarchy_Type"] = 0;// Convert.ToInt32(rblHierarchy.SelectedValue);
                dtLocation.Rows.Add(drNew);
                ViewState["dt_Location"] = dtLocation;
            }
            else
            {
                DataRow[] drCode = dtLocation.Select("Location_Code='" + txtLocationCode.Text.Trim() + "'");
                DataRow[] drName = dtLocation.Select("Location_Description='" + txtLocationName.Text.Trim() + "'");

                if (drCode.Count() == 1)
                    Utility.FunShowAlertMsg(this.Page, "Location Code Already Existing in this list : \\n " + txtLocationCode.Text.Trim());
                else if (drName.Count() == 1)
                    Utility.FunShowAlertMsg(this.Page, "Location Description Already Existing in this list : \\n " + txtLocationName.Text.Trim());
                else
                {
                    DataRow drNew = dtLocation.NewRow();
                    drNew["SNo"] = dtLocation.Rows.Count + 1;
                    drNew["Location_Code"] = txtLocationCode.Text;
                    drNew["Location_Description"] = txtLocationName.Text;
                    drNew["Hierarchy_Description"] = tcLocCategory.ActiveTab.HeaderText;
                    drNew["Hierarchy_Type"] = 0;// Convert.ToInt32(rblHierarchy.SelectedValue);
                    dtLocation.Rows.Add(drNew);
                    ViewState["dt_Location"] = dtLocation;
                }
            }
            FunPubLoadlocationDetailsBasedOnHierarchy();
            FunPubClearCategoryuEntry();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            cvLocationMaster.IsValid = false;
            cvLocationMaster.ErrorMessage = strErrorMessage + "Unable to add the Category details." + strErrorMsgLast;
        }
    }

    protected void btnSaveLocationCategory_Click(object sender, EventArgs e)
    {
        try
        {
            if (Page.IsValid)
                FunPubInsertLocationCategory();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            cvLocationMaster.IsValid = false;
            cvLocationMaster.ErrorMessage = strErrorMessage + "Unable to save the location category." + strErrorMsgLast;
        }
    }

    protected void btnCancelLocCategory_Click(object sender, EventArgs e)
    {
        Response.Redirect(strRedirectPage);
    }

    protected void btnSaveLocationMapping_Click(object sender, EventArgs e)
    {
        try
        {
            if (Page.IsValid)
                FunPubInsertLocationMaster();
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            cvLocationMaster.IsValid = false;
            cvLocationMaster.ErrorMessage = strErrorMessage + "Unable to save the location mapping details." + strErrorMsgLast;
        }
    }

    protected void btnLocationMapping_Go_Click(object sender, EventArgs e)
    {
        try
        {
            string[] strCodeCheck = txtLocationMappingCode.Text.Split('|');
            if (strCodeCheck != null && strCodeCheck.Count() == 1)
            {
                Utility.FunShowAlertMsg(this.Page, "Select at least minimum two mapping...");
                return;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            cvLocationMaster.IsValid = false;
            cvLocationMaster.ErrorMessage = strErrorMessage + "" + strErrorMsgLast;
        }
    }

    #endregion [Button Event's]

    #region [Tab Event's]

    protected void tcLocCategory_ActiveTabChanged(object sender, EventArgs e)
    {
        try
        {
            FunPubLoadlocationDetailsBasedOnHierarchy();
        }
        catch (Exception ex)
        {
            cvLocationMaster.IsValid = false;
            cvLocationMaster.ErrorMessage = strErrorMessage + "" + strErrorMsgLast;
        }
    }

    #endregion [Tab Event's]

    #region [Function's]

    #region "Page Values Initialization "

    private void SetPageMode(string queryMode)
    {
        switch (queryMode.ToLower())
        {
            case "c":
                PageMode = PageModes.Create;
                break;
            case "q":
                PageMode = PageModes.Query;
                break;
            case "m":
                PageMode = PageModes.Modify;
                break;
            case "d":
                PageMode = PageModes.Delete;
                break;
            case "w":
                PageMode = PageModes.WorkFlow;
                break;
            default:
                break;
        }
    }
    #endregion

    public void FunPubLoadLocationCategoryDetails()
    {
        try
        {
            DataTable dtLocCategoryDetails;
            objAdminService = new S3GAdminServicesReference.S3GAdminServicesClient();
            byte[] byteLocCatDetails = objAdminService.FunPubQueryLocationCategoryDetails(intCompanyId, intUserId, intLocationCat_ID, SerMode);
            dtLocCategoryDetails = (DataTable)ClsPubSerialize.DeSerialize(byteLocCatDetails, SerMode, typeof(DataTable));
            // rblHierarchy.SelectedValue = Convert.ToString(dtLocCategoryDetails.Rows[0]["Hierarchy_Type"]);
            lblLocationCode.Text = "Location " + Convert.ToString(dtLocCategoryDetails.Rows[0]["Location_Description"]) + " Code";
            lblLocationDescription.Text = "Location " + Convert.ToString(dtLocCategoryDetails.Rows[0]["Location_Description"]) + " Description";
            txtLocationCode.Text = Convert.ToString(dtLocCategoryDetails.Rows[0]["Location_Code"]);
            txtLocationName.Text = Convert.ToString(dtLocCategoryDetails.Rows[0]["LocationCat_Description"]);
            cbxActive.Checked = Convert.ToBoolean(dtLocCategoryDetails.Rows[0]["Is_Active"]);
            rblHierarchy.Enabled = false;
            if (strMode == "Q" || strMode == "M")
            {
                txtLocationCode.ReadOnly = txtLocationName.ReadOnly = true;
                btnCategoryGo.Enabled = btnSaveLocCategory.Enabled = cbxActive.Enabled = false;
                tcLocCategory.Visible = false;
            }
            if (strMode == "M")
                btnSaveLocCategory.Enabled = cbxActive.Enabled = true;
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw new Exception("Unable to load Location Category details");
        }
        finally
        {
            if (objAdminService != null)
                objAdminService.Close();
        }
    }

    public void FunPubLoadLocationMappingDetails()
    {
        try
        {
            Dictionary<string, string> dictParam = new Dictionary<string, string>();
            dictParam.Add("@Company_ID", "1");
            dictParam.Add("@LocationMap_ID", intLocationMap_ID.ToString());
            DataTable dtLocMappingDetails = Utility.GetDefaultData("S3G_SYSAD_GetLocationMappingDetails", dictParam);

            txtLocationMappingCode.Text = Convert.ToString(dtLocMappingDetails.Rows[0]["LocationMap_Code"]).Replace("|", "");
            cbxActiveMapping.Checked = Convert.ToBoolean(dtLocMappingDetails.Rows[0]["Is_Active"]);
            if (strMode == "Q" || strMode == "M")
            {
                txtLocationMappingCode.ReadOnly = true;
                btnSaveLocationMapping.Enabled = false;
                tcLocCategory.Visible = false;
                cbxActiveMapping.Enabled = false;
                if (strMode == "M")
                {
                    cbxActiveMapping.Enabled = btnSaveLocationMapping.Enabled = true;
                }
            }
            string strDescription = string.Empty;
            foreach (string str in strarrControlsID)
            {
                DropDownList ddlList = new DropDownList();
                ContentPlaceHolder CPH = (ContentPlaceHolder)Page.Master.FindControl("ContentPlaceHolder1");
                AjaxControlToolkit.TabContainer tcDefMap = (AjaxControlToolkit.TabContainer)CPH.FindControl("tcLocationMapping");
                AjaxControlToolkit.TabPanel tpLocDef = (AjaxControlToolkit.TabPanel)tcDefMap.FindControl("tpLocDef" + str);
                if (tpLocDef != null)
                {
                    ddlList = ((DropDownList)tpLocDef.FindControl("ddlHierarchy" + str));
                    DataRow[] drow = dtLocMappingDetails.Select("Hierarchy_Description='" + str + "'");
                    if (drow != null && drow.Count() > 0)
                    {
                        ddlList.SelectedValue = Convert.ToString(drow[0]["LocationCat_Code"]);
                        strDescription = ddlList.SelectedItem.Text;
                        ddlList.ClearDropDownList();
                    }
                    if (ddlList != null && ddlList.Items.Count > 0)
                        ddlList.ClearDropDownList();
                }
            }
            txtMappingDescription.Text = strDescription;
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw new Exception("Unable to load Location Mapping details");
        }
    }

    public void FunPubLoadActiveHierarchy()
    {
        try
        {
            Dictionary<string, string> dictParam = new Dictionary<string, string>();
            dictParam.Add("@Company_ID", "1");
            dictParam.Add("@IsActive", "1");
            DataTable dtHierarchy = Utility.GetDefaultData("S3G_SYSAD_GetHierachyMasterDetails", dictParam);
            dtHierarchyWidth = dtHierarchy.Copy();
            ContentPlaceHolder CPH = (ContentPlaceHolder)Page.Master.FindControl("ContentPlaceHolder1");
            AjaxControlToolkit.TabContainer tcDefMap = (AjaxControlToolkit.TabContainer)CPH.FindControl("tcLocCategory");
            AjaxControlToolkit.TabPanel tpLocDef = new AjaxControlToolkit.TabPanel();
            int intCount = 0;
            foreach (DataRow drow in dtHierarchy.Rows)
            {
                tpLocDef = new AjaxControlToolkit.TabPanel();
                tpLocDef.ID = "tpLocDef" + Convert.ToString(drow["Location_Description"]);
                tpLocDef.HeaderText = Convert.ToString(drow["Location_Description"]);
                tcDefMap.Tabs.Add(tpLocDef);
                intCount++;
            }
            if (tcLocCategory.ActiveTab != null)
            {
                DataRow[] drow = dtHierarchyWidth.Select("Location_Description='" + tcLocCategory.ActiveTab.HeaderText + "'");
                if (drow != null && drow.Count() > 0)
                    txtLocationCode.MaxLength = Convert.ToInt32(drow[0]["Width"]);
                lblLocationCode.Text = "Location " + tcLocCategory.ActiveTab.HeaderText + " Code";
                lblLocationDescription.Text = "Location " + tcLocCategory.ActiveTab.HeaderText + " Description";
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw;
        }
    }

    public void FunPubLoadHierarchyForMapping()
    {
        try
        {
            Dictionary<string, string> dictParam = new Dictionary<string, string>();
            dictParam.Add("@Company_ID", "1");
            DataTable dtLocCategory = Utility.GetDefaultData("S3G_SYSAD_GetAllLocationCategory", dictParam);
            dictParam.Add("@IsActive", "1");
            DataTable dtHierarchy = Utility.GetDefaultData("S3G_SYSAD_GetHierachyMasterDetails", dictParam);
            ContentPlaceHolder CPH = (ContentPlaceHolder)Page.Master.FindControl("ContentPlaceHolder1");
            AjaxControlToolkit.TabContainer tcDefMap = (AjaxControlToolkit.TabContainer)CPH.FindControl("tcLocationMapping");
            AjaxControlToolkit.TabPanel tpLocDef = new AjaxControlToolkit.TabPanel();
            int intCount = 0;
            strarrControlsID = new string[dtHierarchy.Rows.Count];

            DropDownList ddlHierarchy = new DropDownList();
            foreach (DataRow drow in dtHierarchy.Rows)
            {
                ddlHierarchy = new DropDownList();
                tpLocDef = new AjaxControlToolkit.TabPanel();
                tpLocDef.ID = "tpLocDef" + Convert.ToString(drow["Location_Description"]);
                tpLocDef.HeaderText = Convert.ToString(drow["Location_Description"]);
                ddlHierarchy.ID = "ddlHierarchy" + Convert.ToString(drow["Location_Description"]);
                ddlHierarchy.Width = Unit.Pixel(200);
                DataRow[] drLoc = dtLocCategory.Select("Hierarchy_Type='" + drow["Hierachy"] + "'");
                if (drLoc != null && drLoc.Count() > 0)
                {
                    ddlHierarchy.DataTextField = "LocationCat_Description";
                    ddlHierarchy.DataValueField = "Location_Code";
                    ddlHierarchy.AutoPostBack = true;
                    ddlHierarchy.DataSource = drLoc.CopyToDataTable();
                    ddlHierarchy.DataBind();
                    System.Web.UI.WebControls.ListItem liSelect = new System.Web.UI.WebControls.ListItem("--Select--", "0");
                    ddlHierarchy.Items.Insert(0, liSelect);
                }
                strarrControlsID[intCount] = Convert.ToString(drow["Location_Description"]);
                tpLocDef.Controls.Add(ddlHierarchy);

                tcDefMap.Tabs.Add(tpLocDef);
                intCount++;
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw;
        }
    }

    public DataTable FunPubCreateLocationTableStructure()
    {
        DataTable dtLocation = new DataTable();
        dtLocation.Columns.Add("SNo", typeof(Int32));
        dtLocation.Columns.Add("Location_Code", typeof(String));
        dtLocation.Columns.Add("Location_Description", typeof(String));
        dtLocation.Columns.Add("Hierarchy_Description", typeof(String));
        dtLocation.Columns.Add("Hierarchy_Type", typeof(Int32));
        dtLocation.Columns.Add("Is_Active", typeof(bool)).DefaultValue = true;
        dtLocation.Columns.Add("Remove", typeof(string)).DefaultValue = "Remove";
        return dtLocation;
    }

    public void FunPubLoadlocationDetailsBasedOnHierarchy()
    {
        try
        {
            if (((DataTable)ViewState["dt_Location"]) != null)
            {
                DataTable dtList = new DataTable();
                ContentPlaceHolder CPH = (ContentPlaceHolder)Page.Master.FindControl("ContentPlaceHolder1");
                AjaxControlToolkit.TabContainer tcDefMap = (AjaxControlToolkit.TabContainer)CPH.FindControl("tcLocCategory");
                AjaxControlToolkit.TabPanel tpLocDef = new AjaxControlToolkit.TabPanel();
                foreach (AjaxControlToolkit.TabPanel tp in tcDefMap.Tabs)
                {
                    tpLocDef = (AjaxControlToolkit.TabPanel)tcDefMap.FindControl("tpLocDef" + tp.HeaderText);
                    DataRow[] drlist = ((DataTable)ViewState["dt_Location"]).Select("Hierarchy_Description='" + Convert.ToString(tp.HeaderText) + "'");
                    GridView gv = new GridView();
                    gv.ID = "gv" + tp.HeaderText;
                    tpLocDef.Controls.Remove(gv);
                    if (drlist != null && drlist.Count() > 0)
                    {
                        dtList = drlist.CopyToDataTable();
                        gv.RowDataBound += new GridViewRowEventHandler(gv_RowDataBound);
                        gv.EmptyDataText = "No Records found";
                        gv.Width = Unit.Percentage(100);
                        gv.AutoGenerateColumns = true;
                        gv.DataSource = dtList;
                        gv.DataBind();
                        tpLocDef.Controls.Add(gv);
                    }
                    else
                    {
                        gv.DataSource = ((DataTable)ViewState["dt_Location"]).Clone();
                        gv.DataBind();
                        tpLocDef.Controls.Add(gv);
                    }
                }
            }
            if (tcLocCategory.ActiveTab != null)
            {
                DataRow[] drow = dtHierarchyWidth.Select("Location_Description='" + tcLocCategory.ActiveTab.HeaderText + "'");
                if (drow != null && drow.Count() > 0)
                    txtLocationCode.MaxLength = Convert.ToInt32(drow[0]["Width"]);
                lblLocationCode.Text = "Location " + tcLocCategory.ActiveTab.HeaderText + " Code";
                lblLocationDescription.Text = "Location " + tcLocCategory.ActiveTab.HeaderText + " Description";
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw;
        }
    }

    void gv_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.Header)
        {
            e.Row.Cells[0].Visible = false;
            e.Row.Cells[1].Text = "Location Code";
            e.Row.Cells[2].Text = "Location Description";
            e.Row.Cells[3].Text = "Hierarchy Description";
            e.Row.Cells[3].Visible = false;
            e.Row.Cells[4].Visible = false;
            e.Row.Cells[5].Visible = false;
            e.Row.Cells[6].Visible = false;
        }
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Visible = false;
            e.Row.Cells[3].Visible = false;
            e.Row.Cells[4].Visible = false;
            e.Row.Cells[5].Visible = false;
            LinkButton lnkRemove = new LinkButton();
            lnkRemove.Text = "Remove";
            lnkRemove.CommandArgument = e.Row.Cells[0].Text;
            lnkRemove.Click += new EventHandler(lnkRemove_Click);

            e.Row.Cells[6].Controls.Add(lnkRemove);
            e.Row.Cells[6].Visible = false;
        }
    }

    void lnkRemove_Click(object sender, EventArgs e)
    {
        string strSNo = ((LinkButton)sender).CommandArgument;
        if (((DataTable)ViewState["dt_Location"]) != null)
        {
            DataTable dtList = ((DataTable)ViewState["dt_Location"]);
            DataRow[] drow = dtList.Select("SNo='" + strSNo + "'");
            if (drow != null && drow.Count() > 0)
            {
                dtList.Rows.Remove(drow[0]);
                dtList.AcceptChanges();
                ViewState["dt_Location"] = dtList;
            }
        }
        FunPubLoadlocationDetailsBasedOnHierarchy();
    }

    public void FunPubInsertLocationCategory()
    {
        objAdminService = new S3GAdminServicesReference.S3GAdminServicesClient();
        objLocationCategory_DataTable = new S3GBusEntity.SystemAdmin.S3G_SYSAD_LocationCategoryDataTable();
        objLocationCategory_DataRow = objLocationCategory_DataTable.NewS3G_SYSAD_LocationCategoryRow();
        try
        {
            if (strMode != "Q" && strMode != "M")
            {
                if (((DataTable)ViewState["dt_Location"]) != null && ((DataTable)ViewState["dt_Location"]).Rows.Count > 0)
                {
                    string strLocationDetails = ((DataTable)ViewState["dt_Location"]).FunPubFormXml();
                    objLocationCategory_DataRow.Company_ID = intCompanyId;
                    objLocationCategory_DataRow.Created_By = intUserId;
                    objLocationCategory_DataRow.XMLLocationDetails = strLocationDetails;
                    objLocationCategory_DataTable.AddS3G_SYSAD_LocationCategoryRow(objLocationCategory_DataRow);
                    string strExistingCode = string.Empty;
                    string strExistingDescrption = string.Empty;
                    intErrorCode = objAdminService.FunPubInsertLocationCategory(out strExistingCode, out strExistingDescrption, SerMode, ClsPubSerialize.Serialize(objLocationCategory_DataTable, SerMode));
                    if (intErrorCode == 30)
                    {
                        Utility.FunShowAlertMsg(this.Page, "Already Existing Details : \\n Location Code :-" + strExistingCode + "\\n Location Description :-" + strExistingDescrption);
                        FunPubLoadlocationDetailsBasedOnHierarchy();
                        return;
                    }
                    else if (intErrorCode == 40 || intErrorCode == 50)
                    {
                        Utility.FunShowAlertMsg(this.Page, "Error Occured in Location Defined");
                        FunPubLoadlocationDetailsBasedOnHierarchy();
                        return;
                    }
                    else if (intErrorCode == 0)
                    {
                        Utility.FunShowAlertMsg(this.Page, "Location Definition Added successfully");
                        FunPubClearCategoryuEntry();
                        ((DataTable)ViewState["dt_Location"]).Rows.Clear();
                    }
                    else
                    {
                        Utility.FunShowAlertMsg(this.Page, "Error Occured in Location Defined");
                        FunPubLoadlocationDetailsBasedOnHierarchy();
                        return;
                    }
                }
                else
                {
                    Utility.FunShowAlertMsg(this.Page, "Atleast one Category should be add.");
                    return;
                }
            }
            else if (strMode == "M")
            {
                objLocationCategory_DataRow.Company_ID = intCompanyId;
                objLocationCategory_DataRow.Modified_By = intUserId;
                objLocationCategory_DataRow.Location_Category_ID = intLocationCat_ID;
                objLocationCategory_DataRow.Is_Active = Convert.ToBoolean(cbxActive.Checked);
                objLocationCategory_DataTable.AddS3G_SYSAD_LocationCategoryRow(objLocationCategory_DataRow);
                intErrorCode = objAdminService.FunPubUpdateLocationCategory(SerMode, ClsPubSerialize.Serialize(objLocationCategory_DataTable, SerMode));
                if (intErrorCode == 0)
                {
                    Utility.FunShowAlertMsg(this.Page, "Location Definition Updated successfully");
                }
                else
                {
                    Utility.FunShowAlertMsg(this.Page, "Error Occured in Location Defined");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw;
        }
        finally
        {
            if (objAdminService != null)
                objAdminService.Close();
        }
    }

    public void FunPubInsertLocationMaster()
    {
        objAdminService = new S3GAdminServicesReference.S3GAdminServicesClient();
        objLocationMaster_DataTable = new S3GBusEntity.SystemAdmin.S3G_SYSAD_LocationMasterDataTable();
        objLocationMaster_DataRow = objLocationMaster_DataTable.NewS3G_SYSAD_LocationMasterRow();
        string strExistingDetails = string.Empty;
        try
        {
            if (strMode != "Q" && strMode != "M")
            {
                StringBuilder strb = new StringBuilder();
                strb.Append("<Root><Details ");
                strb.Append("Location_Code='" + hdnMappingCode.Value.ToString() + "'/></Root>");
                // string strLocationDetails = ((DataTable)ViewState["dt_LocationMapping"]).FunPubFormXml();
                objLocationMaster_DataRow.Company_ID = intCompanyId;
                objLocationMaster_DataRow.Created_By = intUserId;
                objLocationMaster_DataRow.XMLLocationMasterDetails = strb.ToString();// strLocationDetails;
                objLocationMaster_DataTable.AddS3G_SYSAD_LocationMasterRow(objLocationMaster_DataRow);
                intErrorCode = objAdminService.FunPubInsertLocationMaster(out strExistingDetails, SerMode, ClsPubSerialize.Serialize(objLocationMaster_DataTable, SerMode));
                if (intErrorCode == 0 && strExistingDetails != string.Empty)
                {
                    Utility.FunShowAlertMsg(this.Page, "The location mapping code : " + strExistingDetails + "-already exist.");
                    return;
                }
                else if (intErrorCode == 0)
                {
                    Utility.FunShowAlertMsg(this.Page, "Location Mapping Added successfully.");
                    FunPubClearMappingEntry();
                }
                else
                {
                    Utility.FunShowAlertMsg(this.Page, "Error Occured in Location Master.");
                    return;
                }
            }
            else if (strMode == "M")
            {
                objLocationMaster_DataRow.Company_ID = intCompanyId;
                objLocationMaster_DataRow.Modified_By = intUserId;
                objLocationMaster_DataRow.Location_ID = intLocationMap_ID;
                objLocationMaster_DataRow.Is_Active = Convert.ToBoolean(cbxActiveMapping.Checked);
                objLocationMaster_DataTable.AddS3G_SYSAD_LocationMasterRow(objLocationMaster_DataRow);
                intErrorCode = objAdminService.FunPubUpdateLocationMapping(SerMode, ClsPubSerialize.Serialize(objLocationMaster_DataTable, SerMode));
                if (intErrorCode == 0)
                {
                    Utility.FunShowAlertMsg(this.Page, "Location Mapping details Updated successfully");
                }
                else
                {
                    Utility.FunShowAlertMsg(this.Page, "Error Occured in Location Mapping updation");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
              ClsPubCommErrorLogDB.CustomErrorRoutine(ex);
            throw;
        }
        finally
        {
            if (objAdminService != null)
                objAdminService.Close();
        }

    }

    #region [Clear Function]

    public void FunPubClearCategoryuEntry()
    {
        rblHierarchy.ClearSelection();
        txtLocationCode.Text = txtLocationName.Text = "";
    }

    public void FunPubClearMappingEntry()
    {
        txtLocationMappingCode.Text = "";
        foreach (string str in strarrControlsID)
        {
            DropDownList ddlList = new DropDownList();
            ContentPlaceHolder CPH = (ContentPlaceHolder)Page.Master.FindControl("ContentPlaceHolder1");
            AjaxControlToolkit.TabContainer tcDefMap = (AjaxControlToolkit.TabContainer)CPH.FindControl("tcLocationMapping");
            AjaxControlToolkit.TabPanel tpLocDef = (AjaxControlToolkit.TabPanel)tcDefMap.FindControl("tpLocDef" + str);
            if (tpLocDef != null)
            {
                ddlList = ((DropDownList)tpLocDef.FindControl("ddlHierarchy" + str));
                ddlList.SelectedIndex = 0;
            }
            tcDefMap.ActiveTabIndex = 0;
        }
    }

    #endregion [Clear Function]

    #endregion [Function's]


}
