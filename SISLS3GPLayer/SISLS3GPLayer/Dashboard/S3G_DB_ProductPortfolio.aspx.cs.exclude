using System.Web.Security;
using System.Web.UI;
using S3GBusEntity;
using System.IO;
using System.Configuration;
using System.Globalization;
using System.Web.UI.WebControls;
using System.Web.UI.DataVisualization.Charting;
using System.Web.UI.DataVisualization.Charting.Utilities;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.xml;
using iTextSharp.text.html;
using System.Collections.Generic;
using System.Data;
using System;
using System.Web;

public partial class Dashboard_S3G_DB_ProductPortfolio : ApplyThemeForProject
{
    #region Declaration

    int intCompanyID, intUserID = 0, intErrCode = 0;
    public Dictionary<string, string> Procparam = null;
    string intAssetVerificationNo = string.Empty;
    int ProgCode = 262;
    UserInfo ObjUserInfo = new UserInfo();
    SerializationMode ObjSerMode = SerializationMode.Binary;
    string strAlert = "alert('__ALERT__');";
  
    #endregion      
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            FunLoadChart(false);
        }
       
    }
    public void FunLoadChart(bool GetPDF)
    {


        DataTable dt = new DataTable();
        DataSet ds = new DataSet();
      
        if (Procparam != null)
            Procparam.Clear();
        else
            Procparam = new Dictionary<string, string>();
        Procparam.Add("@COMPANY_ID", "1");
        Procparam.Add("@DRILL_DOWN", "0");
        Procparam.Add("@PRODUCT_ID", "2");

        ds = Utility.GetDataset("S3G_GPH_PRDT", Procparam);
          //  UCS3GChart1.showChartTitle = "Product Portfolio";
            UCS3GChart1.setChartSeries1 = "Product Portfolio";
        if(GetPDF)
            UCS3GChart1.setChartWidth = 600;
        else
            UCS3GChart1.setChartWidth = 500;

            UCS3GChart1.setChartHeight = 400;
            UCS3GChart1.setChart3DCustomesRotate = true;
            UCS3GChart1.showChart3DRotateAngle = 0;
            UCS3GChart1.setCustomePalette = true;
            UCS3GChart1.showCustomesPaletteColor = "#83A0CD~#2F619F~#B43532~#7D9E38~#644788~#298CA6~#E47A22~#99B958~#8064A2";

        UCS3GChart1.showChartType = SeriesChartType.Pie;
        UCS3GChart1.setChartFontSize = 9;
        UCS3GChart1.setLableValue = true;
        UCS3GChart1.setLegendsValue = true;
        UCS3GChart1.setChartMultipleSeries = false;
        UCS3GChart1.setCustomePalette = false;
        UCS3GChart1.setChart3D = true;
        UCS3GChart1.setLegendsValue = true;
        UCS3GChart1.setToolTipNameAnValues = true;
        UCS3GChart1.setToolTipDrillChart = true;
        UCS3GChart1.setChartLableInPercent = true;
        UCS3GChart1.setClickDrillChartDetails = true;
        UCS3GChart1.setDataTableSeries1 = ds.Tables[0];
        UCS3GChart1.setPieLabelStyle = true;
        UCS3GChart1.showPieLabelStyle = "Inside";
        UCS3GChart1.setSaveChartImage = false;
        UCS3GChart1.setClickDrillChartDetails = true;        
        UCS3GChart1.showDrillDownChartPath = "DrillDownProductPortfolio.aspx";
        if (GetPDF)
            UCS3GChart1.setSaveChartImage = true;
        UCS3GChart1.BindChart();
        if (GetPDF)
        {
            hdnFilePath.Value = UCS3GChart1.returnSaveImagePath;
            GeneratePDF(ds);
        }
        else
        {
            grdData.DataSource = ds.Tables[1];
            grdData.DataBind();
        }

    }
    protected void GeneratePDF(DataSet ds)
    {

        Document doc = new Document();
        doc.SetPageSize(iTextSharp.text.PageSize.A4);
        doc.SetMargins(25, 25, 25, 25);
        iTextSharp.text.Font contentHeaderFont = iTextSharp.text.FontFactory.GetFont("Segoe UI", 8, iTextSharp.text.Font.BOLD, new BaseColor(System.Drawing.ColorTranslator.FromHtml("#003d9e")));
        iTextSharp.text.Font contentFont = iTextSharp.text.FontFactory.GetFont("Segoe UI", 8, iTextSharp.text.Font.NORMAL, iTextSharp.text.BaseColor.DARK_GRAY);

        string sFileName = "ProductPortfolio" + "_" + DateTime.Now.ToString("yyyyMMddhhmmss") + ".PDF";
        string sFilePath = (Server.MapPath(".") + "\\PDFFiles\\" + sFileName);
        PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(sFilePath, FileMode.Create));

        PDFPageSetup page = new PDFPageSetup(ObjUserInfo.ProCompanyNameRW, true);
        writer.PageEvent = page;
        doc.AddCreator("Sundaram Infotech Solutions");
        doc.AddTitle(lblHeader.Text);
        doc.AddSubject(lblHeader.Text);

        doc.Open();
        doc.Add(new Phrase(Environment.NewLine));
        doc.AddAuthor("Sundaram Infotech Solutions");
        PdfPTable otable = new PdfPTable(1);
        Single[] sWidth = { 15.0f };
        otable.WidthPercentage = 95;
        otable.SetTotalWidth(sWidth);

        PdfPCell sCellE11 = new PdfPCell(new Phrase(Environment.NewLine));
        sCellE11.Border = 0;
        sCellE11.BorderWidth = 0;
        sCellE11.VerticalAlignment = iTextSharp.text.Element.ALIGN_TOP;
        otable.AddCell(sCellE11);
        PdfPCell sCellE1 = new PdfPCell(new Phrase(Environment.NewLine));
        sCellE1.Border = 0;
        sCellE1.BorderWidth = 0;
        sCellE1.VerticalAlignment = iTextSharp.text.Element.ALIGN_TOP;
        otable.AddCell(sCellE1);
        PdfPCell sCellE2 = new PdfPCell(new Phrase(lblHeader.Text, contentHeaderFont));
        sCellE2.Border = 0;
        sCellE2.BorderWidth = 0;
        sCellE2.VerticalAlignment = iTextSharp.text.Element.ALIGN_TOP;
        sCellE2.HorizontalAlignment = iTextSharp.text.Element.ALIGN_LEFT;
        otable.AddCell(sCellE2);
        PdfPCell sCellE3 = new PdfPCell(new Phrase(Environment.NewLine));
        sCellE3.Border = 0;
        sCellE3.BorderWidth = 0;
        sCellE3.Colspan = 4;
        sCellE3.VerticalAlignment = iTextSharp.text.Element.ALIGN_TOP;
        otable.AddCell(sCellE3);
        PdfPCell sCell2 = new PdfPCell(new Phrase(Environment.NewLine));
        sCell2.Border = 0;
        sCell2.BorderWidth = 0;
        sCell2.VerticalAlignment = iTextSharp.text.Element.ALIGN_TOP;
        otable.AddCell(sCell2);
        iTextSharp.text.Image iImages = iTextSharp.text.Image.GetInstance(HttpContext.Current.Request.PhysicalApplicationPath + "Dashboard\\Image\\" + hdnFilePath.Value);
        iImages.Alignment = iTextSharp.text.Element.ALIGN_MIDDLE;
        iImages.ScalePercent(60.0F);
        PdfPCell sCell3 = new PdfPCell(iImages);
        sCell3.Border = 0;
        sCell3.BorderWidth = 0;
        sCell3.HorizontalAlignment = iTextSharp.text.Element.ALIGN_CENTER;
        sCell3.VerticalAlignment = iTextSharp.text.Element.ALIGN_TOP;
        otable.AddCell(sCell3);
        PdfPCell sCell22 = new PdfPCell(new Phrase(Environment.NewLine));
        sCell22.Border = 0;
        sCell22.BorderWidth = 0;
        sCell22.VerticalAlignment = iTextSharp.text.Element.ALIGN_TOP;
        otable.AddCell(sCell22);
        PdfPCell sCell23 = new PdfPCell(GetGriddata(ds.Tables[1]));
        sCell23.Border = 0;
        sCell23.BorderWidth = 0;
        sCell23.VerticalAlignment = iTextSharp.text.Element.ALIGN_TOP;
        otable.AddCell(sCell23);
        doc.Add(otable);
        doc.Close();

     //   openPdf(sFilePath, sFileName);
        string strScipt = "window.open('../Common/S3GDownloadPage.aspx?qsFileName=" + sFilePath.Replace(@"\", "/") + "&qsNeedPrint=yes', 'newwindow','toolbar=no,location=no,menubar=no,width=950,height=600,resizable=yes,scrollbars=yes,top=50,left=50');";
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Open", strScipt, true);


    }

    protected PdfPTable GetGriddata(DataTable dt)
    {
        iTextSharp.text.Font contentHeaderFont = iTextSharp.text.FontFactory.GetFont("Segoe UI", 8, iTextSharp.text.Font.BOLD, iTextSharp.text.BaseColor.WHITE);
        iTextSharp.text.Font contentFont = iTextSharp.text.FontFactory.GetFont("Segoe UI", 8, iTextSharp.text.Font.NORMAL, iTextSharp.text.BaseColor.DARK_GRAY);

        PdfPTable oTable = new PdfPTable(dt.Columns.Count);
        Single[] sWidth = new Single[dt.Columns.Count];
        for (int i = 0; i < dt.Columns.Count; i++)
            sWidth[i] = 4.0f;

        oTable.WidthPercentage = 95;
        oTable.SetTotalWidth(sWidth);
        for (int i = 0; i < dt.Columns.Count; i++)
        {
            PdfPCell cell = new PdfPCell(new Phrase(dt.Columns[i].Caption.ToString(), contentHeaderFont));
            cell.BorderWidth = 0.5f;
            cell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#4E80BB"));

            cell.BorderColorBottom = iTextSharp.text.BaseColor.BLUE;
            oTable.AddCell(cell);
        }
        foreach (DataRow drow in dt.Rows)
        {
            //for (int i = 0; i < dt.Columns.Count; i++)
            //{
            //    for (int j = 0; j < dt.Rows.Count - 1; j++)dt.Rows[j][i].ToString()
            //    {
            for (int i = 0; i < dt.Columns.Count; i++)
            {
                PdfPCell cell = new PdfPCell(new Phrase(drow[i].ToString(), contentFont));
                cell.BorderWidth = 0.5f;
                cell.BorderColorBottom = iTextSharp.text.BaseColor.BLUE;
                oTable.AddCell(cell);
            }
            //    }
            //}
        }
        return oTable;
    }
    //Open the Attachment PDF
    protected void openPdf(string sFilePath, string sFileName)
    {
        try
        {
            string strFileName = string.Empty;
            strFileName = sFileName;
            System.Threading.Thread.Sleep(1500);
            string virtualPath = "http://" + Request.ServerVariables["HTTP_HOST"].ToString() + "\\Dashboard\\PDFFiles\\" + strFileName;
            //Response.Redirect(virtualPath);

            //Newly Added
            string strFilePath = Server.MapPath(".") + "\\PDFFiles\\" + strFileName;

            var outputStream = new MemoryStream();
            //var pdfReader = new PdfReader(strFilePath);
            //var pdfStamper = new PdfStamper(pdfReader, outputStream);
            //Add the auto-print javascript
            //var writer = pdfStamper.Writer;
            //writer.AddJavaScript(GetAutoPrintJs());
            //pdfStamper.Close();
            var content = outputStream.ToArray();
            outputStream.Close();
            Response.ContentType = "application/pdf";
            Response.BinaryWrite(content);
            Response.End();
            outputStream.Close();
            outputStream.Dispose(); //Upto This

        }
        catch (Exception ex)
        {
            //lblErrorMsg.Text = ex.Message;
        }
    }

    protected void btnPrint_Click(object sender, EventArgs e)
    {
        FunLoadChart(true);
    }
    protected void btnExport_Click(object sender, EventArgs e)
    {
        //FunForExportExcel();
    }
}