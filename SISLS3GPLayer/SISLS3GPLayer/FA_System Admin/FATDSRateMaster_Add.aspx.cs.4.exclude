using System;
using System.Collections;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Data;
using FA_BusEntity;
using System.IO;
using System.Globalization;
using System.Web.Services;
using System.ServiceModel;
using System.Text;


public partial class System_Admin_FATDSRateMaster_Add : ApplyThemeForProject_FA
{

    #region Initialisation
    Dictionary<string, string> dictParam = null;
    DataTable dtTDSRate = null;
    DataTable dtupdate = null;
    int intCompanyId;
    int intUserId;
    string validationCode;
    int int_tds_id = 0;
    //decimal decActualAmount = 0;
    String StrConnectionName;
    string strTDSRate_Master_Id = string.Empty;
    StringBuilder sbReceivingXML;
    DataTable dtReceiving = null;
    UserInfo_FA ObjUserInfo_FA = new UserInfo_FA();
    FASession objFASession = new FASession();
    string strKey = "Insert";
    //FATranMasterMgtServiceReference.FATranMasterMgtServicesClient objBudget_MasterClient;
    SystemAdminMgtServiceReference.SystemAdminMgtServiceClient objTDSRateMasterClient;

    string strAlert = "alert('__ALERT__');";
    string strRedirectPageAdd = "window.location.href='../System Admin/FATDSRateMaster_Add.aspx';";
    string strRedirectPageView = "window.location.href='../System Admin/FATDSRateMaster_View.aspx';";
    //FA_BusEntity.FinancialAccounting.FATransactions.FA_Budget_MSTDataTable objbudmaster_DTB = new FA_BusEntity.FinancialAccounting.FATransactions.FA_Budget_MSTDataTable();
    //FA_BusEntity.FinancialAccounting.FATransactions.FA_Budget_MSTRow objbudmasterrow;

    FA_BusEntity.SysAdmin.master.FA_Sys_TDSRateMasterDataTable objTDSRateMaster_DTB = new FA_BusEntity.SysAdmin.master.FA_Sys_TDSRateMasterDataTable();
    FA_BusEntity.SysAdmin.master.FA_Sys_TDSRateMasterRow objTDSRateMasterRow;

    int intErrCode = 0;
    string strMode = string.Empty;
    bool bCreate = false;
    bool bClearList = false;
    bool bModify = false;
    bool bQuery = false;
    bool bDelete = false;
    bool bval = false;
    int j = 1;
    static string strPageName = "TDS Rate Master";
    #endregion


    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            FunPriPageLoad();
        }
        catch (Exception ex)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
        }



    }


    private void FunPriPageLoad()
    {
        UserInfo_FA ObjUserInfo_FA = new UserInfo_FA();
        FASession objFASession = new FASession();
        intCompanyId = ObjUserInfo_FA.ProCompanyIdRW;
        intUserId = ObjUserInfo_FA.ProUserIdRW;
        this.Page.Title = FunPubGetPageTitles(enumPageTitle.Create);
        bCreate = ObjUserInfo_FA.ProCreateRW;
        bModify = ObjUserInfo_FA.ProModifyRW;
        bQuery = ObjUserInfo_FA.ProViewRW;
        StrConnectionName = objFASession.ProConnectionName;
        cldrStartDate.Format = objFASession.ProDateFormatRW;
        cldrEndDate.Format = objFASession.ProDateFormatRW;
        txtStartDate.Attributes.Add("readonly", "readonly");
        txtEndDate.Attributes.Add("readonly", "readonly");
        strMode = "C";
        
        if (Request.QueryString["qsViewId"] != null)
        {
            FormsAuthenticationTicket fromTicket = FormsAuthentication.Decrypt(Request.QueryString["qsViewId"]);
            strMode = Request.QueryString.Get("qsMode");
            strTDSRate_Master_Id = fromTicket.Name;
        }

        if (!IsPostBack)
        {
            FunProInitializeGridData();
            FunPriGetLocationList();
            
            chkActive.Checked = true;
            chkActive.Enabled = false;


            if (Request.QueryString["qsMode"] == "Q")
            {
                FunPriGetTDSRateDetails(strTDSRate_Master_Id);
                // FunGetRepay_AllocationDetails(strFunder_Tran_ID);
                FunPriDisableControls(-1);
            }
            else if (Request.QueryString["qsMode"] == "M")
            {
                FunPriGetTDSRateDetails(strTDSRate_Master_Id);
                // FunGetRepay_AllocationDetails(strFunder_Tran_ID);
                FunPriDisableControls(1);
            }
            else
            {
                FunPriDisableControls(0);
            }


        }
        FunPriSetMaxLength();
    }


    private void FunPriGetLocationList()
    {
        try
        {
            Dictionary<string, string> dictParam = new Dictionary<string, string>();
            dictParam.Add("@Company_ID", Convert.ToString(intCompanyId));
            dictParam.Add("@User_ID", Convert.ToString(intUserId));
            
            if (strMode == "C")
            {
                dictParam.Add("@Location_Active", "1");
                dictParam.Add("@Is_Operational", "1");
            }            
            dictParam.Add("@Program_ID", "68");
            ddlLocation.BindComboBoxWithALL_FA(SPNames.GetLocation, dictParam, new string[] { "Location_ID", "Location" });
            
        }

        catch (Exception ex)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(ex);
            throw new ApplicationException("Unable to Load Location");

        }

    }


    private void FunPriDisableControls(int intModeID)
    {
        switch (intModeID)
        {
            case 0: // Create Mode

                lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Create);
                if (!bCreate)
                {

                    btnSave.Enabled = false;
                }

                break;

            case 1: // Modify Mode

                lblHeading.Text = FunPubGetPageTitles(enumPageTitle.Modify);
                //FunPriLoadSLCode();
                //rfvpwd.Enabled = true;
                btnClear.Enabled = false;
                chkDoubleTax.Enabled = true;
                chkActive.Enabled = true;
                //ddlLocation.ClearDropDownList_FA();
                btnSave.Enabled = true;
                //ddlSLCode.ClearDropDownList_FA();
                //ddlGLCode.ClearDropDownList_FA();
                //ddlFundType.ClearDropDownList_FA();
                //grvStampDuty.Columns[0].Visible = false;
                btnAdd.Enabled = btnClearC.Enabled = false;
                
                if (!bModify)
                {

                }

                break;

            case -1:// Query Mode
                lblHeading.Text = FunPubGetPageTitles(enumPageTitle.View);
                //grvStampDuty.Cl.Enabled = false;
                btnSave.Enabled = btnClear.Enabled = false;
                chkDoubleTax.Enabled = chkActive.Enabled = false;
                ddlLocation.ClearDropDownList_FA();


                btnAdd.Enabled = btnClearC.Enabled = false;
                //ddlGLAccount.ClearDropDownList_FA();
                //ddlSLAccount.ClearDropDownList_FA();
                //ddlBudgetType.ClearDropDownList_FA();
                //ddlFundType.ClearDropDownList_FA();
                gvTaxDetails.Columns[gvTaxDetails.Columns.Count-1].Visible = false;
                gvTaxDetails.FooterRow.Visible = false;
                //grvStampDuty.Columns[3].Visible = false;



                if (!bQuery)
                {
                    Response.Redirect(strRedirectPageView);
                }
                break;


        }



    }


    private void FunPriLoadGLCode(string location)
    {
        try
        {
            dictParam = new Dictionary<string, string>();
            dictParam.Add("@Company_ID", ObjUserInfo_FA.ProCompanyIdRW.ToString());
            dictParam.Add("@Program_ID", "68");
            dictParam.Add("@Location_ID", location);

            ddlGLAccount.BindDataTable_FA(SPNames.GetGLCode, dictParam, new string[] { "GL_Code", "GL_Desc" });

            dictParam = null;
            

        }

        catch (Exception ex)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(ex);
            throw new ApplicationException("Unable to load GLCode");


        }

    }


    private void FunPriLoadSLCode()
    {
        try
        {
            ddlSLAccount.Enabled = true;
            dictParam = new Dictionary<string, string>();
            dictParam.Add("@Company_ID", ObjUserInfo_FA.ProCompanyIdRW.ToString());
            dictParam.Add("@GL_Code", ddlGLAccount.SelectedValue);
            dictParam.Add("@Is_Active", "1");

            ddlSLAccount.BindDataTable_FA(SPNames.GetSLCode, dictParam, new string[] { "SL_Code", "SL_Desc" });
            dictParam = null;


            if (ddlSLAccount.Items.Count == 2)
                ddlSLAccount.SelectedIndex = 1;

        }

        catch (Exception ex)
        {
            throw new ApplicationException("Unable to Load Slcode");

        }


    }


    private void FunPriGetTDSRateDetails(string strTDSRate_Master_Id)
    {
        try
        {
            //pnlBudgetDetails.Visible = true;
            //DataTable ds.Tables[0] = new DataTable();
            DataSet ds = new DataSet();
            dictParam = new Dictionary<string, string>();
            dictParam.Add("@Company_ID", ObjUserInfo_FA.ProCompanyIdRW.ToString());
            dictParam.Add("@User_ID", ObjUserInfo_FA.ProUserIdRW.ToString());
            dictParam.Add("@TDS_Mst_ID", strTDSRate_Master_Id);
            ds = Utility_FA.GetDataset("FA_GET_TDS_Rate_MST", dictParam);
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlLocation.SelectedValue = ds.Tables[0].Rows[0]["Location_Id"].ToString();
                txtTaxCode.Text = ds.Tables[0].Rows[0]["TDS_Code"].ToString();
                chkDoubleTax.Checked = Convert.ToBoolean(ds.Tables[0].Rows[0]["Double_Tax_Agmt"].ToString());
                chkActive.Checked = Convert.ToBoolean(ds.Tables[0].Rows[0]["Active"].ToString());
                //if (ds.Tables[0].Rows[0]["Budget_Type"].ToString() == "1")
                //{
                //    txtbudgettype.Text = "Original";
                //}
                //else
                //{
                //    txtbudgettype.Text = "Revision";
                //}
                //ddlFundType.SelectedValue = ds.Tables[0].Rows[0]["Fund_Type_Code_Id"].ToString();

                //txtamount.Text = ds.Tables[0].Rows[0]["Yearly_Amount"].ToString();
                // ViewState["YearlyAmount"] = ds.Tables[0].Rows[0]["Yearly_Amount"].ToString();

                //if (Convert.ToInt32(ds.Tables[0].Rows[0]["debit"].ToString()) > 0 || Convert.ToInt32(ds.Tables[0].Rows[0]["credit"].ToString()) > 0)
                //{
                //    ddlGLAccount.ClearDropDownList_FA();
                //    ddlSLAccount.ClearDropDownList_FA();
                //}

            }
            if (ds.Tables[1].Rows.Count > 0)
            {

                ViewState["TDSRate"] = dtTDSRate = ds.Tables[1];
                gvTaxDetails.DataSource = ds.Tables[1];
                gvTaxDetails.DataBind();

                //ViewState["DT_Budget"] = dtBudget;
                //foreach (DataRow drrow in dtBudget.Rows)
                //{
                //    decActualAmount += (Convert.ToDecimal(drrow["Budget"].ToString()));
                //}
                //ViewState["Total"] = decActualAmount;


            }
            // FunGetRepay_InterestDetails(ds.Tables[0].Rows[0]["Funder_ID"].ToString());

        }
        catch (Exception ex)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(ex, strPageName);
            throw ex;
        }
    }


    protected void FunProInitializeGridData()
    {
        DataTable dtTDSRate;
        dtTDSRate = new DataTable("TDSRateMaster");

        dtTDSRate.Columns.Add("TDS_DTL_Id");
        dtTDSRate.Columns.Add("Tax_Section");
        dtTDSRate.Columns.Add("Tax_Description");
        dtTDSRate.Columns.Add("GL_Code");
        dtTDSRate.Columns.Add("GL_DESC");
        dtTDSRate.Columns.Add("SL_Code");
        dtTDSRate.Columns.Add("SL_Desc");
        dtTDSRate.Columns.Add("Start_Date");
        dtTDSRate.Columns.Add("End_Date");
        dtTDSRate.Columns.Add("From_Amount");
        dtTDSRate.Columns.Add("To_Amount");
        dtTDSRate.Columns.Add("Tax");
        dtTDSRate.Columns.Add("Surcharge");
        dtTDSRate.Columns.Add("Cess");
        dtTDSRate.Columns.Add("Eff_Rate");
        dtTDSRate.Columns.Add("Grossup");

        dtTDSRate.Columns.Add("Sno", typeof(int));
        dtTDSRate.Columns["Sno"].AutoIncrement = true;
        dtTDSRate.Columns["Sno"].AutoIncrementSeed = 1;


        DataRow dRow = dtTDSRate.NewRow();

        dRow["Sno"] = "0";
        dRow["TDS_DTL_Id"] = "";
        dRow["Tax_Section"] = "";
        dRow["Tax_Description"] = "";
        dRow["GL_Code"] = "";
        dRow["GL_DESC"] = "";
        dRow["SL_Code"] = "";
        dRow["SL_Desc"] = "";
        dRow["Start_Date"] = "";
        dRow["End_Date"] = "";
        dRow["From_Amount"] = "0";
        dRow["To_Amount"] = "0";
        dRow["Tax"] = "";
        dRow["Surcharge"] = "";
        dRow["Cess"] = "";
        dRow["Eff_Rate"] = "";
        dRow["Grossup"] = "";


        gvTaxDetails.EditIndex = -1;

        dtTDSRate.Rows.Add(dRow);

        gvTaxDetails.DataSource = dtTDSRate;
        gvTaxDetails.DataBind();
        gvTaxDetails.Rows[0].Visible = false;

        dtTDSRate.Rows[0].Delete();
        dtTDSRate.AcceptChanges();

        ViewState["TDSRate"] = dtTDSRate;

    }


    protected void gvTaxDetails_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lblGLAccountCode = (Label)e.Row.FindControl("lblGLAccountCode");
            lblGLAccountCode.Visible = false;

            Label lblSLAccountCode = (Label)e.Row.FindControl("lblSLAccountCode");
            lblSLAccountCode.Visible = false;
        }


    }


    protected void ddlLocation_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriLoadGLCode(ddlLocation.SelectedValue);

        }
        catch (Exception objException)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);

        }

    }


    protected void ddlGLAccount_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            FunPriLoadSLCode();

        }

        catch (Exception objException)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(objException, strPageName);
        }

    }


    protected void btnAdd_Click(object sender, EventArgs e)
    {
        if (Utility_FA.StringToDate(txtEndDate.Text.Trim()) < Utility_FA.StringToDate(txtStartDate.Text.Trim()))
        {
            Utility_FA.FunShowAlertMsg_FA(this.Page, "Start Date should be lesser than End Date");
            return;
        }
        FunPriAddTaxDetails();
        FunClearDetails();


    }


    protected void rdSelect_CheckedChanged(object sender, EventArgs e)
    {
        btnModify.Enabled = true;
        btnAdd.Enabled = btnClearC.Enabled = false;

        FunPriLoadGLCode(ddlLocation.SelectedValue);


        int intRowIndex = Utility_FA.FunPubGetGridRowID("gvTaxDetails", ((RadioButton)sender).ClientID);
        dtTDSRate = (DataTable)ViewState["TDSRate"];

        FunPriResetRdButton(gvTaxDetails, intRowIndex);

        lblSlNo.Text = intRowIndex.ToString();

        DataRow dRow = dtTDSRate.Rows[intRowIndex];
        
        
        txtTaxSection.Text = dRow["Tax_Section"].ToString();
        txtTaxDescription.Text = dRow["Tax_Description"].ToString();
        ddlGLAccount.SelectedItem.Text = dRow["GL_Code"].ToString();
        //ddlGLAccount.SelectedValue = dRow["GL_Code"].ToString();
        if (dRow["GL_Code"].ToString() == "")
            ddlGLAccount.SelectedIndex = 0;

        FunPriLoadSLCode();

        if (dRow["SL_Code"].ToString() == "")
            ddlSLAccount.SelectedIndex = 0;
        else
            ddlSLAccount.SelectedValue = dRow["SL_Code"].ToString();
        txtStartDate.Text = dRow["Start_Date"].ToString();
        txtEndDate.Text = dRow["End_Date"].ToString();
        txtfromamount.Text = dRow["From_Amount"].ToString();
        txttoamount.Text = dRow["To_Amount"].ToString();
        txtTax.Text = dRow["Tax"].ToString();
        txtSurchrge.Text = dRow["Surcharge"].ToString();
        txtCess.Text = dRow["Cess"].ToString();
        txtEffRate.Text = dRow["Eff_Rate"].ToString();
        chkGrossUp.Checked = Convert.ToBoolean(dRow["Grossup"].ToString());

        if (strMode == "Q")
        {
            btnModify.Enabled = 
            btnAdd.Enabled = btnClearC.Enabled = false;
        }

        //ddlGLAccount_SelectedIndexChanged(null, null);

    }


    public void CalcEffRate(object sender, EventArgs e)
        {
        decimal EffRate = 0;
        decimal dectax = 0, decSurchrge = 0, decCess = 0;
        if (!string.IsNullOrEmpty(txtTax.Text))
            dectax = Convert.ToDecimal(txtTax.Text);
        if (!string.IsNullOrEmpty(txtSurchrge.Text))
            decSurchrge = Convert.ToDecimal(txtSurchrge.Text);
        if (!string.IsNullOrEmpty(txtCess.Text))
            decCess = Convert.ToDecimal(txtCess.Text);

        //EffRate = dectax + decSurchrge + (decCess * (dectax + decSurchrge)) / 100;
        EffRate = (dectax) + ((dectax * decSurchrge) / 100) + ((dectax + (dectax * decSurchrge) / 100) * decCess) / 100;
        if (EffRate > 0)
            txtEffRate.Text = EffRate.ToString("N2");

    }



    private void FunPriAddTaxDetails()
    {
        try
        {
            DataRow dr;
            dtTDSRate = (DataTable)ViewState["TDSRate"];

           
                
      
            if (dtTDSRate.Rows.Count > 0)
            {
                if (dtTDSRate.Rows[0]["Sno"].ToString() == "0")
                {
                    dtTDSRate.Rows[0].Delete();
                }
            }


            dr = dtTDSRate.NewRow();
            dr["Sno"] = dtTDSRate.Rows.Count + 1;
            dr["Tax_Section"] = txtTaxSection.Text.Trim();
            dr["Tax_Description"] = txtTaxDescription.Text.Trim();
            dr["GL_Code"] = ddlGLAccount.SelectedIndex == 0 ? "" : ddlGLAccount.SelectedValue;
            dr["GL_DESC"] = ddlGLAccount.SelectedIndex == 0 ? "" : ddlGLAccount.SelectedItem.Text;
            dr["SL_Code"] = ddlSLAccount.SelectedIndex == 0 ? "" : ddlSLAccount.SelectedValue;
            dr["SL_Desc"] = ddlSLAccount.SelectedIndex == 0 ? "" : ddlSLAccount.SelectedItem.Text;
            dr["Start_Date"] = txtStartDate.Text.Trim();
            dr["End_Date"] = txtEndDate.Text.Trim();
            dr["From_Amount"] = txtfromamount.Text.Trim();
            dr["To_Amount"] = txttoamount.Text.Trim();
            dr["Tax"] = txtTax.Text.Trim();
            dr["Surcharge"] = txtSurchrge.Text.Trim();
            dr["Cess"] = txtCess.Text.Trim();
            dr["Eff_Rate"] = txtEffRate.Text.Trim();
            dr["Grossup"] = chkGrossUp.Checked;

            dtTDSRate.Rows.Add(dr);

            gvTaxDetails.DataSource = dtTDSRate;
            gvTaxDetails.DataBind();

            ViewState["TDSRate"] = dtTDSRate;

        }

        catch (Exception ex)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(ex);
            throw ex;
        }

    }


    private void FunClearDetails()
    {
        lblSlNo.Text = "";

        if (ddlGLAccount.Items.Count > 0)
            ddlGLAccount.SelectedIndex = 0;

        if (ddlSLAccount.Items.Count > 0)
            ddlSLAccount.SelectedIndex = 0;


        txtTaxSection.Text = txtTaxDescription.Text =
        txtStartDate.Text = txtEndDate.Text =
        txtTax.Text = txtSurchrge.Text =
        txtCess.Text = txtEffRate.Text = "";

        btnModify.Enabled = false;
        btnAdd.Enabled = btnClearC.Enabled = true;


    }


    private void FunPriResetRdButton(GridView grv, int intRowIndex)
    {
        for (int i = 0; i <= grv.Rows.Count - 1; i++)
        {
            if (i != intRowIndex)
            {
                RadioButton rdSelect = grv.Rows[i].FindControl("rdSelect") as RadioButton;
                rdSelect.Checked = false;
            }
        }

    }


    protected void gvTaxDetails_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {

        DataTable dtTDSDelete;
        dtTDSDelete = (DataTable)ViewState["TDSRate"];
        dtTDSDelete.Rows[e.RowIndex].Delete();
        dtTDSDelete.AcceptChanges();
        if (dtTDSDelete.Rows.Count == 0)
        {
            FunProInitializeGridData();
        }
        else
        {

            ViewState["TDSRate"] = dtTDSDelete;
            gvTaxDetails.DataSource = (DataTable)ViewState["TDSRate"];
            gvTaxDetails.DataBind();
        }




    }


    private void FunTaxDetailsGridviewRowDeleting(int intRowIndex, GridViewDeleteEventArgs e)
    {
        try
        {
            DataTable dtTaxDel;
            dtTaxDel = (DataTable)ViewState["TDSRate"];

            //lblSlNo.Text = intRowIndex.ToString();

            //int Sno = Convert.ToInt32(gvTaxDetails.DataKeys[e.RowIndex].Value.ToString());

            DataRow dRow = dtTaxDel.Rows[intRowIndex];
            //DataRow dRow = (DataRow)dtTaxDel.Select("Sno=" + Sno).GetValue(0);
            dRow.Delete();

            gvTaxDetails.DataSource = dtTaxDel;
            gvTaxDetails.DataBind();

            gvTaxDetails.FooterRow.Visible = false;


        }

        catch (Exception ex)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(ex);
            throw ex;
        }

    }

    protected void btnModify_Click(object sender, EventArgs e)
    {
        FunTaxDetailsgridViewRowUpdating();

    }


    private void FunTaxDetailsgridViewRowUpdating()
    {
        try
        {
            dtTDSRate = (DataTable)ViewState["TDSRate"];

            if (Utility_FA.StringToDate(txtEndDate.Text.Trim()) < Utility_FA.StringToDate(txtStartDate.Text.Trim()))
            {
                Utility_FA.FunShowAlertMsg_FA(this.Page, "Start Date should be lesser than End Date");
                return;
            }

            DataRow dRow = (DataRow)dtTDSRate.Rows[Convert.ToInt32(lblSlNo.Text)];

            dRow.BeginEdit();

            //dRow["Sno"] = lblSlNo.Text; //
            dRow["Tax_Section"] = txtTaxSection.Text.Trim();
            dRow["Tax_Description"] = txtTaxDescription.Text.Trim();
            dRow["GL_Code"] = ddlGLAccount.SelectedIndex == 0 ? "" : ddlGLAccount.SelectedValue;
            dRow["GL_DESC"] = ddlGLAccount.SelectedIndex == 0 ? "" : ddlGLAccount.SelectedItem.Text;
            dRow["SL_Code"] = ddlSLAccount.SelectedIndex == 0 ? "" : ddlSLAccount.SelectedValue;
            dRow["SL_Desc"] = ddlSLAccount.SelectedIndex == 0 ? "" : ddlSLAccount.SelectedItem.Text;
            dRow["Start_Date"] = txtStartDate.Text.Trim();
            dRow["End_Date"] = txtEndDate.Text.Trim();
            dRow["From_Amount"] = txtfromamount.Text.Trim();
            dRow["To_Amount"] = txttoamount.Text.Trim();
            dRow["Tax"] = txtTax.Text.Trim();
            dRow["Surcharge"] = txtSurchrge.Text.Trim();
            dRow["Cess"] = txtCess.Text.Trim();
            dRow["Eff_Rate"] = txtEffRate.Text.Trim();
            dRow["Grossup"] = chkGrossUp.Checked.ToString();

            dRow.EndEdit();

            ViewState["TDSRate"] = dtTDSRate;

            gvTaxDetails.DataSource = dtTDSRate;
            gvTaxDetails.DataBind();
            FunClearDetails();

            btnAdd.Enabled = btnClearC.Enabled = true;

        }

        catch (Exception ex)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(ex);
            throw ex;
        }



    }


    private string FunPriReceivingXML()
    {
        try
        {
            sbReceivingXML = new StringBuilder();
            dtReceiving = (DataTable)ViewState["TDSRate"];
            sbReceivingXML.Append("<Root>");

            //if (dtReceiving.Rows.Count == 1 && Convert.ToString(dtReceiving.Rows[0]["StampDuty_ID"]) == "0")
            //{
            //    sbReceivingXML.Append("</Root>");
            //}
            //else
            //{
            for (int dtRow = 0; dtRow < dtReceiving.Rows.Count; dtRow++)
            {
                sbReceivingXML.Append("<Details Tax_Section='" + dtReceiving.Rows[dtRow]["Tax_Section"].ToString() + "' ");
                sbReceivingXML.Append(" Tax_Description='" + dtReceiving.Rows[dtRow]["Tax_Description"].ToString() + "' ");
                sbReceivingXML.Append(" Comapany_Id='" + intCompanyId.ToString() + "' ");
                sbReceivingXML.Append(" GL_Code='" + dtReceiving.Rows[dtRow]["GL_Code"].ToString() + "' ");
                sbReceivingXML.Append(" SL_Code='" + dtReceiving.Rows[dtRow]["SL_Code"].ToString() + "' ");
                sbReceivingXML.Append(" Start_Date='" + Utility_FA.StringToDate(dtReceiving.Rows[dtRow]["Start_Date"].ToString()) + "' ");
                sbReceivingXML.Append(" End_Date='" + Utility_FA.StringToDate(dtReceiving.Rows[dtRow]["End_Date"].ToString()) + "' ");
                sbReceivingXML.Append(" From_Amount='" + dtReceiving.Rows[dtRow]["From_Amount"].ToString() + "' ");
                sbReceivingXML.Append(" To_Amount='" + dtReceiving.Rows[dtRow]["To_Amount"].ToString() + "' ");
                sbReceivingXML.Append(" Tax='" + dtReceiving.Rows[dtRow]["Tax"].ToString() + "' ");
                sbReceivingXML.Append(" Surcharge='" + dtReceiving.Rows[dtRow]["Surcharge"].ToString() + "' ");
                sbReceivingXML.Append(" Cess='" + dtReceiving.Rows[dtRow]["Cess"].ToString() + "' ");
                sbReceivingXML.Append(" Eff_Rate='" + dtReceiving.Rows[dtRow]["Eff_Rate"].ToString() + "' ");
                sbReceivingXML.Append(" Grossup='" + dtReceiving.Rows[dtRow]["Grossup"].ToString() + "' ");
                sbReceivingXML.Append(" />");

            }

            sbReceivingXML.Append("</Root>");
            //}
        }
        catch (Exception ex)
        {
            throw ex;
        }
        return sbReceivingXML.ToString();

    }


    protected void btnSave_Click(object sender, EventArgs e)
    {
        //Utility_FA.FunShowValidationMsg_FA(this.Page, FunPubSaveDetails(), strRedirectPageAdd, strRedirectPageView, strMode, false);
        //FunPubSaveDetails();

        dtReceiving = new DataTable();
        if (ViewState["TDSRate"] != null)
            dtReceiving = (DataTable)ViewState["TDSRate"];

        if (dtReceiving.Rows.Count < 1)
        {
            Utility_FA.FunShowAlertMsg_FA(this.Page, "Add atleast one Tax details");
            return;
        }


        Utility_FA.FunShowValidationMsg_FA(this.Page, FunPubSaveDetails(), strRedirectPageAdd, strRedirectPageView, strMode, false);
    }


    private int FunPubSaveDetails()
    {

        objTDSRateMasterClient = new SystemAdminMgtServiceReference.SystemAdminMgtServiceClient();
        try
        {
            objTDSRateMasterRow = objTDSRateMaster_DTB.NewFA_Sys_TDSRateMasterRow();
            if (Request.QueryString["qsMode"] != "M")
            {

                //if (!string.IsNullOrEmpty())
                //{

                //}
                //else 
                //    objTDSRateMasterRow.
                objTDSRateMasterRow.User_ID = Convert.ToInt32(ObjUserInfo_FA.ProUserIdRW);
                objTDSRateMasterRow.Comapny_Id = ObjUserInfo_FA.ProCompanyIdRW;
                objTDSRateMasterRow.Location_Id = Convert.ToInt32(ddlLocation.SelectedValue);
                objTDSRateMasterRow.Double_Tax_Agmt = chkDoubleTax.Checked;
                objTDSRateMasterRow.TDS_Code = txtTaxCode.Text;
                objTDSRateMasterRow.Active = chkActive.Checked;

                objTDSRateMasterRow.Option = 1;
                objTDSRateMasterRow.Xml_TDS = FunPriReceivingXML();

                objTDSRateMaster_DTB.AddFA_Sys_TDSRateMasterRow(objTDSRateMasterRow);

                FASerializationMode SerMode = FASerializationMode.Binary;
                byte[] ObjTDSRateDataTable = FAClsPubSerialize.Serialize(objTDSRateMaster_DTB, SerMode);
                intErrCode = objTDSRateMasterClient.FunPubCreateTDSRate(out int_tds_id, SerMode, ObjTDSRateDataTable, StrConnectionName);


            }

            else
            {

                //if (!string.IsNullOrEmpty())
                //{

                //}
                //else 
                //    objTDSRateMasterRow.
                objTDSRateMasterRow.TDS_Mst_ID = Convert.ToInt32(strTDSRate_Master_Id);
                objTDSRateMasterRow.User_ID = Convert.ToInt32(ObjUserInfo_FA.ProUserIdRW);
                objTDSRateMasterRow.Comapny_Id = ObjUserInfo_FA.ProCompanyIdRW;
                objTDSRateMasterRow.Location_Id = Convert.ToInt32(ddlLocation.SelectedValue);
                objTDSRateMasterRow.Double_Tax_Agmt = chkDoubleTax.Checked;
                objTDSRateMasterRow.TDS_Code = txtTaxCode.Text;
                objTDSRateMasterRow.Active = chkActive.Checked;

                objTDSRateMasterRow.Option = 1;
                objTDSRateMasterRow.Xml_TDS = FunPriReceivingXML();

                objTDSRateMaster_DTB.AddFA_Sys_TDSRateMasterRow(objTDSRateMasterRow);

                FASerializationMode SerMode = FASerializationMode.Binary;
                byte[] ObjTDSRateDataTable = FAClsPubSerialize.Serialize(objTDSRateMaster_DTB, SerMode);
                intErrCode = objTDSRateMasterClient.FunPubCreateTDSRate(out int_tds_id, SerMode, ObjTDSRateDataTable, StrConnectionName);

            }



        }

        catch (Exception ex)
        {
            throw ex;
        }

        finally
        {
            if (objTDSRateMasterClient != null)
                objTDSRateMasterClient.Close();
        }
        return intErrCode;



    }

    protected void btnClear_Click(object sender, EventArgs e)
    {
        ddlLocation.SelectedIndex = 0;
        chkDoubleTax.Checked = false;

        FunClearTaxDetails();
        FunProInitializeGridData();

        //dtTDSRate = (DataTable)ViewState["TDSRate"];
        //int count = dtTDSRate.Rows.Count;

        ////for (int i = 0; i <= count - 1; i++)
        ////{
        ////    if (dtTDSRate.Rows.Count == 1)
        ////    {
        ////        DataRow dRow = dtTDSRate.NewRow();

        ////        dRow["Sno"] = "0";
        ////        dRow["TDS_DTL_Id"] = "";
        ////        dRow["Tax_Section"] = "";
        ////        dRow["Tax_Description"] = "";
        ////        dRow["GL_Code"] = "";
        ////        dRow["GL_DESC"] = "";
        ////        dRow["SL_Code"] = "";
        ////        dRow["SL_Desc"] = "";
        ////        dRow["Start_Date"] = "";
        ////        dRow["End_Date"] = "";
        ////        dRow["Tax"] = "";
        ////        dRow["Surcharge"] = "";
        ////        dRow["Cess"] = "";
        ////        dRow["Eff_Rate"] = "";
        ////        dRow["Grossup"] = "";


        ////        gvTaxDetails.EditIndex = -1;

        ////        dtTDSRate.Rows.Add(dRow);

        ////        dtTDSRate.Rows[0].Delete();

        ////    }

        ////    if (dtTDSRate.Rows.Count == 1)
        ////        break;

        ////        dtTDSRate.Rows[0].Delete();


        //    //FunProInitializeGridData();
        //}


        //dtTDSRate.AcceptChanges();

        //gvTaxDetails.DataSource = dtTDSRate;
        //gvTaxDetails.DataBind();
        //gvTaxDetails.Rows[0].Visible = false;

        //dtTDSRate.Rows[0].Delete();
        //dtTDSRate.AcceptChanges();

        //ViewState["TDSRate"] = dtTDSRate;

    }


    protected void btnCancel_Click(object sender, EventArgs e)
    {
        try
        {
            Response.Redirect("../System Admin/FATDSRateMaster_View.aspx");
        }
        catch (Exception ex)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(ex);
            //lblErrorMessage.Text = ex.Message;
        }


    }

    protected void gvTaxDetails_RowCommand(object sender, GridViewCommandEventArgs e)
    {

    }



    protected void btnClearC_Click(object sender, EventArgs e)
    {
        FunClearTaxDetails();


    }


    public void FunClearTaxDetails()
    {
        txtTaxSection.Text = txtTaxDescription.Text = txtStartDate.Text = txtEndDate.Text =
        txtTax.Text = txtSurchrge.Text = txtCess.Text = txtEffRate.Text = "";

        if (ddlGLAccount.Items.Count > 0)
            ddlGLAccount.SelectedIndex = 0;

        if (ddlSLAccount.Items.Count > 0)
            ddlSLAccount.SelectedIndex = 0;

        chkGrossUp.Checked = false;


    }


    private void FunPriSetMaxLength()
    {
        try
        {
            txtTax.SetDecimalPrefixSuffix_FA(objFASession.ProGpsPrefixRW, objFASession.ProGpsSuffixRW, true, "Tax");
            txtSurchrge.SetDecimalPrefixSuffix_FA(objFASession.ProGpsPrefixRW, objFASession.ProGpsSuffixRW, false, "Surcharge");
            txtCess.SetDecimalPrefixSuffix_FA(objFASession.ProGpsPrefixRW, objFASession.ProGpsSuffixRW, false, "Cess");
            txtEffRate.SetDecimalPrefixSuffix_FA(objFASession.ProGpsPrefixRW, objFASession.ProGpsSuffixRW, true, "Eff Rate");
            txtfromamount.SetDecimalPrefixSuffix_FA(objFASession.ProGpsPrefixRW, objFASession.ProGpsSuffixRW, false, "From_Amount");
            txttoamount.SetDecimalPrefixSuffix_FA(objFASession.ProGpsPrefixRW, objFASession.ProGpsSuffixRW, false, "To_Amount");
        }
        catch (Exception ex)
        {
               FAClsPubCommErrorLog.CustomErrorRoutine(ex);
        }

    }

}
